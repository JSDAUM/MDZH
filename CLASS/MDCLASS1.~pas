////////////////////////////////////////////////////////////////////////////////
// 진료시스템의 CLASS Define                                                  //
//  HmdSetbmt  SET처방기본                                                    //
//  HmdSetbdt  SET처방상세                                                    //
//  HmdGrupmt  모음기본                                                       //
//  HmdGrupdt  모음상세                                                       //
//  HmdTemplt  예문관리                                                       //
//  HmdSliptt  처방분류                                                       //
//  HmdOffdrt  의사휴진일정                                                   //
//  HmdOrdrct  처방Reference                                                  //
//  HmdNotift  Noti.                                                          //
//  HmdUsrent  개인환경정보                                                   //
//  HmdActtct  투약시간                                                       //
//  HmdMcomct  진료공통코드                                                   //
//  HmdSchbmt  의사진료일정기준정보                                           //
//  HmdSchbdt  의사진료일정기준정보상세                                       //
//  HmdSchdrt  의사진료일정                                                   //
//  HmdPdiagt  환자진단내역                                                   //
//  HmdCautnt  환자 Caution                                                   //
//  HmdCertit  제증명                                                         //
//  HmdOrderv  전체처방View                                                   //
//  HmdBasort  기본처방                                                       //
//  HmdMedalt  원외처방 대체조제내역                                          //
//  HmdMedort  약처방                                                         //
//  HmdAntort  항균제처방                                                     //
//  HmdExmort  검사처방                                                       //
//  HmdTrtort  처치/수술/마취/재료처방                                        //
//  HmdBldort  수혈처방                                                       //
//  HmdRehort  재활처방                                                       //
//  HmdRehrst  재활치료현황                                                   //
//  HmdConslt  컨설트기록                                                     //
//  HmdAdmret  입원예약                                                       //
//  HmdResult  통합검사결과                                                   //
//  HmdRsltht  통합검사결과 History                                           //
//  HmdDchsut  퇴원요약                                                       //
//  HmdRschmt  관심환자기본                                                   //
//  HmdRschdt  관심환자상세                                                   //
//  HmdOpreqt  수술의뢰내역                                                   //
//  HmdOprptt  수술/마취간호기록                                              //
//  HmdPdiett  환자식이관리                                                   //
//  HmdNractt  병동간호Acting                                                 //
//  HmdWrkLst  병동현황(Work List)                                            //
//  HmdAdinft  간호정보조사지(일반성인)                                       //
//  HmdPdinft  간호정보조사지(소아)                                           //
//  HmdBdinft  신생아 분만기록                                                //
//  HmdKdinft  분만외 시술대장                                                //
//  HmdDbabyt  사망아                                                         //
//  HmdNbabyt  신생아                                                         //
//  HmdTbabyt  신생아 일일현황                                                //
//  HmdOginft  간호정보조사지(산부인과)                                       //
//  HmdNbinft  간호정보조사지(신생아)                                         //
//  HmdPyinft  간호정보조사지(정신과)                                         //
//  HmdPtclmt  간호환자분류기본                                               //
//  HmdPtcldt  간호환자분류상세                                               //
//  HmnPgrpmt  환자분류코드기본                                               //
//  HmnPgrpdt  환자분류코드상세                                               //
//  HmdVitalt  V/S기록                                                        //
//  HmdIochkt  I/O & Check                                                    //
//  HmdIoqtct  I/O기준량                                                      //
//  HmdOpdlst  외래예약내역(원무)                                             //
//  HmdPlanct  간호계획코드                                                   //
//  HmdPplant  환자별간호계획                                                 //
//  HmdDsnrpt  퇴원시간호계획                                                 //
//  HmdErinft  응급간호정보조사지                                             //
//  HmdDrcont  응급담당의                                                     //
//  HmdIjdayt  주사일정                                                       //
//  HmdIcusmt  중환자업무일지                                                 //
//  HmdIcupat  중환자실환자정보                                               //
//  HmdHpdort  투석지시                                                       //
//  HmdPatInf  환자정보                                                       //
//  HmdMovett  전과전실요청                                                   //
//  HmdInsamt  인사마스타                                                     //
//  HmdTrtret  처치재료반납                                                   //
//  HmdInrpft  환자별 간호계획관리                                            //
//  HmdInrplt  간호계획대분류코드마스타                                       //
//  HmdInrpmt  간호계획중분류코드마스타                                       //
//  HmdInract  간호계획Acting 기록                                            //
//  HmdExCode  타시스템 코드                                                  //
//  HmdSearct  조건항목                                                       //
//  HmdSelect  조건검색                                                       //
//  Hmdinfrpt  법정전염병신고서                                               //
//  HmdOpGrct  과별 수술분류                                                  //
//  HmdOpCdct  과별수술코드                                                   //
//  HAPIPDLS   원무신생아 등록                                                //
//  HAPOPDLST  원무 외래진료예약                                              //
//  HmdTrinft  전과전실 간호기록지                                            //
//  HmdRefert  Refer 관리                                                     //
//  HmdClasst  교실일지 관리                                                  //
//  HmdExtrct  적출물                                                         //
//  HmdPattxt  분만외시술대장                                                 //
//  HmdNrrect  간호기록지                                                     //
//  Hmdpcatxt  통증관리                                                       //
//  HmdEnddrt  판독결과                                                       //
//  HmdTxstat  과별셋 통계                                                    //
//  HmdMenumt  메뉴마스터                                                     //
//  HmdMenudt  사용자메뉴리스트                                               //
//  HapDrmedt  원무..                                                         //
//  HmdIcudpt  중환자실 사망환자 정보                                         //
//  HmdIcustt  중환자실 일일현황                                              //
//  Hmdemptyt  병실현황조회                                                   //
//  Hapipdlst  입원내역                                                       //
//  Hadtypect  원무유형보조                                                   //
//  Hccusermt  사용자Passwd 조회                                              //
//  Hmddschct  퇴원환자추후관리                                               //
//  Hsdbaehat  배합금기,연령제한                                              //
//  Hccdeptct  병동구분                                                       //
//  HmdHprect  호스피스 간호기록지                                            //
//  Hsicdchrt  마이크로 필름/ CD 번호 조회                                    //
//  Hmddurtxt  DUR 점검 사유 저장 (2008.04.01) 김송주 추가                    //
//  Hmdsktstt  스킨테스트 (알레르기 검사 2009.04.03) 김송주 추가              //
//  Hsddgcdmt  약국마스터 2009.07.31                                          //
//  Happrivmt  정보호호 공유 2011.06.20 김송주 (인증평가관련)                 //
//  Hsqnstrqt   NST
//  Hmdhosptt  전국병원리스트
//  Hmdscopyt  내시경 처방 확인 내역 2012.4.24 김송주
//  Hmdbcafst  유방암 환자평가 초기기록 2012.09.10 김송주
//  Hmdcpendt  CP 변인 및 중단사유 관리 2013.05.31 김송주
//  Hmdimprvt  질점검표 2013.6.21 김송주
//  Hmdemrejt  응급실 접수 취소 사유
//  Hmdnventt  임상질지표 2013.12.12 KYA
////////////////////////////////////////////////////////////////////////////////

unit MDCLASS1;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs;

type
    Hmdemrejt = class
      sPatno     : Variant;
      sMeddate   : Variant;
      sMedtime   : Variant;
      sRejtid    : Variant;
      sRejtdp    : Variant;
      sRejtcd    : Variant;
      sRejtText  : Variant;
      sRejtdrid  : Variant;
      sRejtdrdp  : Variant;
      sRejtdrcd  : Variant;
      sRejtdrText: Variant;
      sArvtime   : Variant;
      sSex       : Variant;
      sAge       : Variant;
      sPatname   : Variant;
      sMeddept   : Variant;
      sConsDept  : Variant;
      sConsDr    : Variant;
      sRejtdate  : Variant;
      sRejtname  : Variant; // 접수취소입력인
      sEditid    : Variant;
      sEditip    : Variant;

      function InsertEmrejt(sType, sPatno, sMeddate, sMedtime, sRejtid, sRejtdp, sRejtcd, sRejtText
                                                             , sRejtdrid, sRejtdrdp, sRejtdrcd, sRejtdrText
                                                             , sConsDept, sConsDr, sRejtname
                                                             , sEditid, sSeditip : String):Integer;
      function SelectEmrejt(sPatno, sMeddate, sMedtime : String):Integer;
      function ListEmrejt(sMeddate : String):Integer;
      function UpdateEmrejt(sPatno,sMeddate,sMedtime : String):Integer;
    end;

    // 2009.07.17 예방접종등록
    Hmdvcnift = class
      sPatno     : Variant;
      sOrddate   : Variant;
      sVcode     : Variant;
      sAmt       : Variant;
      sEditid    : Variant;
      sEditip    : Variant;
      function InsertVcninft(sPatno, sOrddate, sVcode, sAmt, sEditid, sEditip :String):Integer;
    end;

    // 최태성 추가 Class (2003.07.02)
    Hadtypect = class
     sTypecd     : Variant;  // SET구분
     sComcdnm    : Variant;  // SET구분

     // 소아과 소아함환자 유형보조 코드조회
     function ListType(sMeddate :String):Integer;

    end;



  HMDAPIPDT = class
     sPatCnt : Variant; // 환자수
     sDeptNm : Variant; // 진료과
     sBedCnt : Variant; // 쿼터지정병상수
     sBedRate: Variant; // 쿼터점유율
     sAdmCnt : Variant; // 입원예정수
     sDschCnt: Variant; // 퇴원예정수
     sOpdCnt : Variant; // 최근평일외래환자수.KimDaeYong 2020-01-22

     function ListDeptStayCnt : Integer;
  end;



// 이선규 추가 Class
//
    Hapipdlst = Class
    // 이선규 추가  (퇴원장부를 위한것)
     v_Gubun    : Variant; // 구분(1: 기본,2:전입,3:전출)
     v_Admdate  : Variant; // 입원
     v_Dschdate : Variant; // 퇴원
     v_Wardno   : Variant; // 병동병실
     v_Infrom   : Variant; // 전입전출병동병실
     v_Patno    : Variant; // 환자번호
     v_Patname  : Variant; // 환자명
     v_Sex      : Variant; // SEX
     v_Birtdate : Variant; // 생년월일
     v_Chadr    : Variant; // 주치의
     v_Daycnt   : Variant; // 재원일자
     v_Diagname : Variant; // 진단명
     v_Lstopdt  : Variant; // 수술일
     v_Opname   : Variant; // 수술명
     v_Telno1   : Variant; // 전화번호
     v_Address  : Variant; // 주소
     v_Meddate  : Variant; // 진료일
     v_Medtime  : Variant; // 진료시간
     v_Meddept  : Variant; // 진료과
     v_Meddr    : Variant; // 주치의
     v_Sdate    : Variant; // 전입전출일
     v_Dschrslt : Variant; // 퇴원구분(3인 사망만 출력)
     // 2003.08.18 신생아 대사이상검사 때문에 추가
     v_Hpno     : Variant; // 핸드폰번호
     v_Rslt     : Variant; // 검사결과1 (number)
     v_Rsltupp  : Variant; // 기준치상한가
     v_Rsltlow  : Variant; // 기준치하한가
     v_Smsyn    : Variant; // SMSYN('Y' :SMS전송,'T':전화전송
     v_Examcode : Variant; // 검사코드
     v_Userid   : Variant; // userid
     v_Userip   : Variant; // userip
     v_Delidate : Variant; // 전송일자
     v_Sender   : Variant; // 본낸곳 전화번호
     v_Messg    : Variant; // MESSAGE
     v_Momname  : Variant; // 엄마이름

     v_Fromdate : Variant; // 마지막일자
     v_Todate   : Variant; //
     v_ICUCnt   : Variant; //

     function select_dschpat(sGubun,sWard,sFromdate,sTodate : String) : integer;
     function pat_ward_select(sWardno,sRoom  : String) : integer;

     // 이선규 추가 2003.08.18
     function nbcmd_select(sFromdate,sTodate : String) : integer;
     function nbcmd_insert(rc : integer) : integer;
     function nbcmd_update(sPatno,sAdmdate,sGubun : String) : integer;
     function nbcmd_maxdate : integer;

     // 김송주 추가 2008.10.14 입원등록 여부 체크
     function check_stayyn(sPatno, sAdmdate : String) : integer;

    end;

    Hadrmcdct = Class
       v_room : Variant;

       // 병동별 병실을 조회하는 Function.
       function list(s_ward : string) : integer;
       //총병상수
       function TotalBed(sWard, sDate: string): Integer;
    end;

    Happatbat = Class
       v_Patno     : Variant;
       v_Patname   : Variant;
       v_Wardno    : Variant;
       v_Room      : Variant;
       v_Admdate   : Variant;
       v_Meddept   : Variant;
       v_Chadr     : Variant;
       v_Sex       : Variant;
       v_Age       : Variant;
       v_patgrp    : Variant;
       v_Msdate    : Variant; // 2005.11.01 KIM SJ Add 종합건진일
       v_lastdate  : Variant; // 2005.11.01 KIM SJ Add 최근내원일
       // 환자의 번호로 환자의 정보와 환자분류군을 조회하는 Function이다.
       function list1(s_Patno,s_Admdate,s_Grpdate,s_Div : String) : integer;
       // 종합건진일 날짜 가져오기 2005.11.01 KIM SJ Add 종합건진일
       function getMsDate(ipatno,ipatname,iresno1,iresno2,ifdate,itodate,
                 isFlag1,isFlag2,isFlag3,isFlag4,ishType: String) : Integer;

    end;

   Hapcancrt = Class
       v_LeavedtCnt     : Variant;
       v_Leavedate      : Variant;
       v_Fromdate       : Variant;
       //추가. KimDaeYong 2017-12-18
       vPatno           : Variant;
       vFromdate        : Variant;
       vTodate          : Variant;
       vCancerno        : Variant;
       vDiagcd          : Variant;
       vDiagseq         : Variant;
       vReggubun        : Variant;
       vStype           : Variant;
       vEditid          : Variant;
       vEditip          : Variant;

       // 환자의 번호로 중증 등록 환자 남은 일수 및 종료일자 조회
       function selectCancrt(sPatno : String) : integer;
       // 암환자등록조회. KimDaeYong 2017-12-18
       function List1(inPatno : String) : integer;
    end;

    Happrivmt = Class
     vPatno      : Variant;
     vWardno     : Variant;
     vRoomno     : Variant;
     vPatname    : Variant;     
     vPrvinfo    : Variant;
     vTrtinfo    : Variant;
     vAdminfo    : Variant;
     vVisitdc    : Variant;
     vDiagnm     : Variant;
     vEtcinfo    : Variant;

     function GetPrivInfo(sPatno,   sAdmdate, sIogubun, sMeddept, sMeddr : String) : Integer;
     function ListPrivInfo(sWardno : String) : Integer;
     function RegPrivInfo(sPatno,   sAdmdate, sIogubun, sMeddept, sMeddr,
                          sPrvinfo, sTrtinfo, sAdminfo, sVisitdc, sDiagnm, sEtcinfo,
                          sEditid,  sEditip : String) : Integer;

    end;

////////////이선규 끝 ///////////////////////////


    // SET처방기본
    HmdSetbmt = class
     sSetType	: Variant;  // SET구분
     iSetSeqno  : Variant;  // SET항목순서
     sUpCode	: Variant;  // 상위코드
     iDispSeq	: Variant;  // 나열순서
     sSetName	: Variant;  // SET명
     sLowerYn   : Variant;  // 하위여부
     sDiagcd    : Variant;  //진단코드
     sDiagName  : Variant;  //진단명
     sEditId	: Variant;  // 수정자 ID
     sEditIp	: Variant;  // 수정자 IP
     sEditDate  : Variant;  // 수정일시
     sFrLocate  : Variant;  // 병원구분(타병원SET Copy시 사용)

     // SET 처방 기본 List 조회
     function ListSetOrdBase(SetType,OrdGrp:String):Integer;
     // SET 처방 수정 (SET명)
     function UpdateSetOrd(SetType,SeqNo,SetName,EditId,EditIp:String):Integer;
     // SET 처방 삭제 (기본,상세)
     function DeleteSetOrd(SetType,SeqNo:String):Integer;
     // Folder관리를 위한 업데이트
     function UpdateSetFolder(SetType,SeqNo,SetName,Upcode,Loweryn,EditId,EditIp:String):Integer;
     function SearchSet(SetType1,SetType2,Setname:String):Integer;
     // SET 처방 수정 (상병코드입력)
     function InsertDiag(SetType,SeqNo,Diagcd,Diagname,EditId,EditIp:String):Integer;
     // SET 처방 수정 (상병코드삭제)
     function DeleteDiag(SetType,SeqNo,EditId,EditIp:String):Integer;
    end;

    // SET처방상세
    HmdSetbdt = class
     sSetType	  : Variant;  // SET/모음구분
     sSetName	  : Variant;  // SET처방명
     sSetSeqNo	  : Variant;  // SET/모음순번
     sSeqNo       : Variant;  // 순번
     sQty         : Variant;  // 수량
     sCount       : Variant;  // 횟수
     sDoseQty	  : Variant;  // 투여량(1회차)
     sDoseQty2	  : Variant;  // 투여량(2회차)
     sDoseQty3	  : Variant;  // 투여량(3회차)
     sDoseQty4	  : Variant;  // 투여량(4회차)
     sDoseQty5	  : Variant;  // 투여량(5회차)
     sTotQty	  : Variant;  // 총량
     sUseDay	  : Variant;  // 일수
     sBundleNo	  : Variant;  // 묶음번호
     sOrdGrp	  : Variant;  // 처방분류
     sOrdCdGrp	  : Variant;  // 처방코드분류
     sErYn        : Variant;  // 응급여부
     sOrdCd       : Variant;  // 처방코드
     sOrdName	  : Variant;  // 처방명
     sPrnYn       : Variant;  // PRN 여부
     sOrdUnit	  : Variant;  // 단위
     sUnitType	  : Variant;  // 선택단위구분(1:함량 2:규격 3:포장) */
     sDrugKind	  : Variant;  // 약품구분('5'=제한항균제)
     sInputTyp	  : Variant;  // 입력구분
     sDgijType	  : Variant;  // 약주사구분
     sDetRoute	  : Variant;  // 상세투여경로
     sMethodCd	  : Variant;  // 용법코드
     sMethdRmk	  : Variant;  // 용법비고
     sPowYn       : Variant;  // Powder여부
     sAstYn       : Variant;  // AST(After Skin Test) 여부
     sMixYn       : Variant;  // MIX여부
     sMainYn	  : Variant;  // MAIN여부
     sPortYn	  : Variant;  // PORTABLE(이동)여부
     sFcrYn       : Variant;  // FCR검사여부
     sDruginYn	  : Variant;  // 항생제투여여부
     sOrdText	  : Variant;  // 임상소견/지시내용
     sSpcCode1	  : Variant;  // 검체코드1
     sSpcCode2	  : Variant;  // 검체코드2
     sAnethMm	  : Variant;  // 마취시간(분)
     sTeeUpLt	  : Variant;  // 치열(상좌)
     sTeeUpRt	  : Variant;  // 치열(상우)
     sTeeDwLt	  : Variant;  // 치열(하좌)
     sTeeDwRt	  : Variant;  // 치열(하우)
     sUseCode	  : Variant;  // 사용용도
     sFiltYn	  : Variant;  // FILTER여부
     sIrradYn	  : Variant;  // IRRADIATION 여부
     sRemark	  : Variant;  // 특기사항
     sOrdDesc1	  : Variant;  // 처방상세1
     sOrdDesc2	  : Variant;  // 처방상세2
     sOrdGrpNm	  : Variant;  // 처방분류명
     sGtt         : Variant;  // Gtt
     sGttUnit	  : Variant;  // Gtt 단위
     sOrigGrp	  : Variant;  // 처방분류(처방Master)
     sOrigSlip	  : Variant;  // Slip코드(처방Master)
     sEditId	  : Variant;  // 수정자 ID
     sEditIp	  : Variant;  // 수정자 IP
     sEditDate	  : Variant;  // 수정일시
     sUpcode     : Variant;  // 상위코드
     sLoweryn    : Variant;  // Folder여부
     sInsType    : Variant;  // 급여구분
     sInjtLoc    : Variant;  // 주사장소
     sInOutYn    : Variant;  // 원내/원외구분
     sInResn     : Variant;  // 원내처방사유
     sTarget     : Variant;  //SET 복사 Target 의 settype
     sSource     : Variant;  //SET 복사 Source 의 settype
     sPrepYn     : Variant;  // Prepare여부
     sSideYn     : Variant;  // Side여부(수액)
     sChemoYn    : Variant;  // Chemo여부
     sOrdYn      : Variant;  // 처방가능여부
     sTxDrugYn   : Variant;  // 처치약제여부
     sTrtLoc     : Variant;  // 처치,재료시행장소
     sConsDept   : Variant;  //희망부서
     sConsDr     : Variant;  //희망의사
     sConsCtnt   : Variant;  //의뢰내용
     sCallYn     : Variant;  //왕진여부
     sDmDietYn   : Variant;  //당뇨조식여부
     sConsType   : Variant;  //컨설트 구분 (1:일반,2:EMG)
     sCsOrdCd    : Variant;  //(컨설트)처방코드
     sCsOrdGrp   : Variant;  //(컨설트)처방분류
     sCsSlipCd   : Variant;  //(컨설트)Slip코드
     sCsDeptNm   : Variant;  //희망부서명
     sCsDrNm     : Variant;  //희망의사명
     sCsOrdNm    : Variant;  //(컨설트)처방명
     sLabDate    : Variant;  //검사희망일시
     sNewSeqNo   : Variant;  //SET처방 상세순번(변경후)
     sReadYn     : Variant;  //판독대상여부
     sPreMedYn   : Variant;  //PreMedication여부
     sFrLocate   : Variant;  // 병원구분(타병원SET Copy시 사용)
     //재활처방 추가.2002.10.29 이용언
     sSiteCd     : Variant;
     sTermsCd    : Variant;
     sDayCnt     : Variant;
     sDays       : Variant;
     //검사처방 A7 추가. 2002.11.8 이용언
     sAseven     : Variant;
     // 주성분코드 2008.09.30 김송주
     sMaincd     : Variant;
     sPrnOrdRmk  : Variant; // PRN 실시기준
     sSetTypeCP  : Variant; // CP 셋 여부...
     //의사공유메시지여부. KimDaeYong 2019-07-18
     sDrmsgyn    : Variant;

     // SET 처방 상세 List 조회
     //function ListSetOrdDetail(SetType:String;SetSeqNo:Integer):Integer;
     function ListSetOrdDetail(SetType,Locate:String;SetSeqNo:Integer):Integer;
     // SET 처방 등록 (Multi Input)
     // function InsertSetOrd(Cnt:Integer):Integer;
     function InsertOrdSet(Cnt:Integer):Integer;
     // 빈폴더 등록
     function InsertSetFolder(Cnt:Integer):Integer;
     // SET 처방 상세 삭제
     function DeleteSetDetail(Cnt:Integer):Integer;
     //처방 SET Copy
     function InsertSetCopy(Cnt:Integer):Integer;
     // 처방SET 전체복사
     function InsertSetAllCopy(Cnt:Integer):Integer;
     // SET 처방 상세내역 항목<순번> 수정 (Multi Update)
     function UpdateSetSeqno(Cnt:Integer):Integer;
     // SET 처방 상세 - 묶음번호 최종값 구하기
     function SetMaxBundleNo(SetType:String;SetSeqNo:Integer):Integer;
    end;

    // 모음기본
    HmdGrupmt = class
     sSetItem	 : Variant;  // 모음종목
     sSetType	 : Variant;  // 모음구분
     iSetSeqno	 : Variant;  // 모음순번
     sSetName	 : Variant;  // 모음명
     iDispSeq   : Variant;  // 나열순서
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sDeptNm    : Variant;  // 진료과명
     sPart      : Variant;  // 구분자
     function ListGroup(sItem,sType : string):Integer;
     function ListGroupTree(sType1,sType2,sType3,sType4 : string):Integer;
     function InputGroup(sSetItem, sSetType,sSetName,sEditId,sEditIp, sUpCode, sLeafYn: string):Integer;
     function CopyGroup(sSetItem,sSetType1,sEditId,sEditIp,sSetType2: string;iSetSeqno:Integer):Integer;
     function UpdateGroupNm(sSetItem, sSetType,sSetName,sEditId,sEditIp: string;iSetSeqno,iDispSeq: integer):Integer;
     function UpdateGroupSeq(Cnt: integer):Integer;
     function DeleteGroup(sSetItem, sSetType: string;iSetSeqno: integer):Integer;
     function ListGroup2(sItem,sType : string):Integer;
    end;

    // 모음상세
    HmdGrupdt = class
     sSetitem	 : Variant;  // 모음종목
     sSetType	 : Variant;  // 모음구분
     iSetSeqno  : Variant;  // 모음순번
     iSeqNo 	 : Variant;  // 항목순번
     sSetCode	 : Variant;  // 질병코드(ICD-10)/처방코드
     sCodeName	 : Variant;  // 임상진단명(별도값 없을시 ICD-10명)/처방명
     iDispSeq	 : Variant;  // 나열순서
     sDelDate	 : Variant;  // 데이타 Expired Date
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sSlipnm	 : Variant;  // Slip 명
     sDiagEnNm  : Variant;  // Icd-10 영문명
     sDiagKrNm  : Variant;  // Icd-10 한글명
     sIUCond    : Variant;  // I,U여부
     sInfeGrd   : Variant;  // 전염병등급
     sSlipCd	 : Variant;  // Slip코드
     sInputTyp  : Variant;  // 필수입력구분
     sInsType   : Variant;  // 급여구분(추가)
     sInsType2  : Variant;
     sQty       : Variant;
     sFeeyn     : Variant;
     sTypecd    : Variant;
     sProdcode  : Variant;
     sProdsize  : Variant;


     function SelectGroupDetail(sSetitems,sSetType:string;iSetSeqno:Integer):Integer;
     function InputGroupDetail(Cnt:integer):Integer;
     function InputGroupDetail2(Cnt:integer):Integer;
     function DeleteGroupDetail(sSetItem,sSetType:string;iSetSeqno,iSeqNo:integer):Integer;
    end;

    // 예문관리
    HmdTemplt = class
     sSetItem	 : Variant;  // 예문종목
     sSetType	 : Variant;  // 예문구분
     iSetSeqno	 : Variant;  // 예문순번
     sTitle   	 : Variant;  // 예문명
     sContents	 : Variant;  // 예문내용
     sContent2	 : Variant;  // 예문내용
     sContent3	 : Variant;  // 예문내용
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     // 예문 약속명 조회
     function ListTemplet(sItem,sType : string):Integer;
     // 예문 약속명 조회2 - 수술기록지용
     function ListTemplet2(sItem,sType : string):Integer;
     // 예문 저장
     function InputTemplet(sItem,sType,sTitle,sContents,sEditId,sEditIp: string):Integer;
     // 예문 저장2 - 수술기록지용
     function InputTemplet2(sItem,sType,sTitle,sContents,sEditId,sEditIp,sContent2,sContent3: string):Integer;
     // 예문 Update
     function UpdateTemplet(sItem, sType, sTitle, sContents, sEditId, sEditIp: string; iSeqno: integer):Integer;
     // 예문 Update 2 - 수술기록지용
     function UpdateTemplet2(sItem, sType, sTitle, sContents, sEditId, sEditIp,sContent2,sContent3: string; iSeqno: integer):Integer;
     function DeleteTemplet(sItem, sType: string; iSeqno: integer):Integer;
     //(추가. 2003.03.29 이용언)
     function WardEtcTmpSelect(Wardno, TeamNo : String):Integer;
     function WardEtcTmpInsert(Wardno, TeamNo, Contents, Editid, Editip : String):Integer;
    end;

    // 처방코드분류
    HmdSliptt = class
     sSlip1Cd    : Variant;  // SLIP 1 코드
     sSlip2Cd    : Variant;  // SLIP 2 코드
     sSlip3Cd    : Variant;  // SLIP 3 코드
     sSlipNm     : Variant;  // SLIP명
     sOrdTGrp    : Variant;  // 처방테이블분류
     sOrdgrp     : Variant;  // 처방코드분류  (추가사항)
     iDispSeq	  : Variant;  // 나열순서
     sRsltType	  : Variant;  // 검사결과TYPE
     sEditId	  : Variant;  // 수정자 ID
     sEditIp	  : Variant;  // 수정자 IP
     sEditDate	  : Variant;  // 수정일시
     ilevel	     : Variant;  // level
     sOrdname    : Variant;  // 오더명
     sCond       : Variant;  // 조건 1: slip    2.ordcd
     sOrdGrpNm	  : Variant;  // 처방분류명
     sInputTyp   : Variant;  // 필수입력구분
     sInsType    : Variant;  // 급여구분(추가)

     //(추가. 2002.11.19 이용언) SET 검사 여부
     sSetexyn    : Variant;  //SET 검사 여부
     sGroupyn    : Variant;
     //케이캠프용 변수
     sProdcode   : Variant;
     sProdsize   : Variant;
     //
     //(추가. 2002.12.13 이용언)
     sTxdrugyn   : Variant;  //치료식구분
     function ListSlipt(sType1,sLevel1,sSlip1,sSlip2: string):Integer;
     function Insert(sSlip1, sSlip2, sSlip3, sSlipNm, sOrdGrp, sRsltType,
                     s_EditId, s_EditIp : string;iDispSeq: integer):Integer;
     // 식이코드 조회
     function ListSlipt3(sType1,sLevel1,sSlip1,sSlip2: string):Integer;
    end;

    // 의사휴진일정
    HmdOffdrt = class
     sMedDept	 : Variant;  // 진료과
     sMedDr	    : Variant;  // 진료의사(발행의사)
     sFromDate	 : Variant;  // From Date
     sToDate	 : Variant;  // ToDate
     sOffResn	 : Variant;  // 휴진사유
     sRemark	 : Variant;  // 특기사항
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sOffResnNm : Variant;  // 휴진사유명
     sAMPMFLAG  : Variant;  // 오전오후구분
     sRoundyn   : Variant;  // 회진여부
     sTransdr   : Variant;  // 대체의사ID
     sTransnm   : Variant;  // 대체의사명
     sLicno1    : Variant;  // 대체의사면허번호
     //휴진일정 조회
     function ListDrOff(sType1,sMedDept,sMedDr,FromDate,ToDate:String):Integer;
     // 의사 휴진일정 조회(2003.05.13) 이선규 추가
     function ListtotDrOff(FromDate,ToDate,meddept,meddr:String):Integer;

     //휴진일정 Calendar 표시를 위한 조회
     function ListOffDrDay(sMonth : String):Integer;
     //휴진일정 등록
     function InputDrOff(sMedDept,sMedDr,sFromDate,sToDate,sOffResn,sRemark,sEditId,sEditIp,sAMPMFLAG,sRoundyn,sTransdr,sLicno1:String):Integer;
     //휴진일정 삭제
     function DeleteDrOff(sMedDept,sMedDr,sFromDate:String):Integer;
     //휴진일정 수정
     function UpdateDrOff(sMedDept,sMedDr,sFromDate,sRemark,sEditId,sEditIp,sTransdr,sLicno1:String):Integer;
    end;

    // 처방Reference
    HmdOrdrct = class
     sOrdCd     : Variant;  // 처방코드(수가코드)
     sOrdname   : Variant;  // 처방명
     sSugagrp   : Variant;  // 수가분류
     sOrdgrp    : Variant;  // 처방분류
     sSlipcd    : Variant;  // SLIP코드
     sOrdyn     : Variant;  // 처방가능여부
     sOrdunit   : Variant;  // 단위
     iDispseq   : Variant;  // 나열순서
     sDrugname  : Variant;  // 약품명
     sProdname  : Variant;  // 상품명
     sIgrdname  : Variant;  // 성분명
     sEfctcode  : Variant;  // 약효군코드
     sEfectext  : Variant;  // 약효능
     sDrugcls   : Variant;  // 약품목구분
     sLawcls    : Variant;  // 법적구분
     sGencls    : Variant;  // 일반약구분
     sDgijtype  : Variant;  // 약주사구분
     sDetroute  : Variant;  // 상세투여경로
     sMethodcd  : Variant;  // 용법코드
     sMixgrp    : Variant;  // Mix약 그룹
     sInjcls    : Variant;  // 주사약처방분류
     iContqty   : Variant;  // 함량
     sQtyunit   : Variant;  // 함량단위
     sDoseunit  : Variant;  // 기본투여단위
     iAdultqty  : Variant;  // 성인상용량
     iChildqty  : Variant;  // 소아상용량
     sAdltmthd  : Variant;  // 성인기본용법
     sPedmthd   : Variant;  // 소아기본용법
     sExonceyn  : Variant;  // (외용약) 1회량처방필수여부
     sTqtyyn    : Variant;  // 총투여량처방필수여부
     sCooptcd   : Variant;  // 상호작용코드
     sInfyn     : Variant;  // 복약지도여부
     sExamabbr  : Variant;  // 검사항목명약어
     sExabbrcd  : Variant;  // 검사항목명약어코드
     sExampart  : Variant;  // 검사구분
     sExamtype  : Variant;  // 검사분류
     sSetexyn   : Variant;  // SET검사여부
     sRsvexmyn  : Variant;  // 예약검사여부
     sDptrsvyn  : Variant;  // 진료과예약여부
     sOpyn      : Variant;  // 수술장검사여부
     sReadyn    : Variant;  // 판독필수
     sEquipcd   : Variant;  // 검사장비코드
     sRgrpcode  : Variant;  // 판독GROUP코드
     sNormcode  : Variant;  // NORMAL판독결과코드
     sSpccode1  : Variant;  // 검체코드1
     sSpccode2  : Variant;  // 검체코드2
     sSpcchayn  : Variant;  // 검체변경가능여부
     sTubecod1  : Variant;  // 검체용기코드1
     sTubcod2   : Variant;  // 검체용기코드2
     sSpcqty1   : Variant;  // 검체필요량1
     sSpcqty2   : Variant;  // 검체필요량2
     sExamday1  : Variant;  // 검사요일(월)
     sExamday2  : Variant;  // 검사요일(화)
     sExamday3  : Variant;  // 검사요일(수)
     sExamday4  : Variant;  // 검사요일(목)
     sExamday5  : Variant;  // 검사요일(금)
     sExamday6  : Variant;  // 검사요일(토)
     sExamday7  : Variant;  // 검사요일(일)
     sRoomcode  : Variant;  // 검사실코드
     sRslttype  : Variant;  // 검사결과TYPE
     sRsltunit  : Variant;  // 검사결과단위
     sSpcspcyn  : Variant;  // 단독검체여부
     sDeltayn   : Variant;  // DELTA수행여부
     sPanicyn   : Variant;  // PANIC수행여부
     sNormyn    : Variant;  // 정상치수행여부
     sDoctoryn  : Variant;  // 의국판독여부
     sFastyn    : Variant;  // 금식여부
     sTrustyn   : Variant;  // 수탁검사가능여부
     sBarcnt    : Variant;  // 바코드수량
     sExamtime  : Variant;  // 검사소요시간
     sExamtext  : Variant;  // 검사특기사항
     sFcryn     : Variant;  // FCR검사여부
     sPortyn    : Variant;  // PORTABLE(이동)여부
     sOrdtxtyn  : Variant;  // 임상소견필수입력여부
     sTextitem  : Variant;  // 검사소견항목
     sTestnote  : Variant;  // 검사주의사항
     sExamdept  : Variant;  // 검사/처치지시시행진료과
     sInschkyn  : Variant;  // 보험기준적용구분
     sInstype   : Variant;  // 급여구분
     iChkqty    : Variant;  // 일일제한수량(포장단위) 및 회수
     iChkday    : Variant;  // 사용일수
     sChkdiscd  : Variant;  // 적응진단코드
     sExamcd1   : Variant;  // 검사결과항목코드
     sExamcd2   : Variant;  // 검사결과항목코드2
     sChkordcd  : Variant;  // 동시시행불가처방코드
     sInsinfo   : Variant;  // 보험기준정보
     sItemcode  : Variant;  // 구매물품코드
     sPreactyn  : Variant;  // 선실시여부
     sAppldate  : Variant;  // 적용일자
     sEnddate   : Variant;  // 종료일자
     sEryn      : Variant;  // 응급검사 가능여부
     sCumulyn   : Variant;  // 누적여부
     sCtcode    : Variant;  // 연속검사 기본코드
     iSeqct     : Variant;  // 연속검사순번
     sSlpitmyn  : Variant;  // 처방물품여부
     sSpcDryn   : Variant;  // 선택진료가능여부
     sSpcdr     : Variant;  // 지정진료의사
     sSugayn    : Variant;  // 수가해당여부
     sDeldate   : Variant;  // 데이타 Expired Date
     sSlipNm    : Variant;  // SLIP명
     sOrdGrpNm  : Variant;  // 처방분류명
     sEqipcode  : Variant;  // 검사장비코드
     sDeltachk  : Variant;  // DELTA수행여부
     sPanicchk  : Variant;  // PANIC수행여부
     sNormchk   : Variant;  // 정상치수행여부
     sColyn     : Variant;  // 채혈팀채혈여부
     sPrexamyn  : Variant;  // 진료전예약여부
     sOldcode   : Variant;  // 구코드
     sContyn    : Variant;  // 연속검사여부
     sPatguide  : Variant;  // 환자가야할곳
     iSeqno     : Variant;  // 순번
     sCalyn     : Variant;  // 계산여부(외용약)
     sDrugKind  : Variant;  // 약품구분
     sInputtyp  : Variant;  // 입력구분
     sDrgopyn   : Variant;  // DRG수술처치여부
     sOutodyn   : Variant;  // 원외처방여부
     sExceptcd  : Variant;  // 의약분업예외코드
     sSeqno     : Variant;  // 연속검사순번
     iPriceIns  : Variant;  // 의보수가
     iPriceGen  : Variant;  // 일반수가
     sExmTxtYn  : Variant;  // 검사특기사항여부
     sChkQty    : Variant;  // 1일제한량
     sAbCiNo    : Variant;  // 절대불가여부
     sDrugType  : Variant;  // 약품구분(1:인슐린,9:일반)
     sTxDrugYn  : Variant;
     sTeethYn   : Variant;  // 치식필수입력여부
     sAntChkyn  : Variant;  // 제한항균제승인의뢰 여부(진료과별)
     sGroupyn   : Variant;
     sStatcd    : Variant;
     sIgrdcode  : Variant;  // 성분코드 2008.04.01 김송주
     sMaincd    : Variant;  // 주성분코드 2008.09.30 김송주 추가-> 유사성분 분류 코드로 변경
     sSamecd    : Variant;  //
     sEfccodel  : Variant;  // 효능 대분류
     sEfccodem  : Variant;  // 효능 중분류
     sEfccodes  : Variant;  // 효능 소분류
     sSyrupYn   : Variant;  // 시럽제 여부(Y,N) 2012.06.26 김송주
     //케어캠프용 변수
     sCustname  : Variant;
     sProdsize  : Variant;
     sProdcode  : Variant;
     sCustcode  : Variant;
     sCitem01   : Variant;
     sKitset    : Variant;
     iPriceGen2 : Variant;  // 개정급여초음파 일반수가용 변수, KimDaeYong 2016-10-07


     function SearchOrdrc(sType1, sType2, sType3: String):Integer;
     //처방명,Slip코드,약효군코드,처방코드로 처방코드 List SELECT
     function ListOrdCd(QryKind,Code1,code2,Code3: String):Integer;
     function ListOrdCd2(QryKind,Code1,code2,Code3: String):Integer;
     //처방코드정보 SELECT (처방코드)
     function SelOrdCodeInfo(OrdCode: String):Integer;
     //처방코드 수가조회
     function GetPrice(OrdCd: String):Integer;
     // 처방수가그룹 조회
     function GetGroupList(OrdCd, sType: String):Integer;
     //처방코드기준치정보 SELECT (처방코드)
     function SelOrdCodeInfo2(OrdCode: String):Integer;
     //처방코드정보 SELECT
     function SelTxDrugInfo(sType1: String):Integer;
     //제한항균제 승인의뢰 진료과별 기준 조회
     function SelAntOrdDept(OrdCode,LimitType,MedDept: String):Integer;
     //(추가. 2002.11.18 이용언) 처방 마스터 <> 수가 마스터 처방가능 여부 체크 (sGubun = '1')
     //(추가. 2003.1.24 이용언) 원무과 보험 인정 기준 (sGubun = '2')
     function CheckOrdYn(Ordcd, Orddate, sGubun :String): Integer;
     // 성분코드 조회
     function GetIgrdcode(OrdCd:String):Integer;
     // 약품분류별  조회
     function ListDrugType(sType1:String):Integer;
     // 효능분류 조회
     function SelEfccode(OrdCode : String):Integer;
     // 시럽제여부 조회 2012.6.26 김송주
     function SelSyrupYn(sType1:String):Integer;
     //처치재료입력에 추가. kya. 20140917.
     function ORDRC_S8(Ordcd :String): Integer;
     //바코드처방추가. 20141224.KYA.
     function SearchOrdrc1(sType1, sType2, sType3: String):Integer;

    end;

    // Noti.
    HmdNotift = class
     sType1      : Variant;  // 검색조건1
     sType2      : Variant;  // 검색조건2
     sType3      : Variant;  // 검색조건3
     sType4      : Variant;  // 검색조건4
     sType5      : Variant;  // 검색조건5
     iCnt        : Variant;  // Mail존재여부(1: 존재, 0: 미존재)
     sRecvID  	  : Variant;  // 수신ID
     sNotiDate   : Variant;  // NOTI. 일자
     iSeqNo      : Variant;  // NOTI. 순번
     sNotiType	  : Variant;  // NOTI. 구분
     sRecvDate	  : Variant;  // 수신일시
     sTitle	     : Variant;  // 제목
     sContents	  : Variant;  // 내용
     sErYn  	  : Variant;  // 긴급요구
     sAnswerYn	  : Variant;  // 답신요구
     sUserName   : Variant;  // 발신자명
     sRecvDel	  : Variant;  // 수신삭제
     sSendDel	  : Variant;  // 발신삭제
     sSendDate	  : Variant;  // 발신일시
     sSendId	  : Variant;  //	발신자
     sEditId	  : Variant;  //	수정자
     sEditIp	  : Variant;  // 수정자 IP
     sEditDate	  : Variant;  // 수정일시
     sRecvname   : Variant;  // 수신자명

     sPatno      : Variant;
     sOrddate    : Variant;
     sOrdseqno   : Variant;
     sMeddate    : Variant;
     sMedtime    : Variant;
     sPatsect    : Variant;
     sMeddept    : Variant;
     sChadr      : Variant;
     sOrddr      : Variant;
     sConsdept   : Variant;
     sConsdr     : Variant;
     sRespdate   : Variant;
     sRespdr     : Variant;
     sCallyn     : Variant;
     sPatname    : Variant;
     sDeptnm     : Variant;
     sReqdeptnm  : Variant;
     sOrddrnm    : Variant;
     sConsdrnm   : Variant;
     sRespdrnm   : Variant;
     sWardno     : Variant;
     sBirtdate   : Variant;
     sSex        : Variant;
     sRoomno     : Variant;
     sHopedate   : Variant;
     sOrdname    : Variant;
     sConstype   : Variant;
     sOrdcd      : Variant;

     // 신규 Noti. 의 존재유무를 Check한다.
     function NotiList(sType1,sType2,sType3,sType4,sType5:String):Integer;
     // 신규 Noti. 의 존재유무를 Check한다.
     function NotiList2(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
     // Noti. 내용확인
     function NotiSelect(sType1,sType2:string;llong1:integer):Integer;
     // Noti. 작성
     function SendNoti(sRecvID,sNotiType,sTitle,sContents,sErYn,sAnswerYn,sEditId,sEditIp,sDeptYn,sLocate:String):Integer;
     // Noti. update
     function UpdateRecv(Cnt: integer):Integer;
     // 수신여부 update (삭제)
//     function UpdateAcceptNoti(Cnt: integer):Integer;
    end;

    // 개인환경정보
    HmdUsrent = class
     sEmpNo 	 : Variant;  // 사번
     sMedDept	 : Variant;  // 현소속진료과
     sWardNo	 : Variant;  // 근무병동
     sWardNo1   : Variant;  // 근무병동1
     sWardNo2   : Variant;  // 근무병동2
     sSort  	 : Variant;  // SET조회정렬순서(개인별, 진료과별)
     sSpeedBtn	 : Variant;  // SPEED BUTTON 내역
     sInscfmYn	 : Variant;  // 처방저장시 확인여부
     sNextScr   : Variant;  // 입원환자선택시다음화면
     sPatSel    : Variant;  // 입원환자선택기준
     sDiagSel   : Variant;  // 진단명선택기준
     iDays      : Variant;  // 약처방기본일수
     iCounts    : variant;  // 약처방기본회수
     sOrdFont	 : Variant;  // 처방입력List Font
     sPreFont   : Variant;  // 전처방List Font
     sSetFont	 : Variant;  // Set처방List Font
     sConsltYn	 : Variant;  // 컨설트처방 Repeat 여부
     sWeightYn  : Variant;  // 환자체중별용량 사용 여부
     sPatselyn  : Variant;  // 처방후 환자선택 화면으로 이동
     sEditId	 : Variant;  // 수정자 ID
     sEditIp  	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sPreOrdyn  : Variant;  // 전 처방 펼쳐보이기
     sOutOrdyn  : Variant;  // 전 처방중 외래처방만 보이기
     sResltopt  : Variant;  // 검사결과 조회기준
     sSelmm     : Variant;  // 검사결과 조회기간
     sRsvselfg  : Variant;  // 재진예약시 예약현황  조회기준
     sRefresh   : Variant;  // 외래환자 Refresh
     sCelledit  : Variant;  // 처방셀입력모드
     sOrdcopy   : Variant;  // 전처방자동복사
     sDrugprt   : Variant;  // 마약처방전자동출력
     sDrugunit  : Variant;  // 약용량/함량단위 기본 설정.
     sChart1    : Variant;  // 환자 선택시 차트뷰어 보이기 2011.03.11 추가
     sChart2    : Variant;  // 진료프로그램 시작시 차트뷰어 실행 2011.03.11 추가

     function SelectUserInfo(SEmpNo:String):Integer;
     function InputUserInfo(Cnt:Integer;sType1:String):Integer;
     function UpdateUserFont(EmpNo,OrdFont,PreFont,SetFont,EditId,EditIp:String):Integer;
    end;

    // 투약시간
    HmdActtct = class
     sWardNo	 : Variant;  // 병동번호(병원:999)
     sMethodCd	 : Variant;  // 용법코드
     SActTime   : Variant;  // 투약시간
     sAbbr	    : Variant;  // 약어
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sMethodNm	 : Variant;  // 용법
     sDgijnm    : Variant;  // 경로명
     sCount1    : Variant;  // 횟수
     iActBasdt  : Variant;  // Acting기준일
     function ListMedAct(sType1,sType2:String):Integer;
     function InsertMedAct(Cnt: integer):Integer;
     function DeleteMedAct(sType1,sType2: String):Integer;
    end;
    
    // 진료공통코드
    HmdMcomct = class
     sComCd1	 : Variant;  // 공통코드1
     sComCd2	 : Variant;  // 공통코드2
     sComCd3	 : Variant;  //	 공통코드3
     sComCdnm1	 : Variant;  //	공통코드명1
     sComCdnm2	 : Variant;  //	공통코드명2
     sComCdnm3	 : Variant;  //	공통코드명3
     sCItem01	 : Variant;  //	공통항목01
     sCItem02	 : Variant;  //	공통항목02
     sCItem03	 : Variant;  //	공통항목03
     sCItem04	 : Variant;  //	공통항목04
     sCItem05	 : Variant;  //	공통항목05
     iCItem06	 : Variant;  //	공통항목06
     iCItem07	 : Variant;  //	공통항목07
     iCItem08	 : Variant;  //	공통항목08
     iCItem09	 : Variant;  //	공통항목09
     iCItem10	 : Variant;  //	공통항목10
     sCItem11	 : Variant;  //	공통항목11
     sCItem12	 : Variant;  //	공통항목12
     iDispSeq	 : Variant;  //	나열순서
     sDelDate	 : Variant;  //	데이타 Expired Date
     sEditId	 : Variant;  //	수정자 ID
     sEditIp	 : Variant;  //	수정자 IP
     sEditDate	 : Variant;  //	수정일시
     function ListComCd(sType,Comcd1,Comcd2,Comcd3:String):Integer;
    end;

    // 의사진료일정기준정보
    HmdSchbmt = class
     sMedDept	 : Variant;  // 진료과
     sMedDr	    : Variant;  // 진료의사(발행의사)
     iTpSeqno	 : Variant;  // TYPE순번
     sTypeName	 : Variant;  // TYPE명(진료기준)
     sAmStTm	 : Variant;  // 오전진료시작시간
     sAmEdTm	 : Variant;  // 오전진료종료시간
     sAmTerm	 : Variant;  // 오전진료간격
     iAmFstCnt	 : Variant;  // 오전초진가능인원(간격당)
     iAmReCnt	 : Variant;  // 오전재진가능인원(간격당)
     iAmTotCnt	 : Variant;  // 오전진료가능총인원(간격당)
     sPmStTm	 : Variant;  // 오후진료시작시간
     sPmEdTm	 : Variant;  // 오후진료종료시간
     sPmTerm	 : Variant;  // 오후진료간격
     iPmFstCnt	 : Variant;  // 오후초진가능인원(간격당)
     iPmReCnt	 : Variant;  // 오후재진가능인원(간격당)
     iPmTotCnt	 : Variant;  // 오후진료가능총인원(간격당)
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sRsvYN      : Variant;  // 타과예약가능여부
     sComments   : Variant;  // Type에 대한 주석
     function ListBasicSchedule(sMedDept,sMedDr:String):Integer;
     function InputBasicSchedule(sMedDept,sMedDr,sTypeName,sTypeComment,sEditId,sEditIp:String):Integer;
     function UpdateBasicSchedule(sType1,sMedDept,sMedDr,sTypeName,sAmStTm,sAmEdTm,sAmTerm,
                                  sPmStTm,sPmEdTm,sPmTerm,sEditId,sEditIp,sRsvYN,sComments:String;
                                  iTpSeqno,iAmFstCnt,iAmReCnt,iAmTotCnt,iPmFstCnt,
                                  iPmReCnt,iPmTotCnt:Integer):Integer;
     function DeleteBasicSchedule(sMedDept,sMedDr:String;iTpSeqno:integer):Integer;

     // 기준 클리닉일정 읽어오기
     function ListBasicClinicSchedule(sMedDept,sMedDr:String):Integer;
     // 기준 클리닉일정 저장하기
     function InputBasicClinicSchedule(sMedDept,sMedDr,sTypeName,sEditId,sEditIp:String):Integer;
     //기준 클리닉 일정 수정하기
     function UpdateBasicClinicSchedule(sType1,sMedDept,sMedDr,sTypeName,sAmStTm,sAmEdTm,sAmTerm,
                                        sPmStTm,sPmEdTm,sPmTerm,sEditId,sEditIp:String;
                                        iTpSeqno,iAmFstCnt,iAmReCnt,iAmTotCnt,iPmFstCnt,
                                        iPmReCnt,iPmTotCnt:Integer):Integer;

     // 기준 클리닉 일정 삭제하기
     function DeleteBasicClinicSchedule(sMedDept,sMedDr:String;iTpSeqno:integer):Integer;
    end;

    // 의사진료일정기준정보상세
    HmdSchbdt = class
     sMedDept	 : Variant;  // 진료과
     sMedDr 	 : Variant;  // 진료의사(발행의사)
     iTpSeqno	 : Variant;  // TYPE순번
     sDow   	 : Variant;  // 요일
     iSeqno	    : Variant;  // 순번
     sExamTm	 : Variant;  // 진료시간
     iFstCnt	 : Variant;  // 초진가능인원
     iReCnt 	 : Variant;  // 재진가능인원
     iTotCnt	 : Variant;  // 총가능인원
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sDownm     : Variant;  // 요일명
     sType1      : Variant;  // 구분
     iAMCnt      : Variant;
     iPMCnt      : Variant;
     sAMPMFlag   : Variant;
     sRsvYN      : Variant;
     sComments   : Variant;

     function ListScheduleDetail(sType1,sType2,sType3,sType4:String;lType1:integer):Integer;
     function InputMultiSchedule(Cnt:integer):Integer;
     function InputSchedule(sType1,sMedDept,sMedDr,sDow,sExamTm,sEditId,sEditIp,sRsvYN,sAMPMFlag:String;
                            iTpSeqno,iFstCnt,iReCnt,iTotCnt:Integer):Integer;
//     function DeleteWeek(sType1,sMedDept,sMedDr,sDow,sExamTm:String;iTpSeqno:integer):Integer;
     function DeleteWeek(cnt:integer):Integer;
     // Clinic 스케쥴조회
     function ListClinicScheduleDetail(sType1,sType2,sType3,sType4:String;lType1:integer):Integer;
     // Clinic 스케쥴 입력
     function InputMultiClinicSchedule(Cnt:integer):Integer;
     // Clinic 스케쥴 한줄 추가
     function InputClinicSchedule(sType1,sMedDept,sMedDr,sDow,sExamTm,sEditId,sEditIp:String;
                                  iTpSeqno,iFstCnt,iReCnt,iTotCnt:Integer):Integer;
     // Clinic 일정삭제
     function DeleteClinicWeek(sType1,sMedDept,sMedDr,sDow,sExamTm:String;iTpSeqno:integer):Integer;
    end;

    // 의사진료일정
    HmdSchdrt = class
     sMedDept	 : Variant;  // 진료과
     sMedDr	   : Variant;  // 진료의사(발행의사)
     sMedDate	 : Variant;  // 진료예정일자
     sExamTm	 : Variant;  // 진료예정시간
     iFstCnt	 : Variant;  // 초진가능인원
     iReCnt 	 : Variant;  // 재진가능인원
     iTotCnt	 : Variant;  // 총가능인원
     iOFstCnt	 : Variant;  // 최초초진가능인원
     iOReCnt	 : Variant;  // 최초재진가능인원
     iOTotCnt	 : Variant;  // 최초총가능인원
     iRsvfCnt  : Variant;  // 초진예약인원
     iRsvrCnt	 : Variant;  // 재진예약인원
     iRsvnCnt  : Variant;  // 신환예약인원 2013.3.15
     iRsvtCnt	 : Variant;  // 총예약인원

     iAmFstCnt	 : Variant;  // 초진가능인원
     iAmReCnt 	 : Variant;  // 재진가능인원
     iAmTotCnt	 : Variant;  // 총가능인원
     iAmOFstCnt	 : Variant;  // 최초초진가능인원
     iAmOReCnt	 : Variant;  // 최초재진가능인원
     iAmOTotCnt	 : Variant;  // 최초총가능인원
     iAmRsvfCnt   : Variant;  // 초진예약인원
     iAmRsvrCnt	 : Variant;  // 재진예약인원
     iAmRsvnCnt  : Variant;  // 신환예약인원 2013.3.15
     iAmRsvtCnt	 : Variant;  // 총예약인원

     iPmFstCnt	 : Variant;  // 초진가능인원
     iPmReCnt 	 : Variant;  // 재진가능인원
     iPmTotCnt	 : Variant;  // 총가능인원
     iPmOFstCnt	 : Variant;  // 최초초진가능인원
     iPmOReCnt	 : Variant;  // 최초재진가능인원
     iPmOTotCnt	 : Variant;  // 최초총가능인원
     iPmRsvfCnt  : Variant;  // 초진예약인원
     iPmRsvrCnt	 : Variant;  // 재진예약인원
     iPmRsvnCnt  : Variant;  // 신환예약인원 2013.3.15
     iPmRsvtCnt	 : Variant;  // 총예약인원
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     iTpSeqno	 : Variant;  // TYPE순번
     sDow	 : Variant;  // 요일
     sAMRsvYN     : Variant;  //오전타과예약가능여부
     sPMRsvYN     : Variant;  //오후타과예약가능여부
     sAMPMFlag    : Variant;    //오전오후구분
     sAMComments  : Variant;   // Type명에 대한 Comments
     sPMComments  : Variant;   // Type명에 대한 Comments
     sType1     : Variant; //구분
     iMona      : variant;  // 월요일오전
     iMonp      : Variant;  //       오후
     iTuea      : Variant;  // 화요일오전
     iTuep      : Variant;  //       오후
     iWeda      : Variant;  // 수요일오전
     iWedp      : Variant;  //       오후
     iThua      : variant;  // 목오전
     iThup      : Variant;  //   오후
     iFria      : Variant;  // 금오전
     iFrip      : Variant;  //   오후
     iSata      : Variant;  // 토오전
     iSatp      : Variant;  //   오후

     //의사진료일정 월별예약현황 조회
     function ScheduleMonth(MedDept,MedDr,MedMonth,sType:String):Integer;
     //의사진료일정 진료일의 시간대별 예약현황 조회
     function ScheduleDay(MedDept,MedDr,MedDate, sFlag, sType :String):Integer;
     //예약환자체크
     function CheckSchedule(MedDept,MedDr,Fromdate,Todate:String):Integer;

     function InputMultiDateSchedule(Cnt:integer):Integer;
    //의사진료일정 변경
     function DayScheduleUpdate(Cnt:Integer):Integer;
     //의사진료일정 삭제
     function DeleteMultiDateSchedule(Cnt:integer):Integer;
     // 의사진료 일정 생성(한time 생성)
     function InsertSchedule(MedDept,MedDr,MedDate,ExamTm,EditId,
                             EditIp,sType:String;FstCnt,ReCnt,TotCnt:Integer):Integer;

     // 의사진료 일정 시간대별 삭제
     function Delete(cnt:integer):Integer;
     // Clinic일정 월별 예약현황 조회
     function ClinicScheduleMonth(MedDept,MedDr,MedMonth:String):Integer;
     // Clinic일정 진료일의 시간대별 예약현황 조회
     function ClinicScheduleDay(MedDept,MedDr,MedDate:String):Integer;
     function InputMultiDateClinicSchedule(Cnt:integer):Integer;
     // Clinic일정 변경
     function DayClinicScheduleUpdate(Cnt:Integer):Integer;
     // Clinic일정 삭제
     function DeleteMultiDateClinicSchedule(Cnt:integer):Integer;
     // Clinic 일정 생성(한time 생성)
     function InsertClinicSchedule(MedDept,MedDr,MedDate,ExamTm,EditId,
                                   EditIp:String;FstCnt,ReCnt,TotCnt:Integer):Integer;

     //타과예약가능 여부 변경
     function RsvYnUpdate(AmPmFlag, RsvYn :String):Integer;
     //Comment 변경
     function CommentUpdate(AmPmFlag, Comment :String):Integer;
     //의사진료일정개괄 조회
     function SchdrInfom(Type1:String):Integer;
     //추가. 2002.11.12 이용언 진료과 원무 예약마감 입력
     function SchClose(sType1,sType2,sType3,sType4,sType5,sEditid,sEditip :String):Integer;
    end;

    // 환자진단내역
    HmdPdiagt = class
     sPatNo	    : Variant;  // 환자번호
     sMedDept	 : Variant;  // 진료과
     sMedDate	 : Variant;  // 진료일자/입원일자
     iSeqNo     : Variant;  // 순번
     sRgtDate	 : Variant;  // 등록일자
     sPatSect	 : Variant;  // 환자구분
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDiagName	 : Variant;  // 과진단명/질병명
     sMainDiag	 : Variant;  // 주진단여부
     sCficdYn	 : Variant;  // 확정상병여부(의증/확진여부)
     sPattpnm   : Variant;  // 보험구분
     sChaDr 	 : Variant;  // 주치의사
     sGenDr 	 : Variant;  // 담당의사
     sOlddxYn	 : Variant;  // 지병구분
     sAdmdxYn	 : Variant;  // 입원진단여부
     sEndDate	 : Variant;  // 진단종료일
     sRemark	 : Variant;  // 특기사항
     sTeeUplt	 : Variant;  // 치열(상좌)
     sTeeUprt	 : Variant;  // 치열(상우)
     sTeeDwlt	 : Variant;  // 치열(하좌)
     sTeeDwrt	 : Variant;  // 치열(하우)
     sInfyn     : Variant;  // 전염병여부
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sDeptNm    : Variant;  // 진료과명
     sChaDrNm	 : Variant;  // 주치의사명
     sGenDrNm	 : Variant;  // 담당의사명
     sInDate	 : Variant;  // 내원일시
     sOutDate	 : Variant;  // 퇴원일시
     sStayYn    : Variant;  // 재원여부
     sWardRoom  : Variant;  // 병동-호실
     sFeeYn     : Variant;  // 만성질환관리료
     sTypecd    : Variant;
     sDiagkrnm  : Variant;
      { 이선규추가 (03.05.15)}
     sOpname    : Variant;  // 수술명
     sOpdate    : Variant;  // 수술일자
      { 이선규추가 (04.01.05)}
     v_Cnt      : Variant;  // 조회건수
     v_Typecd   : Variant;  // 환자유형
     sDrgYn     : Variant;  // DRG여부 2013.8.2 김송주추가

     sMove   : Variant; // 전과
     sMDate  : Variant; // 전과일
     sCount  : Variant; // 재원일
     sAdd    : Variant; // 주소
     sJikup  : Variant; // 직업
     sTel    : Variant; // 연락처
     sParent : Variant; // 보호자
     sPTel   : Variant; // 보호자 연락처
     sMovedp : Variant;
     sMovedpd: Variant;
     sTNM    : Variant; // TNM 분류
     sStage  : Variant; // Stage 분류
     sPoa    : Variant; // POA. KimDaeYong 2017-06-07
     sChacode: Variant; // 차상위코드. KimDaeYong 2020-03-18

     //KimDaeYong 2015-12-31
     sMaxMeddate : Variant;  // 최근 진료일자
     sMaxMedCnt  : Variant;  // 최근 진료일자의 진단건수
     sCopyCnt    : Variant;  // 현재 진료일자로 복사된 진단건수
     //KimDaeYong 2017-10-18
     sCopyPatsect: Variant;  // 현재 진료일자로 복사된 환자구분(입원/외래)

     //환자진단내역 조회(1.현진단 2.진단이력)
     function ListPatDiag(PatNo,MedDept,MedDate,Locate,QryKind:String):Integer;
     //환자진단내역 조회(1.현진단 2.진단이력-보호자,주소,직업,전과 추가)
     function ListPatDiag4(PatNo,MedDept,MedDate,Locate,QryKind:String):Integer;
     //환자진단내역 Insert (Multi Input)
     function InsertPatDiag(Cnt:Integer):Integer;
     //환자진단내역 Delete
     function DeletePatDiag(PatNo,MedDept,MedDate:String;SeqNo:LongInt):Integer;
     //환자 수진이력 List 조회
     function ListDiagHistory(PatNo,Locate:String):Integer;
     // 과거진단을 현진단으로 Insert
     function InsertNewDiag(PatNo,MedDept,MedDate,MedDr,PatSect,EditId,EditIp:String):Integer;
     // SET에서 한개의 진단을 Insert
     function InsertOneDiag(sPatno,sMeddept,sMeddate,sRgtDate,sPatSect,sDiagCd,sDiagName,sMainDiag,sChaDr,sGenDr,sRemark,sEditid,sEditip:String):Integer;
     // 환자의 20%감면 진단과 환자유형을 조회한다,
     function selectPatTypecd(sPatno,sMeddate,sMeddept : String) : integer;
     //의약품/조영제부작용. 환자 수진이력 List 조회. KimDaeYong 2017-11-09
     function ListDiagHistory2(PatNo,Locate,Gubun:String):Integer;
    end;

    // 환자 Caution
    HmdCautnt = class
     sPatNo	    : Variant;  // 환자번호
     sHivYn	    : Variant;  // Viral Marker HIV여부
     sVdrlYn	 : Variant;  // Viral Marker VDRL여부
     sHbsagYn	 : Variant;  // Viral Marker HBsAg여부
     sHcvYn	    : Variant;  // Viral Marker Anti-HCV여부
     sVmOthrYn	 : Variant;  // Viral Marker 기타여부
     sVmRemark	 : Variant;  // Viral Marker 기타소견
     sRadCont	 : Variant;  // RADIO Contrast 여부
     sPeniciln	 : Variant;  // PENICILLINE 여부
     sDrugAlgy	 : Variant;  // Drug Allergy사항
     sOtherRmk  : Variant;  // 기타 특이소견
     sFstDate	 : Variant;  // 최초등록일자
     sFstEmpNo	 : Variant;  // 최초입력자ID
     sFstEmpNm	 : Variant;  // 최초입력자NAME
     sMrsaYn    : Variant;  // Mrsa 여부
     sVreYn     : Variant;  // Vre 여부
     sAfbYn     : Variant;  // Afb 여부
     sTbYn      : Variant;  // Tb 여부
     sDiffYn    : Variant;  // Diff 여부
     sFunYn     : Variant;  // Fungus 여부
     sInform    : Variant;  // 감염정보
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     //추가. 2002.11.18 이용언
     sHbcYn     : Variant;
     sHAVYn     : Variant;
     sSeq       : Variant;  //환자별 입력순서, daelongii add, 2005-10-13
     sDschDate  : Variant;  //퇴원일자, daelongii add, 2005-10-17
     //추가 2009.01.21 김송주
     sRotaYn    : Variant;
     sOhmYn     : Variant;
     sEeeYn     : Variant;
     sJangtiYn  : Variant;
     sEeejilYn  : Variant;
     sSuduYn    : Variant;
     sHongYn    : Variant;
     sPungYn    : Variant;
     sNewFluYn  : Variant;  // 신종플루 추가 2010.05.12 김송주
     sInFluYn   : Variant;  // 인플루엔자 추가 2014.02.26 KimDaeYong
     //KimDaeYong 2015-12-17
     sNewinfecyn  : Variant;
	 sNewinfecstr : Variant;
	 sBetcyn   	  : Variant;
	 sBetcstr	  : Variant;
	 sCreyn  	  : Variant;
	 sVrsayn	  : Variant;
	 sCjdyn		  : Variant;
	 sCetcyn	  : Variant;
	 sCetcstr 	  : Variant;
	 sMumpsyn 	  : Variant;
	 sPeryn	  	  : Variant;
	 sMenyn 	  : Variant;
     sDetcyn	  : Variant;
	 sDetcstr 	  : Variant;
     Cancrmk      : Variant;
     sRepdate 	  : Variant;
     //KimDaeYong 2018-02-01
     sMrpayn      : Variant;
     sCpeyn       : Variant;
     sCpetcyn     : Variant;
     sCpetcstr    : Variant;

          // 환자Caution정보 조회
     function SelCaution(PatNo:String):Integer;
     // 환자 caution 정보 등록
     function RegCaution(Type1, PatNo, HivYn, VdrlYn, HbsagYn, HcvYn, VmothrYn,
                         Vmremark, RadCont, Peniciln, DrugAlgy, OtherRmk,
                         FstEmpNo, EditId, EditIp, Inform, MrsaYn, VreYn,
                         AfbYn, TbYn, DiffYn, FunYn, HbcYn, HAVYn, Seq,
                         RotaYn, OhmYn, EeeYn, JangtiYn, EeejilYn, SuduYn, HongYn, PungYn, NewFluYn, InFluYn,
                         Newinfecyn, Newinfecstr, Betcyn, Betcstr, Creyn, Vrsayn, Cjdyn, Cetcyn, Cetcstr, Mumpsyn,
                         Peryn, Menyn, Detcyn, Detcstr, Cancrmk, sRepdate, Mrpayn, Cpeyn, Cpetcyn, Cpetcstr : String):Integer;
    end;
{
    // 제증명(일반진단서)
    HmdCertit = class
     sPatNo 	 : Variant;  // 환자번호
     sRgtDate	 : Variant;  // 등록일자
     iSeqNo 	 : Variant;  // 순번
     sCertKind	 : Variant;  // 증명서구분
     iIssueNo	 : Variant;  // 발급번호(연번)
     sMedDept	 : Variant;  // 진료과
     sIssuDate	 : Variant;  // 발행일자
     sMedDr 	 : Variant;  // 진료의사(발행의사)
     iIssueEa	 : Variant;  // 매수
     sItem1 	 : Variant;  // 항목1
     sItem2 	 : Variant;  // 항목2
     sItem3 	 : Variant;  // 항목3
     sItem4 	 : Variant;  // 항목4
     sItem5 	 : Variant;  // 항목5
     sItem6 	 : Variant;  // 항목6
     sItem7 	 : Variant;  // 항목7
     sItem8 	 : Variant;  // 항목8
     sItem9 	 : Variant;  // 항목9
     sItem10	 : Variant;  // 항목10
     sItem11	 : Variant;  // 항목11
     sItem12	 : Variant;  // 항목12
     sItem13	 : Variant;  // 항목13
     sItem14	 : Variant;  // 항목14
     sItem15	 : Variant;  // 항목15
     sItem16	 : Variant;  // 항목16
     sItem17	 : Variant;  // 항목17
     sItem18	 : Variant;  // 항목18
     sItem19	 : Variant;  // 항목19
     sItem20	 : Variant;  // 항목20
     sItem21	 : Variant;  // 항목21
     sItem22	 : Variant;  // 항목22
     sItem23  	 : Variant;  // 항목23
     sItem24  	 : Variant;  // 항목24
     sItem25	 : Variant;  // 항목25
     sItem26	 : Variant;  // 항목26
     sItem27	 : Variant;  // 항목27
     sItem28	 : Variant;  // 항목28
     sItem29	 : Variant;  // 항목29
     sItem30	 : Variant;  // 항목30
     sItem31	 : Variant;  // 항목31
     sItem32    : Variant;  // 항목32
     sItem33	 : Variant;  // 항목33
     sItem34	 : Variant;  // 항목34
     sItem35	 : Variant;  // 항목35
     sItem36	 : Variant;  // 항목36
     sItem37	 : Variant;  // 항목37
     sItem38	 : Variant;  // 항목38
     sItem39	 : Variant;  // 항목39
     sItem40	 : Variant;  // 항목40
     sItem41	 : Variant;  // 항목41
     sItem42	 : Variant;  // 항목42
     sItem43	 : Variant;  // 항목43
     sItem44	 : Variant;  // 항목44
     sItem45	 : Variant;  // 항목45
     sItem46	 : Variant;  // 항목46
     sItem47    : Variant;  // 항목47
     sItem48	 : Variant;  // 항목48
     sItem49  	 : Variant;  // 항목49
     sItem50  	 : Variant;  // 항목50
     iAmount1	 : Variant;  // 금액1
     iAmount2	 : Variant;  // 금액2
     iAmount3	 : Variant;  // 금액3
     iAmount4	 : Variant;  // 금액4
     iAmount5	 : Variant;  // 금액5
     iAmount6	 : Variant;  // 금액6
     iAmount7	 : Variant;  // 금액7
     iAmount8	 : Variant;  // 금액8
     iAmount9	 : Variant;  // 금액9
     iAmount10	 : Variant;  // 금액10
     iQty1   	 : Variant;  // 수량1
     iQty2  	 : Variant;  // 수량2
     iQty3  	 : Variant;  // 수량3
     iQty4  	 : Variant;  // 수량4
     iQty5  	 : Variant;  // 수량5
     iQty6  	 : Variant;  // 수량6
     iQty7  	 : Variant;  // 수량7
     iQty8  	 : Variant;  // 수량8
     iQty9  	 : Variant;  // 수량9
     iQty10 	 : Variant;  // 수량10
     sItem51  	 : Variant;  // 항목51
     sItem52  	 : Variant;  // 항목52
     sItem53  	 : Variant;  // 항목53
     sItem54  	 : Variant;  // 항목54
     sItem55  	 : Variant;  // 항목55
     iAmount11	 : Variant;  // 금액11
     iAmount12	 : Variant;  // 금액12
     iAmount13	 : Variant;  // 금액13
     iAmount14	 : Variant;  // 금액14
     iAmount15	 : Variant;  // 금액15
     iAmount16	 : Variant;  // 금액16
     iAmount17	 : Variant;  // 금액17
     iAmount18	 : Variant;  // 금액18
     iAmount19	 : Variant;  // 금액19
     iAmount20	 : Variant;  // 금액20
     sDeptNm  	 : Variant;  // 진료과name
     sMedDrNm 	 : Variant;  // 발행의name
     sAddress 	 : Variant;  //주소
     sPerAddr 	 : Variant;  //본적
     sTelNo 	 : Variant;  //전화번호
     sBirtDate  : Variant;  //생년월일
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     // 제증명서 과거이력 List 조회 (환자번호+증명구분+사업장)
     function ListCerti(Patno,CertKind,Locate:String):Integer;
     // 제증명서 내용 조회 (환자번호+발행일+순번)
     function SelectCerti(PatNo,RgtDate:String;SeqNo:Integer):Integer;
     // 제증명서 내용 삭제 (환자번호+발행일+순번)
     function DeleteCerti(PatNo,RgtDate:String;SeqNo:Integer):Integer;
     // 제증명서 입력 (1.일반진단서)
     function InsertCerti01(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem1,
                            sItem41,sItem42,sItem43,sItem44,sItem21,sItem22,
                            sItem23,sItem24,sItem02,sItem25,sItem26,sItem51,
                            sItem52,sItem10,sItem31,sItem32,sItem37,sItem27,
                            sItem28,sItem29:String;Seqno,iIssueea:Integer):Integer;
     // 제증명서 입력 (2.소견서)
     function InsertCerti02(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem51,sItem52,sItem1,sItem11,sItem53:String;
                            Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (3.병사용진단서)
    function InsertCerti03(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem21,sItem1,sItem22,sItem41,
                            sItem51,sItem52,sItem53,sItem2,sItem34,sItem54,sItem55,
                            sItem35,sItem23,sItem03:String;
                            Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (4.상해진단서)
    function InsertCerti04(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem1,sItem31,sItem32,sItem33,sItem34,sItem21,sItem22,
                            sItem51,sItem52,sItem53,sItem41,sItem42,sItem43,sItem44,
                            sItem45,sItem23,sItem24,sItem46,sItem47,sItem54:String;
                            Seqno,iIssueea:Integer):Integer;
     // 제증명서 입력 (5.장애진단서)
     function InsertCerti05(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem41,
                            sItem21,sItem01,sItem22,sItem23,sItem24,sItem25,
                            sItem26,sItem27,sItem42,sItem28,sItem29,sItem02,
                            sItem51,sItem52,sItem53,sItem43,sItem44,sItem45,sItem46,
                            sItem03,sItem47:String;
                            Seqno,iIssueea:Integer):Integer;

     // 제증명서 입력 (6.건강진단서)
     function InsertCerti06(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem51,sItem52,sItem53,sItem54,sItem21:String;
                            Seqno,iIssueea:Integer):Integer;


    //  제증명서 입력 (7.건강진단서(영문))
    function InsertCerti07(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem01,sItem21,sItem41,sItem02,sItem42,sItem22,
                            sItem51,sItem03,sItem32,sItem23:String;
                            Seqno,iIssueea:Integer):Integer;


    //  제증명서 입력 (8.사망진단서)
   function InsertCerti08(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem21,sItem22,sItem23,sItem24,sItem25,sItem26,sItem41,
                            sItem01,sItem31,sItem02,sItem03,sItem32,sItem33,sItem34,
                            sItem35,sItem36,sItem42,sItem37,sItem27,sItem43,sItem28,
                            sItem29,sItem44,sItem04,sItem38,sItem05,sItem39:String;
                            Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (9.출생증명서)
   function InsertCerti09(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem34,sItem35,sItem21,sItem22,
                            sItem01,sItem36,sItem02,sItem03,sItem41,sItem42:String;
                            lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                            lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                            lAmount11,lAmount12,lAmount13,lAmount14,
                            Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (10.출생증명서(영문))
    function InsertCerti10(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem21,sItem41,sItem42,sItem32,sItem22,sItem43,
                            sItem44,sItem45,sItem33,sItem01,sItem23,sItem34,
                            sItem35,sItem24:String;
                            Seqno,iIssueea:Integer):Integer;
    //  제증명서 입력 (11.사산증명서)
   function InsertCerti11(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem34,sItem35,sItem01,
                            sItem36,sItem21,sItem22,sItem02,sItem03,sItem04,
                            sItem05,sItem07,sItem41,sItem08,sItem37:String;
                            lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                            lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                            Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (12.향후치료비추정서)
   function InsertCerti12(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem41,sItem42,sItem43,sItem44,sItem45,sItem46,
                            sItem47,sItem21,sItem22,sItem23,sItem24,sItem25,
                            sItem26,sItem27,sItem28,sItem29,sItem30,sItem11,
                            sItem12,sItem13,sItem14,sItem15,sItem16,sItem17,
                            sItem18,sItem19,sItem20,sItem31,sItem32,sItem33,
                            sItem34,sItem35,sItem36,sItem37,sItem38,sItem39,
                            sItem40,sItem51,sItem52:String;
                            lQty01,lQty02,lQty03,lQty04,lQty05,
                            lQty06,lQty07,lQty08,lQty09,lQty10,
                            lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                            lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                            lAmount11,lAmount12,lAmount13,lAmount14,lAmount15,
                            lAmount16,lAmount17,lAmount18,lAmount19,lAmount20,
                            Seqno,iIssueea:Integer):Integer;


     // 제증명서 입력 (13.연령감정서)
     function InsertCerti13(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem34,sItem35,sItem36:String;
                            Seqno,iIssueea:Integer):Integer;

    // 제증명서 입력 (14.성별감정서)
    function InsertCerti14(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                           sAddress,sPeraddr,sTelno,sEditid,sEditip,
                           sItem31,sItem32,sItem33,sItem34,sItem01:String;
                           Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (15.입퇴원확인서)
    function InsertCerti15(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                           sAddress,sPeraddr,sTelno,sEditid,sEditip,
                           sItem51,sItem41,sItem42,sItem43,sItem44,sItem45,sItem21,
                           sItem22,sItem23,sItem24,sItem25,sItem46,sItem47,sItem48,
                           sItem49,sItem50,sItem26,sItem27,sItem28,sItem29,sItem30,
                           sItem01,sItem31,sItem32:String;
                           Seqno,iIssueea:Integer):Integer;

    //  제증명서 입력 (16.진료확인서)
    function InsertCerti16(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                           sAddress,sPeraddr,sTelno,sEditid,sEditip,
                           sItem31,sItem32,sItem33,sItem1,sItem41,sItem51,sItem21,
                           sItem22,sItem23,sItem24,sItem25,sItem26,sItem52:String;
                           Seqno,iIssueea:Integer):Integer;

    // 제증명서 입력 (17.미숙아 및 선천성이상아 출생보고서)
    function InsertCerti17(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                           sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem21,
                           sItem22,sItem41,sItem23,sItem24,sItem25,sItem11,
                           sItem12,sItem42,sItem43:String;Seqno,iIssueea:Integer):Integer;
   //  제증명서 입력 (18.예방접종보고서)
   function InsertCerti18(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem33,sItem34,sItem35,sItem45,sItem46,sItem47,
                            sItem20,sItem21,sItem22,sItem23,sItem24,sItem25,
                            sItem26,sItem27,sItem28,sItem29,sItem30,sItem36,
                            sItem38,sItem39,sItem40,sItem42,sItem43,sItem44,
                            sItem48,sItem49,sItem50,sItem51,sItem31,sItem52,
                            sItem32,sItem53,sItem54,sItem55,sItem37,sItem41,sItem19:String;
                            Seqno,iIssueea:Integer):Integer;

   // 제증명서 입력(19.보험 소견서)
   function InsertCerti19(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                                 sAddress,sPeraddr,sTelno,sEditid,sEditip,
                                 sItem31,sItem20,sItem51,sItem52:String;
                                 Seqno,iIssueea:Integer):Integer;

   // 제증명서 입력(20.검사(치료)의뢰서)
   function InsertCerti20(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                                 sAddress,sPeraddr,sTelno,sEditid,sEditip,
                                 sItem20,sItem51,sItem52,sItem41,sItem42,sItem43,
                                 sItem1:String;
                                 Seqno,iIssueea:Integer):Integer;

   // 제증명서 입력 (21.후유장애진단서(신))
     function InsertCerti21(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem51,
                            sItem21,sItem01,sItem52,sItem53,sItem54,sItem02,
                            sItem31,sItem55:String;
                            Seqno,iIssueea:Integer):Integer;


    end;
}

    // 전체처방View
    HmdOrderv = class
     sType1	    : Variant;  // 검색조건1
     sType2 	 : Variant;  // 검색조건2
     sType3 	 : Variant;  // 검색조건3
     sType4 	 : Variant;  // 검색조건4
     sType5 	 : Variant;  // 검색조건5
     sPatNo 	 : Variant;  // 환자번호
     sPatName	 : Variant;  // 환자명
     sAdmDate	 : Variant;  // 입원일
     sRoomNo	 : Variant;  // 병실
     sGenDrNm	 : Variant;  // 담당의명
     sLstopDt	 : Variant;  // 최근수술일
     sOrdDate	 : Variant;  // 처방일자
     sOrdTime	 : Variant;  // 처방시간
     sOrdTime2	 : Variant;  // 처방시간(일자포함)
     iOrdSeqno	 : Variant;  // 처방순번
     sOrdseqno  : Variant;  // 처방순번(PRN실시시 사용)
     sOrdName   : Variant;  // 처방명
     sMedDate	 : Variant;  // 진료일자/입원일자
     sMedTime   : Variant;  // 진료시간/응급실도착시간
     sPatSect	 : Variant;  // 환자구분
     sPatScnm	 : Variant;  // 환자구분명
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdGrpNm	 : Variant;  // 처방분류명
     sSlipCd	 : Variant;  // SLIP코드
     sSlipNm	 : Variant;  // SLIP코드명
     sOrdType	 : Variant;  // 처방형태
     sOrdKind	 : Variant;  // 처방종류
     sDiscYn	 : Variant;  // D/C여부
     sErYn  	 : Variant;  // 응급여부
     sMedDept	 : Variant;  // 진료과
     sDeptNm	 : Variant;  // 진료과명
     sOrdDr 	 : Variant;  // 처방의사
     sOrdDrNm	 : Variant;  // 처방의사명
     sCofmDr 	 : Variant;  // 보고의사
     sCofmDrNm	 : Variant;  // 보고의사명
     sOrdCd 	 : Variant;  // 처방코드
     sOrdDesc 	 : Variant;  // 처방편집(간호용)
     sOrdDesc1	 : Variant;  // 처방편집1
     sOrdDesc2	 : Variant;  // 처방편집2
     sPrnYn 	 : Variant;  // PRN 여부
     sNurStat	 : Variant;  // 간호확인
     sRcpStat	 : Variant;  // 수납여부
     sJinjStat	 : Variant;  // 진지STATUS
     sEditDate	 : Variant;  // 입력일시
     sPreActYn  : Variant;  // 선실시여부
     sChaDr     : Variant;  // 주치의
     sWardNo    : Variant;  // 병동번호
     sOrdSite   : Variant;  // 처방시행처
     sRemark    : Variant;  // 비고
     sOldPttp   : Variant;  // 환자유형
     sInsType   : Variant;  // 급여구분
     sInsType2  : Variant;  // 급여구분(MDMEDORT.INSTYPE)
     sOrdUnit   : Variant;  // 단위
     sUnitType  : Variant;  // 선택단위
     sDgijType  : Variant;  // 약주사구분(1=경구,2=외용.3=주사)
     sDetRoute  : Variant;  // 상세투여경로
     sMethodCd  : Variant;  // 용법코드
     sMethdRmk  : Variant;  // 용법비고
     sSelfYn    : Variant;  // 외부약 여부
     sPowYn     : Variant;  // Powder여부
     sAstYn     : Variant;  // AST 여부
     sMixyn     : Variant;  // MIX여부
     sSelfIjYn  : Variant;  // 자가주사여부
     sInjtloc   : Variant;  // 주사장소
     sMainYn    : Variant;  // MAIN여부
     sLtermRsn  : Variant;  // 장기처방사유
     sInOutYn   : Variant;  // 원내/원외구분
     sInResn    : Variant;  // 원내처방사유
     iDoseQty   : Variant;  // 투여량(1회차)
     iDoseQty2  : Variant;  // 투여량(2회차)
     iDoseQty3  : Variant;  // 투여량(3회차)
     iDoseQty4  : Variant;  // 투여량(4회차)
     iDoseQty5  : Variant;  // 투여량(5회차)
     iTotQty    : Variant;  // 총량
     iCount     : Variant;  // 횟수
     iUseDay    : Variant;  // 일수
     iBundleNo  : Variant;  // 묶음번호
     iDosNo     : Variant;  // 투약번호
     sDiagcd    : Variant;  // 진단/질환코드
     sDiagname  : Variant;  // (과)진단명/질병명
     sPortyn    : Variant;  // PORTABLE(이동)여부
     sFcryn     : Variant;  // FCR검사여부
     sDruginyn  : Variant;  // 항생제투여여부
     sOrdtext   : Variant;  // 임상소견/지시내용
     sSpccode1  : Variant;  // 검체코드1
     sSpccode2  : Variant;  // 검체코드2
     sHoperoom  : Variant;  // 검사희망검사실
     sHopedate  : Variant;  // 검사희망일시
     sSpcdr     : Variant;  // 선택진료의사
     sSpcdryn   : Variant;  // 선택진료(가능)여부
     sOpdate    : Variant;  // 수술(예정)일자
     sOpdopyn   : Variant;  // 외래수술여부
     sMainop    : Variant;  // 주수술
     sReopyn    : Variant;  // 재수술여부
     sNightyp   : Variant;  // 심야가산적용여부
     sTrSpcyn   : Variant;  // 선택진료여부
     sExecdr    : Variant;  // 시행의사(집도의/마취의)
     sTrunit    : Variant;  // 단위
     sAnethmm   : Variant;  // 마취시간(분)
     sTeeuplt   : Variant;  // 치열(상좌)
     sTeeuprt   : Variant;  // 치열(상우)
     sTeedwlt   : Variant;  // 치열(하좌)
     sTeedwrt   : Variant;  // 치열(하우)
     iOpseqno   : Variant;  // 수술(예정)순번
     iTrqty     : Variant;  // 수량
     iTrcount   : Variant;  // 횟수
     sUsecode   : Variant;  // 사용용도
     sOpexdate  : Variant;  // 수술예정일자
     sFiltyn    : Variant;  // FILTER여부
     sBldAstyn  : Variant;  // AST 여부
     sTrselfyn  : Variant;  // 자가수혈여부
     sDonryn    : Variant;  // 헌혈자유무
     sIrradyn   : Variant;  // IRRADIATION 여부
     iBldQty    : Variant;  // 수량(수혈)
     sTrqty     : Variant;  // 수량
     sTrcount   : Variant;  // 횟수
     sBldQty    : Variant;  // 수혈수량
     sTrnsFloc  : Variant;  // 수혈위치
     sStatName  : Variant;  // 결과 및 진행상태
     sOpSeqNo   : Variant;  // 수술(예정)순번
     sInjDate   : Variant;  // 주사예정일
     sDrugKind  : Variant;  // 일반약구분
     sBasisdx   : Variant;  // 기저질환
     sInfsymtm  : Variant;  // 감염증
     sChkyn     : Variant;  // 원인균명 확인여부
     sFungusnm  : Variant;  // 원인균명
     sSensamc   : Variant;  // 원인균의감수성AMPICILLIN
     sSensclot  : Variant;  // 원인균의감수성CEPHALOTHIN
     sSenscpfx  : Variant;  // 원인균의감수성CIPROFLOXACIN
     sSensoxa   : Variant;  // 원인균의감수성OXACILLIN
     sSensgm    : Variant;  // 원인균의감수성GENTAMICIN
     sSensem    : Variant;  // 원인균의감수성ERYTHROMYCIN
     sSensctrx  : Variant;  // 원인균의감수성Ceftriaxone
     sOrdrsncd  : Variant;  // 항균제처방사유
     sOrdrsndt  : Variant;  // 항균제처방사유내용
     sCount	    : Variant;  // 횟수
     sDoseQty	 : Variant;  // 투여량(1회차)
     sDoseQty2	 : Variant;  // 투여량(2회차)
     sDoseQty3	 : Variant;  // 투여량(3회차)
     sDoseQty4	 : Variant;  // 투여량(4회차)
     sDoseQty5	 : Variant;  // 투여량(5회차)
     sTotQty	 : Variant;  // 총량
     sUseDay	 : Variant;  // 일수
     sBundleNo	 : Variant;  // 묶음번호
     sOutOdYn   : Variant;  // 원외처방여부
     sExceptCd  : Variant;  // 의약분업예외코드
     sMedYn     : Variant;  // 진료여부
     sInschkyn  : Variant;  // 보험기준적용구분
     sGtt       : Variant;  // gtt(주사약)
     sChemoYn   : Variant;  // 항암제여부
     sOrdYn     : Variant;  // 처방가능여부
     sRsvYn     : Variant;  // 예약검사여부
     sLocate    : Variant;  // 사업장
     sGubun     : Variant;  // 구분.KimDaeYong 2020-05-28
     sGttUnit   : Variant;  // Gtt 단위
     sOrigGrp	 : Variant;  // 처방분류(처방Master)
     sOrigSlip	 : Variant;  // Slip코드(처방Master)
     sPrintCnt  : Variant;  // 처방전출력횟수
     sUseSite   : Variant;  // 사용장소
     sCalyn     : Variant;  // 계산여부(외용약)
     sDoseUnit  : Variant;  // 기본투여단위
     sChkQty    : Variant;  // 1일제한량
     sAbCiNo    : Variant;  // 절대불가여부
     sContQty   : Variant;  // 함량
     sWeight    : Variant;  // 체중
     sInputTyp  : Variant;  // 필수입력구분
     sPrepYn    : Variant;  // Prepare여부
     sKindName  : Variant;  // 처방종류Title
     sOrdDept   : Variant;  // 처방의소속과
     sConfNrs   : Variant;  // 추가처방확인자
     sConfTime  : Variant;  // 추가처방확인시간
     sAltYn     : Variant;  // 대체조제여부
     sDcDate    : Variant;  // DC 시각
     sDcOrddr   : Variant;  // DC 처방의
     sMixCheck  : Variant;  // 묶음처리구분
     sDgRcpYn   : Variant;  // 가정간호수납구분
     sStudyYn   : Variant;  // 임상연구여부
     sEditId    : Variant;  // 수정자ID
     sEditIp    : Variant;  // 수정일시
     sLabNo     : Variant;  // 임상연구번호
     sSideYn    : Variant;  // Side여부(수액)
     sQtyUnit   : Variant;  // 함량투여단위
     sTrtLoc    : Variant;  // 처치/재료시행장소
     sIoqty     : Variant;  // 반납요청량
     sRtnqty    : Variant;  // 반납완료량
//     sHdPodInf  : Variant;  // HD,POD 정보
     sDrugType  : Variant;  // 약품구분(1:인슐린,9:일반)
     sCkPortyn  : Variant;  // PORTABLE 가능여부
     sCkFcryn   : Variant;  // FCR 검사여부
     sHeaderYn  : Variant;  // Header구분-Dx,Hd,Pod
     sRsltUpp   : Variant;
     sRsltLow   : Variant;
     sRsltVal   : Variant;
     sSpcCode   : Variant;  // 검체코드(처방Master)
     sExmCount  : Variant;  // 검사횟수
     sCsOrdGrp  : Variant;  //(컨설트)처방분류
     sCsSlipCd  : Variant;  //(컨설트)Slip코드
     sCsOrdCd   : Variant;  //(컨설트)처방코드
     sCallYn    : Variant;  //왕진여부
     sConsDept  : Variant;  //희망부서
     sConsDr    : Variant;  //희망의사
     sConsCtnt  : Variant;  //의뢰내용
     sDmDietYn  : Variant;  //당뇨조식여부
     sDietDate  : Variant;  //영양과-희망일시
     sConsType  : Variant;  //컨설트 구분 (1:일반,2:EMG)
     sNotiText  : Variant;  //Noti-내용
     sTxDrugYn  : Variant;  //처치약제여부
     sCkTxYn    : Variant;  //처치약제가능여부
     sSex       : Variant;  //성별
     sBirtdate  : Variant;  //생일
     sMeddept1  : Variant;  //진료과
     sProcstat  : Variant;  //수행상태
     sProcstnm  : Variant;  //수행상태명
     sExecDate  : Variant;  //검사일자
     sReadYn    : Variant;  //판독대상여부
     sTeethYn   : Variant;  // 치식필수입력여부
     sSpecNo    : Variant;  // Special Order SPECNO
     sCkInsTyp  : Variant;  // 보험구분(처방Master)
     sActSeqNo  : Variant;  // 약수행번호
     sPreMedYn  : Variant;  // PreMedication여부
     sDgPrtCnt  : Variant;  // 마약처방전출력횟수
     sDcYn      : Variant;  // 약국접수취소여부
     sInsinfo   : Variant;  // 보험인정기준 선택항목
     //추가. 2002.10.28 이용언
     sSiteCd    : Variant;
     sTermsCd   : Variant;
     sDayCnt    : Variant;
     sDays      : Variant;
     sRsvDays   : Variant;
     //추가. 2002.11.8 이용언
     sAseven    : Variant;
     //(추가. 2002.11.19 이용언 SET 검사 여부
     sSetexyn   : Variant;
     sGroupyn   : Variant;
     sChadrnm   : Variant;
     sResno1    : Variant;
     sResno2    : Variant;
     // 이선규 추가
     sActinf     : Variant;
     sAbbr       : Variant;
     sMgpcc      : Variant; // MG -> CC
     sRsltunit   : Variant; // 검사단위
     sOrddesc3   : Variant;
     sStatCd     : Variant;
     //추가. 2003.07.02 최태성
     sTypCd2     : Variant;
     //추가. 2004.01.12 최태성
     sSdtblqty   : Variant;  //약국 sddgcdmt tablqty(mg)
     sConfid     : Variant;
     sConfnm     : Variant;
     sTablenm    : Variant;
     sDrugtype2  : Variant;

     sSignData   : Variant;                     // SONGLIM_THOMA 추가
     sSerialNo   : Variant;
     sSubjectDN  : Variant;

     sLoReasonCd  : Variant;                   // ## 저함량 2007.08.10 김송주 추가
     sLoReason    : Variant;                   // ## 저함량 2007.08.10 김송주 추가

     sMaincd      : Variant;                   // ## 주성분코드 2008.09.30 김송주 추가
     sUsedate     : Variant;                   // ## 처방일 + 사용일 -1
     sDuprasncd   : Variant;                   // ## 중복처방 사유코드
     sDuprasndt   : Variant;                   // ## 중복처방 상세사유
     sDupyn       : Variant;                   // ## 중복처방 여부
     sTotrtnyn    : Variant;
     sDrteamyn    : Variant;                   // DRteam 여부  2010.06.10 김송주 추가
     sPrnOrdRmk   : Variant;                   // PRN처방기준및금기증
     sAntidrugrmk : Variant;                   // 향정 장기 처방 사유  2011.08
     sSamecd      : Variant;
     sHighCareYn  : Variant;                   // 고주의 약품주의(유사코드, 유사발음,동일성분)여부
     sDementiaResult : Variant;                // 치매검사결과
     sSyrupText   : Variant;                   // 시럽약제처방사유 2012.06.28
     sDrugcode    : Variant;
     sDrugname    : Variant;
     sAntidrugrmk2 : Variant;                  // 산재환자 향정처방사유, KimDaeYong 2014-03-26
     //초음파처방사유, KimDaeYong 2016-09-26
     sSonoAnatCd  : Variant;                   // 단순,유도초음파 해부학적구분 / 응급초음파 해부학적구분1
     sSonoEdiCd   : Variant;                   // 단순,유도초음파 사용용도
     sSonoRsn     : Variant;                   // 단순,유도초음파 구체적사유   / 응급초음파 구체적사유1
     sSonoPregWk  : Variant;                   // 임산부초음파 임신주수, KimDaeYong 2016-09-27
     sSonoPgInsChk: Variant;                   // 임산부초음파 횟수추가급여처방여부, KimDaeYong 2016-09-30
     sSonoPgInsRsn: Variant;                   // 임산부초음파 횟수추가급여처방사유, KimDaeYong 2016-09-30
     //케어캠프용 변수
     sProdcode    : Variant;
     sProdsize    : Variant;
     //sPrnCnt      : Variant;  //얘 뭔지 모르겠음. 사용되는곳이없음. KimDaeYong 2019-05-03
     //보고일시. KimDaeYong 2018-06-11
     sRsltdate    : Variant;
     //요양급여의뢰서(V352등)첨부여부. KimDaeYong 2018-10-26
     sReqdc       : Variant;
     //PRN정보 및 임상소견/지시내용. KimDaeYong 2019-05-03
     sMedOrdtext  : Variant;
     sPrnStpRmk   : Variant;                    //PRN실시기준
     sPrnCnt      : Variant;                    //PRN처방최대횟수
     //신체보호대적용사유. KimDaeYong 2019-06-05
     sRsn         : Variant;                    //적용사유
     sRsnoth      : Variant;                    //적용사유기타
     sKind        : Variant;                    //종류
     sKindoth     : Variant;                    //종류기타
     sRegion      : Variant;                    //부위
     sRegionoth   : Variant;                    //부위기타
     sMethd       : Variant;                    //방법
     sMethdoth    : Variant;                    //방법기타
     //2019인증.
     sSlddocyn    : Variant;                    //조직슬라이드대출서류확인여부.KimDaeYong 2019-06-27
     sDrmsgyn     : Variant;                    //의사공유메시지여부. KimDaeYong 2019-07-18
     //응급중환자초음파, 해부학적구분2~6/구체적사유2~6. KimDaeYong 2019-07-25
     sSonoAnatCd2 : Variant;
     sSonoAnatCd3 : Variant;
     sSonoAnatCd4 : Variant;
     sSonoAnatCd5 : Variant;
     sSonoAnatCd6 : Variant;
     sSonoRsn2    : Variant;
     sSonoRsn3    : Variant;
     sSonoRsn4    : Variant;
     sSonoRsn5    : Variant;
     sSonoRsn6    : Variant;


     // 전처방조회
     // sType1 (1:환자의 모든 처방일 2:재원기간중의 처방일 3:특정처방일의 처방내용)
     // sType2 (환자번호)  sType3 (sType1이 2는 입원일, 3이면 처방일) sType4 (사업장구분)
     //function PreOrderSelect(sType1,sType2,sType3,sType4:String):Integer;
     // 추가처방내역 조회
     function SelectAddOrder(sType1,sType2,sType3,sType4,sType5:String):Integer;
     // 추가처방내역 조회 변경
     function SelectAddOrder2(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
     function SelectOrdConts(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
     // 처치약제입력
     function InsertTxDrug(Cnt:Integer):Integer;
     // 처방내역 D/C 처리 (Multi Input)
     function UpdateOrdDc(Cnt:Integer):Integer;
     // 간호사 처방확인 (Multi Update)
     function ConfirmOrder(Cnt:Integer):Integer;
     // 간호사 처방확인Add (Multi Update)
     function ConfirmOrderAdd(Cnt:Integer):Integer;
     //타과진료/처방내역 List SELECT
     function ListOrdOtherDept(PatNo,MedDate,MedDept,Locate:String):Integer;
     //환자처방 상세정보 SELECT
     function OrdDetailInfo(OrdGrp,PatNo,OrdDate:String;SeqNo:Integer):Integer;
     //PRN실시입력
     function InsertPrn(Cnt:Integer):Integer;

     //PRN실시입력
     function InsertPrn2(Cnt:Integer):Integer;

     //PRN실시입력(응급실)
     function InsertERPrn(Cnt:Integer):Integer;
     //퇴원검사 Continue
     function InsertDschExam(Cnt:Integer):Integer;
     //환자처방 Status SELECT
     function OrderStatusInfo(PatNo,OrdDate,OrdGrp:String;SeqNo:Integer):Integer;
     //퇴원시 검사결과내역조회.
     function SelectExamDone(sType1,sType2,sType3,sType4:String):Integer;
     // 환자검색용 일자별 처방조회
     function DayOrderSelect(Type1,PatNo,AdmDate,Type2,Locate:String):Integer;
     //PRN실시입력(응급실->병동)
     function InsertAdmPrn2(Cnt:Integer):Integer;
     // 간호사 처방확인 (Multi Update) -- 응급실용
     function ConfirmOrder2(Cnt:Integer):Integer;
     // 과내검사 실시취소
     function ExmCancel(sType1,sPatNo,sOrdDate,sOrdSeqNo,sEditId,sEditIp,sType2,
                        sType3,sType4,sCode1,sCode2,sCode3:String):Integer;
     // 발행처변경조회
     function OrdSiteSelect(sType1,sPatNo,tOrdDate,sLocate:String):Integer;
     function ChangeOrdSite(sType1:String;Cnt:Integer):Integer;
     function UpdateDC(strPatNo, strOrdDate, strOrdSeqNo, strStat, strCon, strPatSect:String):Integer;
     // 처치약제조회(수정본)
     function SelTxDrug(sType1,sType2,sType3,sType4:String):Integer;
     // 챠트대출 희망부서 확인.
     function CheckChartYn(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
     function SelectExmTrt(sGubun,sPatsect,sFromdt,sTodate,sMeddept,sSlipcd:string): Integer;
     function ExmTrtdetail(sGubun,sPatsect,sFromdt,sTodate,sMeddept,sOrdcd:string): Integer;
     function ExmTrtOrddr(sGubun,sPatsect,sFromdt,sTodate,sMeddept,sOrdcd:string): Integer;
     function UpMedPow(sType1,sPatNo,sOrddate,sOrdSeqNo,Editid,Editip : String):Integer;
     //외래환자 미래처방을 외래처방으로 전환
     function ConvertOutOrd(PatNo,MedDate,MedDept,MedDr,MedTime,EditId,EditIp:String):Integer;
     function ExmTrtstat1(sGubun,sPatsect,sFromdt,sTodate,sMeddept:string): Integer;
     //해당일자+진료과+진료의에 대한 처방유무
     function CheckOrdYn(sPatno,sMeddate,sMeddept,sChadr:String):Integer;
     //
     // 과내검사 통계
     function SelOStat(strType, FromDate, ToDate, strDeptCd, strPatSect, sLocate:String):Integer;
     // 처방내역 입력 재활처방 임시 2002.10.28 이용언 (Multi Input)
     function InsertOrdList2(Cnt:Integer):Integer;
     //(추가. 2003.1.24 이용언) 재활처방 D/C 체크
     function RehordDc(Patno, Orddate, Ordcd, Ordseqno : String):Integer;
     //(추가. 2003.2.22 이용언) 제증명서 D/C 체크
     function CheckCerti(Patno, Orddate,Ordseqno : String):Integer;
     //(추가. 2003.05.02 이용언) TEST
     function PreOrderSelect2(sType1,sType2,sType3,sType4:String):Integer;
     // 급여구분 변경추가
     function UpdateInstype(sPatNo,sOrddate,sOrdcd,sInstype,sOrdDesc2,Editid,Editip:String):Integer;
     // 보험소견 변경추가
     function UpdateOrdtext(sType1,sPatNo,sOrddate,sOrdcd,sOrdseqno,sOrdtext,Editid,Editip:String):Integer;
     function UpdateConf(cnt: Integer): Integer;

     function NVENTT_S6(sInPatno,sInAdmDate:String):Integer;
     //치매약 처방시 1년이내 지정된 검사 체크. KimDaeYong 2017-05-16
     function ListDementExamcode(inPatno:string):Integer;
     //인터벤션수술실통계. KimDaeYong 2020-05-27
     function ListIntvenOrder(inFromdt, inTodate, inType, inPatno : string):Integer;

    end;

    // 기본처방
    HmdBasort = class
     sPatNo	 : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sOrdType	 : Variant;  // 처방형태
     sOrdKind	 : Variant;  // 처방종류
     sDiscYn	 : Variant;  // D/C여부
     sErYn  	 : Variant;  // 응급여부
     sPreactYn	 : Variant;  // 선실시여부
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sOrdCd 	 : Variant;  // 처방코드
     sOrdName	 : Variant;  // 처방명
     sPrnYn 	 : Variant;  // PRN 여부
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sOrdSite	 : Variant;  // 처방시행처
     sNurStat	 : Variant;  // (간호) 간호STATUS
     sRemark	 : Variant;  // 특기사항
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function Input1(Cnt:Integer):Integer;
     function Select1(Cnt:Integer):Integer;
    end;

    // 약처방
    HmdMedort = class
     sType1     : Variant;  // 조회구분
     sPatNo 	 : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sOrdType	 : Variant;  // 처방형태
     sOrdKind	 : Variant;  // 처방종류
     sDiscYn	 : Variant;  // D/C여부
     sErYn      : Variant;  // 응급여부
     sPreactYn	 : Variant;  // 선실시여부
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sOrddrID   : Variant;  // 처방의사ID
     sOrdCd 	 : Variant;  // 처방코드
     iDoseQty	 : Variant;  // 투여량(1회차)
     iDoseQty2  : Variant;  // 투여량(2회차)
     iDoseQty3	 : Variant;  // 투여량(3회차)
     iDoseQty4	 : Variant;  // 투여량(4회차)
     iDoseQty5	 : Variant;  // 투여량(5회차)
     sOrdUnit	 : Variant;  // 단위
     sUnitType	 : Variant;  // 선택단위구분(1:함량 2:규격 3:포장)
     iTotQty	 : Variant;  // 총량
     iCount 	 : Variant;  // 횟수
     iUseDay	 : Variant;  // 일수
     sDgijType	 : Variant;  // 약주사구분
     sDetRoute	 : Variant;  // 상세투여경로
     sMethodCd	 : Variant;  // 용법코드
     sMethdRmk	 : Variant;  // 용법비고
     sOldptTp	 : Variant;  // 지병 환자유형
     sInsType	 : Variant;  // 급여구분
     sSelfYn    : Variant;  // 외부약 여부
     sPrnYn 	 : Variant;  // PRN 여부
     sPowYn 	 : Variant;  // (경구) Powder여부
     sAstYn 	 : Variant;  // (주사) AST(After Skin Test) 여부
     sMixYn 	 : Variant;  // (주사) MIX여부
     sSelfijYn	 : Variant;  // (주사) 자가주사여부
     sInjtLoc	 : Variant;  // (주사) 주사장소
     iBundleNo	 : Variant;  // 약묶음번호
     sMainYn	 : Variant;  // 약묶음MAIN여부
     sDcordDr	 : Variant;  // 반납지시의
     sDcDate	 : Variant;  // 반납지시일자
     iOordDate	 : Variant;  // 근거처방일자
     iOordSeq	 : Variant;  // 근거처방순번
     sLtermRsn	 : Variant;  // 장기처방사유
     sInoutYn	 : Variant;  // 원내/원외구분
     sInResn	 : Variant;  // 원내처방사유
     sAltOrdcd	 : Variant;  // (약국) 변경된 처방코드
     iAltQty	 : Variant;  // (약국) 변경된 용량
     sAltUnit	 : Variant;  // (약국) 변경된 단위
     sAltMethd	 : Variant;  // (약국) 변경된 용법
     sAltDay	 : Variant;  // (약국) 변경된 일수
     sAltRsn	 : Variant;  // (약국) 변경된 사유
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sOrdSite	 : Variant;  // 처방시행처
     sNurStat	 : Variant;  // (간호) 간호STATUS
     sActInf	 : Variant;  // (간호) 수행정보
     sRcpStat	 : Variant;  // (원무) 원무STATUS-수납
     sJinjStat	 : Variant;  // (진지) 진지STATUS
     iDosNo 	 : Variant;  // (원무) 투약번호/원외처방전번호
     sRemark	 : Variant;  // 특기사항
     sOrdName   : Variant;  // 처방명
     sOrdDateS	 : Variant;  // 처방일자 시작일자
     sOrdDateE	 : Variant;  // 처방일자 종료일자
     sOrdCdI	 : Variant;  // 오더cd
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sLawcls    : Variant;  // 법적구분
     iQty       : Variant;  // 투여량
     sOpstm     : Variant;  // 수술시작시간
     sOproom    : Variant;  // 수술실
     sPatnm     : Variant;  // 환자명
     sAge       : Variant;  // 성별,나이
     sOrddesc1  : Variant;  // 처방편집1
     sOrddesc2  : Variant;  // 처방편집2
     sDiagname  : Variant;  // 진단명
     sDeptNm    : Variant;  // 부서명
     sBirdate   : Variant;  // 환자생일
     sAddr      : Variant;  // 주소
     sTotCnt    : Variant;  // 약 반납 총횟수
     sDrugkind  : Variant;  // 약품구분
     tOrddate   : Variant;  // 처방일자
     sPatName   : Variant;  // 환자명
     sSex       : Variant;  // 성별
     sBirtDate  : Variant;  // 생년월일
     sOrddesc   : Variant;  // 처방
     sOrddays   : Variant;  // 투약일수
     sQty       : Variant;  // 투여량
     sLicno     : Variant;  // 의사면허번호
     sDosno     : Variant;  // 투약번호
     sPrintcnt  : Variant;  // 처방전 출력 수
     sOrdtime   : Variant;  // 처방입력시각
     sDgPrtCnt  : Variant;  // 마약처방전 출력수
     sDrugName  : Variant;  // 약이름
     sCalYn     : Variant;  // 외용약 여부
     sDoseQty   : Variant;  // 투여량
     sPatcnt    : Variant;  // 총환자수
     sChemocnt  : Variant;  // 총항암제수
     sOrdSeqno	 : Variant;  // 처방순번
     sTotQty	 : Variant;  // 투여량(1회차)
     sCount 	 : Variant;  // 횟수
     sUseDay	 : Variant;  // 일수
     sMaxDay  	 : Variant;  //최대투여일수
     sMaxQty 	 : Variant;  //1일제한용량
     sInsOrdyn  : Variant;  //보험인정기준초과시 처방가능여부
     sMethod 	 : Variant;  //용법/용량
     sDisease	 : Variant;  //적응증
     sInsInfo	 : Variant;  //인증기준
     sAddInfoYn : Variant;  //보험인정기준 추가정보여부
     sMaxDay2   : Variant;  //최대투여일수(입원)
     sMaxQty2 	 : Variant;  //1일제한용량 (입원)
     sInOrdyn2  : Variant;  //보험인정기준초과시 처방가능여부(입원)
     sOrdSite2  : Variant;  //처방장소(O:외래 I:입원 A:전체)
     sCc        : Variant;
     sActdate   : Variant;
     // 약품 Multi 반납 추가용  2005.04.19 조일영
     sIodate    : Variant;  //반납일자
     sDrugcode  : Variant;  //처방코드
     sHosptype  : Variant;  //병원구분
     sIotype1   : Variant;  //구분1
     sIotype2   : Variant;  //구분2
     sIoqty     : Variant;  //1회량
     sIoto      : Variant;  //병동코드
     sOrdqty    : Variant;  //반납회수
     sConvunit  : Variant;  //단위
     sSrdate    : Variant;  //처방일자
     sSrno1     : Variant;  //투약번호
     sSrno2     : Variant;  //처방순번
     sRtnid     : Variant;  //반납자
     sProcdate  : Variant;  //입원일자
     sRejtOrd   : Variant;  //반납총량
     sOrdUnitI  : Variant;
     // 유사성분 중복 추가 2008.11.13 김송주
     sDupDate   : Variant; // 중복처방일
     // 복용약제, KimDaeYong 2016-06-21
     sGubun     : Variant;
     sEfccode   : Variant;
     sEfctext   : Variant;
     sEmpdate   : Variant;
     sRemday    : Variant;
     sChaname   : Variant;
     sAltqty    : Variant;

     function ListMedOrdName(sType1,sType2,sType3,sType4:String):Integer;
     function ListMedOrdMeth(Cnt:integer):Integer;
     function ListMedOrdMeth1(Cnt:integer):Integer;
     function ListOpMeth(sType1,sType2,sType3,sType4:String):Integer;
     function ListDrug2(sType1,sType2,sType3,sType4:String):Integer;
     function ReturnMedi(sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                         sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                         sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd:String):Integer;
     function SelectDsnrpJoin(sType1,sType2,sType3,sType4,sType5:String):Integer;
     // 약 반납횟수 조회
     function CountReturnMed(sType1,sType2,sType3:String;sType4:Integer):Integer;
     function ListUseDrug(sFromdate,sTodate,sDrugName,sDeptcd:String):Integer;
     // 출력된 처방전조회
     function ListPrintMedor(sType1,sType2,sType3,sType4:String):Integer;
     // 처방전회수
     function UpdatePrintCnt(Cnt:Integer):Integer;
     // 마약처방출력 count 증가 (update)
     function UpdateDgPrtCnt(Cnt:Integer):Integer;
     // 수술환자 DC 약품 조회(Intra Op 중)
     function SelOpDrug(sType1,sType2:String):Integer;
     // 병동별 약품집계
     function ListMedOrdSum(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
     // 병동별 누적약품 집계
     function ListDrugSum(sType1:String):Integer;
     // 환자처방일별 묶음번호 Max Value 조회
     function SelMaxBundleNo(Type1,PatNo,OrdDate:String):Integer;
     // 항암제사용조회
     function ListChemoDrug(sTodate,sType1,sType2:String):Integer;
     //환자+처방일+처방코드별 용량/일수 sum 조회
     function SelOrdQtyInfo(PatNo,OrdDate,OrdCd,PatSect,OrdKind,MedDate:String):Integer;
     // 주사실 약품집계
     function ListIjdaySum(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
     // 약처방 수정
     function UpdateOrder(Cnt:Integer):Integer;
     // PreMedicaton Sheet
     function GetPreMedi(Type1,Type2,Type3,Type4,Type5:String):Integer;
     // 추가. 2003.05.23 개인별 약품집계
     //function ListMedOrdPatSum(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
     // 수정 2005-04-20 조일영 특수약품 집계 추가
     function ListMedOrdPatSum(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8 :String):Integer;
     // 추가. 2005.04.19 조일영 퇴원약 Multi 반납
     function ReturnMultiMedi(Cnt:Integer):Integer;
     // 추가 2005-04-21 조일영 응급실용 약품 집계 추가
     function ListMedOrdPatSumER(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8 :String):Integer;
     // 추가. 2009-01-09 김송주 동일성분중복여부 추가(같은날) 수정 2010.04.21 김송주
     function HistoryAkDupOrdMainCdToday(sType1,sType2,sType3:String):Integer;
     // 추가. 2009-01-09 김송주 동일성분중복여부 추가(다른날) 수정 2010.04.21 김송주
     function HistoryAkDupOrdMainCdNotToday(sType1,sType2,sType3:String):Integer;
     // 추가. 2008-11-13 김송주 유사성분중복여부 추가
     function HistoryAkDupOrd(sType1,sType2,sType3:String):Integer;
     // 추가. 2009-01-08 김송주 당일 같은과 유사성분중복여부 추가(동일 처방내림)
     function HistoryAkDupOrdToday(sType1,sType2:String):Integer;
     // 추가. 2009-01-08 김송주 당일 같은과 유사성분중복여부 추가(다른 처방내림)
     function HistoryAkDupOrdTodayPre(sType1,sType2,sType3:String):Integer;
     // 추가. 2012-10-18 김송주 골다공증 최초처방일 조회
     function SelGoldagongInfo(PatNo:String):Integer;
     // 추가. 입원지시때 입원희망일에 있는 각 진료과의 원외약처방 체크, KimDaeYong 2015-03-06
     function ListMeddeptOdrug(sType1,sType2:String):Integer;
     // 복용약제, QPS(이지숙)요청, KimDaeYong 2016-06-21
     function ListDrug(inPatno,inOrddate:String):Integer;
   end;

    //원외처방 대체조제내역
    HmdMedalt = class
     sPatNo     : Variant;   // 환자번호
     sOrdDate   : Variant;   // 처방일
     iOrdSeqNo  : Variant;   // 처방순번
     iSeqNo     : Variant;   // 순번
     sAltOrdCd  : Variant;   // 변경된 처방코드
     sAltOrdNm  : Variant;   // 변경된 처방명
     sAltQty    : Variant;   // 변경된 용량
     sAltTQty   : Variant;   // 변경된 총용량
     sAltUnit   : Variant;   // 변경된 단위
     sAltMethd  : Variant;   // 변경된 용법
     sAltCount  : Variant;   // 변경된 횟수
     sAltDay    : Variant;   // 변경된 일수
     sAltRsn    : Variant;   // 변경된 사유
     sAltAbbr   : Variant;   // 용법코드약어
     sOrgOrdCd  : Variant;   // 원처방코드
     sOrgOrdNm  : Variant;   // 원처방명

     // 약처방 대체내역조회
     function ListAltOrd(PatNo,OrdDate:String):Integer;
   end;


    // 항균제처방
    HmdAntort = class
     sPatNo	    : Variant;  // 환자번호
     sDeptNm    : Variant;  // 진료과명
     sOrdDrNm	 : Variant;  // 처방의명
     sOrdName	 : Variant;  // 항균제명(처방명)
     sPatName	 : Variant;  // 환자명
     sOrdDate	 : Variant;  // 처방일자
     sOrdCd 	 : Variant;  // 처방코드
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sMedDept   : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sPatSect	 : Variant;  // 환자구분
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDiagName	 : Variant;  // 과진단명/질병명
     sEndDate	 : Variant;  // 투약종료일
     sBasisDx	 : Variant;  // 기저질환(Default : 진단명)
     sInfsymtm	 : Variant;  // 감염증
     sChkYn 	 : Variant;  // 원인균명 확인여부
     sFungusNm	 : Variant;  // 원인균명
     sSensAmc	 : Variant;  // 원인균의감수성AMPICILLIN
     sSensClot	 : Variant;  // 원인균의감수성CEPHALOTHIN
     sSensCpfx	 : Variant;  // 원인균의감수성CIPROFLOXACIN
     sSensOxa	 : Variant;  // 원인균의감수성OXACILLIN
     sSensGm	 : Variant;  // 원인균의감수성GENTAMICIN
     sSensEm	 : Variant;  // 원인균의감수성ERYTHROMYCIN
     sSensCtrx	 : Variant;  // 원인균의감수성Ceftriaxone
     sOrdRsncd	 : Variant;  // 처방사유
     sOrdRsndt	 : Variant;  // 처방사유내용
     sInfChrg	 : Variant;  // 제한감염담당자
     sConfDate	 : Variant;  // 확인일자
     sCofmDr	 : Variant;  // 확인의사
     sCofmPh	 : Variant;  // 확인약사
     sUcfmexDt	 : Variant;  // 미확인 시행일
     sRejtComt	 : Variant;  // 승인불가COMMENT
     sRejtResn	 : Variant;  // 승인불가사유코드
     sApprovYn	 : Variant;  // 승인여부(Y,N)
     sWardNo    : Variant;  // 병동
     sRoomNo    : Variant;  // 병실
     iSeqNo	    : Variant;  // 순번
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일
     sSex       : Variant;
     sBirtdate  : Variant;
     sOrdunit   : Variant;

     // 제한항균제 사유 입력
     function InsertAntOrd(PatNo,OrdDate,OrdCd,MedDate,MedDept,ChaDr,OrdDr,PatSect,
                           DiagCd,DiagName,BasisDx,Infsymtm,ChkYn,FungusNm,SensAmc,
                           SensClot,SensCpfx,SensOxa,SensGm,SensEm,SensCtrx,
                           OrdRsncd,OrdRsndt,EditId,EditIp:String):Integer;
     // 제한항균제 승인내역 입력
     function ConfirmAntOrd(PatNo,OrdDate,OrdCd,Enddate,CofmDate,CofmDr,UcfmexDt,
                            Rejtcomt,Rejtresn,Approvyn,EditId,EditIp:String;
                            SeqNo:Integer):Integer;
     // 제한항균제 의뢰내역 List 조회 ('1'-미확인, '2'-확인일별)
     function ListAntOrd(Type1,ConfDate,Locate:String):Integer;

     // 환자 입원기간중 동일항균제 의뢰내역 조회 (환자번호+입원일자+처방코드)
     function HistoryAntOrd(PatNo,AdmDate,OrdCd:String):Integer;
     // 제한항균제 의뢰내역 List 조회 ('1'-미확인, '2'-확인일별)
     function ListAntOrd2(Type1,Type2,Type3,Type4,Locate:String):Integer;


    end;

    // 검사처방
    HmdExmort = class
     sPatNo 	 : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번(Integer)
     sOrdSeqno	 : Variant;  // 처방순번(String)
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sOrdType	 : Variant;  // 처방형태
     sOrdKind	 : Variant;  // 처방종류
     sDiscYn	 : Variant;  // D/C여부
     sErYn  	 : Variant;  // 응급여부
     sPreactYn	 : Variant;  // 선실시여부
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sOrdCd 	 : Variant;  // 처방코드
     sPrnYn 	 : Variant;  // PRN 여부
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDiagName	 : Variant;  // 과진단명/질병명
     iOordDate	 : Variant;  // 근거처방일자
     iOordSeq	 : Variant;  // 근거처방순번
     sOldptTp	 : Variant;  // 지병 환자유형
     sInsType	 : Variant;  // 급여구분
     iQty   	 : Variant;  // (진방) 수량
     sPortYn	 : Variant;  // (진방) PORTABLE(이동)여부
     sFcrYn 	 : Variant;  // (진방) FCR검사여부
     sDruginYn	 : Variant;  // (검체) 항생제투여여부
     sOrdText	 : Variant;  // (진방) 임상소견(필수입력여부관리시사용)
     iIsoQty	 : Variant;  // (핵의학체내) 동위원소투여량
     sSpcCode1	 : Variant;  // (검체) 검체코드1
     sSpcCode2	 : Variant;  // (검체) 검체코드2
     sSpcId1	 : Variant;  // (검체) 검체번호1
     sSpcId2	 : Variant;  // (검체) 검체번호2
     sHopeRoom	 : Variant;  // 검사희망검사실
     sHopeDate	 : Variant;  // 검사희망일시
     sNurStat	 : Variant;  // (간호) 간호STATUS
     sHopeDr	 : Variant;  // 검사희망의사
     sRcpStat	 : Variant;  // (원무) 원무STATUS-수납
     sJinjStat	 : Variant;  // (진지) 진지STATUS
     sCollDate	 : Variant;  // (진지) 채혈일자
     sRsvDate	 : Variant;  // (진지) 예약일자
     sAcptDate	 : Variant;  // (진지) 접수일자
     sExecDate	 : Variant;  // (진지) 실시일자
     sRsltinDt	 : Variant;  // (진지) 결과입력일자
     sReadDate	 : Variant;  // (진지) 판독일자
     sReadDr	 : Variant;  // (진지) 판독의사
     sRsltDate	 : Variant;  // (진지) 결과보고일자
     sCofmDr	 : Variant;  // (진지) 결과보고의사
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sOrdSite	 : Variant;  // 처방시행처
     sRemark	 : Variant;  // 특기사항
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sSlipcd    : Variant;  // Slip Code
     sSlipnm    : Variant;  // Slip Name
     sSlip1nm   : Variant;  // Slip Group Name
     sOrdname   : Variant;  // 처방명
     sRslttype  : Variant;  // 검사결과Type
     sRsl       : Variant;  // 검사값
     sRslCalc   : Variant;  // 검사결과 계산
     sRsltupp   : Variant;  // 검사 Max
     sRsltlow   : Variant;  // 검사 Min
     sExamCode  : Variant;  // 검사항목
     sReadDrNm  : Variant;  // 판독의사명
     tOrddate   : Variant;  // 처방일자
     sPatname   : Variant;  // 환자명
     sSex       : Variant;  // 성별
     sBirtdate  : Variant;  // 생일
     sOrddesc   : Variant;  // 처방명
     sProcstat  : Variant;  // 처방상태
     sResult    : Variant;  // 결과
     sGrossTx   : Variant;  // GrossTx
     sRsltunit  : Variant;  // 결과 단위
     sPathNo    : Variant;  // 병리번호
     iExmCnt    : Variant; //투여일수Sum
     sExmODay   : Variant; //최대투여일수(외래)
     sExmOQty   : Variant; //1일제한용량 (외래)
     sInsOrdyn  : Variant; //보험인정기준초과시 처방가능여부(외래)
     sInsInfo   : Variant; //인정기준
     sOrdSite2  : Variant; //처방장소(O:외래 I:입원 A:전체)
     sExmIDay   : Variant; //최대투여일수(입원)
     sExmIQty   : Variant; //1일제한용량 (입원)
     sInOrdyn2  : Variant; //보험인정기준초과시 처방가능여부(입원)
     //(추가. 2002.11.22 이용언)
     sTubenm    : Variant; //검체 Tube 이름
     //(추가. 2003.05.26 이용언)
     sZipcd 	 : Variant;  // 우편번호
     sAddress	 : Variant;  // 주소
     sZpAddress : Variant;  // 주소2

      // 이선규추가 03.06.05
     v_Rsvdate  : Variant;
     v_Orddesc1 : Variant;
     v_Meddept  : Variant;
     v_Portyn   : Variant;

     //(추가. 2003.09.16 최태성  pacs open 적용)
     sPacsimyn : Variant; //pacs image 존재여부
     sAccessno : Variant; //환자번호+처방일자+처방순번

     //(추가. 2003.11.20 최태성  판독의표기 적용)
     sCfmdr    : Variant;  //제1판독의
     sReaddr2  : Variant;  //제2판독의
     sReaddr1  : Variant;  //특진판독의
     sOrdinf   : Variant;  //처방의 정보
     sExecid   : Variant;  //검사자
     sSpcname  : Variant;
     sSpccode  : Variant;
     //추가
     sReaddrnm2 : Variant;  //판독의2(SR=판독의1), KimDaeYong 2019-12-18


     function SelectExmortJoin(sType1,sType2,sType3,sType4,sType5:String):Integer;
     function ListUseExam(Fromdate,Todate,OrdCode:String):Integer;
     // 퇴원예정일자 이후로 예약잡힌 검사조회
     function ListDschExam(sType1,sType2,sType3,sType4:String):Integer;
     //일자가져오기
     function ListDay(sType1,sPatno,sFromDate,sToDate:String):Integer;
     //환자 검사처방 보험인정기준, 기간별 처방횟수 조회
     function SelExmCntInfo(PatNo,OrdDate,OrdCd,PatSect,OrdKind:String):Integer;
     //추가. 2002.11.14 감염검사
     function CheckInfrptExam(Patno, Orddate,Ordcd : String):Integer;
     // 특정 검사 결과 리스트 조회.(2002.11.14 - 이용언 -)
     function SpecialTest(Type1, Type2, Type3, Type4, Type5: String; Seqno : Integer):Integer;
     //(추가. 2002.11.21 이용언) 검사물 대장
     function LabExamList(Type1, Type2 : String):Integer;
     //(추가. 2003.04.16 이용언) 종합검증결과
     function SearchExamAll(PatNo : String): Integer;

     function ListExamSlip(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8:String;lseq:Integer):Integer;

     //(추가. 2003.05.2 이용언) sGetFldvar
     function ListExamSlip2(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9:String;lseq:Integer):Integer;
     //(추가. 2003.05.3 이용언) 불안장애 클리닉
     function ListSpExamList(sType1,sType2 :String):Integer;
     //(추가. 2003.05.26이용언) Pap Smear
     function ListPapExamList(sType1,sType2, sType3, sType4 :String):Integer;
     // 이선규추가 (03.06.05)
     function rsv_exam(sPatno,sAdmdate,sOrddate : String) : integer;
     //(추가. 2004.04.20 조일영) 검사결과의 진료과별 조회기능 추가
     function ListExamSlipDept(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,sType10:String;lseq:Integer):Integer;
     // 추가. 골밀도검사 1년안의 검사일자 조회
     function SelectGolmildoExecDate(sPatno:String) : Integer;
    end;

    // 처치/수술/마취/재료처방
    HmdTrtort = class
     sType1      : Variant;  // 조건 1
     sType2      : Variant;  // 조건 2
     sPatNo	     : Variant;  // 환자번호
     sPatName    : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sOrdType	 : Variant;  // 처방형태
     sOrdKind	 : Variant;  // 처방종류
     sDiscYn	 : Variant;  // D/C여부
     sErYn  	 : Variant;  // 응급여부
     sPreactYn	 : Variant;  // 선실시여부
     sMedDept	 : Variant;  // 진료과
     sChaDr	     : Variant;  // 주치의사
     sOrdDr  	 : Variant;  // 처방의사
     sOrdDrNm  	 : Variant;  // 처방의사명
     sOrdCd	     : Variant;  // 처방코드
     sOpDate	 : Variant;  // 수술일자
     iOpSeqno	 : Variant;  // 수술순번
     sOpSeqNo	 : Variant;  // 수술순번(처치/재료입력화면)
     sOpdopYn	 : Variant;  // 외래수술여부
     sMainOp	 : Variant;  // 주수술
     sReopYn	 : Variant;  // 재수술여부
     sNightYn	 : Variant;  // 심야가산적용여부
     sSpcdrYn	 : Variant;  // 지정의사여부
     sExecDr	 : Variant;  // 시행의사(집도의/마취의)
     sPrnYn 	 : Variant;  // PRN 여부
     iQty   	 : Variant;  // 수량
     iCount 	 : Variant;  // 횟수
     sOrdUnit	 : Variant;  // 단위
     sAnetHmm	 : Variant;  // 마취시간(분)
     sOldptTp	 : Variant;  // 지병 환자유형
     sInsType	 : Variant;  // 급여구분
     sDcordDr	 : Variant;  // 반납지시의
     sDcDate	 : Variant;  // 반납지시일자
     iOordDate	 : Variant;  // 근거처방일자
     iOordSeq	 : Variant;  // 근거처방순번
     sWardNo  	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sOrdSite	 : Variant;  // 처방시행처
     sNurStat	 : Variant;  // (간호) 간호STATUS
     sRcpStat	 : Variant;  // (원무) 원무STATUS-수납
     sRemark	 : Variant;  // 특기사항
     sTeeUplt	 : Variant;  // 치열(상좌)
     sTeeUprt	 : Variant;  // 치열(상우)
     sTeeDwlt	 : Variant;  // 치열(하좌)
     sTeeDwrt	 : Variant;  // 치열(하우)
     sEditCd    : Variant;  // 수정자 Code
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일
     sOrdName   : Variant;  // 처방명
     sOpstm     : Variant;  // 수술시작시간
     sOproom    : Variant;  // 수술실
     sPatnm     : Variant;  // 환자명
     sAge       : Variant;  // 성별,나이
     sSpcDr     : Variant;  //
     sSlipcd    : Variant;  // SLIP 코드
     sMedtime   : Variant;  // 응급실도착시간
     sNightyp   : Variant;  // 야간가산여부
     sRcpdate   : Variant;  // 수납일자
     sBckFlag   : Variant;  // 보험심사여부
     sInputTyp  : Variant;  // 입력구분(처치/재료 필수입력항목:3-사용량,4-시간(분),5-횟수)
     sOrddesc1  : Variant;  // 처방편집1
     sOrddesc2  : Variant;  // 처방편집2
     sQty       : Variant;  // 수량
     sOrdTime   : Variant;  // 처방시각
     sRtnSum    : Variant;
     // 이선규 추가
     sUsesite   : Variant; // 사용부서
     // dressing team 여부 추가
     sDrteamYn  : Variant; //2010.06.11
     //케어캠프용 변수
     sProdcode  : Variant;  //물품코드 추가. KYA. 20150102.
     sProdsize  : Variant;  //규격 추가. KYA. 20150102.
     sProdcode1 : Variant;  //물품코드 추가. KYA. 20150108.
     sExecdate  : Variant;  //실시일자추가.kya.20160205.
     sKitset    : Variant;  //안전재고 추가.kya.20160511.
     sDlvrnumber: Variant;  //바코드 추가.kya.20160511.
     sInstype2  : Variant;  //수가보험구분.20160823.kya.
     sAnethDr2  : Variant;  //마취의.20170803.kya.

     function ListTrt(sType1,sType2,sType3,sType4:String):Integer;
     function ListOpTrt(sType1,sType2,sType3,sType4:String):Integer;
     function SelTrtorL4(sType1,sType2,sType3,sType4:String):Integer;
     function InsertTrtorI2(cnt:Integer):Integer;
     function DeleteTrtor(sType1, sType2, sType3, sType4: string;iOrdSeqno: integer):Integer;
     function UpdateTrtor(sSeqNo,sOrdDate,sPatNo,sQty,sCount,sAnethmm,sTeeuplt,sTeeuprt,sTeedwlt,sTeedwrt,
                          sIns,sNight,sOrdDesc1,sRemark,sSpcdrYn,sExecDr,sDrteamYn,sExecdate:String):Integer;
     // 수술날짜의 처방편집 가져오기 2008.02.16 김송주 추가
     function ListTrtDesc(sType1,sType2:String):Integer;
     //고압산소치료환자명단. KimDaeYong 2020-03-02
     function ListTrt8(inOrddate:String):Integer;
    end;

    // 수혈처방
    HmdBldort = class
     sPatNo	    : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sOrdType	 : Variant;  // 처방형태
     sOrdKind	 : Variant;  // 처방종류
     sDiscYn	 : Variant;  // D/C여부
     sErYn	    : Variant;  // 응급여부
     sPreactYn	 : Variant;  // 선실시여부
     sMedDept	 : Variant;  // 진료과
     sChaDr	    : Variant;  // 주치의사
     sOrdDr	    : Variant;  // 처방의사
     sOrdCd	    : Variant;  // 처방코드
     iQty	    : Variant;  // 수량
     sUseCode	 : Variant;  // 사용용도
     sOpexDate	 : Variant;  // 수술예정일자
     sFiltYn	 : Variant;  // FILTER여부
     sAstYn	    : Variant;  // (주사) AST(After Skin Test) 여부
     sTrselfYn	 : Variant;  // 자가수혈여부
     sDonrYn	 : Variant;  // 헌혈자유무
     sIrradYn	 : Variant;  // IRRADIATION 여부
     sOldptTp	 : Variant;  // 지병 환자유형
     sInsType	 : Variant;  // 급여구분
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sOrdSite	 : Variant;  // 처방시행처
     sNurStat	 : Variant;  // (간호) 간호STATUS
     sRcpStat	 : Variant;  // (원무) 원무STATUS-수납
     sJinjStat	 : Variant;  // (진지) 진지STATUS
     sRemark	 : Variant;  // 특기사항
     iOutQty	 : Variant;  // (혈액은행) 불출수량
     iRetnQty	 : Variant;  // (혈액은행) 반납수량
     iLosQty	 : Variant;  // (혈액은행) 폐기수량
     sRetnYn	 : Variant;  // 반납/환불여부
     sOrdDrNm	 : Variant;  // 처방의사명
     sOrdName	 : Variant;  // 처방코드명
     sJstatNm	 : Variant;  // 진행상태
     sOrdStNm	 : Variant;  // 발행처명
     sOrdDesc1	 : Variant;  // 처방상세1
     sOrdDesc2	 : Variant;  // 처방상세2
     sBldNrs1   : Variant;  // 수혈자(시작)
     sBldNrs2   : Variant;  // 수혈자(종료)
     sRemark2   : Variant;  // 특기사항2
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     //(추가. 2002.11.26 이용언)
     sBldsNrs1  : Variant;  // 수혈자1(시작)
     sBldsNrs2  : Variant;  // 수혈자2(시작)
     sBldeNrs1  : Variant;  // 수혈자1(죵료)
     sBldeNrs2  : Variant;  // 수혈자2(종료)
     sRemark1   : Variant;  // 활력징후(시작)
     sStat1     : Variant;
     sStat2     : Variant;
     sStat3     : Variant;
     sStat4     : Variant;
     sStat5     : Variant;
     sStat6     : Variant;
     sStat7     : Variant;
     sStat8     : Variant;
     sPredrug   : Variant;
     sGttmin    : Variant;
     sPatnm     : Variant;
     sDelitime  : Variant;
     sRemark3   : Variant;  // 수혈후 15분 활력징후

     // 환자에 대한 수혈처방 이력 List 조회
     function ListBloodOrd(PatNo,Locate:String):Integer;
     function SelectBldOrt(sType1,PatNo,Orddate,Ordseqno:String):Integer;
     // 수혈기록내용 조회
     function SelectBloodt(PatNo,sType1,sType2: String) :Integer;
     // 수혈기록 입력
     function InsertBloodt(sType1,sPatNo,sOrdDate,sOrdSeqNo,sSeqno,sOrdDate2,
                           sOrdSeqNo2,sSeqNo2,sActDate,sBldNo,sRhABO,sStartTm,
                           sEndTm,sRemark,sEditId,sEditIp,sBldNrs1,sBldNrs2,
                           sRemark2:String):Integer;
     //(추가. 2002.11.26 이용언) 수혈기록지 수정
     function InsertBloodt2(sType1,sPatNo,sOrdDate,sOrdSeqNo,sSeqNo,sOrdDate2,
                            sOrdSeqNo2,sSeqNo2,sActDate,sBldNo,sRhABO,
                            sStartTm,sBldSNrs1,sBldSNrs2,sRemark1,sStat1,sStat2,
                            sEndTm,sBldENrs1,sBldENrs2,sRemark2, sStat3,sStat4,
                            sPredrug,sGttmin,sEditId,sEditIp,sDelitime,sRemark3:String):Integer;
     function BloodtPrint(WardNo, sType1, sType2: String): Integer;

    end;

    // 재활처방
    HmdRehort = class
     sPatNo	 : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sSlipCd     : Variant;  // Slip코드
     sDiscYn	 : Variant;  // D/C여부
     sErYn  	 : Variant;  // 응급여부
     sMedDept 	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sDiagCd	 : Variant;  // 진단/질환코드
     sDiagName	 : Variant;  // 진단명/질병명
     sOrdCd 	 : Variant;  // 처방코드
     sTerms 	 : Variant;  // 기간
     iCount 	 : Variant;  // 횟수
     iRsvCnt     : Variant;  // 예약일수
     iExeCnt     : Variant;  // 실시일수
     sRcpStat    : Variant;  // 원무STATUS - 수납
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sNurStat	 : Variant;  // (간호) 간호STATUS
     sRemark	 : Variant;  // 특기사항
     sRsvDate    : Variant;  // 예약일자
     sFromDate   : Variant;  // From Date
     sToDate     : Variant;  // To Date
     sEndDate    : Variant;  // 종료일자
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sOrdName   : Variant;  // 처방명
     sPartNm    : Variant;  // 세부사항명
     sGenDrNm   : Variant;  // 오더의사명
     sOrdText   : Variant;  // 임상소견/지시내용
     sMedTime   : Variant;  // 응급실도착시간
     sOldPttp   : Variant;  // 환자지병유형
     sSiteCode  : Variant;  // 치료부위
     sDayCnt    : Variant;  // 1일횟수
     sDays      : Variant;  // 치료일수
     sMedYn     : Variant;  // 진료여부
     sOrdDesc1  : Variant;  // 처방상세1
     sOrdDesc2  : Variant;  // 처방상세2

     // 재활 처방 조회
     function ListReh(sType1,sType2,sType3:String; iSeqno:Integer):Integer;
     // 재활 처방 조회 변경 임시
     function ListReh2(sType1,sType2,sType3,sType4:String):Integer;
     // 재활처방 D/c처리
     function UpdateDC(sType1, SType2 : String; iLong1 : Integer):Integer;
     //환자 재활치료진행여부 조회
     function PatRehInfo(PatNo,MedDate,MedDept:String):Integer;
     // 재활처방등록 (재활처방기본+상세)
     function InsertRehOrd(Cnt:Integer):Integer;
     // 재활 처방 변경 임시 테이블 등록.(재활처방 테이블)
     function InsertRehOrd2(Cnt:Integer):Integer;
    end;

    // 재활치료현황
    HmdRehrst = class
    end;

    // 컨설트기록
    HmdConslt = class
     sPatNo	 : Variant;  // 환자번호
     sPatName	 : Variant;  // 환자Name
     sMDeptNm 	 : Variant;  // 진료과Name
     sCDeptNm 	 : Variant;  // 의뢰과Name
     sOrddrNm 	 : Variant;  // 처방의Name
     sConsDrNm	 : Variant;  // 희망의Name
     sRespDrNm	 : Variant;  // 회신의Name
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sMedDate	 : Variant;  // 진료일자/입원일자
     sMedTime	 : Variant;  // 외래예약일시(응급실도착일시)
     sPatSect	 : Variant;  // 환자구분
     sPatSite	 : Variant;  // 원무환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sDiscYn	 : Variant;  // D/C여부
     sErYn   	 : Variant;  // 응급여부
     sMedDept	 : Variant;  // 진료과
     sChaDr	    : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sOrdCd  	 : Variant;  // 처방코드
     sCallYn	 : Variant;  // 왕진여부
     sConsDept	 : Variant;  // 의뢰부서
     sConsDr  	 : Variant;  // 의뢰의사
     sConsctNt	 : Variant;  // 의뢰내용
     sRespDr	 : Variant;  // 회신의사
     sRespDate	 : Variant;  // 회신일자
     sRespctNt	 : Variant;  // 회신내용1
     sRespctN2	 : Variant;  // 회신내용2
     sWardNo  	 : Variant;  // 병동번호
     sDmdietYn	 : Variant;  // 당뇨조식여부
     sRoomNo	 : Variant;  // 병실번호
     sRcpStat	 : Variant;  // (원무) 원무STATUS-수납
     sMedYn	    : Variant;  // 진료여부
     sAge       : Variant;  // 나이
     sSex       : Variant;  // 성별
     sHopeDate  : Variant;  // 희망일
     sOrdName   : Variant;  // 처방명
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sConsType  : Variant;  // 컨설트 구분
     sSlipCd    : Variant;  // SlipCd
     sRspcnt    : Variant;  // 실시수
     sNocnt     : Variant;  // 미실시수
     sCount     : Variant;  // 합계
     sBirtdate  : Variant;  // 생년월일
     sDeptnm    : Variant;  // 실시수
     sResptype  : Variant;
     //(추가)
     sChadrnm   : Variant;
     sResno1    : Variant;
     sResno2    : Variant;

     //2003.07.21 추가
     sOpenyn    : Variant;  // 컨설트 개봉여부
     //2003.07.24 추가
     sDeptcd    : Variant;  // 컨설트 부서코드
     sChrNm     : Variant;  // 컨설트 의사명
     sCnt1      : Variant;  // 컨설트 미개봉건수
     sCnt2      : Variant;  // 컨설트 미회신건수
     //2004.02.16 추가
     sFstmedty  : Variant;  // 1:초진 2:재진 3:신환 4:재초진
     //2004.10.01 추가
     sSocpbl    : Variant;  // 심리사회적문제
     sEcopbl    : Variant;  // 경제적문제
     sVolcon    : Variant;  // 지역사회자원연결
     sRehpbl    : Variant;  // 재활문제
     sDschamt   : Variant;  // 퇴원비
     sExamamt   : Variant;  // 검사비
     sTrtamt    : Variant;  // 치료비
     sSSDiag    : Variant;
     sSSTrt     : Variant;
     sHODiag    : Variant;
     sHOTrt     : Variant;
     sHOOp      : Variant;
     sChemo     : Variant;
     sRadio     : Variant;
     sOthertrt  : Variant;
     sPhypain   : Variant;
     sEmoprob   : Variant;
     sSoprob    : Variant;
     sSpprob    : Variant;
     sMonths    : Variant;
     sFutrt     : Variant;
     sPhycomm   : Variant;
     sReqdate   : Variant;
     //-- 추가 2010.08.18
     sMeddept2  : Variant;

     sSignData     : Variant;              // SONGLIM_THOMA  수정
     sSerialNo     : Variant;
     sSubjectDN    : Variant;

     //컨설트의뢰내역 Insert (컨설트기록Insert / 기본처방Insert / Noti Insert)
     {function RequestConsult(sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,
                             SlipCd,ErYn,MedDept,ChaDr,OrdCd,CallYn,
                             ConsDept,ConsDr,ConsCtnt,WardNo,RoomNo,NtType,
                             NtTitle,NtAnswer,DmdietYn,HopeDate,OrdDesc1,MedTime,
                             MedYn,NtText,OrdDesc2,ConsType,Socpbl,Ecopbl,
                             Volcon,Rehpbl,Dschamt,Examamt,Trtamt,EditId,
                             EditIp:String):Integer;}
     function RequestConsult(sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,
                             SlipCd,ErYn,MedDept,ChaDr,OrdCd,CallYn,
                             ConsDept,ConsDr,ConsCtnt,WardNo,RoomNo,NtType,
                             NtTitle,NtAnswer,DmdietYn,HopeDate,OrdDesc1,MedTime,
                             MedYn,NtText,OrdDesc2,ConsType,Socpbl,Ecopbl,
                             Volcon,Rehpbl,Dschamt,Examamt,Trtamt,SSDiag,
                             SSTrt,HODiag,HOTrt,HOOp,Chemo,Radio,
                             OtherTrt,PhyPain,EmoProb,SoProb,SpProb,Months,
                             FuTrt,PhyComm,EditId,EditIp,Orddr,
                             xSignData,xSerialNo,xSubjectDN:String):Integer;

     //컨설트회신내역 Update (컨설트기록 Update / Noti Insert)
     function ResponseConsult(PatNo,OrdDate,RespCtnt,RespCtn2,NtRecvId,NtType,NtTitle,
                              NtErYn,NtAnswer,NtText,EditId,EditIp:String;
                              OrdSeqNo:Integer;xSignData,xSerialNo,xSubjectDN:String):Integer;

     //컨설트의뢰 취소 (컨설트기록 Delete / Noti Insert)
     function CancelConsult(PatNo,OrdDate,NtContent,NtRecvId,NtType,
                            NtTitle,NtErYn,NtAnswer,NtDeptCd,EditId,EditIp:String;
                            OrdSeqNo:Integer):Integer;
     //환자별 컨설트의뢰/회신내용 조회 (환자번호+의뢰일+순번)
     function SelConsultInfo(PatNo,OrdDate:String; OrdSeqNo:Integer):Integer;

     //조건별 컨설트의뢰내역 List 조회(MD_CONSL_L1)
     function ListConsult(Type1,DrDept,Type2,RespDate,Locate,Type3,Type4:String):Integer;

     //조건별 컨설트의뢰내역 List 조회(MD_CONSL_L8)
     function ListConsult8(Type1,DrDept,Type2,RespDate,ToDate,Locate,Type3,Type4,Type5:String):Integer;

     //환자별 컨설트의뢰내역(협진의뢰중) List 조회
     function PatConsultInfo(PatNo,MedDate,MedDept,Locate:String):Integer;
     // 환자컨설트정보 조회
     function PatConsultInfo1(PatNo,MedDate,MedDept,Locate,Type1,Type2:String):Integer;
     // 환자컨설트정보 조회2
     function PatConsultInfo2(PatNo,MedDate,MedDept,Locate,Type1,Type2,sToDate,sFromDate:String):Integer;
     //컨설트 희망의 Updae
     function ConsDrChange(Cnt:Integer):Integer;
     //컨설트의뢰내역 update (컨설트의뢰내용update/noti insert)
     function ConsChange(Patno,OrdDate,ConsDept,ConsCtnt,NtType,ConsDr,NtTitle,Eryn,
                         NtAnswer,NtText,EditId,EditIp:String;OrdSeqNo:Integer;
                         xSignData,xSerialNo,xSubjectDN:string):Integer;
     //컨설트의뢰내역 update (영양과 희망일시update)
     function ConsChange1(Patno,OrdDate,ConsDept,HopeDate,NtType,ConsDr,NtTitle,Eryn,
                          NtAnswer,NtText,EditId,EditIp:String;OrdSeqNo:Integer):Integer;
     //영양과 컨설트 전체
     function SelFndConsl(sType1, sType2 : String) : Integer;
     //컨설트처방 상세정보 SELECT
     function ConsultDetail(PatNo,OrdDate,Locate:String;SeqNo:Integer):Integer;
        //과별 컨설트 통계 조회
     function DeptConslt(Gubun,Fromdt,Todate,Locate,Patsect,Type1 : String ):Integer;
     //과별 컨설트 통계 조회
     function DeptConsltDetail(Gubun,Type1,Fromdt,Todate,Meddept,Patsect,Locate :string ):Integer;
     //컨설트 회신불가 Updae
     function ResptypeChange(Cnt:Integer):Integer;
     //과별 제한 항생제 Consult 통계
     function SelAntConslt(Gubun,Fromdt,Todate,Locate,Type1 : String ):Integer;
     //과별 제한 항생제 Consult 통계 detail
     function AntConsltDetail(Gubun,Type1,Fromdt,Todate,Meddept,Locate :string ):Integer;

     //컨설트 의뢰 개봉여부 Updae (2003.07.21)
     function ConsOpenynChange(PatNo,OrdDate, EditId, EditIp:String; OrdSeqNo:Integer):Integer;

     //컨설트 의뢰,회신 현황 select(2003.07.24)
     function ListConsult10(Flag, md_userid, OrdDate, ToDate : String):Integer;

     //감염전문관리료(AH300II) 여부 체크, 보험과(백미라)요청, KimDaeYong 2014-12-12
     function ListConsult11(inPatno, inMeddate:String):Integer;

    end;

    // 입원예약
    HmdAdmret = class
     sPatNo	    : Variant;  // 환자번호
     sPatName	 : Variant;  // 환자명
     sSex    	 : Variant;  // 성별
     sBirtDate	 : Variant;  // 생년월일
     sDeptNm	 : Variant;  // 진료과명
     sChaDrNm   : Variant;  // 주치의명
     sGenDrNm	 : Variant;  // 담당의명
     sAdmSchdt	 : Variant;  // 입원예정일
     sMedDept	 : Variant;  // 입원진료과
     sChaDr  	 : Variant;  // 주치의사
     sAdmIcdcd	 : Variant;  // 입원시진단코드
     sAdmDiag	 : Variant;  // 입원시진단명
     sDietKind	 : Variant;  // 입원시 개시식사종류
     sGenDr	    : Variant;  // 담당의사
     sIsolatYn	 : Variant;  // 격리병실여부
     sErYn	    : Variant;  // 응급여부
     sDrgYn	    : Variant;  // DRG적용여부
     sDrgCode	 : Variant;  // DRG코드
     iStayDays	 : Variant;  // 예상재원일수
     sOpexDate	 : Variant;  // 수술예정일자
     sAcptDate	 : Variant;  // (원무) 접수일자
     iAcPtno	 : Variant;  // (원무) 접수순번
     sRcpStat	 : Variant;  // (원무) 원무STATUS-수납
     sRejtCaus	 : Variant;  // (원무) 취소사유
     sAdmDate	 : Variant;  // (원무) 입원일자
     sRemark	 : Variant;  // 특기사항
     sResult	 : Variant;  // 입원지시처리결과
     sOrdDate   : Variant;  // 처방일자
     sOrdDr     : Variant;  // 처방의사
     sDscYn     : Variant;  // DSC 여부
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sSpcDr	    : Variant;  // 지정의
     sChartYn	 : Variant;  // 차트대출여부('O':외래,'I':입원,'A':외래+입원)
     sReqWard   : Variant;
     sPatType   : Variant;
     sUnspccd   : Variant;
     //정신과입원유형,KimDaeYong 2016-10-17
     sNpipcd    : Variant;
     sNpipetc   : Variant;
     //정신과 수면다원검사여부. KimDaeYong 2018-07-19
     sNpslpyn   : Variant;

     //기간별(입원예정일:from~to) 입원예약환자 List SELECT
     function ListAdmReserv(sType1,sType2,FromDate,ToDate,Locate:String):Integer;
     // 퇴원환자의 재입원예약일 SELECT
     function ListReAdmDate(PatNo,DschExdt:String):Integer;
     //입원지시내역 저장 (입원예약 Insert / 기본처방 Insert)
     function InsertAdmReserv(sType1,sType2,PatNo,AdmschDt,MedDept,ChaDr,AdmIcdCd,AdmDiag,
                                   DietAdm,GenDr,IsolatYn,ErYn,DrgYn,OpexDate,
                                   Remark,MedDate,OrdDept,OrdChaDr,Patsect,WardNo,
                                   RoomNo,OrdGrp,SlipCd,OrdCd,OrdSite,OrdDesc1,MedTime,
                                   MedYn,SpcDr,ChartYn,Editid,Editip,DscYn,AdmOldDate,HopeWard,PatType,UnSpccd,
                                   sNpipcd,sNpipetc,sNpslpyn:String;
                                   iStayDays:Integer):Integer;

     //입원지시내역 조회
     function AdmschdSelect(Type1,Type2,Type3:String):Integer;
     //입원지시 취소
     function AdmschdDelete(PatNo,Admschdt,OrdDate,OrdDr:String):Integer;
    end;

    // 통합검사결과
    HmdResult = class
     sPatNo 	 : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sExamCode	 : Variant;  // 검사항목코드
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sRslt1 	 : Variant;  // 검사결과1(수치)
     sRslt2 	 : Variant;  // 검사결과2(판독)
     iRsltUpp	 : Variant;  // 검사결과 상한값
     iRsltLow	 : Variant;  // 검사결과 하한값
     sRemark	 : Variant;  // 특기사항
     sExecDate	 : Variant;  // 실시일자
     sRsltDate	 : Variant;  // 보고일자
     sReptDr	 : Variant;  // 보고의사
     sReadDate	 : Variant;  // 판독일자
     sReadDr	 : Variant;  // 판독의사
     sChngDate	 : Variant;  // 결과최종변경일
     sRsltType	 : Variant;  // 검사결과TYPE
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sOrdName   : Variant;  // 처방명
     sStrOrdDate: Variant;  // 처방시작일자
     sEndOrdDate: Variant;  // 처방종료일자
     sRsltUpp	 : Variant;  // 검사결과 상한값
     sRsltLow	 : Variant;  // 검사결과 하한값
     sExamCodeI : Variant;  // 검사항목 비교코드
     sSlipcd  	 : Variant;  // SLIP코드
     sRsltunit	 : Variant;  // 검사결과 단위
     sExamtext	 : Variant;  // 검사특기사항
     sReptdrnm	 : Variant;  // 보고의사명
     sReaddrnm	 : Variant;  // 판독의사명
     sTypeName	 : Variant;  // 검사결과Type('N'=수치,'T'=판독)
     sExamName	 : Variant;  // 검사명
     sType1 	 : Variant;  // 검사명
     sBodytemp  : Variant;  // 체온
     sPulse     : Variant;  // 맥박
     sRespcnt   : Variant;  // 호흡수
     sBldprehi  : Variant;  // 혈압(Hi)
     sBldprelo  : Variant;  // 혈압(Lo)
     sSpccode   : Variant;  // 검체코드 추가 (2005.04.18 조일영)

     //검사결과 List SELECT (환자번호+처방일+순번(+검사코드))
     function ListResultInfo(PatNo,OrdDate,ExamCode:String; SeqNo:Integer):Integer;

     function ListEXAResult(Cnt:integer):Integer;

     //(추가. 2003.05.02 이용언) Tunning
     function ListEXAResult2(Cnt:integer):Integer;
     function ListEXAResult3(PatNo:string):Integer;
     //(추가. 2005.04.18 조일영) 추가
     function ListEXAResult4(Cnt:integer):Integer;


    end;

    // 통합검사결과 History
    HmdRsltht = class
     sPatNo 	 : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sExamCode	 : Variant;  // 검사항목코드
     iSeqNo 	 : Variant;  // 변경순번
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sRslt1 	 : Variant;  // 검사결과1(수치)
     sRslt2 	 : Variant;  // 검사결과2(판독)
     iRsltUpp	 : Variant;  // 검사결과 상한값
     iRsltLow	 : Variant;  // 검사결과 하한값
     sRemark	 : Variant;  // 특기사항
     sExecDate	 : Variant;  // 실시일자
     sRsltDate	 : Variant;  // 보고일자
     sReptDr	 : Variant;  // 보고의사
     sReadDate	 : Variant;  // 판독일자
     sReadDr	 : Variant;  // 판독의사
     sChngDate	 : Variant;  // 변경일자
     sChngResn	 : Variant;  // 변경사유
     sRsltType	 : Variant;  // 검사결과TYPE
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function List1(Cnt:Integer):Integer;
    end;

    // 퇴원요약
    HmdDchsut = class
     {sPatNo 	 : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sGenDr	    : Variant;  // 담당의사
     sDschDate  : Variant;  // 퇴원일자
     sWardNo    : Variant;  // 병동번호
     sRoomNo    : Variant;  // 병실번호
     sCcomplnt	 : Variant;  // 주소(CC)
     sDiag  	 : Variant;  // 진단
     sOpText	 : Variant;  // 수술
     sDschOrd	 : Variant;  // 퇴원처방
     sExamRslt	 : Variant;  // 검사소견
     sOpdFu 	 : Variant;  // 외래F/U
     sTrtRslt	 : Variant;  // 치료경과
     sAdmRslt	 : Variant;  // 입원후경과
     sDschType	 : Variant;  // 퇴원형태
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sEditNm    : Variant;
     sCompl     : Variant;}
     sPatNo 	 : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sGenDr	    : Variant;  // 담당의사
     sDschDate  : Variant;  // 퇴원일자
     sWardNo    : Variant;  // 병동번호
     sRoomNo    : Variant;  // 병실번호
     sCcomplnt  : Variant;   // 주소(CC)       */
     sDiag      : Variant;   // 주진단(퇴원요약) */
     sDiag1     : Variant;   // 부진단(퇴원요약) */
     sOptext    : Variant;   // 수술(퇴원요약) */
     sCompl     : Variant;   // 수술(퇴원요약) */
     sDschord   : Variant;   // 퇴원처방       */
     sExamrslt  : Variant;   // 검사소견       */
     sExamrslt1 : Variant;   // 검사소견 1     */

     sOpconf    : Variant;   // 외래에서 확인할사항 */
     sOpdfu     : Variant;   // 외래F/U        */
     sDschAdu   : Variant;   // 퇴원교육유무    */
     sTrtrslt   : Variant;   // 치료경과       */
     sAdmrslt   : Variant;   // 입원후경과     */
     sDschtype  : Variant;   // 퇴원형태       */
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sEditNm    : Variant;

     sMove   : Variant; // 전과
     sMDate  : Variant; // 전과일
     sCount  : Variant; // 재원일
     sAdd    : Variant; // 주소
     sJikup  : Variant; // 직업
     sTel    : Variant; // 연락처
     sParent : Variant; // 보호자
     sPTel   : Variant; // 보호자 연락처
     sMovedpd : Variant;
     sMovedp : Variant;

     sSignData : Variant;              // SONGLIM_THOMA  수정
     sSerialNo : Variant;
     sSubjectDN : Variant;

     sInInfect  : Variant;  // 병원감염
     sFirstipdt : Variant;  // 최초작성일
     sDeathRsn  : Variant;
     sTrnsPer   : Variant;
     sTrnsrsn   : Variant;
     sTrnswtp   : Variant;
     sTrnscure  : Variant;
     sTrnsdept  : Variant;
     sPasssumm  : Variant;
     sChadrcosign : Variant;
     sMainmed   : Variant;
     //2015인증평가,KimDaeYong 2015-02-02
     sOpdyn1    : Variant;
     sOpdyn2    : Variant;
     sOpdyn3    : Variant;
     sAfteredu  : Variant;
     sDrgyn     : Variant;  //DRGYN, KimDaeYong 2015-04-06
     sAdmpath   : Variant;  //입원경로, KimDaeYong 2015-07-27
     //최초기록시 환자인적사항(주소,전화번호,성별나이) 저장. KimDaeYong 2021-05-04
     sFstAddr    : Variant;
     sFstTelno   : Variant;
     sFstSexage  : Variant;
     sFstParents : Variant;

     function SelectDch(sPatNo,sAdmDate:String):Integer;
     {function InsertDch(sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,
                        sRoomNo,sCcomplnt,sDiag,sOpText,sDschOrd,sExamRslt,sOpdFu,
                        sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp:String):Integer;}
{     function InsertDch(sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,
                             sRoomNo,sCcomplnt,sDiag,sOpText,sDschOrd,sExamRslt,sOpdFu,
                             sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp,
                             sOpconf,sCompl,sDschAdu
                             :String):Integer;}                                 // SONGLIM_THOMA  수정
      function InsertDch(sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,
                             sRoomNo,sCcomplnt,sDiag,sOpText,sDschOrd,sExamRslt1,sExamRslt2,sOpdFu,
                             sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp,
                             sOpconf,sCompl,sDschAdu,sDiag1,sSignData,sSerialNo,sSubjectDN,
                             sDeathRsn,sTrnsPer,sTrnsRsn,sTrnsWtp,sTrnsCure,sTrnsDept,sPassSumm,sChasign,sMainemd,sIninfect,
                             sOpdyn1,sOpdyn2,sOpdyn3,sAfteredu,  //2015인증평가,KimDaeYong 2015-02-02
                             sAddress,sTelno,sSexage,sParents   //최초기록시 환자인적사항(주소,전화번호,성별나이). KimDaeYong 2021-05-03
                             :String):Integer;
    end;

    // 관심환자기본
    HmdRschmt = class
     sMedDr      : Variant;  // 진료의사
     sSetSeqno   : Variant;  // 분류순번
     sSetNm      : Variant;  // 분류명
     sEditId     : Variant;  // 수정자ID
     sEditIp     : Variant;  // 수정자IP
     sEditDate   : Variant;  // 수정일시
     // 관심환자기본조회(진료의별 관심분류조회)
     function ListRschmt(MedDr:String):Integer;
     // 관심환자기본 Insert
     function InsertRschmt(MedDr,SetNm,EditId,EditIp:String):Integer;
     // 관심환자기본 Delete
     function DeleteRschmt(MedDr,SetSeqno:String):Integer;
    end;

    // 관심환자상세
    HmdRschdt = class
     sMedDr   : Variant;  // 진료의사
     sSetSeqno: Variant;  // 분류순번
     sPatNo   : Variant;  // 환자번호
     sPatSect : Variant;  // 환자구분
     sRemark  : Variant;  // 특기사항
     sEditId  : Variant;  // 수정자ID
     sEditIp  : Variant;  // 수정자IP
     sEditDate: Variant;  // 수정일시
     sPatName : Variant;  // 성명
     sSex     : Variant;  // Sex
     sBirtDate: Variant;  // 생년월일
     // 관심환자상세조회(관심분류별 환자조회)
     function ListRschdt(MedDr,SetSeqno:String):Integer;
     // 환자별 상세조회
     function SelectRschdt(MedDr,SetSeqno,PatNo:String):Integer;
     // 관심환자상세 Insert
     function InsertRschdt(MedDr,SetSeqno,PatNo,PatSect,Remark,EditId,EditIp:String):Integer;
     // 관심환자상세 Delete
     function DeleteRschdt(MedDr,SetSeqno,PatNo:String):Integer;
    end;

    // 수술의뢰내역
    HmdOpreqt = class
     sPatNo	    : Variant;  // 환자번호
     sSex       : Variant;  // 성별
     sBirtDate  : Variant;  // 생년월일
     sOpDate	 : Variant;  // 수술(예정)일자
     iOpSeqno	 : Variant;  // 수술(예정)순번
     sPatSect	 : Variant;  // 환자구분
     sMedDept	 : Variant;  // 진료과
     sErYn  	 : Variant;  // 응급여부
     sReopYn    : Variant;  // 재수술여부
     sOpSTm     : Variant;  // 수술시작시간
     sEstimtTm	 : Variant;  // 예상수술시간
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDiagName	 : Variant;  // 진단명
     sCombinYn	 : Variant;  // Combine수술여부
     sOpRoom	 : Variant;  // 수술실
     sOpName	 : Variant;  // 수술명
     sOpCode	 : Variant;  // 수술코드
     sOpCode2	 : Variant;  // 수술코드2
     sOpCode3	 : Variant;  // 수술코드3
     sOpDr  	 : Variant;  // 집도의
     sOpDr2 	 : Variant;  // 수석의-ASSISTANT
     sOpDr3 	 : Variant;  // 수석의-ASSISTANT2
     sCon1Dr	 : Variant;  // 협진1집도의
     sCon1Dr2	 : Variant;  // 협진1수석의-ASSISTANT
     sCon1Dr3	 : Variant;  // 협진1수석의-ASSISTANT2
     sCon2Dr	 : Variant;  // 협진2집도의
     sCon2Dr2	 : Variant;  // 협진2수석의-ASSISTANT
     sCon2Dr3	 : Variant;  // 협진2수석의-ASSISTANT2
     sAnspcYn	 : Variant;  // 마취지정진료여부
     sAnethCd	 : Variant;  // 마취방법
     sAnethDr	 : Variant;  // 마취의사
     sAnethdrNm : Variant;  // 마취의사 명
     sCarmYn	 : Variant;  // C-ARM 유무
     sGarmYn	 : Variant;  // G-ARM 유무
     sEndoYn	 : Variant;  // ENDOSCOPE 유무
     sSonoYn	 : Variant;  // SONO유무
     sLasErYn	 : Variant;  // LASER유무
     sOpPhys	 : Variant;  // 수술체위
     sRemark	 : Variant;  // 특기사항
     sConDept1	 : Variant;  // 협진과1
     sConDept2	 : Variant;  // 협진과2
     sConOpcd1	 : Variant;  // 협진수술코드1
     sConOpcd2	 : Variant;  // 협진수술코드2
     sCofmYn	 : Variant;  // 확인여부
     sCofmDr	 : Variant;  // 확정자ID
     sCofmDate	 : Variant;  // 확정일자
     sCancelYn	 : Variant;  // 수술취소여부
     sCancelId	 : Variant;  // 수술취소자
     sCancelDt	 : Variant;  // 수술취소일
     sCanclRsn	 : Variant;  // 수술취소사유
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sDeptNm	 : Variant;  // 진료과명
     sOpdrNm	 : Variant;  // 집도의명
     sCofm  	 : Variant;  // 상황
     sPatNm	    : Variant;  // 환자명
     sAge       : Variant;  // 성별,나이
     sComcdnm3  : Variant;  // 공통코드명
     sCaution   : Variant;  // 특이사항
     sOpDate1	 : Variant;  // 수정 수술(예정)일자
     sOpStat    : Variant;  // 수술Status
     sOpcd2name : Variant;  // 수술코드명2
     sOpcd3name : Variant;  // 수술코드명3
     sOpcn1cdnm : Variant;  // 협진수술코드명1
     sOpcn2cdnm : Variant;  // 협진수술코드명2
     sRsvYn     : Variant;  // 외래예약여부
     sDscYn     : Variant;  // 당일퇴원여부
     sOpDr1     : Variant;
     sOpdrNm1   : Variant;
     sSugacode  : Variant;
     sOprprecyn : Variant;  // 수술간호기록지작성여부, KimDaeYong 2015-08-06
     sAcptDept  : Variant;  //접수진료과(기존의 MEDDEPT는 수술과여서 진료과 개념의 접수진료과 추가.응급실/외래 동시 접수때문에). KimDaeYong 2018-11-27

     //2015인증평가, KimDaeYong 2015-04-27
     //입퇴원요약기록지 시술내역조회
     sExecdate  : Variant;
     sOrddesc1  : Variant;
     sOrdcd     : Variant;
     //케어캠프용변수
     sKitset    : Variant; // 마취과 확인시 임시처방 추가.20160426.kya.
     //sOrdcd     : Variant;
     sPatname   : Variant;
     //수술기록지(다중,협진과포함). KimDaeYong 2017-07-26
     sCombdept  : Variant;
     sOpseqno2  : Variant;
     //대/소수술구분. KimDaeYong 2018-07-03
     sOpgubun   : Variant;

     // 수술이력 조회
     function ListOpEq(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String;icnt:Integer):Integer;
     function UpdateConfirm(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,sType10,sType11,sType12:String;iOpSeqno:integer):Integer;
     //환자 수술의뢰 등록
     function InputOpRequest(sType1,sPatNo,sOpDate,PatSect,sMedDept,sErYn,sReOpYn,sOpSTm,sEstimtTm,sDiagCd,sDiagName,
                             sCombinYn,sOpRoom,sOpName,sOpCode,sOpCode2,sOpCode3,sOpDr,sOpDr2,sOpDr3,sCon1Dr,
                             sCon1Dr2,sCon1Dr3,sCon2Dr,sCon2Dr2,sCon2Dr3,sAnspcYn,sAnethCd,sAnethDr,sCarmYn,
                             sGarmYn,sEndoYn,sSonoYn,sLaserYn,sOpPhys,sRemark,sConDept1,sConDept2,sConopCd1,
                             sConopCd2,sWardNo,sRoomNo,sPatType,sEditId,sEditIp,sRsvYn,
                             sOpcd2name,sOpcd3name,sOpcn1cdnm,sOpcn2cdnm,sDscYn,sOpDr1,sOpgubun,sAcptDept:String;
                             iOpseqNo:Integer):Integer;
     function DeleteOpRequest(sPatNo,sOpDate:String;iOpseqNo:Integer):Integer;
     // 기간별수술이력 조회
     function OpList(sType1,sType2,sType3,sType4,sType5:String):Integer;
     // Multi Confirm
     function MultiConfirm(Cnt:Integer):Integer;
     // Check 예방적 항생제 평가 대상 2009.07.30 김송주
     function CheckAntiInfectOp(sType1,sType2,sType3:String):Integer;
     // Check 처방내림시 수술코드 체크 2009.07.31 김송주
     function CheckAntiInfectOp2(sType1,sType2,sType3:String):Integer;
     //2015인증평가, KimDaeYong 2015-04-27
     // 기간별시술이력 조회
     function TrList(inFlag,inPatno,inFromdate,inTodate:String):Integer;

     // 수술의뢰시 임시처방 저장.20160426.kya.
     function OPORD_I1(sType1,sType2,sType3,sEditid,sEditip:String):Integer;
     // 수술실 확정처방 저장.20160504.kya.
     function OPORD_I2(sType1,sType2,sType3,sType4,sType5,sEditid,sEditip:String;iOrdSeqno: integer):Integer;
     // 수술실 처방수정삭제시.20160609.kya.
     function OPORD_U1(sType1,sType2,sType3,sType4,sType5,sType6,sEditid,sEditip:String;iOrdSeqno: integer):Integer;


    end;

    // 수술/마취간호기록
    HmdOprptt = class
     sPatNo      : Variant;  // 환자번호
     sOpDate	 : Variant;  // 수술일자
     iOpSeqno	 : Variant;  // 수술일별 순번
     sOptm  	 : Variant;  // 수술순번("TF1,TF2....")
     sOpRoom	 : Variant;  // 수술실
     sPatSect	 : Variant;  // 환자구분
     sErYn  	 : Variant;  // 응급여부
     sMedDept	 : Variant;  // 진료과
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sRecId 	 : Variant;  // 기록자
     sOpDr  	 : Variant;  // 집도의
     sOpDr1 	 : Variant;  // 집도의1
     sOpDr2 	 : Variant;  // 수석의-ASSISTANT
     sOpDr3 	 : Variant;  // 수석의-ASSISTANT2
     sAnethDr1	 : Variant;  // 마취의사1
     sAnethDr2	 : Variant;  // 마취의사2
     sAnethDr3	 : Variant;  // 마취의사3
     sSterNur1	 : Variant;  // 소독간호사1
     sSterNur2	 : Variant;  // 소독간호사2
     sSterNur3	 : Variant;  // 소독간호사3
     sSterNur4	 : Variant;  // 소독간호사4
     sSterNur5	 : Variant;  // 소독간호사5
     sRoudNur1	 : Variant;  // 순회간호사1
     sRoudNur2	 : Variant;  // 순회간호사2
     sRoudNur3	 : Variant;  // 순회간호사3
     sRoudNur4	 : Variant;  // 순회간호사4
     sRoudNur5	 : Variant;  // 순회간호사5
     sAnethNr1	 : Variant;  // 마취간호사1
     sAnethNr2	 : Variant;  // 마취간호사2
     sAnethNr3	 : Variant;  // 마취간호사3
     sAnethNr4	 : Variant;  // 마취간호사4
     sAnethNr5	 : Variant;  // 마취간호사5
     sPreIcdnm	 : Variant;  // 수술전 진단명
     sPreIcdcd	 : Variant;  // 수술전상병 코드
     sPstIcdnm	 : Variant;  // 수술후 진단명
     sPstIcdcd	 : Variant;  // 수술후 진단코드
     sPreOpCd    : Variant;  // 예정수술코드
     sPreOpNm    : Variant;  // 예정수술명
     sOpCode	 : Variant;  // 수술코드
     sOpName	 : Variant;  // 수술명
     sAnethCd1	 : Variant;  // 주마취종류
     sAnethCd2	 : Variant;  // 주마취종류
     sAnetDrg1	 : Variant;  // 마취약제1
     sAnetDrg2	 : Variant;  // 마취약제2
     sOutPlace	 : Variant;  // 퇴실장소
     sWdoutTm	 : Variant;  // 병실출발시간
     sStarvTm	 : Variant;  // 대기실도착시간
     sOparvTm	 : Variant;  // 수술장도착시간
     sAnthStm    : Variant;  // 마취시작시간
     sAnthEtm	 : Variant;  // 마취종료시간
     sAnthStm2	 : Variant;  // 마취시작시간2차
     sAnthEtm2	 : Variant;  // 마취종료시간2차
     sPcaType	 : Variant;  // 통증관리종류
     sOpStm      : Variant;  // 수술시작시간
     sOpEtm 	 : Variant;  // 수술종료시간
     sOpoutTm	 : Variant;  // 수술실 나간시간
     sRrInTm	 : Variant;  // 회복실 도착시간
     sRrOutTm	 : Variant;  // 회복실 나간시간
     sGauzeCnt	 : Variant;  // GAUZE COUNT
     sRrUseYn	 : Variant;  // 회복실사용유무
     sReopYn	 : Variant;  // 재수술여부
     sRemark	 : Variant;  // 간호특기사항
     sAnenrRmk	 : Variant;  // 회복실특기사항
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sAnecdnm1	 : Variant;  // 주마취종류1name
     sDeptNm	 : Variant;  // 진료과name
     sOpDrNm	 : Variant;  // 집도의 Name
     sOpDrNm1	 : Variant;  // 집도의1 Name
     sOpDrNm2	 : Variant;  // 수석의2 Name
     sOpDrNm3	 : Variant;  // 수석의3 Name
     sAneDrNm1	 : Variant;  // 마취의사1 Name
     sAneDrNm2	 : Variant;  // 마취의사2 Name
     sAneDrNm3	 : Variant;  // 마취의사3 Name
     sPatnm      : Variant;  // 성명
     sAge        : Variant;  // 성별,이름
     sPatTypeNm  : Variant;  // 환자유형명
     sOpphys1    : Variant;  // 수술체위1
     sOpphys2    : Variant;  // 수술체위2
     sOpphys3    : Variant;  // 수술체위3
     sOpphys4    : Variant;  // 수술체위4
     sOpphys5    : Variant;  // 수술체위5
     sOpphys6    : Variant;  // 수술체위6
     sOpphys7    : Variant;  // 수술체위7
     sOpphysnm   : Variant;  // 기타 수술체위명
     sSkinpre1   : Variant;  // 피부소독1
     sSkinpre2   : Variant;  // 피부소독2
     sSkinpre3   : Variant;  // 피부소독3
     sSkinpre4   : Variant;  // 피부소독4
     sSkinprem   : Variant;  // 기타 피부소독명
     sEsuyn      : Variant;  // ESU 유무
     sEsunm      : Variant;  // ESU 접지명
     sLocaldrg   : Variant;  // 국소마취제
     sLocdrgnm   : Variant;  // 기타 국소마취제명
     sCntyn      : Variant;  // 계수확인
     sXraygz11   : Variant;  // 1차확인자1
     sXraygz12   : Variant;  // 1차확인자2
     sXraygz21   : Variant;  // 2차확인자1
     sXraygz22   : Variant;  // 2차확인자2
     sXraygz31   : Variant;  // 3차확인자1
     sXraygz32   : Variant;  // 3차확인자2
     sXrgzqty1   : Variant;  // XRAY거즈수량1
     sXrgzqty2   : Variant;  // XRAY거즈수량2
     sXrgzqty3   : Variant;  // XRAY거즈수량3
     sXraygzyn   : Variant;  // XRAY해당사항
     sXrayspec   : Variant;  // XRAY비고
     sRinggz11   : Variant;  // 1차확인자1
     sRinggz12   : Variant;  // 1차확인자2
     sRinggz21   : Variant;  // 2차확인자1
     sRinggz22   : Variant;  // 2차확인자2
     sRinggz31   : Variant;  // 3차확인자1
     sRinggz32   : Variant;  // 3차확인자2
     sRigzqty1   : Variant;  // RING거즈수량1
     sRigzqty2   : Variant;  // RING거즈수량2
     sRigzqty3   : Variant;  // RING거즈수량3
     sRinggzyn   : Variant;  // RING해당사항
     sRingspec   : Variant;  // RING비고
     sNedlcon1   : Variant;  // 봉합침 1차확인
     sNedlcon2   : Variant;  // 봉합침 2차확인
     sNedlcon3   : Variant;  // 봉합침 3차확인
     sNedlspec   : Variant;  // 봉합침 비고
     sInstcon1   : Variant;  // 기구 1차확인
     sInstcon2   : Variant;  // 기구 2차확인
     sInstcon3   : Variant;  // 기구 3차확인
     sInstspec   : Variant;  // 기구 비고
     sEtcconnm   : Variant;  // 기타확인항목
     sEtccon1    : Variant;  // 기타 1차확인
     sEtccon2    : Variant;  // 기타 2차확인
     sEtccon3    : Variant;  // 기타 3차확인
     sEtcspec    : Variant;  // 기타 비고
     sSpcyn      : Variant;  // 검체 확인
     sSpcpart1   : Variant;  // 동결 부위
     sSpcpart2   : Variant;  // 생검 부위
     sSpcpart3   : Variant;  // 배양 부위
     sSpcpart4   : Variant;  // 세포병리 부위
     sSpcpart5   : Variant;  // 기타 부위
     sSpcqty1    : Variant;  // 동결 수량
     sSpcqty2    : Variant;  // 생검 수량
     sSpcqty3    : Variant;  // 배양 수량
     sSpcqty4    : Variant;  // 세포병리 수량
     sSpcqty5    : Variant;  // 기타 수량
     sSpcuser1   : Variant;  // 동결 취급자
     sSpcuser2   : Variant;  // 생검 취급자
     sSpcuser3   : Variant;  // 배양 취급자
     sSpcuser4   : Variant;  // 세포병리 취급자
     sSpcuser5   : Variant;  // 기타 취급자
     sOpinstyn   : Variant;  // 수술장비유무
     sOpinst1    : Variant;  // 수술장비1
     sOpinst2    : Variant;  // 수술장비2
     sOpinst3    : Variant;  // 수술장비3
     sOpinst4    : Variant;  // 수술장비4
     sOpinst5    : Variant;  // 수술장비5
     sCautinf1   : Variant;  // Caution정보1
     sCautinf2   : Variant;  // Caution정보2
     sCautinf3   : Variant;  // Caution정보3
     sCautinf4   : Variant;  // Caution정보4
     sCautinf5   : Variant;  // Caution정보5
     sCautinf6   : Variant;  // Caution정보6
     sCautinf7   : Variant;  // Caution정보7
     sCautinf8   : Variant;  // Caution정보8
     sCautinf9   : Variant;  // Caution정보9
     sCautetc    : Variant;  // 기타 Caution정보
     sCombmed1   : Variant;  // Combine 진료과1
     sCombmed2   : Variant;  // Combine 진료과2
     sCombdr1    : Variant;  // Combine 집도의1
     sCombdr2    : Variant;  // Combine 집도의2
     sCombas11   : Variant;  // Combine 1조수1
     sCombas12   : Variant;  // Combine 1조수2
     sCombas21   : Variant;  // Combine 2조수1
     sCombas22   : Variant;  // Combine 2조수2
     sComopcd1   : Variant;  // Combine 수술코드1
     sComopcd2   : Variant;  // Combine 수술코드2
     sComopnm1   : Variant;  // Combine 수술명1
     sComopnm2   : Variant;  // Combine 수술명2
     sSort       : Variant;  // 구분자 (추가)
     sUsername   : Variant;  // 사용자명 (추가)
     sComcdnm    : Variant;  // 공통구분명 (추가)
     iCnt01      : Variant;  // 결과값01
     iCnt02      : Variant;  // 결과값02
     iCnt03      : Variant;  // 결과값03
     iCnt04      : Variant;  // 결과값04
     iCnt05      : Variant;  // 결과값05
     iCnt06      : Variant;  // 결과값06
     iCnt07      : Variant;  // 결과값07
     iCnt08      : Variant;  // 결과값08
     iCnt09      : Variant;  // 결과값09
     iCnt10      : Variant;  // 결과값10
     iCnt11      : Variant;  // 결과값11
     iCnt12      : Variant;  // 결과값12
     iCnt13      : Variant;  // 결과값13
     iCnt14      : Variant;  // 결과값14
     iCnt15      : Variant;  // 결과값15
     iCnt16      : Variant;  // 결과값16
     iCnt17      : Variant;  // 결과값17
     iCnt18      : Variant;  // 결과값18
     iCnt19      : Variant;  // 결과값19
     iCnt20      : Variant;  // 결과값20
     iCnt21      : Variant;  // 결과값21
     iCnt22      : Variant;  // 결과값22
     iCnt23      : Variant;  // 결과값23
     iCnt24      : Variant;  // 결과값24
     iCnt25      : Variant;  // 결과값25
     iCnt26      : Variant;  // 결과값26
     iCnt27      : Variant;  // 결과값27
     iCnt28      : Variant;  // 결과값28
     iCnt29      : Variant;  // 결과값29
     iCnt30      : Variant;  // 결과값30
     iCnt31      : Variant;  // 결과값31
     iCnt32      : Variant;  // 결과값32
     iCnt33      : Variant;  // 결과값33
     iCnt34      : Variant;  // 결과값34
     iCnt35      : Variant;  // 결과값35
     iCnt36      : Variant;  // 결과값36
     iCnt37      : Variant;  // 결과값37
     iCnt38      : Variant;  // 결과값38
     iCnt39      : Variant;  // 결과값39
     iCnt40      : Variant;  // 결과값40
     iCnt41      : Variant;  // 결과값41
     iCnt42      : Variant;  // 결과값42
     iCnt43      : Variant;  // 결과값43
     iCnt44      : Variant;  // 결과값44
     iCnt45      : Variant;  // 결과값45
     iCnt46      : Variant;  // 결과값46
     iCnt47      : Variant;  // 결과값47
     iCnt48      : Variant;  // 결과값48
     iCnt49      : Variant;  // 결과값49
     iCnt50      : Variant;  // 결과값50
     iCnt51      : Variant;  // 결과값51
     iCnt52      : Variant;  // 결과값52
     iCnt53      : Variant;  // 결과값53
     iCnt54      : Variant;  // 결과값54
     iCnt55      : Variant;  // 결과값55
     iCnt56      : Variant;  // 결과값56
     iCnt57      : Variant;  // 결과값57
     iCnt58      : Variant;  // 결과값58
     iCnt59      : Variant;  // 결과값59
     iCnt60      : Variant;  // 결과값60
     iCnt61      : Variant;  // 결과값61
     iCnt62      : Variant;  // 결과값62
     iCnt63      : Variant;  // 결과값63
     iCnt64      : Variant;  // 결과값64
     iCnt65      : Variant;  // 결과값65
     iCnt66      : Variant;  // 결과값66
     iCnt67      : Variant;  // 결과값67
     iCnt68      : Variant;  // 결과값68
     iCnt69      : Variant;  // 결과값69
     iCnt70      : Variant;  // 결과값70
     iCnt71      : Variant;  // 결과값71
     iCnt72      : Variant;  // 결과값72
     iCnt73      : Variant;  // 결과값73
     iCnt74      : Variant;  // 결과값74
     iCnt75      : Variant;  // 결과값75
     iCnt76      : Variant;  // 결과값76
     iCnt77      : Variant;  // 결과값77
     iCnt78      : Variant;  // 결과값78
     iCnt79      : Variant;  // 결과값79
     iCnt80      : Variant;  // 결과값80
     iCnt81      : Variant;  // 결과값81
     iCnt82      : Variant;  // 결과값82
     iCnt83      : Variant;  // 결과값83
     iCnt84      : Variant;  // 결과값84
     iCnt85      : Variant;  // 결과값85
     iCnt86      : Variant;  // 결과값86
     iCnt87      : Variant;  // 결과값87
     iCnt88      : Variant;  // 결과값88
     iCnt89      : Variant;  // 결과값89
     iCnt90      : Variant;  // 결과값90
     iCnt91      : Variant;  // 결과값91
     iCnt92      : Variant;  // 결과값92
     iCnt93      : Variant;  // 결과값93
     iCnt94      : Variant;  // 결과값94
     iCnt95      : Variant;  // 결과값95
     iCnt96      : Variant;  // 결과값96
     sSterNm     : Variant;  // 소독 Nurse명
     sRoundNm    : Variant;  // 순회 Nurse명
     sAnetNm     : Variant;  // 마취 Nurse명
     sOpCode2    : Variant;  // 수술코드2
     sOpname2    : Variant;  // 수술명2
     sOpCode3    : Variant;  // 수술코드3
     sOpname3    : Variant;  // 수술명3
     sOpCode4    : Variant;  // 수술코드4
     sOpname4    : Variant;  // 수술명4
     sPIcdNm2    : Variant;  // 진단명2
     sPIcdCd2    : Variant;  // 진단코드2
     sPIcdNm3    : Variant;  // 진단명3
     sPIcdCd3    : Variant;  // 진단코드3
     sPIcdNm4    : Variant;  // 진단명4
     sPIcdCd4    : Variant;  // 진단코드4
     sRemark1    : Variant;  // 비고사항 (추가)
     sMeddate    : Variant;  // 진료(입원)일
     sSex        : Variant;
     sBirtdate   : Variant;
     //(추가. 2003.2.26 이용언)
     sSkinpre5   : Variant;
     sSkinpre6   : Variant;
     sPad        : Variant;
     sImplantyn  : Variant;
     sImplantKind1 : Variant;
     sImplantKind2 : Variant;
     sImplantKind3 : Variant;
     sImplantManu1 : Variant;
     sImplantManu2 : Variant;
     sImplantManu3 : Variant;
     sImplantetc1 : Variant;
     sImplantetc2 : Variant;
     sImplantetc3 : Variant;
     sdrainyn    : Variant;
     sdrainKind1 : Variant;
     sdrainKind2 : Variant;
     sdrainKind3 : Variant;
     sdrainsize1 : Variant;
     sdrainsize2 : Variant;
     sdrainsize3 : Variant;
     sdraincnt1 : Variant;
     sdraincnt2 : Variant;
     sdraincnt3 : Variant;
     sdrainsite1 : Variant;
     sdrainsite2 : Variant;
     sdrainsite3 : Variant;
     sTournYn    : Variant;
     sArmon1     : Variant;
     sArmon2     : Variant;
     sArmon3     : Variant;
     sArmoff1     : Variant;
     sArmoff2     : Variant;
     sArmoff3     : Variant;
     sArmpressure1: Variant;
     sArmpressure2: Variant;
     sArmpressure3: Variant;
     sLegon1     : Variant;
     sLegon2     : Variant;
     sLegon3     : Variant;
     sLegoff1     : Variant;
     sLegoff2     : Variant;
     sLegoff3     : Variant;
     sLegpressure1: Variant;
     sLegpressure2: Variant;
     sLegpressure3: Variant;
     sAddyn       : Variant;
     sAdd1        : Variant;
     sAdd2        : Variant;
     sAdd3        : Variant;
     sAddContent1 : Variant;
     sAddContent2 : Variant;
     sAddContent3 : Variant;
     sAddCnt1     : Variant;
     sAddCnt2     : Variant;
     sAddCnt3     : Variant;
     sAddSite1    : Variant;
     sAddSite2    : Variant;
     sAddSite3    : Variant;
     sConfyn      : Variant;
     sDropyn      : Variant;
     sReopres     : Variant;
     sReopday     : Variant;
     sAsaclass    : variant;  // ASA CLASS 추가 변수 김송주 2007.6.25

     v_Meddept1   : variant;
     v_Chadrnm    : variant;
     v_Wardno     : variant;
     v_Roomno     : variant;

     // 2007.11.21 봉합침, 기구 추가
     sBong11      : Variant;  // 1차확인자1
     sBong12      : Variant;  // 1차확인자2
     sBong21      : Variant;  // 2차확인자1
     sBong22      : Variant;  // 2차확인자2
     sBong31      : Variant;  // 3차확인자1
     sBong32      : Variant;  // 3차확인자2
     sBongqty1    : Variant;  // 봉합침수량1
     sBongqty2    : Variant;  // 봉합침수량1
     sBongqty3    : Variant;  // 봉합침수량1
     sBongyn      : Variant;  // 봉합침해당사항
     sBongspec    : Variant;  // 봉합침비고

     sTool11      : Variant;  // 1차확인자1
     sTool12      : Variant;  // 1차확인자2
     sTool21      : Variant;  // 2차확인자1
     sTool22      : Variant;  // 2차확인자2
     sTool31      : Variant;  // 3차확인자1
     sTool32      : Variant;  // 3차확인자2
     sToolqty1    : Variant;  // 봉합침수량1
     sToolqty2    : Variant;  // 봉합침수량1
     sToolqty3    : Variant;  // 봉합침수량1
     sToolyn      : Variant;  // 봉합침해당사항
     sToolspec    : Variant;  // 봉합침비고
     sOpPreyn     : Variant;  // 수술전 피부상태 이상유무 확인
     sOpPostyn    : Variant;  // 수술후 피부상태 이상유무 확인
     sOpPreTxt    : Variant;
     sOpPostTxt   : Variant;

     sOutArea     : Variant;  // 수술직후 퇴실장소

     sUltivause   : Variant;  //Ultiva사용량, KimDaeYong 2013-11-19
     sUltivarep   : Variant;  //Ultiva폐기량, KimDaeYong 2013-11-19
     sDrgyn       : Variant;  //DRG환자여부, KimDaeYong 2015-05-29
     //작성일시, 작성자 추가. kya. 20150805.
     sEdtdate     : Variant;
     sEdtnur      : Variant;
     sEdtnurnm    : Variant;
     //2015인증평가, 수술기록지 시한성체크, KimDaeYong 2015-09-17
     sPatname     : Variant;    //환자이름
     sChkhour     : Variant;    //체크시간
     sOprecyn     : Variant;    //수술기록지 작성여부
     //계수확인 4차추가.kya.20180515.
     sXraygz41   : Variant;
     sXraygz42   : Variant;
     sXrgzqty4   : Variant;
     sRinggz41   : Variant;
     sRinggz42   : Variant;
     sRigzqty4   : Variant;
     sBong41     : Variant;
     sBong42     : Variant;
     sBongqty4   : Variant;
     sTool41     : Variant;
     sTool42     : Variant;
     sToolqty4   : Variant;
     //마약류사용량/폐기량.20180517.kya.
     sDruguse    : Variant;
     sDrugrep    : Variant;
     sAnetype    : Variant;
     sAneplace   : Variant;
     sTemper     : Variant;
     sLowtemper  : Variant;
     sTemmethod  : Variant;
     sTemperetc  : Variant;
     sVentyn     : Variant;
     sVentpart   : Variant;
     sVentetc    : Variant;
     sSonoyn     : Variant;
     sSonotype   : Variant;
     sNerrootyn  : Variant;
     sTofyn      : Variant;
     sAntegoyn   : Variant;


     //환자 수술이력 조회('1'=환자번호,'2'=환자번호+수술일)
     function ListPatOp(Type1,PatNo,OpDate,Locate:String):Integer;
     //환자 수술이력 조회1('1'=환자번호,'2'=환자번호+수술일,'3'=환자번호+수술일+순번) : 나중에 합침
     function ListPatOp1(Type1,PatNo,OpDate,Locate:String;OpSeqNo:Integer):Integer;
     //입퇴원 확인서 수술명 조회
     function ListPatOp2(PatNo,OpDate:String):Integer;
     //환자 수술이력 등록
     function InputOpRecord(sType1,sPatno,sOpdate,sOproom,sEryn,sRecid,sOpdr,sOpdr2,sOpdr3,sAnethdr1,
                            sAnethdr2,sAnethdr3,sSternur1,sSternur2,sSternur3,sSternur4,sSternur5,sRoudnur1,sRoudnur2,sRoudnur3,
                            sRoudnur4,sRoudnur5,sAnethnr1,sAnethnr2,sAnethnr3,sAnethnr4,sAnethnr5,sPsticdnm,sPsticdcd,sOpcode,
                            sOpname,sOpphys1,sOpphys2,sOpphys3,sOpphys4,sOpphys5,sOpphys6,sOpphys7,sOpphysnm,sSkinpre1,
                            sSkinpre2,sSkinpre3,sSkinpre4,sSkinprem,sEsuyn,sEsunm,sAnethcd1,sAnethcd2,sAnetdrg1,sAnetdrg2,
                            sLocaldrg,sLocdrgnm,sCntyn,sXraygz11,sXraygz12,sXraygz21,sXraygz22,sXraygz31,sXraygz32,sXrgzqty1,
                            sXrgzqty2,sXrgzqty3,sXraygzyn,sXrayspec,sRinggz11,sRinggz12,sRinggz21,sRinggz22,sRinggz31,sRinggz32,
                            sRigzqty1,sRigzqty2,sRigzqty3,sRinggzyn,sRingspec,sNedlcon1,sNedlcon2,sNedlcon3,sNedlspec,sInstcon1,
                            sInstcon2,sInstcon3,sInstspec,sEtcconnm,sEtccon1,sEtccon2,sEtccon3,sEtcspec,sSpcyn,sSpcpart1,
                            sSpcpart2,sSpcpart3,sSpcpart4,sSpcpart5,sSpcqty1,sSpcqty2,sSpcqty3,sSpcqty4,sSpcqty5,sSpcuser1,
                            sSpcuser2,sSpcuser3,sSpcuser4,sSpcuser5,sOpinstyn,sOpinst1,sOpinst2,sOpinst3,sOpinst4,sOpinst5,
                            sCautinf1,sCautinf2,sCautinf3,sCautinf4,sCautinf5,sCautinf6,sCautinf7,sCautinf8,sCautinf9,sCautetc,
                            sCombmed1,sCombmed2,sCombdr1,sCombdr2,sCombas11,sCombas12,sCombas21,sCombas22,sComopcd1,sComopcd2,
                            sComopnm1,sComopnm2,sOutplace,sWdouttm,sStarvtm,sOparvtm,sAnthstm,sAnthetm,sAnthstm2,sAnthetm2,
                            sPcatype,sOpstm,sOpetm,sOpouttm,sRrintm,sRrouttm,sRruseyn,sRemark,sAnenrrmk,sEditid,
                            sEditip,sOpstat,sOpCode2,sOpname2,sOpCode3,sOpname3,sOpCode4,sOpname4,sPIcdNm2,sPIcdCd2,
                            sPIcdNm3,sPIcdCd3,sPIcdNm4,sPIcdCd4,sRemark1,sPatSect,sMeddate:String;iOpseqno:integer;
                            sTemp1, sTemp2, sTemp3, stemp4, sTemp5, sTemp6, sTemp7,sImplantKind1,sImplantKind2,sImplantKind3,
                            sImplantManu1,sImplantManu2,sImplantManu3,sImplantetc1,sImplantetc2,sImplantetc3,sdrainKind1,sdrainKind2,sdrainKind3,sdrainsize1,
                            sdrainsize2,sdrainsize3,sdraincnt1,sdraincnt2,sdraincnt3,sdrainsite1,sdrainsite2,sdrainsite3,sArmon1,sArmon2,
                            sArmon3,sArmoff1,sArmoff2,sArmoff3,sArmpressure1,sArmpressure2,sArmpressure3,sLegon1,sLegon2,sLegon3,
                            sLegoff1,sLegoff2,sLegoff3,sLegpressure1,sLegpressure2,sLegpressure3,sAdd1,sAdd2,sAdd3,sAddContent1,
                            sAddContent2, sAddContent3,sAddCnt1,sAddCnt2,sAddCnt3,sAddSite1,sAddSite2,sAddSite3,sConfyn,sDropyn,
                            sOpdr1,sReopyn,sReopres,sReopday,sAsaclass,
                            sBong11,sBong12,sBong21,sBong22,sBong31,sBong32,sBongqty1,sBongqty2,sBongqty3,sBongyn,sBongspec,
                            sTool11,sTool12,sTool21,sTool22,sTool31,sTool32,sToolqty1,sToolqty2,sToolqty3,sToolyn,sToolspec,
                            sOpPreyn,sOpPostyn,sOpPreTxt,sOpPostTxt,sOutArea,sUltivause,sUltivarep,sEdtdate,sEdtnur, sEdtnurnm,
                            sXraygz41,sXraygz42,sXrgzqty4,sRinggz41,sRinggz42,sRigzqty4,sBong41,sBong42,sBongqty4,sTool41,sTool42,sToolqty4,
                            sDruguse,sDrugrep,
                            sAnetype,sAneplace,sTemper,sLowtemper,sTemmethod,sTemperetc,sVentyn,sVentpart,sVentetc,sSonoyn,sSonotype,sNerrootyn,sTofyn,sAntegoyn  : String):Integer;
     // 마취대장 내용삭제
     function DeleteAneth(Type1,Type2,Type3,Type4,Type5:String;OpSeqNo:Integer):Integer;
     // 수술 통계
     function ListOpStat(Type1,Type2,Type3,Type4:String):Integer;
     // 마취시간 정보 조회
     function SearchAneth(Type1,Type2,Type3:String;OpSeqNo:Integer):Integer;
     // 과내 수술 통계
     function ListOutOpStat(Type1,Type2,Type3,Type4:String):Integer;

     //(추가. 2003.04.13 이용언)
     function CheckOpDate(Patno, Admdate:String):Integer;
     //2015인증평가, 수술기록지 시한성 체크, KimDaeYong 2015-09-17
     function ListOprecord(inPatno, inAdmdate:string):integer;

    end;

    // 수술기록지
    HmdOprect = class
     sPatNo	    : Variant;  // 환자번호
     sOpDate	 : Variant;  // 수술(예정)일자
     iOpSeqNo	 : Variant;  // 수술(예정)순번
     sPatSect	 : Variant;  // 환자구분
     sMedDept	 : Variant;  // 진료과
     sRecid     : variant;  // 기록자
     sOpDr  	 : Variant;  // 집도의
     sOpDr1  	 : Variant;  // 집도의1
     sOpDr2 	 : Variant;  // 수석의-ASSISTANT
     sOpDr3 	 : Variant;  // 수석의-ASSISTANT2
     sPreIcdCd	 : Variant;  // 수술전진단코드(ICD-10)
     sPreIcdNm	 : Variant;  // 수술전진단명
     sPstIcdCd	 : Variant;  // 수술후진단코드(ICD-10)
     sPstIcdNm	 : Variant;  // 수술후진단명
     sOpName	 : Variant;  // 수술명
     sOpCode	 : Variant;  // 수술코드
     sAnethCd	 : Variant;  // 마취방법
     sTissueYn  : Variant;  // 티슈여부
     sDrainYn   : Variant;  // 드레인여부
     sProcFind  : Variant;  // 수술소견
     sKeyWord1  : Variant;  // 검색용키워드1
     sKeyWord2  : Variant;  // 검색용키워드2
     sKeyWord3  : Variant;  // 검색용키워드3
     sEditId    : Variant;  // 수정자 ID
     sEditIp    : Variant;  // 수정자 IP
     sEditDate  : Variant;  // 수정일시
     sPreOpCd   : Variant;  // 수술전 수술코드
     sPreOpNm   : Variant;  // 수술전 수술명
     sPIcdCd2   : Variant;  // 수술후 진단코드2
     sPIcdNm2   : Variant;  // 수술후 진단명2
     sPIcdCd3   : Variant;  // 수술후 진단코드3
     sPIcdNm3   : Variant;  // 수술후 진단명3
     sPIcdCd4   : Variant;  // 수술후 진단코드4
     sPIcdNm4   : Variant;  // 수술후 진단명4
     sOpCode2   : Variant;  // 수술후 수술코드2
     sOpName2   : Variant;  // 수술후 수술명2
     sOpCode3   : Variant;  // 수술후 수술코드3
     sOpName3   : Variant;  // 수술후 수술명3
     sOpCode4   : Variant;  // 수술후 수술코드4
     sOpName4   : Variant;  // 수술후 수술명4
     sComBMed1  : Variant;  // 협진1 진료과
     sComBDr1   : Variant;  // 협진1 집도의
     sComBAs11  : Variant;  // 협진1 조수1
     sComBAs12  : Variant;  // 협진1 조수2
     sComOPCd1  : Variant;  // 협진1 수술코드
     sComOPNm1  : Variant;  // 협진1 수술명
     sComBMed2  : Variant;  // 협진2 진료과
     sComBDr2   : Variant;  // 협진2 집도의
     sComBAs21  : Variant;  // 협진2 조수1
     sComBAs22  : Variant;  // 협진2 조수2
     sComOPCd2  : Variant;  // 협진2 수술코드
     sComOPNm2  : Variant;  // 협진2 수술명
     sProcFind2 : Variant;
     sProcFind3 : Variant;
     sPon       : Variant;
     sBloodrj   : Variant;
     sBlood     : Variant;
     sObserv    : Variant; // 관찰사항

     sSpon      : Variant;
     sMeddept1  : Variant;
     sChadrnm   : Variant;
     sWardno    : Variant;
     sRoomno    : Variant;

     sLaparoYn  : Variant; // 복강경여부 2013.6.4 추가 김송주
     sObgyamtYn : Variant; // 산부인과가산금여부 KimDaeYong 2015-01-09

     sSignData : Variant;              // SONGLIM_THOMA  수정
     sSerialNo : Variant;
     sSubjectDN : Variant;
     //2015인증평가, KimDaeYong 2015-02-06
     sOpstm     : Variant;  //수술시작일시
     sOpetm     : Variant;  //수술종료일시
     sRecdate   : Variant;  //기록일시, KimDaeYong 2015-03-17

     sFrecdate  : Variant; // 최초기록일시
     sSavestat  : Variant; //저장상태, KimDaeYong 2016-04-27

    // 기록지에 저장되어있는경우 화면에 Display
    //function SelectRecord(sType1,sType2:String;iOpSeqNo:Integer):Integer;
    function SelectRecord(sType1,sType2,sOpSeqNo,sOpSeqno2:String):Integer;
    function SelectOpdate(sType1,sType2:String):Integer;

    // 수술기록지 저장 or 수정                                                  // SONGLIM_THOMA  수정
    function InsertRecord(iOpSeqNo:Integer;sType1,sPatNo,sOpDate,sPatSect,
                      sMedDept,sRecid,sOpDr,sOpDr2,sOpDr3,sPreIcdNm,sPreIcdCd,sPstIcdNm,
                      sPstIcdCd,sOpCode,sOpName,sAnethCd,sTissueYn,sDrainYn,sProcFind,
                      sKeyWord1,sKeyWord2,sKeyWord3,sEditId,sEditIp,sPIcdCd2,sPIcdNm2,
                      sPIcdCd3,sPIcdNm3,sPIcdCd4,sPIcdNm4,sOpCode2,sOpName2,sOpCode3,
                      sOpName3,sOpCode4,sOpName4,sProcFind2,sProcFind3,sPreOpCd,sPreOpNm,
                      sPon,sBloodrj,sBlood ,sObserv,sOpDr1,
                      sSignData,sSerialNo,sSubjectDN,sLaparoYn,ObgyamtYn,
                      sRecdate,sSavestat,sOpSeqNo2 : String):Integer;
    end;

    // 환자식이관리
    HmdPdiett = class
     sPatNo	    : Variant;  // 환자번호
     sDietDate	 : Variant;  // 식이개시일자
     sDietTime	 : Variant;  // 개시끼니
     sDietType	 : Variant;  // 식이구분
     sMedDate	 : Variant;  // 진료일자/입원일자
     sMedDept	 : Variant;  // 진료과
     sChaDr	    : Variant;  // 주치의사
     sOrdDr 	 : Variant;  // 처방의사
     sOrdCdGrp	 : Variant;  // 처방코드분류
     sSlipCd    : Variant;  // Slip 코드
     sOrdCd 	 : Variant;  // 처방코드
     sDietNm    : Variant;  // 식이항목명
     sDietCd    : Variant;  // 식이항목코드
     sLdieType	 : Variant;  // 늦식여부
     sSnack 	 : Variant;  // 야식구분
     iKcal  	 : Variant;  // Kcal
     sSalt  	 : Variant;  // 염분
     sDietQty	 : Variant;  // 1회량
     sBeverage	 : Variant;  // 아침음료
     sRiceKind	 : Variant;  // 선택사항(밥)
     sOption	 : Variant;  // 선택사항(기타)
     sFastYn	 : Variant;  // 금식여부
     sDisinfYn	 : Variant;  // 식기소독여부
     sRiceQty	 : Variant;  // 식사량
     sRemark	 : Variant;  // (간호) 특기사항
     sDietEndt	 : Variant;  // 식사종료일자
     sDietEntm	 : Variant;  // 식사종료끼니
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sDietRmk	 : Variant;  // (영양) 특기사항
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sOrdName   : Variant;  // 식이명
     sAdDietCd  : Variant;  // 보충식
     lAdDieQty  : Variant;  // 보충식 수량
     sOutYn     : Variant;  // 퇴식구분
     sDiet1Clos : Variant;  // 영양과 1차마감
     sDiet2Clos : Variant;  // 영양과 2차마감
     sDiet3Clos : Variant;  // 영양과 3차마감
     //(추가. 2002.12.13 이용언)
     sKcal      : Variant;  //칼로리
     sProtein   : Variant;  //단백질
     sIsolyn    : Variant;  //소독 격리상 여부
     // 추가 2003.11.24 이선규
     sBegdiet   : Variant;  // 시작끼니!!
     sEnddiet   : Variant;  // 종료끼니!!
     // 추가 2005.10.17 김송주
     sDiettypeNm : Variant;  //

     function ListDiet(sType1,sType2,sType3:String):Integer;
     function ListDietItem(sType1,sType2:String):Integer;
     function CheckDietClose(sType1,sType2:String):Integer;
     function InputDiet(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                        sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                        sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                        sEditId,sEditIp:String):Integer;
     function InputDiet2(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                        sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                        sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                        sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn,sRiceqty:String):Integer;
     {function InputDiet2(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                        sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                        sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                        sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn:String):Integer;}
     function OutDietDel(sType,sPatNo,sDietDate,sDietTime,sDietType,sMedDate,
                         sDietEndt,sDietEntm,sEditId,sEditIp:String):Integer;
     //(추가. 2003.2.23 이용언) 체크 diet
     function CheckDiet(patno,dietdate,diettime : String):Integer;
     //(추가. 2003.4.08 이용언) 체크 diet Opton
     function CheckDietOption(patno,Admdate : String):Integer;
     //(추가. 2003.5.9 이용언) 환자식+보충식 변경을 위한 임시 서비스.
     function InputDiet3(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                        sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                        sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                        sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn:String):Integer;
     function OutDietDel2(sType,sPatNo,sDietDate,sDietTime,sDietType,sMedDate,
                         sDietEndt,sDietEntm,sEditId,sEditIp:String):Integer;
     function ListDiet2(sType1,sType2,sType3:String):Integer;
     // 추가 2003.11.30 이선규 보충식 퇴식처리
     function AddEndDeit(sType1,sPatno,sEditid,sEditip : String;iRc : integer) : integer;

    end;

    // 병동간호Acting
    HmdNractt = class
     sPatNo	    : Variant;  // 환자번호
     sPatName   : Variant;  // 환자명
     sSex       : Variant;  // 성별
     sBirtDate  : Variant;  // 생년월일
     sRoomNo    : Variant;  // 병실
     sOrdDate	 : Variant;  // 처방일자
     sOrdTime   : Variant;  // 처방시간
     iOrdSeqno	 : Variant;  // 처방순번
     iSeqNo	    : Variant;  // ACTING 순번
     sBundleNo  : Variant;  // 묶음번호
     sOrdGrp	 : Variant;  // 처방분류
     sOrdGrpNm	 : Variant;  // 처방분류명
     sActDate	 : Variant;  // 간호ACTING일자
     sActTime	 : Variant;  // 간호ACTING시간
     sActInf    : Variant;  // 간호ACTING정보(명일)
     sActInf2   : Variant;  // 간호ACTING정보(익일)
     sActType	 : Variant;  // ACTING구분
     sExecId	 : Variant;  // 실시자사번
     sExecNrs	 : Variant;  // 실시자명
     sExecId2	 : Variant;  // 실시자2사번
     sExecNrs2	 : Variant;  // 실시자2명
     iDosQty	 : Variant;  // 실시량(수혈)
     sRemark	 : Variant;  // 특기사항
     sOrddesc1  : Variant;  // 처방편집1
     sOrddesc2  : Variant;  // 처방편집2
     sOrddrNm   : Variant;  // 처방의명
     sRemain    : Variant;  // Remain량
     sStartTm   : Variant;  // 시작시간
     sFinishTm  : Variant;  // 종료시간
     sQtyUnit   : Variant;  // 처방용량(단위)
     sAbbr      : Variant;  // 용법약어명
     sOrdname   : Variant;  //
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     //(추가. 2002.12.16 이용언)
     sOrdcd     : Variant;  // 약코드
     sCount     : Variant;  //처방횟수.
     //(추가. 03.04.17 이선규)
     sMgpcc     : Variant;  // MG -> CC
     sTotqty    : Variant;  // 총용량
     sMeddept   : Variant;  // 진료과
     function ListActingChk(PatNo,ActDate,PreActDate, sType1:String):Integer;
     function InputActingChk(Cnt:Integer):Integer;
     function ListAllActChk(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
     function InputAllActChk(Cnt:Integer):Integer;
     // 수행이력조회
     function MedHistory(sType1,sType2,sSeqNo:String):Integer;
     // 미실시처리
     function UpNurStat(sType1,sType2,sSeqNo:String):Integer;
    end;

    // 병동현황(Work List)
    HmdWrkLst = class
      sType1    : Variant;     // 검색조건 1:입원환자조회(병동)
      sType2    : Variant;     // 검색조건 if sType=1 :병동
      sType3    : Variant;     // 검색조건 if sType=1 :기준일
      sType4    : Variant;     // 검색조건 if sType=1 :지역
      sPatno    : Variant;
      sPatname  : Variant;
      sPatsex   : Variant;
      sPatbirt  : Variant;
      sCode1    : Variant;
      sCode2    : Variant;
      sCode3    : Variant;
      sCode4    : Variant;
      sCode5    : Variant;
      sCode6    : Variant;
      sCode7    : Variant;
      sCode8    : Variant;
      sCode9    : Variant;
      sCode10   : Variant;
      sCode11   : Variant;
      sCode12   : Variant;
      sCode13   : Variant;
      sCode14   : Variant;
      sCode15   : Variant;
      sMemo1    : Variant;
      sMemo2    : Variant;
      sMemo3    : Variant;
      sMemo4    : Variant;
      sMemo5    : Variant;
      sMemo6    : Variant;
      sAdmDate  : Variant;
      // 이선규 추가 (03.04.21)
      sMgpcc     : Variant;
      sTotqty    : Variant;
      v_Ordcd    : Variant; // 처방코드
      v_Ordname  : Variant; // 처방명
      v_Totqty   : Variant; // 총량
      v_Ordate   : Variant; // 처방일자
      v_Patno    : Variant; // 환자번호
      v_Patname  : Variant; // 환자명
      v_Meddept  : Variant; // 진료과
      v_Meddr    : Variant; // 주치의
      v_Wardno   : Variant; // 병동
      v_Qty      : Variant; // 용량
      v_Cnt      : Variant; // 회수
      v_Method   : Variant; // 용법
      v_Mgpcc    : Variant; // MG->CC

      // 복약안내문 추가 변수 2007.11.27 김송주
      v_Code1    : Variant;
      v_Code2    : Variant;
      v_Code3    : Variant;      

     // 조회
     function SelWrkLst(sType1,sType2,sType3,sType4,sType5:string):Integer;
     // 조회2
     function SelWrkLst2(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8:string):Integer;
     // 각종조회들.
     function CheckList(sType1,sType2,sType3,sType4,sType5:string):Integer;
     // 각종조회들(주로 간호기록지 내용들).
     function CheckList2(sType1,sType2,sType3,sType4,sType5:string):Integer;
     // 간호활동 셋 삭제
     function DelActSet(Cnt:integer):Integer;
     // WrkLst
     function GetWrkLst(sFlag, sType1,sType2,sType3,sType4,sType5,sType6:string):Integer;
     // 환자 현위치 변경
     function ChangePatPos(sCode1,sType1,sType2,sType3,sType4,sType5,sOutHospitalType,sOutHospitalCd:String):Integer;
     function SelPrnLst(sType1,sType2,sType3,sType4,sType5:string):Integer;
     // 보험심사구분(BCKSTAT : '0'-의사 퇴원지시, '1'-간호사퇴원확인, 2이상 : 퇴원심사) 조회
     function SelBckStat(sType1,sType2,sType3,sType4:string):Integer;
     //(추가.2003.1.16 이용언)
     //Oxymetry,Gupcopat 명단
     function Actlist(sType1,sType2,sType3,sType4 : String) : Integer;
     //(추가. 2003.04.08 이용언) 의사 Progress Note 예문 내용 조회
     function ProgTemplt(sType1,sType2,sType3,sType4 : String) : Integer;
     // 추가 2003.05.16 이선규
     function Mgpcc_gigan(sType    ,   //1: 조회일자별 약품건수 ,2: 조회일자별 약품별 사용환자조회
                          sFromdate,   // 조회 시작일자
                          sTodate  ,   // 조회 종료일자
                          sOrdcd       // 처방코드
                          : String) : integer;
     // 추가 2007.11.27 김송주
     function SelWrkLst3(sType1,sType2,sType3:String):Integer;
     // 추가 2013.09.24 김송주
     //function CheckLeaveYn(sType1,sType2:String):Integer;
    end;


    // 간호정보조사지(일반성인)
    HmdAdinft = class
     sPatNo	    : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sMedDept	 : Variant;  // 진료과
     sDeptNm    : Variant;  // 진료과명
     sRecType   : Variant;  // 양식종류(1:성인, 2:정신과)
     sChaDr	    : Variant;  // 주치의
     sGenDr	    : Variant;  // 담당의
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDschDate	 : Variant;  // 퇴원일자
     sInfDnr	 : Variant;  // 정보제공자
     sTelNo	    : Variant;  // 전화번호
     sAddress	 : Variant;  // 주소
     sBldAbo	 : Variant;  // 혈액형(ABO)
     sBldRh	    : Variant;  // 혈액형(RH)
     sEdudGr	 : Variant;  // 교육정도
     sReligion	 : Variant;  // 종교
     sJob	    : Variant;  // 직업
     sHabdrkYn	 : Variant;  // 음주유무
     sHabdrkSp	 : Variant;  // 음주주종
     sHabdrkDg	 : Variant;  // 음주정도
     sHabdrkCt	 : Variant;  // 음주횟수
     sHabdrkPd	 : Variant;  // 음주기간(년)
     sHabsmkYn	 : Variant;  // 흡연유무
     sHabsmkDg	 : Variant;  // 흡연정도(갑/일)
     sHabsmkPd	 : Variant;  // 흡연기간(년)
     sAdmPath	 : Variant;  // 입원경로
     sInMthd	 : Variant;  // 입원방법
     sSymptoms	 : Variant;  // 입원동기 주증상
     sIndzfDt	 : Variant;  // 최초발병일
     sIndzlDt	 : Variant;  // 최근발병일
     sAdmovDet	 : Variant;  // 입원동기_상세
     sHxdzYn	 : Variant;  // 과거병력여부
     sHxdzDt	 : Variant;  // 과거병력상세
     sHxopYn	 : Variant;  // 과거수술여부
     sHxopDt	 : Variant;  // 과거수술상세
     sAlgYn	    : Variant;  // 알러지여부
     sAlgFd	    : Variant;  // 알러지내역 음식
     sAlgDg	    : Variant;  // 알러지내역 약품
     sLstdrGst	 : Variant;  // 최근투약상태
     sAckYn	    : Variant;  // 병식여부
     sAckDt	    : Variant;  // 병식상세
     sFhxfCd	 : Variant;  // 가족력/부
     sFhxfDet	 : Variant;  // 가족력/부 상세
     sFhxmCd	 : Variant;  // 가족력/모
     sFhxmDet	 : Variant;  // 가족력/모 상세
     sFhxbCd	 : Variant;  // 가족력/형제
     sFhxbDet	 : Variant;  // 가족력/형제 상세
     sFhxEtc	 : Variant;  // 가족력/기타
     sDfrmYn	 : Variant;  // 신체 기형유무
     sDfrmDt	 : Variant;  // 신체 기형상세
     sPainYn	 : Variant;  // 신체 동통유무
     sPainPrt	 : Variant;  // 신체 동통부위
     sPainDt	 : Variant;  // 신체 동통상태
     sAppDt	    : Variant;  // 식욕정도
     sWtYn      : Variant;  // 체중변화유무
     sWtDt	    : Variant;  // 체중변화상세
     sSlpTm	    : Variant;  // 습관 수면시간
     sSlpDso	 : Variant;  // 습관 수면장애
     sSlpAd	    : Variant;  // 습관 수면돕는법
     sFecCnt	 : Variant;  // 습관 대변횟수
     sFecCol	 : Variant;  // 습관 대변색
     sFecChr	 : Variant;  // 습관 대변특징
     sFecChrdt	 : Variant;  // 습관 대변특징 상세
     sUrCnt	    : Variant;  // 습관 소변횟수
     sUrQnt	    : Variant;  // 습관 소변양
     sUrCol	    : Variant;  // 습관 소변색
     sUrFlv	    : Variant;  // 습관 소변냄새
     sUrChr	    : Variant;  // 습관 소변특징
     sSknunYn	 : Variant;  // 신체 피부상태 이상여부
     sSknunPt	 : Variant;  // 신체 피부상태 이상부위
     sSknunDg	 : Variant;  // 신체 피부상태 이상상태
     sSkncunYn	 : Variant;  // 신체 피부색 이상여부
     sSkncunPr	 : Variant;  // 신체 피부색 이상부위
     sSkncunDg	 : Variant;  // 신체 피부색 이상상태
     sDietYn	 : Variant;  // 소화기 장애 여부
     sDietSt	 : Variant;  // 소화기장애증상
     sCircYn	 : Variant;  // 순환기장애 여부
     sCircst	 : Variant;  // 순환기장애 증상
     sNeoYn	    : Variant;  // 부종유무
     sNeoPrt	 : Variant;  // 부종부위
     sNeotrcYn	 : Variant;  // 부종요흔유무
     sRespYn	 : Variant;  // 호흡기 장애여부
     sRespSt	 : Variant;  // 호흡기 장애증상
     sPupilSz	 : Variant;  // 동공크기
     sPupilSzl	 : Variant;  // 동공크기 좌
     sPupilSzr	 : Variant;  // 동공크기 우
     sPuprefL	 : Variant;  // 빛반사 좌
     sPuprefR	 : Variant;  // 빛반사 우
     sEyeYn	    : Variant;  // 시력장애여부
     sEyeL	    : Variant;  // 시력장애 좌
     sEyeR	    : Variant;  // 시력장애 우
     sEarYn 	 : Variant;  // 신체 청력 장애 유무
     sEarL	    : Variant;  // 신체 청력 장애 좌
     sEarR  	 : Variant;  // 신체 청력 장애 우
     sEarLd	    : Variant;  // 신체 청력장애 좌 기타
     sEarRd	    : Variant;  // 신체 청력장애 우 기타
     sNemuSt	 : Variant;  // 신경근육상태
     sNemuPt	 : Variant;  // 신경근육상태 부위
     sParYn	    : Variant;  // 신체 마비여부
     sParDnd	 : Variant;  // 신체 마비부위 하지
     sParUpd	 : Variant;  // 신체 마비부위 상지
     sMan   	 : Variant;  // 지남력 사람
     sDtime 	 : Variant;  // 지남력 시간
     sPlc   	 : Variant;  // 지남력 장소
     sConsStat  : Variant;  // 의식상태
     sAchrxn	 : Variant;  // 통증반응
     sComm  	 : Variant;  // 의사소통
     sFeelStat	 : Variant;  // 정서상태
     sEmosTsd	 : Variant;  // 정서상태 상세
     sActFr 	 : Variant;  // 활동자유도
     sAuxYn 	 : Variant;  // 보조기 유무
     sAuxSt 	 : Variant;  // 보조기 상태
     sAuxDt 	 : Variant;  // 보조기 상세
     sInEdu1	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu2	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu3	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu4	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu5	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu6	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu7	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu8	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu9	 : Variant;  // 입원시 간호 및 교육상태
     sNreduetc  : Variant;  // 기타교육사항
     sTelno1    : Variant;  // 전화번호1
     sTelno2    : Variant;  // 전화번호2
     sRecnrs    : Variant;  // 작성자
     sFecday    : Variant;
     sUrday     : Variant;
     sHeight    : Variant;  // 신장
     sWeight    : Variant;  // 체중
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function SelAdinf(sType1, sType2:String):Integer;
     
     function SelAdinfHistory(sPatNo, sType1 :String):Integer;
     function insertAdinf( sPatno    ,tAdmdate  ,sMeddept ,sChadr    ,sGendr   ,sWardno   ,sRoomno  ,
                           sDiagcd   ,tDschdate ,sInfdnr  ,sTelno    ,sAddress ,sBldabo   ,sBldrh   ,
                           sEdudgr   ,sReligion ,sJob     ,sHabdrkyn ,sHabdrksp,sHabdrkdg ,sHabdrkct,
                           sHabdrkpd ,sHabsmkyn ,sHabsmkdg,sHabsmkpd ,sAdmpath ,sInmthd   ,sSymptoms,
                           sIndzfdt  ,sIndzldt  ,sAdmreson,sHxdzyn   ,sHxdzdt  ,sHxopyn   ,sHxopdt  ,
                           sAlgyn    ,sAlgfd    ,sAlgdg   ,sLstdrgst ,sAckyn   ,sAckdt    ,sFhxfcd  ,
                           sFhxfdet  ,sFhxmcd   ,sFhxmdet ,sFhxbcd   ,sFhxbdet ,sFhxetc   ,sDfrmyn  ,
                           sDfrmdt   ,sPainyn   ,sPainprt ,sPaindt   ,sAppdt   ,sWtyn     ,sWtdt    ,
                           sSlptm    ,sSlpdso   ,sSlpad   ,sFeccnt   ,sFeccol  ,sFecchr   ,sFecchrdt,
                           sUrcnt    ,sUrqnt    ,sUrcol   ,sUrflv    ,sUrchr   ,sActfr    ,sSknunyn ,
                           sSknunpt  ,sSknundg  ,sSkncunyn,sSkncunpr ,sSkncundg,sDietyn   ,sDietst  ,
                           sCircyn   ,sCircst   ,sNeoyn   ,sNeoprt   ,sNeotrcyn,sRespyn   ,sRespst  ,
                           sPupilsz  ,sPupilszl ,sPupilszr,sPuprefl  ,sPuprefr ,sEyeyn    ,sEyel    ,
                           sEyer     ,sEaryn    ,sEarl    ,sEarr     ,sEarld   ,sEarrd    ,sNemust  ,
                           sNemupt   ,sParyn    ,sPardnd  ,sParupd   ,sMan     ,sDtime    ,sPlc     ,
                           sConsstat ,sAchrxn   ,sComm    ,sFeelstat ,sEmostsd ,sAuxyn    ,sAuxst   ,
                           sAuxdt    ,sInedu1   ,sInedu2  ,sInedu3   ,sInedu4  ,sInedu5   ,sInedu6  ,
                           sInedu7   ,sInedu8   ,sInedu9  ,sNreduetc ,sEditid  ,sEditip   ,sTelno1  ,
                           sTelno2   ,sRecnrs   ,sFecday  ,sUrday    ,sHeight  ,sWeight :String):Integer;
    // 신생아 간호정보조사지
    function SelMdnbinft(sPatNo, sAdmDate : String):Integer;
    // 간호정보조사지 내용 입력(신생아)
    function InsMdNbinft(sPatNo,    sAdmDate,  sMedDept,  sAdmTime,  sChaDr,     sGenDr,
                         sWardNo,   sRoomNo,   sDiagCd,   sBornDate, sDgpWks,
                         sDgpDay,   sWeight,   sSex,      sDelType,  sApgahr1,
                         sApgahr5,  sParity,   sDelMark,  sDelMark1, sDelMark2,
                         sDelMark3, sDelMark4, sDelMark5, sRemark,   sHyn,
                         sStlCnt,   sStlCol,   sOxygenYN, sOxygen,   sTempKind,
                         sBodyTemp, sHrtbt,    sResp,     sHeight,   sHeadSize,
                         sChstSize, sBodySize, sNabelYn,  sEyeYn,    sVitamin,
                         sVaccine,  sHbct,     sCryRate,  sRespYn,   sRespEtc,
                         sCircYn,   sCircEtc,  sSknunYn,  sSknunSt,  sHeadFr,
                         sHeadAir,  sHeadEtc,  sFaceYn,   sFaceEtc,  sNabelVs1,
                         sNabelVs2, sBloodYn,  sUriyn,    sUriEtc,   sLimYn,
                         sLimSt1,   sLimSt2,   sLimStLR,  sDiaref,   sDiarefAs,
                         sCatref,   sCatrefAs, sPumref,   sLactref,  sDfrmetc,
                         sNurse,    sEditid,   sEditip:String):Integer;
    end;


    // 간호정보조사지(소아)
    HmdPdinft = class
      sPatno     : Variant; //환자번호
      sAdmdate   : Variant; //입원일자
      sMeddept   : Variant; //진료과/진료부서
      sChadr     : Variant; //담당교수
      sGendr     : Variant; //주치의
      sWardno    : Variant; //병동번호
      sRoomno    : Variant; //병실번호
      sInfdnr    : Variant; //정보제공자
      sRecnrs    : Variant; //작성간호사
      sDiagname  : Variant; //(과)진단명/질병명
      sAddress   : Variant; //주소
      sTelno1    : Variant; //전화번호1
      sTelno2    : Variant; //전화번호2
      sReligion  : Variant; //종교
      sDelvtype  : Variant; //분만형태
      sborndc    : Variant; //분만개조자
      sBornw     : Variant; //출생시체중
      sNoww      : Variant; //현재체중
      sHeight    : Variant; //신장
      sAdmpath   : Variant; //입원경로
      sSymptom   : Variant; //주증상
      sIndzfdt   : Variant; //최초발병일
      sAdmreson  : Variant; //입원동기
      sLstdrgst  : Variant; //최근투약상태
      sHxdzyn    : Variant; //과거병력여부
      sAlgyn     : Variant; //알러지여부
      sFhxf      : Variant; //가족력
      sFhxetc    : Variant;
      sBodytemp  : Variant; //체온
      sHrtbt     : Variant; //맥박
      sResp      : Variant; //호흡
      sBldpre    : Variant; //혈압
      sRespyn    : Variant; //호흡기 장애여부
      sRespst    : Variant; //호흡기 장애
      sDietyn    : Variant; //소화기장애 여부
      sDietst    : Variant; //소화기장애
      sCircyn    : Variant; //순환기장애 여부
      sCircst    : Variant; //순환기장애
      sPainyn    : Variant; //신체 동통유무
      sPain      : Variant;
      sPaindt    : Variant; //신체 동통
      sNeoyn     : Variant; //부종유무
      sNeoprt    : Variant; //부종부위
      sNeotrc    : Variant; //부종요흔
      sSkinyn    : Variant;
      sSknunpt   : Variant; //신체 피부상태 이상부위
      sTeeth     : Variant; //치아상태
      sTeethetc  : Variant; //치아상태기타
      sGlsyn     : Variant; //시력장애유무
      sGls       : Variant; //시력장애종류
      sGlsetc    : Variant; //시력장애종류기타
      sEaryn     : Variant; //신체 청력장애 유무
      sEarAid    : Variant; //청력장애 (보청기)
      sEaretc    : Variant; //청력장애 (기타)
      sFeccnt    : Variant; //습관 대변횟수
      sFecday    : Variant;
      sFecchr    : Variant; //습관 대변특징
      sUrcnt     : Variant; //습관 소변회수
      sUrday     : Variant;
      sUrchr     : Variant; //습관 소변특징
      sDiet      : Variant; //식사습관
      sConsstat  : Variant; //의식상태
      sComm      : Variant; //의사소통
      sFeelstat  : Variant; //정서상태
      sActfr     : Variant; //활동상태
      sPre       : Variant;
      sPrecnt    : Variant;
      sPreetc    : Variant; //예방접종기타
      sGrtyn     : Variant; //성장상태이상유무
      sGrtabnl   : Variant; //성장상태 이상소견
      sDvpstyn   : Variant; //발달상태이상유무
      sDvpabnl   : Variant; //발달상태 이상소견
      sEdu       : Variant; //교육내용
      sEditid    : Variant;
      sEditip    : Variant;
      sPrecnt2   : Variant;
      sPrecnt3   : Variant;
     function SelPdinf(sType1,sType2:String):Integer;
     {
     function InsPdinf(sPatno,       sAdmdate   ,      sMeddept   ,      sChadr     ,  sGendr,
                       sWardno,      sRoomno    ,      sInfdnr    ,      sRecnrs    ,
                       sDiagname,    sAddress   ,      sTelno1    ,      sTelno2    ,
                       sReligion,    sDelvtype  ,      sborndc    ,      sBornw     ,
                       sNoww  ,      sHeight    ,      sAdmpath   ,      sSymptom   ,
                       sIndzfdt,     sAdmreson  ,      sLstdrgst  ,      sHxdzyn    ,
                       sAlgyn,       sFhxf      ,      sFhxetc    ,      sBodytemp  ,
                       sHrtbt ,      sResp      ,      sBldpre    ,      sRespyn    ,
                       sRespst,      sDietyn    ,      sDietst    ,      sCircyn    ,
                       sCircst,      sPainyn    ,      sPain      ,      sPaindt    ,
                       sNeoyn ,      sNeoprt    ,      sNeotrc    ,      sSkinyn    ,
                       sSknunpt,     sTeeth     ,      sTeethetc  ,      sGlsyn     ,
                       sGls   ,      sGlsetc    ,      sEaryn     ,      sEarAid    ,
                       sEaretc,      sFeccnt    ,      sFecday    ,      sFecchr    ,
                       sUrcnt ,      sUrday     ,      sUrchr     ,      sDiet      ,
                       sConsstat,    sComm      ,      sFeelstat  ,      sActfr     ,
                       sPre   ,      sPrecnt    ,      sPreetc    ,      sGrtyn     ,
                       sGrtabnl,     sDvpstyn   ,      sDvpabnl   ,      sEdu       ,
                       sEditid,      sEditip    ,      sPrecnt2   ,      sPrecnt3:String):Integer;
    }
    end;


    // 신생아 분만기록지
    HmdBdinft = class
      sPatNo     : Variant; // 환자번호
      sPatName   : variant; // 환자이름
      sAdmDate   : Variant; // 입원일자
      sMedDept   : Variant; // 진료과
      sGenDr     : Variant; // 담당의사
      sWardNo    : Variant; // 병동번호
      sRoomNo    : Variant; // 병실번호
      sAge       : Variant; // 나이
      sSex       : Variant; // 성별
      sTwinSeq   : Variant; // 쌍둥이순서
      sAddress   : Variant; // 주소
      sTelNo1    : Variant; // 전화번호1
      sTelNo2    : Variant; // 전화번호2
      sMarryyn   : Variant; // 결혼유무
      sBphigh    : Variant; // 혈압최고
      sBplow     : Variant; // 혈압최저
      sPulse     : Variant; // 심박
      sBodytemp  : Variant; // 체온
      sFht       : Variant; // 심음
      sReligion  : Variant; // 종교(본인)
      sHusrel    : Variant; // 종교(배우자)
      sHxdz      : Variant; // 과거병력여부
      sPrewgt    : Variant; // 입원전몸무게
      sAfterwgt  : Variant; // 입원시몸무게
      sHeight    : Variant; // 키
      sBldabo    : Variant; // 혈액형ABO
      sBldrh     : Variant; // RH
      sHusbldabo : Variant; // 배우자 ABO
      sHusbldrh  : Variant; // 배우자 RH
      sLmp       : Variant; //
      sEdc       : Variant; //
      sDgpwks    : Variant; // 임신기간 (주)
      sDgpday    : Variant; // 임신기간 (일)
      sParityF   : Variant; // 산과력(Full)
      sParityP   : Variant; // 산과력(Pre)
      sParityA   : Variant; // 산과력(Abo)
      sParityL   : Variant; // 산과력(Liv)
      sPrgsick   : Variant; // 임신합병증
      sPrgsketc  : Variant; // 임신합병증 기타
      sAmnioyn   : Variant; // 양수천자유무
      sXrayyn    : Variant; // 임신중 방사선 촬영유무
      sXrayst    : Variant; // 방사선촬영종류
      sPrgdrgyn  : Variant; // 약물복용여부
      sPrgdrgst  : Variant; // 약물복용
      sPrgsmkyn  : Variant; // 임신중흡연여부
      sPrgsmkdg  : Variant; // 흡연정도
      sPrgdrkyn  : Variant; // 임신중음주여부
      sPrgdrkdg  : Variant; // 음주정도
      sAlgyn     : Variant; // 알러지 유무
      sAlginfo   : Variant; // 알러지
      sDimthdyn  : Variant; // 수유방법유무
      sDimthd    : Variant; // 수유방법
      sOrsvtm    : Variant; // 기타사항
      sDewyn     : Variant; // 이슬여부
      sRomyn     : Variant; // 파수여부
      sPainyn    : Variant; // 진통여부
      sPainper   : Variant; // 지속시간
      sInbornyn  : Variant; // 유도분만유무
      sInbornct  : Variant; // 유도부만횟수
      sBorndate  : Variant; // 출생년월일
      sBorntime  : Variant; // 출생시간
      sBabysex   : Variant; // 아기성별
      sBabywgt   : Variant; // 아기체중
      sNeckyn    : Variant; // Cord around neck 여부
      sNecktype  : Variant; // neck type 횟수
      sStlcolyn  : Variant; // 태변착색여부
      sStlcol    : Variant; // 태변착색
      sBabypls   : Variant; // 심박수
      sBabyresp  : Variant; // 호흡
      sBabymse   : Variant; // 근긴장도
      sBabyact   : Variant; // 자극반응
      sBabycol   : Variant; // 피부색

      sBabypls5  : Variant; // 심박수5분
      sBabyresp5 : Variant; // 호흡5분
      sBabymse5  : Variant; // 근긴장도5분
      sBabyact5  : Variant; // 자극반응5분
      sBabycol5  : Variant; // 피부색5분

      sReviveyn  : Variant; // 소생술여부
      sOxigenyn  : Variant; // 산소흡인여부
      sIntuyn    : Variant; // intubation 여부
      sBodychk   : Variant; // 신체검진소견
      sAdmarea   : Variant; // 입원장소
      sInstype   : Variant; // 급여구분
      sPlatime   : Variant; // 태반나온시간
      sDeltype   : Variant; // Deltype
      sMaturity  : Variant; // Maturity
      sPosition  : Variant; // Position
      sLiveyn    : Variant; // 생사여부
      sDelvnur   : Variant; // 분만간호사
      sDelvdr    : Variant; // 분만의사
      sTwinchk   : Variant; // 쌍둥이check
      sSaveFlag  : Variant; // 분만대장추가 여부
      sLmpNo     : Variant; // LMP 모름
      sEdcNo     : Variant; // EDC 모름
      sEditid    : Variant; // 수정자ID
      sEditip    : Variant; // 수정자IP
      //
      sDeltype2  : Variant;
      sReason    : Variant;
      sPr        : Variant;
      sHusname   : Variant;
      
      sSignData : Variant;              // SONGLIM_THOMA  수정
      sSerialNo : Variant;
      sSubjectDN : Variant;
      //
      function MultiSelBdinf(sSaveFlag,sType1,sType2,sType3:String):Integer;
      function InsertBdinf(sType1,sAddYN:String; Cnt:Integer):Integer;
      function SelectBdinf(sType1,sType2:String):Integer;
      // 신생아실 년간통계자료.	
      function TotalNbaby(sType1:String):Integer;

      function UpdateBdinft(sType1, PatNo, Admdate, TwinSeq, Memo:String):Integer;

      //츨생아정보조회
      function ListBaby(PatNo:String):Integer;
      //분만환자 조회
      function SelectBdinf_List(sFromdate,sTodate:String):Integer;

    end;

{
    // 분만외 시술대장
    HmdKdinft = class
      sType1     : Variant;
      sDate      : Variant;
      sDs        : variant;
      sDc        : Variant;
      sDe        : Variant;
      sSono      : Variant;
      sNst       : Variant;
      sUbt       : Variant;
      sHyster    : Variant;
      sChemo     : Variant;
      sEtc       : Variant;
      sEditid    : Variant;
      sEditip    : Variant;

      function MultiSelKdinf(sType1:String):Integer;
      function InsKdinf(Cnt:Integer):Integer;
    end;
}

    // 사망아
    HmdDbabyt = class
      sTDate    : Variant;
      sBabyName : Variant;
      sBabyNo   : Variant;
      sBabySex  : Variant;
      sDrgWks   : Variant;
      sDrgDay   : Variant;
      sBabyWgt  : Variant;
      sDelType  : Variant;
      sBornDate : Variant;
      sAdmDate  : Variant;
      sDDate    : Variant;
      sReson    : Variant;

      function MultiSelDbaby(sType1,sType2:String):Integer;
      function InsDbaby(sTdate,sPatname,sPatno,sPatsex,sDrgwks,sPatwgt,
                        sDelType,sBornDate,sAdmdate,sDDate,sReson,sEditid,sEditip,
                        sType1,sType2,sType3,sType4:String):Integer;
      function SumSelDbaby(sType1:String):Integer;
    end;

    // 신생아
    HmdNbabyt = class
      sBornDate  : Variant;
      sPatName   : Variant;
      sPatNo     : Variant;
      sSex       : Variant;
      sAge       : Variant;
      sWgt       : Variant;
      sDelType   : Variant;
      sParity    : Variant;
      sAge2      : Variant;
      sAddress   : Variant;
      sTelno     : Variant;
      sRemark    : Variant;
      sDschdate  : Variant;
      sAdmdate   : Variant;
      sTwinFlag  : Variant; // 2012.1.27 쌍둥이 구분 추가
      sWomPatNm  : Variant; // 2012.1.27 산모 이름
      sWomResno1 : Variant; // 2012.1.27 산모 주민번호1
      sWomResno2 : Variant; // 2012.1.27 산모 주민번호2
      sConcure   : Variant; // 집중치료 80% 해당여부 2013.4.18

      function IsNbaby(sType1,sType2,sType3,sType4:String):Integer;
      function InsNbaby(sBorndate,sPatname,sPatno,sSex,sAge,sDelType,sWgt,  ////////////add by 송원철
                        sParity,sMomno,sMomadm,sPatSeq,sSickbaby,sWardcd,sRoomno,
                        sDeptCd,sDiagcd,sDiagname,sChadr,sGendr,sEditid,sEditip,
                        sType1,sType2,sType3,sFlag,sAge2,sTwinFlag,sRemark,sSpcDr,
                        sAdmDate,sInOutFlag,sLocate,sConcure:String):Integer;
      function MultiSelNbaby(sType1,sType2:String):Integer;
      // 개별 신생아대장조회
      function SingleSelNbaby(sType1:String):Integer;
      // 에방접종 등록용 신생아 대장 조회
      function SingleSelNbabyInj(sType1:String):Integer;

    end;


    // 신생아 일일현황
    HmdTbabyt = class
      sType1       : Variant;
      sTDate       : Variant;
      sDuty        : Variant;
      sAllBaby     : Variant;
      sBorn        : Variant;
      sOut         : Variant;
      sAdm         : Variant;
      sDie         : Variant;
      sNicu        : Variant;
      sIncu        : Variant;
      sSickBaby    : Variant;
      sNormal      : Variant;
      sEtc         : Variant;
      sEditid      : Variant;
      sEditip      : Variant;
      sSDate       : Variant;
      sOpt         : Variant; // 수술통계
      sTrIn        : Variant;
      sTrOut       : Variant;

// 이선규 추가 20030908
      v_Date       : Variant;  // 일자
      v_Allbaby    : Variant;  // 재원
      v_Born       : Variant;  // 출생
      v_Out        : Variant;  // 퇴원
      v_Adm        : Variant;  // 입원
      v_Die        : Variant;  // 사망
      v_Opt        : Variant;  // 수술환자수
      v_Nicu       : Variant;  // NICU
      v_Incu       : Variant;  // INCUBA
      v_Sickbaby   : Variant;  // SICKBAAY
      v_Normal     : Variant;  // NORMAL
      v_Etc        : Variant;  // ETC
      v_Trin       : Variant;  // 전입수
      v_Trout      : Variant;  // 전출수
      function MultiSelTbaby(sType1:String):Integer;
      function SumSelTbaby(sType1,sType2:String):Integer;
      function InsTbaby(Cnt:Integer):Integer;
    end;

    // 분만실 통계
    HmdSbabyt = class
     sDelType   : Variant;  // DelType
     sMaturity  : Variant;
     sInsType   : Variant;  // 의보여부
     sSex       : Variant;  // 아이성별
     sLive      : Variant;  // 생사여부
     sTwinseq   : Variant;  // 쌍둥이구분
     sT1        : Variant;  //
     sT2        : Variant;  //
     sT3        : Variant;  //
     sT4        : Variant;  //
     sT5        : Variant;  //
     sT6        : Variant;  //
     sT7        : Variant;  //
     sT8        : Variant;  //
     sT9        : Variant;  //
     sT10       : Variant;  //
     sT11       : Variant;  //
     sT12       : Variant;  //
     sT13       : Variant;  //
     sT14       : Variant;  //
     sT15       : Variant;  //
     sT16       : Variant;  //
     sT17       : Variant;  //
     sT18       : Variant;  //
     sT19       : Variant;  //
     sT20       : Variant;  //
     sT21       : Variant;  //
     sT22       : Variant;  //
     sT23       : Variant;  //
     sT24       : Variant;  //
     sT25       : Variant;  //
     sT26       : Variant;  //
     sT27       : Variant;  //
     sT28       : Variant;  //
     sT29       : Variant;  //
     sT30       : Variant;  //
     sT31       : Variant;  //

     sL1        : Variant;  //
     sL2        : Variant;  //
     sL3        : Variant;  //
     sL4        : Variant;  //
     sL5        : Variant;  //
     sL6        : Variant;  //
     sL7        : Variant;  //
     sL8        : Variant;  //
     sL9        : Variant;  //
     sL10       : Variant;  //
     sL11       : Variant;  //
     sL12       : Variant;  //
     sL13       : Variant;  //
     sL14       : Variant;  //
     sL15       : Variant;  //
     sL16       : Variant;  //
     sL17       : Variant;  //
     sL18       : Variant;  //
     sL19       : Variant;  //
     sL20       : Variant;  //
     sL21       : Variant;  //
     sL22       : Variant;  //
     sL23       : Variant;  //
     sL24       : Variant;  //
     sL25       : Variant;  //
     sL26       : Variant;  //
     sL27       : Variant;  //
     sL28       : Variant;  //
     sL29       : Variant;  //
     sL30       : Variant;  //
     sL31       : Variant;  //

     function MultiSelSbaby(sType1:String):Integer;
    end;

    {
    // 간호정보조사지(산부인과)
    HmdOginft = class
     sPatNo 	 : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sMedDept	 : Variant;  // 진료과
     sGenDr	    : Variant;  // 담당의사
     sSpcDr	    : Variant;  // 지정진료의사
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDschDate	 : Variant;  // 퇴원일자
     sIndzDt	 : Variant;  // 진단명
     sInfDnr	 : Variant;  // 정보제공자
     sMarryYn	 : Variant;  // 결혼여부
     sMarryAge	 : Variant;  // 결혼연령
     sReligion	 : Variant;  // 종교
     sHusname	 : Variant;  // 배우자 이름
     sJob1  	 : Variant;  // 산모직업
     sJob2  	 : Variant;  // 배우자직업
     sEdudGr1	 : Variant;  // 산모 교육정도
     sEdudGr2	 : Variant;  // 배우자 교육정도
     sAdmOvsts	 : Variant;  // 입원상태
     sAdmReson	 : Variant;  // 입원동기
     sHxDz1	    : Variant;  // 과거병력 산모
     sHxDzdt1	 : Variant;  // 과거병력 산모상세
     sHxDz2	    : Variant;  // 과거병력 배우자
     sHxDzdt2	 : Variant;  // 과거병력 배우자상세
     sFamHis	 : Variant;  // 가족력
     sLstdrgYn	 : Variant;  // 최근투약여부
     sLstdrgSt	 : Variant;  // 임신중 약물복용
     sAlgctnt	 : Variant;  // 알러지
     sDiMthd	 : Variant;  // 예정수유방법
     sOlook 	 : Variant;  // 외관상 건강상태
     sBldPre	 : Variant;  // 혈압
     iBodyTemp	 : Variant;  // 체온
     iHrtBt 	 : Variant;  // 맥박
     iResp  	 : Variant;  // 호흡
     iHeight	 : Variant;  // 신장
     iWeight1	 : Variant;  // 체중(임신전)
     iWeight2	 : Variant;  // 체중(임신후)
     sNpoYn 	 : Variant;  // 금식여부
     sNpoTerm	 : Variant;  // 금식기간
     sPmedYn	 : Variant;  // 산전 진찰여부
     sPmedHsp	 : Variant;  // 산전 검사 병원
     sMaPer 	 : Variant;  // 생리주기
     sDrtmon	 : Variant;  // 생리기간
     sMaSts 	 : Variant;  // 생리상태
     sPmedrYn	 : Variant;  // 정기진찰여부
     sPrvMon	 : Variant;  // 전월경일
     sQntMon	 : Variant;  // 월경양
     sPainYn	 : Variant;  // 신체 동통유무
     sPmedlDt	 : Variant;  // 최종진찰일
     sFstMon	 : Variant;  // 최초월경일(초경)
     sMlst2 	 : Variant;  // 최종 월경일
     sDlst  	 : Variant;  // 최종 분만일
     sEndMon	 : Variant;  // 폐경
     sDgp   	 : Variant;  // 임신기간
     sDlstTp	 : Variant;  // 이전 분만형태
     sDexDt	    : Variant;  // 분만 예정일
     sArtAbort	 : Variant;  // 최종 인공유산일자
     sNatAbort	 : Variant;  // 최종 자연유산일자
     sPari1	    : Variant;  // 출산력1
     sPari2	    : Variant;  // 출산력2
     sPari3	    : Variant;  // 출산력3
     sPari4	    : Variant;  // 출산력4
     sPari5 	 : Variant;  // 출산력5
     sPari6 	 : Variant;  // 출산력6
     sPari7 	 : Variant;  // 출산력7
     sDewYn 	 : Variant;  // 이슬 유무
     sDewDate	 : Variant;  // 이슬 일시
     sRomYn 	 : Variant;  // 파수 유무
     sRomDt 	 : Variant;  // 파수 일시
     sPainInt	 : Variant;  // 진통 간격
     sPainDt	 : Variant;  // 진통 일시
     sPainPer	 : Variant;  // 지속시간
     sFhtYn	    : Variant;  // 태아 심음여부
     sFhtrPt	 : Variant;  // 태아 심음 상태기록
     sNeoYn 	 : Variant;  // 부종여부
     sUrpro 	 : Variant;  // 뇨단백
     sBldAbo1	 : Variant;  // 혈액형(ABO)-산모
     sBldAbo2	 : Variant;  // 혈액형(ABO)-배우자
     sBldRh1	 : Variant;  // 혈액형(RH)-산모
     sBldRh2	 : Variant;  // 혈액형(RH)-배우자
     sConsStat	 : Variant;  // 의식상태
     sComm  	 : Variant;  // 의사소통
     sFeelStat	 : Variant;  // 정서상태
     sEmostSd	 : Variant;  // 정서상태 상세
     sExmSip1	 : Variant;  // 매독 반응여부(산모)
     sExmSip2	 : Variant;  // 매독 반응여부(배우자)
     sEtc   	 : Variant;  // 기타 신체증상
     sEtcDt 	 : Variant;  // 기타 신체증상 상세
     sInEdu1	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu2	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu3	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu4	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu5	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu6	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu7	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu8	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu9	 : Variant;  // 입원시 간호 및 교육상태
     sInEdu10	 : Variant;  // 입원시 간호 및 교육상태
     sSymptoms	 : Variant;  // 주증상
     sLaborInt	 : Variant;  // 진통간격
     sLaborDeg	 : Variant;  // 진통정도
     sMint  	 : Variant;  // 진통 시작시간
     sLaborMin	 : Variant;  // 진통 지속시간
     sGrwArea	 : Variant;  // 성장지역
     sHabEtc	 : Variant;  // 습관 기타
     sFecCol	 : Variant;  // 대변색
     sFecChr	 : Variant;  // 대변 특징
     sFecCnt	 : Variant;  // 대변 횟수
     sUrCol 	 : Variant;  // 습관 소변색
     sUrFlv 	 : Variant;  // 습관 소변냄새
     sUrQnt 	 : Variant;  // 습관 소변양
     sUrChr 	 : Variant;  // 습관 소변특징
     sUrCnt 	 : Variant;  // 습관 소변횟수
     sSlpAd 	 : Variant;  // 습관 수면돕는법
     sSlpTm 	 : Variant;  // 습관 수면시간
     sSlpDso	 : Variant;  // 습관 수면장애
     sHabdrk	 : Variant;  // 음주여부
     sUnbCont	 : Variant;  // 습관 편식여부
     sUnbYn 	 : Variant;  // 습관 편식유무
     sHabSmk	 : Variant;  // 흡연상태
     sDfrmAd	 : Variant;  // 기형상세
     sDfrmPrt	 : Variant;  // 기형부위
     sPainPrt	 : Variant;  // 신체 동통부위
     sPainDet	 : Variant;  // 동통상세
     sParPrt	 : Variant;  // 마비부위
     sParDet	 : Variant;  // 마비상세
     sNeoPrt	 : Variant;  // 부종부위
     sNeotrcYn	 : Variant;  // 부종요흔유무
     sGls   	 : Variant;  // 장애보조기
     sGlsPrt	 : Variant;  // 장애부위
     sEarAux	 : Variant;  // 청력보조기
     sEarPrt	 : Variant;  // 청력장애부위
     sSknunPrt	 : Variant;  // 피부상태 이상부위
     sSknunDgr	 : Variant;  // 피부상태 이상증상
     sSkncunPr	 : Variant;  // 신체 피부색 이상부위
     sSkncunDg	 : Variant;  // 신체 피부색 이상정도
     sInspSts	 : Variant;  // 신체 호흡상태
     sMan   	 : Variant;  // 지남력(의식상태)
     sDtime 	 : Variant;  // 지남력 시간
     sPlc   	 : Variant;  // 지남력 장소
     sFamPln	 : Variant;  // 가족계획
     sMvMthd	 : Variant;  // 이동방법
     sMvMthddt	 : Variant;  // 이동방법 상세
     sAftSrv	 : Variant;  // 퇴원후 추후관리
     sAftSrvd	 : Variant;  // 퇴원후 추후관리 상세
     sDietKind	 : Variant;  // 식이종류
     sDietName	 : Variant;  // 식이종류 상세
     sCal   	 : Variant;  // 칼로리
     sDietKnow	 : Variant;  // 식이이해정도 평가
     sPrvInfc	 : Variant;  // 감염예방
     sDmCtrl	 : Variant;  // 당뇨조절
     sFtCare	 : Variant;  // 발간호
     sBpCtrl	 : Variant;  // 혈압조절
     sFmCtrl	 : Variant;  // 체위변경
     sWtCtrl	 : Variant;  // 체중측정
     sOrCare	 : Variant;  // 구강간호
     sTbCtrl	 : Variant;  // 튜브관리
     sStCtrl	 : Variant;  // 좌욕
     sDsEtc 	 : Variant;  // 기타
     sAskPn	    : Variant;  // 문의전화
     sEduWho	 : Variant;  // 교육대상
     sOutSmtm	 : Variant;  // 외래진료나 문의를 요하는 증상
     sActArea	 : Variant;  // 활동범위
     sActDtl	 : Variant;  // 활동범위상세
     sActKnow	 : Variant;  // 활동범위 이해도평가
     sBath  	 : Variant;  // 목욕
     sBathLim	 : Variant;  // 목욕제한 범위
     sBathEtc	 : Variant;  // 목욕제한 기타
     sBathKnow	 : Variant;  // 목욕제한 이해정도 평가
     sOrsvTm1	 : Variant;  // 기타사항
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
    end;

    // 간호정보조사지(신생아)
    HmdNbinft = class
     sPatNo 	 : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sBabySeq	 : Variant;  // 1명 이상의 아이 SEQ
     sBabyNo	 : Variant;  // 신생아번호
     sMedDept	 : Variant;  // 진료과
     sGenDr 	 : Variant;  // 담당의사
     sSpcDr 	 : Variant;  // 지정진료의사
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sDiagCd	 : Variant;  // 진단코드(ICD-10)
     sDschDate	 : Variant;  // 퇴원일자
     sBornDate	 : Variant;  // 출생일시
     sDgp	    : Variant;  // 임신기간
     sInbornCt	 : Variant;  // 유도분만 횟수
     sDelvType	 : Variant;  // 분만형태
     sDelvDr	 : Variant;  // 분만의사
     sDelvNur	 : Variant;  // 분만간호사
     sDeathYn	 : Variant;  // 사망여부
     sExpType	 : Variant;  // 사망형태
     sExpCau1	 : Variant;  // 사망원인
     sExpCau2	 : Variant;  // 사망원인 기타
     sMove  	 : Variant;  // 이동위치
     sSex   	 : Variant;  // 성별
     iWeight	 : Variant;  // 체중(신생아)
     iHeight	 : Variant;  // 신생아키
     sDfrmYn	 : Variant;  // 기형유무
     sDfrmDt	 : Variant;  // 기형 상세
     sCpr   	 : Variant;  // 아기CPR 정보
     iApgaHr1	 : Variant;  // Heart rate  1분
     iApgaHr5	 : Variant;  // Heart rate  5분
     iApgaHr10	 : Variant;  // Heart rate  10분
     iApgaRe1	 : Variant;  // Resp.effort  1분
     iApgaRe5	 : Variant;  // Resp.effort  5분
     iApgaRe10	 : Variant;  // Resp.effort  10분
     iApgaMt1	 : Variant;  // Muscle tone 1분
     iApgaMt5	 : Variant;  // Muscle tone 5분
     iApgaMt10	 : Variant;  // Muscle tone 10분
     iApgaRi1	 : Variant;  // R. irritability 1분
     iApgaRi5	 : Variant;  // R. irritability 5분
     iApgaRi10	 : Variant;  // R. irritability 10분
     iApgaCl1	 : Variant;  // Color 1분
     iApgaCl5	 : Variant;  // Color 5분
     iApgaCl10	 : Variant;  // Color 10분
     sDrgSt 	 : Variant;  // 분만중 투약
     sStlYn 	 : Variant;  // 태변통과여부
     sStlcolYn	 : Variant;  // 태변착색여부
     sStlCol	 : Variant;  // 태변착색
     sFstUri	 : Variant;  // 첫소변유무
     sOxygen	 : Variant;  // 산소 흡입
     sCprYn 	 : Variant;  // 소생술여부
     sSrom  	 : Variant;  // 양막파수
     sArom  	 : Variant;  // 양막파수
     sCornec	 : Variant;  // Cord Neck Around 유무
     sCorneCnt	 : Variant;  // Cord Neck Around count
     sEntDate	 : Variant;  // 신생아도착시간
     iBodyTemP	 : Variant;  // 체온
     iHrtBt 	 : Variant;  // 맥박
     iResp  	 : Variant;  // 호흡
     iHeadSize	 : Variant;  // 두위
     iChstSize	 : Variant;  // 흉위
     iBodySize	 : Variant;  // 복위
     sNabelBld	 : Variant;  // 제대출혈
     sNabelVs1	 : Variant;  // 제대출혈(동맥수)
     sNabelVs2	 : Variant;  // 제대출혈(정맥수)
     sAnal  	 : Variant;  // 항문천공
     sHyn   	 : Variant;  // 흡인유무
     sHqut  	 : Variant;  // 흡인 배액양
     sHcon  	 : Variant;  // 흡인 농도
     sHcol  	 : Variant;  // 흡인 색깔
     sHetc  	 : Variant;  // 흡인 기타
     sCryRate	 : Variant;  // 울음정도
     sRespYn	 : Variant;  // 호흡기 장애여부
     sRespSt	 : Variant;  // 호흡기 장애증상
     sRespEtc	 : Variant;  // 호흡기 장애기타
     sCircYn	 : Variant;  // 순환기장애 여부
     sCircSt	 : Variant;  // 순환기장애 증상
     sCircEtc	 : Variant;  // 순환기장애 기타
     sSknunYn	 : Variant;  // 신체 피부상태 이상여부
     sSknunSt	 : Variant;  // 피부 장애 증상
     sSknunPt	 : Variant;  // 피부 장애 부위
     sHeadFr	 : Variant;  // 머리형태 장애
     sHeadEtc	 : Variant;  // 머리 형태 장애 기타
     sFaceYn	 : Variant;  // 얼굴 장애 여부
     sFaceSt	 : Variant;  // 얼굴 장애 상태
     sFaceEtc	 : Variant;  // 얼굴 장애 기타
     sUriYn 	 : Variant;  // 비뇨생식기 장애 여부
     sUriSt 	 : Variant;  // 비뇨생식기 증상
     sUriEtc	 : Variant;  // 비뇨생식기 기타
     sLimYn 	 : Variant;  // 사지 장애 여부
     sLimSt 	 : Variant;  // 사지 장애 증상
     sLimEtc	 : Variant;  // 사지장애 기타
     sDiaRef	 : Variant;  // 모로반사정도
     sDiaRefas	 : Variant;  // 모로반사비대칭
     sCatRef	 : Variant;  // 잡기반사정도
     sCatRefas	 : Variant;  // 잡기반사비대칭
     sLactRef	 : Variant;  // 표유반사정도
     sPumRef	 : Variant;  // 빨기 반사 정도
     sDfrmEtc	 : Variant;  // 기형 및 외상
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function Select1(Cnt:Integer):Integer;
     function List1(Cnt:Integer):Integer;
     function Input1(Cnt:Integer):Integer;
    end;

    }

        // 간호정보조사지(정신과)
    HmdPyinft = class
     sPatNo	    : Variant;    // 환자번호
     sAdmDate	 : Variant;    // 입원일자
     sMedDept   : Variant;    // 진료과/진료부서
     sInfDnr    : Variant;    // 정보제공자
     sRecNrs    : Variant;    // 면담자
     sAdmPath   : Variant;    // 입원경로
     sAdmWith   : Variant;    // 입원시동반자
     sWed       : Variant;    // 결혼상태
     sFamily    : Variant;    // 가족관계
     sBirth     : Variant;    // 출생지
     sReligion  : Variant;    // 종교
     sEduDgr    : Variant;    // 교육정도
     sJob       : Variant;    // 직업
     sRich      : Variant;    // 경제상태
     sSleep     : Variant;    // 수면
     sDiet      : Variant;    // 식사
     sFec       : Variant;    // 배변
     sAllergy   : Variant;    // 알러지
     sFav       : Variant;    // 기호품
     sHobby     : Variant;    // 취미
     sEtc       : Variant;    // 기타
     sSymptoms  : Variant;    // 주증상
     sLaPsy     : Variant;    // 과거병력(정신과적)
     sLaInOut   : Variant;    // 과거병력(내외과적)
     sFamHis    : Variant;    // 가족력
     sBeChar    : Variant;    // 병전성격(대인관계)
     sFace      : Variant;    // 외모
     sSpirit    : Variant;    // 정신운동상태
     sSpiEtc    : Variant;    // 정신운동상태기타상세
     sAtti      : Variant;    // 태도
     sEmo       : Variant;    // 정서상태
     sLang      : Variant;    // 언어
     sSens      : Variant;    // 지각
     sAcci      : Variant;    // 사고내용
     sCons      : Variant;    // 의식수준
     sGn        : Variant;    // 지남력장애
     sRem       : Variant;    // 기억력장애
     sJud       : Variant;    // 현실에대한 판단력
     sHeight    : Variant;    // 키
     sWeight    : Variant;    // 몸무게
     sEditId	 : Variant;    // 수정자 ID
     sEditIp	 : Variant;    // 수정자 IP
     sEditDate	 : Variant;    // 수정일시
     function SelectPyinft(sKey1, sKey2:string):Integer;
{
     function InsertPyinft(sPatNo ,   sAdmDate,  sMedDept , sInfDnr,   sHeight,   sWeight,
                           sRecNrs,   sAdmPath,  sAdmWith , sWed   ,   sFamily,   sBirth ,
                           sReligion, sEduDgr ,  sJob     , sRich  ,   sSleep ,   sDiet   ,
                           sFec   ,   sAllergy,  sFav     , sHobby ,   sEtc   ,   sSymptoms,
                           sLaPsy ,   sLaInOut,  sFamHis  , sBeChar,   sFace  ,   sSpirit,
                           sSpiEtc,   sAtti   ,  sEmo     , sLang  ,   sSens  ,   sAcci   ,
                           sCons  ,   sGn     ,  sRem     , sJud   ,   sEditId,   sEditIp ,
                           sChadr ,   sGendr  ,  sWardno  , sRoomno : String):Integer;
}
    end;


    // 간호환자분류기본
    HmdPtclmt = class
     sPatNo	       : Variant;  // 환자번호
     sAdmDate  	 : Variant;  // 입원일자
     sGrpDate  	 : Variant;  // 분류일자
     sWardNo   	 : Variant;  // 병동번호
     sMedDept  	 : Variant;  // 진료과
     sPatGrp   	 : Variant;  // 환자분류군
     iTotalPnt 	 : Variant;  // 환자분류의 점수합
     sEditId   	 : Variant;  // 수정자 ID
     sEditIp   	 : Variant;  // 수정자 IP
     sEditDate	    : Variant;  // 수정일시
     // 간호환자분류 조회용 ( 2001.06.08 by mms )
     sPatName      : Variant;  // P 입원일자
     sOpdate       : Variant;  // 최근수술일자
     sLstgrpdate   : Variant;  // 최종분류일
     sBfpatgrp     : Variant;  // 전등급
     sBftotalpnt   : Variant;  // 전분류점수  <-- 변수명 변경
     sBfgrpdate    : Variant;  // 전분류일
     sCurpatgrp    : Variant;  // 현재등급
     sCurtotalpnt  : Variant;  // 현재분류점수 <-- 변수명 변경
     sRoomno       : Variant;  // 병실 번호
     sSex : Variant;
     sBirtdate : Variant;
     sTotalpnt : Variant;
     sNumber1 : Variant;
     sNumber2 : Variant;
     sNumber3 : Variant;

     function List1(sType1,sType2,sType3,sType4:string):Integer;
     function Input1(sDate : String ;Cnt:Integer):Integer;
     function Input2(Cnt:Integer):Integer;
     function Delete1(sType1,sType2,sType3,sType4:string):Integer;
// 이선규 추가
     function ward_patgrp_select(sWard,sDate,sGrp :String) : integer;
     function GetPatGrpCount(sWard, sDate: string): Integer;


    end;


    // 간호환자분류상세
    HmdPtcldt = class
     sPatNo	    : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sGrpDate	 : Variant;  // 분류일자
     sWardNo	 : Variant;  // 병동번호
     sPatCls    : Variant;  // 환자분류그룹 (by mms)
     sPatgrpCd	 : Variant;  // 환자분류코드
     sStdPts	 : Variant;  // 기준점수
     sIcutype   : Variant;  // 병동 ,중환분류
     sCount     : Variant;  // 횟수
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sPatGrpnm	 : Variant;  // 환자분류코드명 ( by mms )
     sTotalTs   : Variant;  // 기준점수합계 (by mms)
     sMedDept   : Variant;  // 진료과 (by mms)
     sOther     : Variant;  // 기타군을 조회하는 변수
     // Created by mms (2001.06.09)
     function List1(sCode1,sType1,sType2,sType3,sType4,sType5:string):Integer;
     function Input1(Cnt:Integer):Integer;
    end;

    // 환자분류코드기본 ( created by mms (2001.06.11)) 새로 추가됨
    HmnPgrpmt = class
     sIcuType	 : Variant;  // 병동중환구분
     sPatCls	 : Variant;  // 환자분류그룹
     sPatClsNm	 : Variant;  // 환자분류그룹명
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
    end;


    // 환자분류코드상세 ( created by mms (2001.06.11)) 새로추가됨
    HmnPgrpdt = class
     v_Icutype  ,             // 병동중환구분
     v_Patcls   ,             // 환자분류그룹
     v_Patclsnm ,             // 환자분류그룹명
     v_Patgrpcd ,             // 환자분류
     v_Patgrpnm ,             // 환자분류명
     v_Detegude ,             // 결정지침
     v_Stdpts   ,             // 기준점수
     v_Patgrp   ,             // 환자분류군
     v_Factyn   ,             // factor여부
     v_Factman  ,             // factor설명
     v_Count    ,             // 횟수
     v_Ckyn     ,             // Check여부
     v_Timeyn   :  Variant;   // 병동별 시간입력 여부

     // 상세코드 조회

     function List1(s_code,s_patno,s_admdate,s_grpdate,s_wardno: string):Integer;
    end;


    // V/S기록
    HmdVitalt = class
     sPatNo 	 : Variant;  // 환자번호
     sPatName   : Variant;  // 환자명
     sAdmDate	 : Variant;  // 입원일자
     sRoomNo    : Variant;  // 병실
     sExecDate	 : Variant;  // 실시일자
     sExecTime	 : Variant;  // 실시시간
     sBodyTemp	 : Variant;  // 체온
     sPulse 	 : Variant;  // PULSE RATE
     sRespCnt	 : Variant;  // Respiration Count
     sBldpreHi	 : Variant;  // 혈압(HIGH)
     sBldpreLo	 : Variant;  // 혈압(LOW)
     sUrCnt  	 : Variant;  // 소변회수
     sStoolCnt	 : Variant;  // Stool Count
     sStolStat	 : Variant;  // Stool State
     sChkPart	 : Variant;  // 측정부위
     sChkPass	 : Variant;  // 측정경로
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sNrname    : Variant;
     sSat       : Variant;  //산소포화도.20190904.kya.
     sConsyn    : Variant;  //의식변화.20190904.kya.
     sConstate  : Variant;  //의식상태.20190904.kya.
     
     function SelectVsPat(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
     function SelectVsPat1(sType1:String):Integer;
     function InputVsValue(Cnt:Integer):Integer;
     function DeleteVS(PatNo,AdmDate,ExecDate,ExecTime:String):Integer;
     //신속대응팀 확인 여부.20190917.kya.
     function VITAL_U1(sPatno,tAdmdate,tExecdate,tExectime,sConfirm : string) :Integer;
    end;

    // I/O & Check
    HmdIochkt = class
     sType      : Variant;  // 조건
     sPatNo	    : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sChkType	 : Variant;  // 체크구분
     sExecDate	 : Variant;  // 실시일자
     iSeqNo	    : Variant;  // 순번
     sExecTime	 : Variant;  // 실시시간
     sChkGrp	 : Variant;  // CHECK분류
     sChkItem	 : Variant;  // CHECK명
     iVolume	 : Variant;  // 용량
     sPhase	    : Variant;  // 양상(대변)
     iWeight	 : Variant;  // 체중(혈당)
     sInsuline	 : Variant;  // 인슐린(혈당)
     sInjtPart	 : Variant;  // 인슐린 주사부위(혈당)
     sRoomNo	 : Variant;  // 병실번호
     sCount     : Variant;  // 대변횟수
     sHeight    : Variant;  // 신장
     sChkItem1  : Variant;  // 복위
     sChkItem2  : Variant;  // 흉위
     sChkItem3  : Variant;  // 두위
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     iVolume1	 : Variant;  // InTake 용량
     iVolume2	 : Variant;  // OutTake 용량
     iVolume3	 : Variant;  // 혈액 용량
     iVolume4	 : Variant;  // 대변 횟수
     iVolume5	 : Variant;  // 대변 용량
     iVolume6	 : Variant;  // 배뇨 횟수
     sChkCnt    : Variant;  // 체크 횟수(1,2,3,4 회)

     v_Chadrnm  : Variant ; //주치의명
     v_Deptnm   : Variant ; // 진료과명
     v_WardNo   : Variant ; // 병동
     v_Roomno   : Variant ; // 병실

     function ListIOWeight(sType1,sType2,sType3,sType4,sType5:String):Integer;
     function InputIOValue(Cnt:Integer):Integer;
     function DelInsChkItem(sType,sSlipCd,sPatno,sAdmdate,sChktype,
                            sExecdate,sExectime,sChkgrp,sChkname,sPhase,
                            sInsuline,sInjtpart,sRoomno,sHeight,sChkItem1,
                            sChkItem2,sChkItem3,sEditid,sEditip,
                            lVolume,lWeight:String;lSeqno:Integer):Integer;
     function MultiDelInsChkItem(Cnt:Integer):Integer;
     //(추가. 2003.1.4 이용언)
     function ListIOWeight2(sType1,sType2,sType3,sType4,sType5:String):Integer;
     function MultiDelInsChkItem2(Cnt:Integer):Integer;
    end;

    // I/O기준량
    HmdIoqtct = class
     sIoType    : Variant;  // I/O 구분
     iSeqNo  	 : Variant;  // 순번
     sChkItem	 : Variant;  // 품명
     iVolume	 : Variant;  // 기준용량
     sPhase     : Variant;  // 양상(대변)
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function ListIoItem(sType1,sType2:String):Integer;
     function DelInsIoItem(sType,sIotype,sChkitem,sPhase,sWardno,sEditid,
                           sEditip,lVolume:String;lSeqno:Integer):Integer;
    end;

   // 외래예약내역(원무)
   HmdOpdlst = class
    sPatNo       : Variant;  // 환자번호
    sMedDate     : Variant;  // 진료일자
    sMedDept     : Variant;  // 진료과
    sDeptNm      : Variant;  // 진료과명
    sMedDr       : Variant;  // 진료의사
    sMedTime     : Variant;  // 진료예약시간
    sOrdDate     : Variant;  // 처방일자/예약신청일자
    sDiagName    : Variant;  // 진단명
    iStayNo      : Variant;  // 진료대기순서
    iUnCollect   : Variant;
    sPatTypeNm   : Variant;  // 환자유형
    sPatType     : Variant;  // 환자유형코드
    sRsvType     : Variant;  // 예약구분
    sRsvTypeCd   : Variant;  // 예약구분코드
    sRsvcfmYn    : Variant;  // 예약확인
    sTypeCd      : Variant;  // 유형보조
    sSpcdrYn     : Variant;  // 선택의사여부
    sFstmedTy    : Variant;  // 초재진구분
    sMedrcpYn    : Variant;  // 진찰료수납여부
    sRcpYn       : Variant;  // 수납여부
    sMedYn       : Variant;  // 진찰여부
    sMedchgId    : Variant;  // 진찰여부수정자
    sErDate      : Variant;  // 응급실도착시간
    sOeFlag      : Variant;  // 외래응급여부
    sOiFlag      : Variant;  // 외래/입원구분
    sHdsFlag     : Variant;  // 인공신장투석구분
    sRejtDate    : Variant;  // 취소일시
    sFstinpId    : Variant;  // 최초입력자
    tFstTime     : Variant;  // 최초입력시간
    iRcpSeq      : Variant;  // 수납순번
    sAdmDate     : Variant;  // 예약일자/접수일자/입원일자
    sRemark      : Variant;  // 비고
    sPatName     : Variant;  // 환자명
    sSex         : Variant;  // 성별
    sBirtDate    : Variant;  // 생년월일
    sMedDrNm     : Variant;  // 진료의Name
    sOtherYn     : Variant;  // 타과예약여부
    sChartYn     : Variant;  // 입원차트대출여부
    sFilmYn      : Variant;  // 필름대출희망여부
    sTelNo1      : Variant;  // 환자전화번호1
    sTelNo2      : Variant;  // 환자전화번호2
    sTelNo3      : Variant;  // 환자전화번호3
    sGenDr       : Variant;  // 전공의
    sFollow      : Variant;  // Followup 여부
    sPatcls      : Variant;  //환자구분
    sGubn        : Variant;  //환자구분명
    sEditId      : Variant;  // 수정자ID
    sEditIp      : Variant;  // 수정단말IP
    sBodytemp    : Variant;  //소아과 체온
    sWeight      : Variant;  //소아과 체중
    sCount       : Variant;  // 예약인원
    sFstmedtyR   : Variant;
    sFsttime     : Variant;
    sCustcd      : Variant;
    sDccode      : Variant;
    sPattypeCd   : Variant;
    sResno1      : Variant;
    sResno2      : Variant;
    sCurrloc     : Variant;  //차트현위치
    sDschDate    : Variant;  // 최종퇴원일
    sFuture      : Variant;
    sNochcd      : Variant;
    sWardno      : Variant;
    sRoomno      : Variant;
    sReferyn     : Variant;
    sArvyn       : Variant;
    sDenpatno    : Variant;
    sAddress     : Variant;
    sZipcd       : Variant;
    sLastdate    : Variant;
    sRcpdate     : Variant;
    sSpgubun     : Variant;
    sScanYn      : Variant;
    sRefPaperYn  : Variant;
    sPacsCdYn    : Variant;
    //외래환자이송사유, KimDaeYong 2016-11-08
    sTransrsn    : Variant;
    sTransetc    : Variant;
    sTranshosnm  : Variant;
    sRmkyn       : Variant;
    sRmketc      : Variant;
    sPregyn      : Variant; //임신부관리, KimDaeYong 2016-12-28
    sTranshosgbn : Variant;
    sOpinyn      : Variant;
    sDiffpregyn  : Variant; //산부인과,난임시술여부. KimDaeYong 2017-09-25
    sDiagcd      : Variant; //주진단코드. KimDaeYong 2018-01-22
    sSilinsyn    : Variant; //실비보험가입여부. KimDaeYong 2020-11-25
    sDiagTypeCd  : Variant; //진단유형코드. KimDaeYong 2021-03-16
    //메시지수신여부. KimDaeYong 2021-12-16
    sSmsyn      : Variant;
    sInfuseyna  : Variant;


     // 조건에 따른 외래예약 List SELECT (진료일+진료과+진료의+진료여부+진료시간)
     function ListOpReserv(MedDate,MedDept,MedDr,MedYn,MedTime,Flu:String):Integer;
     // 조건에 따른 외래예약 List SELECT (진료일+진료과+진료의+진료여부+진료시간)
     function ListOpReserv3(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
     // 조건에 따른 외래예약 List SELECT (진료일+진료과+진료의+진료여부+진료시간▶당일접수 뒤로Sorting)
     function ListOpReserv2(sType1,MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
     // 내과 일반진료 외래예약 List SELECT (구분+진료일+진료여부)
     function IMListOpReserv(Type1,MedDate,MedYn:String):Integer;
     // 내과 일반진료 외래예약 List SELECT (구분+진료일+진료여부▶당일접수 뒤로Sorting)
     function IMListOpReserv2(Type1,MedDate,MedYn:String):Integer;

     // 외래재진예약 내역 Insert
     function InsertOpReserv(Patno,Meddate,Meddept,Meddr,Medtime,Remark,Chartyn,
                             Filmyn,TelNo1,TelNo2,TelNo3,Follow,Editid,Editip,sRsvGubun,sRsvdept,sSpgubun:string):Integer;
     // 외래재진예약 취소 (취소일시 Udpate)
     function CancelOpReserv(Patno,Meddate,Meddept,Meddr,Medtime,
                             Editid,Editip:String):Integer;
     function SelectOtherDept(PatNo,MedDate,MedDept,Location:String):Integer;
     // 퇴원간호계획(왜래예약정보)
     function SelectDsnrpJoin(PatNo,AdmDate,MedDept,Location:String):Integer;
     // 외래예약 진료여부 Update
     function UpdateMedYn(PatNo,MedDate,MedDept,MedDr,MedTime,
                          EditId,EditIp:String):Integer;
     // 환자별 외래예약 현황 조회
     function PatOpReserv(sType1,sType2:String):Integer;
     // 조건에 따른 외래예약 List SELECT (진료일+진료과+전공의+진료여부+진료시간) - 치과용
     function ChaDrListOpReserv(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
     // 치과 외래재진예약 내역 Insert
     function DtInsertOpReserv(Patno,Meddate,Meddept,Meddr,Medtime,Remark,GenDr,
                               Chartyn,Filmyn,TelNo1,TelNo2,TelNo3,Follow,
                               Editid,Editip,RsvType:String):Integer;
     // clinic예약 내역 Insert
     function InsertClinicReserv(Patno,Meddate,Meddept,Meddr,Medtime,Remark,
                                 Chartyn,Filmyn,TelNo1,TelNo2,TelNo3,Follow,
                                 Editid,Editip,sRsvGubun:String):Integer;
     // 클리닉예약 취소 (취소일시 Udpate)
     function CancelClinicReserv(Patno,Meddate,Meddept,Meddr,Medtime,
                                 Editid,Editip:String):Integer;
     // 환자유형(PATTYPE) 일반(51)으로 변경
     function ChangePatType(Patno,Meddate,Meddept,Meddr,Medtime:String):Integer;
     // 수술의뢰시 외래 환자 선택을 위한 자료 검색
     function SelectOpPat(Patno1,MedDept1:String):Integer;
     //메인화면 환자번호입력
     function SelectPat(PatNo:String):Integer;
     // 소아과 환자 체중 및 체온 입력
     function UpdateWeight(Patno,Meddate,Meddept,Meddr,Medtime,
                           Bodytemp,Weight,Height,Patsect,RefPaper,PacsCd:String):Integer;
     // 해당일자 동일과 진료예약 여부 Check  2001/11/23
     function CheckReserv(sType1,sType2,sType3:String):Integer;

     //추가. 2002.11.13 환자도착 여부 체크 이용언
     function ChangeArvyn(Patno,Meddate,Meddept,Meddr,Medtime,
                                  Editid,Editip,sGubun:String):Integer;
     //(추가. 2003.03.26 이용언)
     function ListScopy(MedDate : String):Integer;
     // 낮병동 외래환자조회 (2004.11.25)
     function ChaDrListNPDHReserv(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
     function ListNPDHReserv(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;

      // 특기사항을 입력하는 부분이다. 이선규추가 2004.01.05
     function update_remark(sPatno   ,  //* 환자번호   */
                            sMeddate ,  //* 진료일자   */
                            sMeddept ,  //* 진료과     */
                            sMeddr   ,  //* 진료의사   */
                            sMedtime ,  //* 진료예약시간(
                            sRemark  ,  //* REMARK     */
                            sEditid  ,  //* 수정자ID   */
                            sEditip     //* 수정단말IP */
                            : String) : Integer;  // opdls_u7

     //특별환자구분(메르스관련)변경, KimDaeYong 2015-06-17
     function UpdateSpgubun(inPatno, inMeddate, inMeddept, inMeddr, inMedtime, inPatsect, inSpgubun, inEditid, inEditip:string):integer;
     //산부인과,난임시술여부. KimDaeYong 2017-09-25
     function UpdateDiffpreg(inPatno,inMeddate,inMeddept,inMeddr,inMedtime,inDiffpregyn,inEditid,inEditip : string):integer;
    end;

    // 간호계획코드
    HmdPlanct = class
     sMedDept	 : Variant;  // 진료과
     iDiagCd	 : Variant;  // 질환코드
     iDiagnoCd	 : Variant;  // 간호진단코드
     iMeditCd	 : Variant;  // 중재코드
     sDiseasNm	 : Variant;  // 질환명
     sDiagnoNm	 : Variant;  // 진단명
     sMeditNm	 : Variant;  // 중재명
     sChGoal	 : Variant;  // 목표
     sDelDate	 : Variant;  // 데이타 Expired Date
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function List1(Cnt:Integer):Integer;
    end;

    // 환자별간호계획
    HmdPplant = class
     sPatNo	    : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sMedDept	 : Variant;  // 진료과
     iDiagCd	 : Variant;  // 질환코드
     iDiagnoCd	 : Variant;  // 간호진단코드
     iMeditCd	 : Variant;  // 중재코드
     sSDate 	 : Variant;  // 계획시작일자
     sEedDate	 : Variant;  // 계획종료일자
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function list1(Cnt:Integer):Integer;
     function Update1(Cnt:Integer):Integer;
     function Delete1(Cnt:Integer):Integer;
     function Input1(Cnt:Integer):Integer;
    end;

    // 퇴원시간호계획
    HmdDsnrpt = class
     sPatNo	    : Variant;  // 환자번호
     sAdmDate	 : Variant;  // 입원일자
     sDschDate	 : Variant;  // 퇴원일자
     sAdmSchdt  : Variant;  // 재입원일자
     sRsvTime1	 : Variant;  // 외래예약 일시1
     sRsvTime2	 : Variant;  // 외래예약 일시2
     sRsvTime3	 : Variant;  // 외래예약 일시3
     sRsvTime4	 : Variant;  // 외래예약 일시4
     sRsvTime5	 : Variant;  // 외래예약 일시5
     sRsvTime6	 : Variant;  // 외래예약 일시6
     sMedDept1	 : Variant;  // 외래예약 진료과1
     sMedDept2	 : Variant;  // 외래예약 진료과2
     sMedDept3	 : Variant;  // 외래예약 진료과3
     sMedDept4	 : Variant;  // 외래예약 진료과4
     sMedDept5	 : Variant;  // 외래예약 진료과5
     sMedDept6	 : Variant;  // 외래예약 진료과6
     sMedDr1	 : Variant;  // 외래예약 진료의1
     sMedDr2	 : Variant;  // 외래예약 진료의2
     sMedDr3	 : Variant;  // 외래예약 진료의3
     sMedDr4	 : Variant;  // 외래예약 진료의4
     sMedDr5	 : Variant;  // 외래예약 진료의5
     sMedDr6	 : Variant;  // 외래예약 진료의6
     sOexmRsv	 : Variant;  // 외래검사 내역
     sOdrg  	 : Variant;  // 투약상태
     sMvMthd	 : Variant;  // 이동방법
     sConsStat	 : Variant;  // 의식상태(퇴원시)
     sAftSrv	 : Variant;  // 퇴원후 추후관리
     sAftSrvd	 : Variant;  // 퇴원후 추후관리 상세
     sDietKind	 : Variant;  // 식이종류
     sDietName1 : Variant;  // 식이종류 상세(치료식)
     sDietName2 : Variant;  // 식이종류 상세(기타)
     sPrvinfc	 : Variant;  // 감염예방
     sDmCtrl	 : Variant;  // 당뇨조절
     sFtCare	 : Variant;  // 발간호
     sBpCtrl	 : Variant;  // 혈압조절
     sFmCtrl	 : Variant;  // 체위변경
     sWtCtrl	 : Variant;  // 체중측정
     sOrCare	 : Variant;  // 구강간호
     sTbCtrl	 : Variant;  // 튜브관리
     sStCtrl	 : Variant;  // 좌욕
     sDsEtc 	 : Variant;  // 기타
     sAskPn 	 : Variant;  // 문의전화
     sEduWho	 : Variant;  // 교육대상
     sOutSmtm	 : Variant;  // 외래진료나 문의를 요하는 증상
     sActArea	 : Variant;  // 활동범위
     sBath  	 : Variant;  // 목욕
     sBathEtc	 : Variant;  // 목욕제한 기타
     sGoHome    : Variant;  // 퇴원후 갈곳
     sGoHomeD   : Variant;  // 퇴원후 갈곳 기타
     sEditIp    : Variant;  // 수정자 IP
     sEditId	 : Variant;  // 수정자 ID
     sEditDate	 : Variant;  // 수정일시
     //(추가. 2002.11.21) 퇴원약 복약지도
     sOrdcd     : Variant;  // 약코드
     sOrdname   : Variant;  // 약이름
     sContent   : Variant;  // 복약지도내용
     sAftsrvinf : Variant;  // 추후관리_정보제공유무 2011.05.04

     function SelectDsnrp(sType1,sType2:String):Integer;
     function InsertDsnrpt(sPatNo,      sAdmDate,    sDschDate,   sAdmSchdt,  sRsvTime1,
                           sRsvTime2,   sRsvTime3,   sRsvTime4,   sRsvTime5,
                           sRsvTime6,   sMedDept1,   sMedDept2,   sMedDept3,
                           sMedDept4,   sMedDept5,   sMedDept6,   sMedDr1,
                           sMedDr2,     sMedDr3,     sMedDr4,     sMedDr5,
                           sMedDr6,     sOexMrsv,    sOdrg,       sMvMthd,
                           sConsStat,   sAftSrv,     sAftSrvd,    sDietKind,
                           sDietName1,  sDietName2,  sPrvinfc,    sDmCtrl,
                           sFtCare,     sBpCtrl,     sFmCtrl,     sWtCtrl,
                           sOrCare,     sTbCtrl,     sStCtrl,     sDsEtc,
                           sAskPn,      sEduWho,     sOutSmtm,    sActArea,
                           sBath,       sBathEtc,    sGoHome,     sGoHomed,
                           sEditId,     sEditIp,     sAftsrvinf : String):Integer;
    end;

    // 응급간호정보조사지
    HmdErinft = class
     sPatNo	    : Variant;  // 환자번호
     sPatname   : Variant;  // 이름
     sMedtime   : Variant;  // 응급실 도착시간
     sIndate	 : Variant;  // 입실일시
     sCareTime  : Variant;  // 진료시간
     sSex       : Variant;  // 성별
     sBirtdate  : Variant;  // 생일
     sDeptnm    : Variant;  // 진료과
     sMedDate	: Variant;  // 접수일자
     iSeqNo	: Variant;  // 순번
     sLocation	: Variant;  // 응급실 위치
     sDisease	: Variant;  // 중증도
     sStepCd	: Variant;  // 내원수단
     sStepRmk	: Variant;  // 내원수단 기타내용
     sPathCd	: Variant;  // 내원경로
     sPathRmk	 : Variant;  // 내원경로 기타명
     sDieseCd	 : Variant;  // 질병구분
     sDieseRmk	 : Variant;  // 질병구분 기타명
     sAcciType	 : Variant;  // 사고종류
     sAcciDetl	 : Variant;  // 사고상세
     sAcciDate	 : Variant;  // 사고발생일시
     sAcciSite	 : Variant;  // 사고장소
     sInfDnr	 : Variant;  // 정보제공자
     sRecNrs     : Variant;  // 작성간호사
     sGenDr	 : Variant;  // 담당의사
     sAppear	 : Variant;  // 주증상
     sEduStat	 : Variant;  // 내원교육
     sConsStat	 : Variant;  // 의식상태
     sConsRmk	 : Variant;  // 의식상태 비고
     sErfeeYn	 : Variant;  // 응급의료관리료 대상여부
     sOutDate	 : Variant;  // 퇴실일시(yymmddhh24mi)
     sErRslt	 : Variant;  // 퇴원형태
     sMedRslt1	 : Variant;  // 진료결과 구분1
     sMedRslt2	 : Variant;  // 진료결과 구분2
     sMedRslt3   : Variant;  // 진료결과 구분3
     sMedRslt4	 : Variant;  // 검사기록       20070911
     sMedRslt5	 : Variant;  // 영상기록
     sMedRslt6	 : Variant;  // 수용능력확인
     sMedRslt7	 : Variant;  // 이송동의서
     sRsltRmk1	 : Variant;  // 진료결과 기타1
     sRsltRmk2	 : Variant;  // 진료결과 기타2
     sRsltRmk3	 : Variant;  // 진료결과 기타3
     sBodyTemp  : Variant;  // 체온
     sPulse     : Variant;  // 맥박
     sRespCnt   : Variant;  // 호흡
     sBldPress  : Variant;  // 혈압
     sWeight    : Variant;  // 체중
     sTelNo1	 : Variant;  // 전화번호1
     sTelNo2	 : Variant;  // 전화번호2
     sTelNo3	 : Variant;  // 전화번호3
     sOutYn 	 : Variant;  // 퇴원여부
     sMedDept   : Variant;  // 진료과ID
     sGenDrCd   : Variant;  // 담당의사ID
     sDiagName  : Variant;  // 진단명
     sCprYn     : Variant;  // CPR 유무
     sLstOrdDt  : Variant;  // 최종처방일시
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sRoomno    : Variant;  //입원시병실
     sWardno    : Variant;  //입원병동
     sType1     :Variant;
     sType2     :Variant;
     sType3     :Variant;
     sType4     :Variant;
     sType5     :Variant;
     sType6     :Variant;
     sType7     :Variant;
     sType8     :Variant;
     sType9     :Variant;
     sType10    :Variant;
     sType11    :Variant;
     sType12    :Variant;
     sType13    :Variant;
     sType14    :Variant;
     sType15    :Variant;
     sType16    :Variant;
     sType17    :Variant;
     sType18    :Variant;
     sType19    :Variant;
     sType20    :Variant;
     sType21    :Variant;
     sType22    :Variant;
     sType23    :Variant;
     sType24    :Variant;
     sType25    :Variant;
     sType26    :Variant;
     sType27    :Variant;
     sType28    :Variant;
     sType29    :Variant;
     //
     sStatDept  :Variant;
     sDiagKind  :Variant;
     sEmtype    :Variant;
     sEmOpYn    :Variant;  // 응급수술여부
     sAddInfo   :Variant;
     sCommon    :Variant;
     sWorkdate  :Variant;
     sSymtom1   :Variant;
     sSymtom2   :Variant;
     sSymtom3   :Variant;
     sSymseq1   :Variant;
     sSymseq2   :Variant;
     sSymseq3   :Variant;
     sInten     :Variant;
     sInjury    :Variant;
     sDangsa    :Variant;
     sBoho1     :Variant;
     sBoho2     :Variant;
     sBoho3     :Variant;
     sBoho4     :Variant;
     sBoho5     :Variant;
     sBoho6     :Variant;
     sBoho7     :Variant;
     sBoho8     :Variant;
     sBoho9     :Variant;
     sSymnm1    :Variant;
     sSymnm2    :Variant;
     sSymnm3    :Variant;


     // 이선규 추가 03-03-31
     v_Arvtime  : Variant;
     v_Patno    : Variant;
     v_Patname  : Variant;
     v_Sex      : Variant;
     v_Age      : Variant;
     v_Meddept  : Variant;
     v_Diagnm   : Variant;
     v_Conndate : Variant;
     v_Arvdate  : Variant;
     v_Gendr    : Variant;
     v_Outdate  : Variant;
     v_Rslrmk   : Variant;
     v_Diagcd   : Variant; //AMI 응급 주진단코드, KimDaeYong 2008-06-26
     v_Meddate  : Variant; //응급센터진료기록지.20160401.
     v_Medtime  : Variant;
     v_Emdiagcd : Variant; //중증응급질환.20160902.kya.

     sDecDate   : Variant;
     sERDept    : Variant;
     sHomeYN    : Variant;
     sLeavYN    : Variant;
     sETCMemo   : Variant;
     sHomeDate  : Variant;
     sRemarks   : Variant;
     sSelfdsch  : Variant;
     sEtcRslt   : Variant; // 2007.05.28 추가      송주

     //급성심근경색증 관련(도착아스피린정보) KimDaeYong 2008-06-13
     sAspunord  : Variant; //도착아스피린
     sAspunord7 : Variant; //도착아스피린기타
     sDiagcd    : Variant; //주진단코드

     sAdmdr     : Variant; //입원진료의

     sBldpressHi: Variant; //2010.01.06 송주
     sBldpressLo: Variant; //2010.01.06 송주

     sInHosp    : Variant; //2010.01.27 송주
     sOutHosp   : Variant;
     sInHospcd  : Variant;
     sOutHospcd : Variant;

     sScanYn    : Variant;

     sFcdr      : Variant; //초진의 2013.2.28
     sFcdrnm    : Variant;
     sGendrnm1  : Variant; //2014.05.15 KYA
     sSpgubun   : Variant; //2015.06.17 kya

     sPtmidsid  : Variant; //재난번호 추가. 20150630. kya.
     sPtmireid  : Variant; //구급활동일지번호 추가. 20150630. kya.

     sDschtime  : Variant; // 응급실경유입원환자정보 2015.8.29. 김송주.
     sDschrslt  : Variant;
     sNedisStat : Variant;

     sOxygen    : Variant; //산소포화도 추가.20151208.kya.
     sApath     : Variant; //입원경로 추가.20151208.kya.
     sWatchyn   : Variant; //관찰료 추가.20151229.kya.
     sRcpyn     : Variant; //수납여부 추가.20160107.kya.
     sAdmtime   : Variant; //입원일자 추가.20160115.kya.
     sKtascd    : Variant; //등급추가.20160126.kya.
     sRoomnumber : Variant; //방번호추가.20160201.kya.
     sDschmeno  : Variant; //응급실퇴원안내문에 기타사항 추가. 20161021. kya.
     sIsolate   : Variant;
     sSound     : Variant;
     sSelectYn  : Variant;  //선별료추가.20161227.kya.

     sResno1    : Variant;  //임상기록출력물 때문에 추가.20171205.kya.
     sResno2    : Variant;  
     sZpaddress : Variant;
     sAddress   : Variant;

     sSignData  : Variant;  //전자인증추가.20190124.kya.
     sSerialNo  : Variant;
     sSubjectDN : Variant;

     sCprshare  : Variant; //CPR공유여부.20190627.kya.

     sSilinsyn  : Variant; //실비여부추가.20201130.kya.
     sSelfyn    : Variant; //자가약식별확인여부.kya.20210406.

     function SelAllErinf(sType1,sType2,sType3,sType4:String):Integer; //KimDaeYong수정 2008-06-24
     //이선규 추가 03-03-31
     function SelAllErinf1(sMeddate :String):Integer;

     function SelAllErinf2(sType1,sType2,sType3,sType4,sType5:String):Integer;
     function SelAllErinf3(sType1:String):Integer;
     function SelOneErinf(sType1,sType2,sType3:String):Integer;

     function InsertErinf(sType1,sType2,sType3,sCaretime,sLocation,
                          sStepcd,sSteprmk,sPathcd,sPathrmk,sAccitype,
                          sAccidetl,sAccidate,sAccisite,sInfdnr,sAppear,
                          sConsstat,sConsrmk,sOutdate,sRecnrs,sBodytemp,
                          sPulse,sRespcnt,sBldpress,sWeight,sTelno1,
                          sTelno2,sTelno3,sOutyn,sDiesecd,sDiesermk,
                          sEdustat,sMedrslt1,sMedrslt2,sMedrslt3,
                          sMedrslt4,sMedrslt5,sMedrslt6,sMedrslt7,sRsltrmk1,
                          sRsltrmk2,sRsltrmk3,sErrslt,sEditid,sEditip,
                          sIndate,sErfeeyn,sCpryn,sStatDept,sDiagKind,
                          sDisease,sEmopyn,sAddInfo,sDecDate,sERDept,
                          sHomeYN,sLeavYN,sETCMemo,sHomeDate,sSelfdsch,sCommon,
                          sWorkdate,sSymtom1,sSymtom2,sSymtom3,sSymseq1,sSymseq2,sSymseq3,
                          sInten,sInjury,sDangsa,sBoho1,sBoho2,sBoho3,sBoho4,sBoho5,
                          sBoho6,sBoho7,sBoho8,sBoho9,sSymnm1,sSymnm2,sSymnm3,sEtcRslt,
                          sBldpressHi,sBldpressLo,sInHosp,sOutHosp,sInHospCd,sOutHospCd,
                          sPtmidsid,sPtmireid,sOxygen,sApath,sWatchyn:String;
                          sCnt:integer):Integer;
     function SelErStat(sType1,sType2,sType3,sType4:String):Integer;
     function SelErStat2(sType1,sType2,sType3:String):Integer;
     function SelErStat3(sType1,sType2,sType3:String):Integer;
     //추가..
     // 응급센터 환자현황1의 환자리스트  - 진료과별
     function SelErStat4(sType1,sType2,sType3,sType4,sType5:String):Integer;
     //응급센터 환자현황1 - 질환분류별
     function SelErStat5(sType1,sType2,sType3:String):Integer;
     // 응급센터 환자현황1의 환자리스트  - 질환분류별
     function SelErStat6(sType1,sType2,sType3,sType4,sType5:String):Integer;
     //응급센터 환자현황1 - 질환분류/중증도별
     function SelErStat7(sType1,sType2,sType3:String):Integer;
     // 응급센터 환자현황1의 환자리스트 - 중증도 - 질환분류별
     function SelErStat8(sType1,sType2,sType3,sType4,sType5:String):Integer;
     // 응급센터 응급이송서비스 통계 모튤
     function SelErStat9(sType1,sType2,sType3:String):Integer;
     // 응급환자 월통계1
     function MonErStat(sType1,sType2:String):Integer;
     // 응급환자 월통계2
     function MonErStat2(sType1,sType2:String):Integer;
     //
     //응급실 내원경로등록
     function UpdateErinf(sPatno,sMeddate,sMedtime,sEmtype,sEditid,sEditip:String):Integer;
     //추가. 2002.11.15 이용언 의사 퇴원지시.
     function UpdateErinf2(sPatno,sMeddate,sMedtime,sEditid,sEditip, Gubun :String):Integer;
     //(추가. 203.04.28 이용언) 응급실 추가 통계 사항들
     // 응급환자 월통계1
     function MonErStat3(Type1,Type2,Type3:String):Integer;
     //추가. 응급실 환자 의사 퇴실취소 2003.05.13 이용언
     function UpdateErinf3(sPatno,sMedtime,sEditid,sEditip :String):Integer;
     function UpdateErinf4(sPatno,sMedtime,sRemarks,sFcdrno :String):Integer;
     // 2005.04.15 김명종 추가 (응급실 재원환자수 및 재원시간 분석)
     function SelErStatB(sFrMonth,sToMonth,sFlag : String):Integer;
     // 2005.04.15 김명종 추가 (응급실 재원환자수 및 재원시간 분석)
     function SelErStatC(sFrMonth,sToMonth,sFlag : String):Integer;
     // 환자별 응급실 이력조회  2005-04-21 조일영 추가
     function PatERHis(sType1:String):Integer;
     //급성심근경색증(도착아스피린입력) KimDaeYong 2008-06-13
     function UpdateErinf5(sPatno,sMeddate,sMainDiagCd,sAspunord,sAspunord7,sEditid,sEditip :String):Integer;
     //급성심근경색증(도착아스피린조회) KimDaeYong 2008-06-13
     function SelectErinft6(Type1,Type2:String):Integer;
     // 응급실경유입원환자정보 2015.8.29(by 김송주)
     function SelAllErinf4(sType1:String):Integer;
     //월별의사별응급진료통계. KimDaeYong 2018-03-21
     function MonDrErStat(inDate,inMeddept,inUserid:String):Integer;
    end;



    // 응급담당의
    HmdDrcont = class
     sType      : Variant;  // 조건
     sPatNo	    : Variant;  // 환자번호
     sMedDate	 : Variant;  // 접수일자
     sMedtime   : Variant;  // 응급실 도착시간
     iConnSeq	 : Variant;  // 연결순번
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sConnDate	 : Variant;  // 연락일시
     sLinkDate	 : Variant;  // 연결일시
     sArvDate	 : Variant;  // 도착일시
     sMainYn	 : Variant;  // Main 여부
     sDisease   : Variant;  // 주증상
     sErfeeyn   : Variant;  // 응급관리료 대상여부
     sMeddeptCd : variant;  // 진료과 코드
     sChadrCd   : variant;  // 담당의 ID
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     function SelMddrcont(sType1,sType2,sType3,sType4:String):Integer;
     function InputIOValue(Cnt:Integer):Integer;
    end;

    // 주사일정
    HmdIjdayt = class
     sType      : Variant;  // 조건(1,2)
     sPatNo	    : Variant;  // 환자번호
     sPatName   : Variant;  // 환자명
     sSex       : Variant;  // 성별
     sBirtdate  : Variant;  // 생일
     sMedDept   : Variant;  // 진료과
     sTOrdCnt   : Variant;  // 총처방수
     sAOrdCnt   : Variant;  // 실시한 처방수
     sHopeDate	 : Variant;  // 예정일자
     sOrdDate	 : Variant;  // 처방일자
     sOrdTime   : Variant;  // 처방시간
     iOrdSeqno	 : Variant;  // 처방순번
     sExecDate	 : Variant;  // 실시일자
     sTrtCls	 : Variant;  // 치료실구분(1:주사 2:처치 3:혈액)
     sOrdSite   : Variant;
     sImmncl	 : Variant;  // 예방접종분류
     sRemark	 : Variant;  // 특기사항
     sOrdCd	    : Variant;  // 처방코드
     sOrdDr     : Variant;  // 처방의사
     sMedDr     : Variant;  // 진료의
     sOrdDrnm   : Variant;  // 처방의사명
     sOrdDrCd   : Variant;  // 처방의사코드
     sExecId	 : Variant;  // 실시자사번
     sDrugStat	 : Variant;  // 약국처리상태(0:미처리, 3:접수 ...)
     iBundleNo	 : Variant;  // 묶음번호
     sOrdDesc1  : Variant;  // 처방편집1
     sOrdDesc2  : Variant;  // 처방편집2
     sRcpStat   : Variant;  // 원무Status(Y:수납,N:미수납,R:환불)
     sErYn      : Variant;  // 응급여부
     sFiltYn    : Variant;  // 필터여부
     sROrdCnt   : Variant;  // 반납수량
     sNurStat   : Variant;  // 수행여부
     sMedTime   : Variant;  // 진료예약
     iIVcnt     : Variant;  // IV - count
     iSCcnt     : Variant;  // SC
     iIMcnt     : Variant;  // IM
     iChemocnt  : Variant;  // Chemo
     iTotcnt    : Variant;  // ToTal
     iBldcnt    : Variant;  // Blood count
     iTrtcnt    : Variant;  // Trtor Count
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sOpexDate  : Variant;
     sDiscyn    : Variant;  // DC 여부
     sFlag      : Variant;  // 1: 주사, 2: 처치
     sTrnsfLoc  : Variant;  // 수혈장소.
     sResno1    : Variant;
     sResno2    : Variant;
     sChadrnm   : Variant;

     function ListInjectPat(sType1,sType2,sType3:String):Integer;
     function ListInjectPat2(sType1,sType2,sType3:String):Integer;
     function ListInjectOrd(sType1,sType2,sType3:String):Integer;
     function UpdateInjectYN(Cnt:Integer):Integer;
     function SelAllIjday(sType1,sType2,sType3,sType4,sType5:String):Integer;
     // 주사실 통계
     function TotInjectOrd(sType1,sType2:String):Integer;
     // 주사실 통계2
     function SelectTotal(sType1,sType2,sType3,sType4:String):Integer;
     // 주사실 일일통계 저장
     function InsIrstat(sType1, sInjtLoc, sStatDate, sIvCnt,
                        sImCnt, sScCnt, sChemoCnt, sEtcCnt, sBloodCnt,
                        sTxCnt, sEtcCnt1, sEtcCnt2,  sEditId, sEditIp : String):Integer;
     // 주사실 일일현황
     function DailyInfo(sType1, sType2, sType3, sType4, sType5 : String):Integer;
    end;

    // 중환자업무일지
    HmdIcusmt = class
     sRptDate	 : Variant;  // 업무일자
     sWardNo	 : Variant;  // 병동번호(중환자실)
     sMedDept	 : Variant;  // 진료과
     iTrinCnt	 : Variant;  // 타병동에서 전입된 환자수
     iTroutCnt	 : Variant;  // 타병동으로 전출된 환자수
     iImprvCnt	 : Variant;  // 퇴원(IMPROVED) 환자수
     iAgnstCnt	 : Variant;  // 퇴원(Against) 환자수
     iMoridCnt	 : Variant;  // 퇴원(MORIBUND) 환자수
     iExpCnt	 : Variant;  // 퇴원(사망) 환자수
     iRespCnt	 : Variant;  // 인공호흡기 사용건수
     iInciCnt	 : Variant;  // 기관절개술 건수
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
    end;

    // 중환자실환자정보
    HmdIcupat = class
     sPatno    : Variant;   // 환자번호
     sPatName  : Variant;   // 환자명
     sSex   	: Variant;   // 성별(M/F)
     sBirtDate	: Variant;   // 생년월일(YYYYMMDD)
     sMeddate  : Variant;   // 입원일자
     lSeqno    : Variant;   // 순번
     sFromdate : Variant;   // ICU 도착일시
     sTodate   : Variant;   // ICU 퇴실일시
     sInpath   : Variant;   // 입실경로
     sOutpath  : Variant;   // 퇴실결과
     sOutcont  : Variant;   // 퇴실내용
     sInfectyn : Variant;   // 감염여부
     sInfekind : Variant;   // 감염종류
     sConstat  : Variant;   // 의식상태
     sVentilyn : Variant;   // Ventilator 사용여부
     sFeedkind : Variant;   // Feeding종류
     sMeddept  : Variant;   // 진료과
     sChadr    : Variant;   // 주치의사
     sGendr    : Variant;   // 담당의사
     sWardno   : Variant;   // 병동
     sAddress  : Variant;   // 주소
     sTelno    : Variant;   // 전화번호
     sRemark   : Variant;   // 특기사항
     sDiagName : Variant;   // 주진단명
     sLstopDt  : Variant;   // 최근수술일
     sOpName   : Variant;   // 최근수술명
     sTotadmdt : Variant;   // 재원일수
     sInpath1  : Variant;   // 입원환자수
     sInpath2  : Variant;   // 전입환자수
     sOutpath1 : Variant;   // 사망환자수
     sOutpath2 : Variant;   // 퇴원환자수
     sOutpath3 : Variant;   // 전출환자수
     sOutpath4 : Variant;   // 재원환자수
     sAvgadmdt : Variant;   // 한환자당평균입원일
     sMonavg   : Variant;   // 1달평균입원일수
     sDayadm   : Variant;   // 1일재원일수
     sEditid   : Variant;   // 수정자 ID
     sEditip   : Variant;   // 수정자 IP
     sHdcnt    : Variant;
// 이선규추가 2004.02.02
     v_Patno   : Variant;   // 환자번호 */
     v_Patname : Variant;   // 환자명   */
     v_Meddate : Variant;   // 입원일자 */
     v_Sex     : Variant;   // 성별     */
     v_Birtdate: Variant;   // 생년월일 */
     v_Seqno   : Variant;   // 순번 */
     v_Fromdate: Variant;   // ICU 도착일시 */
     v_Todate  : Variant;   // ICU 퇴실일시 */
     v_Inpath  : Variant;   // 입실경로(1:ER,2:병동)          */
     v_Outpath : Variant;   // 퇴실결과(1:병실,2:사망,3:퇴원) */
     v_Outcont : Variant;   // 퇴실내용(병실 or 퇴원방법)     */
     v_Meddept : Variant;   // 진료과   */
     v_Chadr   : Variant;   // 주치의사 */
     v_Gendr   : Variant;   // 담당의사 */
     v_Wardno  : Variant;   // 병동 */
     v_Address : Variant;   // 주소 */
     v_Telno   : Variant;   // 전화번호 */
     v_Remark  : Variant;   // 특기사항 */
     v_Diagname: Variant;   // 진단명   */
     v_Opname  : Variant;   // 수술명   */
     v_Opdate  : Variant;   // 수술일   */
     v_Reinyn  : Variant;   // 재입원여부   */


     v_Totadmdt: Variant;   // 재원일수 */
     v_Inpath1 : Variant;   // 입실경로(ER) */
     v_Inpath2 : Variant;   // 입실경로(병동) */
     v_Inpath3 : Variant;   // 입실경로(재입원) */
     v_Outpath1: Variant;   // 퇴실결과(전출) */
     v_Outpath2: Variant;   // 퇴실결과(사망) */
     v_Outpath3: Variant;   // 퇴실결과(퇴원) */
     v_Outpath4: Variant;   // 퇴실결과(퇴원 MOR) */
     v_Outpath5: Variant;   // 퇴실결과(퇴원 각서) */
     v_Outpath6: Variant;   // 퇴실결과(퇴원 타병원) */
     v_Avgadmdt: Variant;   // 한환자당평균입원일 */
     v_Monavg  : Variant;   // 1달평균입원일수 */
     v_Dayadm  : Variant;   // 1일재원수             */
     v_Staycnt : Variant;   // 재원수
     v_Infectyn: Variant;
     v_Infekind: Variant;
     v_Constat : Variant;
     v_Ventilyn: Variant;
     v_Feedkind: Variant;
     v_Hdcnt   : Variant;

     // 2005.08.18 송주추가
     v_Todate2  : Variant; // 퇴실일시(년도까지 나오는것)

     {function SelIcuPatInf(sType1  ,  // 조건1    */
                           sPatno  ,  // 환자번호 */
                           sAdmdate  // 입원일자 */
                           : String) : integer;}
     function SelIcuPatInf(sType1  ,  // 조건1    */
                           sPatno  ,  // 환자번호 */
                           sAdmdate,  // 입원일자 */
                           sType2
                           : String) : integer;
     function SelIcuStatisc(sDate:String):Integer;
     function InsUpDelIcuPat(sType1   ,    // 조건(1:삭제,2:입력,3:수정) */
                             sPatno   ,    // 환자번호     */
                             sMeddate ,    // 입원일자     */
                             sSeqno   ,    // 순번         */
                             sFromdate,    // ICU 도착일시 */
                             sTodate  ,    // ICU 퇴실일시 */
                             sInpath  ,    // 입실경로(1:ER,2:병동)          */
                             sOutpath ,    // 퇴실결과(1:병실,2:사망,3:퇴원) */
                             sOutcont ,    // 퇴실내용(병실 or 퇴원방법)     */
                             sMeddept ,    // 진료과       */
                             sChadr   ,    // 주치의사     */
                             sGendr   ,    // 담당의사     */
                             sWardno  ,    // 병동         */
                             sAddress ,    // 주소         */
                             sTelno   ,    // 전화번호     */
                             sRemark  ,    // 특기사항     */
                             sReinyn  ,    // 재입원여부   */
                             sEditid  ,    // 수정자       */
                             sEditip  ,     // 수정자IP     */
                             sHdcnt
                             : String) : integer;
    end;

    // 투석지시
    HmdHpdort = class
     sPatNo     : Variant;  // 환자번호
     sOrdDate	 : Variant;  // 처방일자
     iOrdSeqno	 : Variant;  // 처방순번
     sHdType	 : Variant;  // 투석환자구분
     sMedDate	 : Variant;  // 진료일자/입원일자
     sPatSect	 : Variant;  // 환자구분
     sOrdGrp	 : Variant;  // 처방분류
     sDiscYn	 : Variant;  // D/C여부
     sErYn  	 : Variant;  // 응급여부
     sMedDept	 : Variant;  // 진료과
     sChaDr 	 : Variant;  // 주치의사
     sOrdDr     : Variant;  // 처방의사
     sOrdText	 : Variant;  // 지시내용
     sWardNo	 : Variant;  // 병동번호
     sRoomNo	 : Variant;  // 병실번호
     sOrdCd     : Variant;  // 처방코드
     sOrdName	 : Variant;  // 처방명
     sRsnDiss 	 : Variant;  // 원인질환
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate	 : Variant;  // 수정일시
     sOrdSeqno	 : Variant;  // 처방순번(String)
     //투석지시내역 저장 (투석지시Insert, 기본처방 Insert)
     function InsertHdOrder(PatNo,OrdDate,HdType,MedDate,PatSect,OrdGrp,ErYn,
                            MedDept,ChaDr,OrdText,WardNo,RoomNo,SlipCd,OrdCd,
                            OrdSite,OrdDesc1,MedTime,MedYn,RsnDiss,
                            OrdDesc2,EditId,EditIp:String):Integer;
     //환자 투석지시내역 조회 (환자번호+처방일(+처방순번))
     function ListHdOrder(PatNo,OrdDate,SeqNo:String):Integer;
     // 투석지시내역 조회
     function SelectText(PatNO,HDType:string):Integer;
     //투석지시내역 D/C
     function UpdateHdOrder(PatNo,OrdDate,EditId,EditIp:String;OrdSeqNo:Integer):Integer;
     //투석지시내역 저장 - 간호사(투석지시 Insert / 기본처방 Insert)
     function AddHdOrder(PatNo,OrdDate,HdType,MedDate,PatSect,OrdGrp,
                         ErYn,MedDept,ChaDr,OrdText,WardNo,RoomNo,SlipCd,
                         OrdCd,OrdSite,OrdDesc1,MedTime,MedYn,RsnDiss,
                         OrdDesc2,EditId,EditIp:String):Integer;

    end;

    // 환자정보
    HmdPatInf = class
     sType1 	 : Variant;  // 검색조건1
     sType2 	 : Variant;  // 검색조건2
     sType3 	 : Variant;  // 검색조건3
     sType4 	 : Variant;  // 검색조건4
     sType5 	 : Variant;  // 검색조건5
     sType6 	 : Variant;  // 검색조건6
     sPatNo 	 : Variant;  // 환자번호
     sPatName	 : Variant;  // 환자명
     sResno1	 : Variant;  // 주민번호1
     sResno2	 : Variant;  // 주민번호2
     sTelno1	 : Variant;  // 집전화번호
     sTelno2	 : Variant;  // 직장전화번호
     sTelno3	 : Variant;  // 핸드폰
     sEmail 	 : Variant;  // E-MAIL
     sZipcd 	 : Variant;  // 우편번호
     sAddress	 : Variant;  // 주소
     sZpAddress : Variant;  // 주소2
     sSex   	 : Variant;  // 성별(M/F)
     sBirtDate	 : Variant;  // 생년월일(YYYYMMDD)
     sPattype	 : Variant;  // 환자유형
     sPattpNm	 : Variant;  // 환자유형명
     sSubinsut	 : Variant;  // 부보험유형(지병)
     sExceptcd	 : Variant;  // 의약분업예외코드
     sReferyn	 : Variant;  // Refer여부
     sDrgyn 	 : Variant;  // DRG여부
     sAdmDate	 : Variant;  // 입원일
     sMedDept	 : Variant;  // 진료과
     sDeptNm	 : Variant;  // 진료과명
     sWardNo	 : Variant;  // 병동
     sRoomNo	 : Variant;  // 병실
     sWardNo1	 : Variant;  // 병동(현위치)
     sRoomNo1	 : Variant;  // 병실(현위치)
     sBedNo	    : Variant;  // 병상
     sChaDr 	 : Variant;  // 주치의
     sChaDrNm	 : Variant;  // 주치의명
     sGenDr 	 : Variant;  // 담당의
     sGenDrNm	 : Variant;  // 담당의명
     sDiagcd	 : Variant;  // 주진단코드
     sDiagName	 : Variant;  // 주진단명
     sLstopDt	 : Variant;  // 최근수술일
     sOpcode	 : Variant;  // 최근수술코드
     sOpName	 : Variant;  // 최근수술명
     sOpdate    : Variant;
     sPatSect	 : Variant;  // 환자구분(D:DRG R:REFER S:지병)
     sFstmedty  : Variant;  // 1:초진 2:재진 3:신환 4:재초진
     sVschktRm  : Variant;  // Vital Sign 측정주기
     sVschkYn   : Variant;  // Vital Sign 측정여부
     sDschexdt	 : Variant;  // 퇴원예정일
     sDschdate	 : Variant;  // 퇴원일
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sAge       : Variant;  // 나이  (추가내용)
     sPatCls	 : Variant;  // 환자구분('I'=입원,'O'=외래,'E'=응급)
     sMedTime	 : Variant;  // 진료시간
     sErOutyn 	 : Variant;  // 응급환자퇴실여부
     sErAdmyn 	 : Variant;  // 응급환자입원여부
     sMedYn 	 : Variant;  // 진료여부
     sOld_feveryn: Variant; // 전일 발열여부
     sOld_diareyn: Variant; // 전일 설사여부
     sOld_Woundyn: Variant; // 전일 창상여부
     sOld_ventyn : Variant; // 전일 Ventilator여부
     sOld_crrtyn : Variant; // 전일 Crrt여부 20141212.추가
     sOld_foleyyn: Variant; // 전일 F. Cath여부
     sOld_centyn : Variant; // 전일 Cent여부
     sFeveryn    : Variant; // 금일 발열여부
     sDiareyn    : Variant; // 금일 설사여부
     sWoundyn    : Variant; // 금일 창상여부
     sVentyn     : Variant; // 금일 Ventilator여부
     sCrrtyn     : Variant; // 금일 Crrt여부 20141212.추가
     sFoleyyn    : Variant; // 금일 F. Cath여부
     sCentyn     : Variant; // 금일 Cent여부
     sInvdevyn   : Variant; // 금일 장치여부
     sRgtdate    : Variant; // 등록일자
     sEditdate   :Variant;  // 수정일자
     sMax_temp   :Variant;  // 최고 체온
     sCurDataYN  :Variant;  // 오늘저장한 자료가 있는지의 여부 2001.10.13
     sChkName    :Variant;  // 설사항목 2001.10.16
     sHeight     :Variant;  // 신장
     sWeight     :Variant;  // 체중
     sBckStat    :Variant;  // 심사진행여부
     sLstordDt   :Variant;  // 최근처방일자
     sFollow     :Variant;  // FollowUp여부
     sDate1      :Variant;  // 전일의 일자
     sDate2      :Variant;  // 금일의 일자
     sRemark     :Variant;  // 특기사항
     sBodytemp   :Variant;  //소아과외래 체중 2001.11.21
     sTransDt    :Variant;  // 최근전과전동일자
     sRsvType    :Variant;  //외래예약구분
     sSysdate    :Variant;
     sNurStat    :Variant;
     sHdsFlag    :Variant;
     sMedDate    :Variant;
     sMsDate     :Variant;  // 검진일자
     sCdChrtYn   :Variant;  // CD Chart 유무
     //추가. 2002.11.13 이용언 치과 번호
     sDentno     :variant;
     sType7      :variant;
     //추가. 2002.12.11 이용언
     sIntrdt     :Variant; //직원소개 환자 소개 직원명칭
     //(추가. 2003.05.16 이용언)
     sDschtype   :Variant;
     sDschortm   :Variant;
     sDschtime   :Variant;
     sAdmtime    :Variant;

     // 2003.11.26이선규 추가
     v_Cpatno   : Variant;

     sHpNo       :Variant;
     sHpJoinDt   :Variant;
     sDiagKind   :Variant;
     sReligion   :Variant;
     sSrvType    :Variant;
     //tube 추가
     sTubeyn     :Variant;
     sOld_tubeyn :Variant;
     //선택진료
     sSpcdr      :Variant;
     sSpopyn     :Variant;
     sSpexyn     :Variant;
     sSprayn     :Variant;
     sSpcryn     :Variant;
     sSpanyn     :Variant;
     sSppsyn     :Variant;
     sSpcdryn    :Variant;  //선택진료여부, KimDaeYong 2013-12-27
     //유형보조
     sTypecd     :Variant;
     sTypecdnm   :Variant;
     sPattypenm  :Variant;
     sAppldate   :Variant;
     sDccode     :Variant;
     sCustcd     :Variant;
     sExceptCd1  :Variant;
     sAdmPath    :Variant;
     sDschRslt   :Variant;

     sAdmbetwn   :Variant; // 2009.03.25 김송주 입원한 시간
     sAnOpYn     :Variant; // 2009.07.31 예방적 항생제 대상자 여부

     sRefpaper   :Variant;
     sPacscd     :Variant;

     sScanYn     :Variant; // 차트 스캔여부 2010.11.2 김송주
     sNakYn      :Variant; // 낙상 고위험군
     sAdmNoteYn  :Variant; // Admission Note 작성 여부 체크 2011.07.18 김송주

     // 낙상용..추가 2011.08 김송주
     sChkdate    : Variant;
     sTotgrad    : Variant;
     sItem       : Variant;
     sPersonal   : Variant;
     sWardRoom   : Variant;
     sHd         : Variant;
     sPod        : Variant;
     sInitGrade  : Variant; // 초기등급
     sInitDate   : Variant; // 초기평가일
     sChkdate1   : Variant;
     sChkdate2   : Variant;
     sChkdate3   : Variant;
     sChkdate4   : Variant;
     sChkdate5   : Variant;
     sChkdate6   : Variant;
     sChkdate7   : Variant;
     sGrade1     : Variant;
     sGrade2     : Variant;
     sGrade3     : Variant;
     sGrade4     : Variant;
     sGrade5     : Variant;
     sGrade6     : Variant;
     sGrade7     : Variant;

     // 통증용
     sStrength   : Variant; // 통증 점수
     sExamType   : Variant;
     sPosition   : Variant;
     sLook       : Variant;
     sTool       : Variant;
     sFrequency  : Variant;
     sPaintime   : Variant;
     sMediate    : Variant;
     sRegdate    : Variant;
     sFlaccSum   : Variant;
	 sNipsSum    : Variant;
	 sFprsSum    : Variant;

     sOutdate    : Variant;

     //Medical Plan, KimDaeYong, 2014-08-21
     sMedplan    : Variant;
     sRejtdate   : Variant; //입원취소일시, KimDaeYong 2014-09-03
     sIcuevalYn  : Variant; //중환자적정성평가대상, 2014.10.13 김송주
     sSpgubun    : Variant; //특정환자구분(메르스관련), KimDaeYong 2015-06-17

     //암중증/산정특례대상자 변수, KimDaeYong 2017-01-31
     sScode      : Variant;
     sFromdate   : Variant;
     sTodate     : Variant;
     //KDRG등급조회. KimDaeYong 2017-11-22
     sCategory   : Variant;
     //암평가. KimDaeYong 2018-01-23
     sCantype    : Variant;
     sCantypenm  : Variant;
     sRegyn      : Variant;
     //간호용
     sFcdr       : Variant;
     sRsvsmsyn   : Variant;
     sAlrgsmsyn  : Variant;
     //사망환자퇴원지시용. KimDaeYong 2019-06-11
     sKtascd     : Variant;
     sDiedate    : Variant;
     //여권번호. KimDaeYong 2020-02-03
     sPassptno   : Variant;
     //진료과목코드(청구용). KimDaeYong 2020-07-17
     sSpdept     : Variant;
     //실비보험가입여부. KimDaeYong 2020-11-25
     sSilinsyn   : Variant;
     //진단유형코드. KimDaeYong 2021-03-16
     sDiagTypeCd : Variant;
     //메시지수신여부. KimDaeYong 2021-12-16
     sSmsyn      : Variant;
     sInfuseyna  : Variant;


     // 재원환자조회(1:진료과별 2:주치의 3:담당의 4:병동 5:현위치 sType5:재원/퇴원 sType6:퇴원from sType7:퇴원to)
//     function StayWard(sType1,sType2,sType3,sType4:String):Integer;
     function StayWard(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
     // 재원환자조회(1:진료과별 2:주치의 3:담당의 4:병동 5:현위치) ==> 간호화면용.
     function StayWard2(sType1,sType2,sType3,sType4,sType5:String):Integer;
     function StayWard3(sType1,sType2,sType3,sType4,sType5:String):Integer;
     function StayWard4(inFromdate,inTodate:string):Integer; // 재활치료환자선택용
     function StayWard5:Integer; // 암환자평가용
     // 특정환자의 상세정보 조회
     function PatInfo(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
     //호스피스 환자조회
     function HPPatInfo(sType1:String):Integer;
     // 입원환자 주치의/담당의 변경처리 (Multi Input)
     function ChangeChaDr(Cnt:Integer):Integer;
     // 입원환자 V/S 측정주기(여부) 및 기타정보 변경처리 (Multi Update)
     function ChangePatInfo(Cnt:Integer):Integer;
     // 기간별 입원환자 List 조회 (1=입원처리 2=퇴원예정 3=퇴원처리) ===> (09.24 ORDER BY 조건 추가 두승엽)
     function ListAdmPat2(sType1,sType2,SelType,FromDate,ToDate,Locate:String):Integer;
     // 조건(환자명,환자번호,주민등록번호)에 해당하는 환자 List 조회
     function ListPatInfo(PatName,PatNo,PatId1,PatId2,Dentno,ResPatName:String):Integer;
     // 조건(환자명,환자번호)에 해당하는 환자 List 조회 => MDC100U1에서 사용
     function ListPatbat(Cond,PatNo,PatName:String):Integer;
     // 입원환자 퇴원지시내역 변경처리 (입원환자내역 Update / 기본처방 Insert))
     function OrderDischarge(Patno,AdmDate,DschExDt,MedDate,MedDept,ChaDr,
                             PatSect,ErYn,WardNo,RoomNo,OrdGrp,SlipCd,OrdCd,
                             OrdSite,OrdDesc1,EditId,EditIp:String):Integer;
     // 입원환자 퇴원지시내역 취소처리 (입원환자내역 Update / 기본처방 Delete))
     function CancelOrderDischarge(Patno,AdmDate,EditId,EditIp:String):Integer;
     function ListAddOrdPat(Type1,Code1,Code2,Code3:String):Integer;
     function ListAddOrdPat2(Type1,Code1,Code2,Code3,Code4,Code5,Code6:String):Integer;
     // 특정수술환자의 상세정보 조회
     function OpPatInfo(PatNo,MedDept,Locate,sFlag:String):Integer;
     //환자감염관리 - 병동별 환자 감염요인 조회
     function ListWardInfect(sType1,sType2,sType3,sType4,sType5:String):Integer;
     //function ListWardInfect(sType1,sType2,sType3:String):Integer;
     //병동별 환자 감염입력
     function InsertWardInfect(Cnt:Integer):Integer;
     //외래환자 전화번호 수정
     function TelNoUpdate(sFlag,sPatNo,sType1,sType2,sType3,sEditId,sEditIp,sSilinsyn:String):Integer;
     //외래환자 원내사유 NULL 설정
     function ExceptcdDelete(sPatno,sMedtime,sMeddept,sMeddr,sEditId,sEditIp:String):Integer;
     //재원환자정보(환자번호)
     function wardpatinfo(sPatno,sFlag:String) : Integer;
     function wardpatinfo1(sPatno,sDate:String) : Integer;
     // 당일퇴원환자포함시.
     function UnionDschPatList(sType1,sType2,sType3,sType4,sType5:String):Integer;

     //(추가. 2002.11.29 이용언) 입원환자 체크사항 등록/수정 조회
     function SearchIpCheck(PatNO, Admdate : String):Integer;

     //(추가. 2002.11.29 이용언) 입원 체크사항 저장/수정
     function InsertIpCheck(PatNO, Admdate, chk1, chk2, chk3, chk4, chk5,
                           chk6, chk7, Type1, Editid, Editip : String):Integer;
     //(추가. 2003.03.18)입원시 입원과
     function AdmDept(Patno, Admdate : String):Integer;
     //(추가. 2003.04.07)환자 기본정보 New
     function BasicInfo(Patno : String):Integer;
     //(추가. 2003.04.25 이용언) 원무 요청 사항 - 보험(보호) 체크사항
     function CheckAichk(Patno, Ordcd, Oiflag : String) : Integer;
     //(추가. 2003.05.14 이용언) 엄마병동 찾기.
     function MotherFind(Patno : String) : Integer;
     // (추가 2003.11.26 이선규) 환자번호 DUp났을시 사용되는 Function이다.
     function ListPatDup(Patno : String) : integer;
     //낙상환자 평가
     function GetPatPar(sType1: string): Integer;
     //낙상환자 평가_보바스기념병원
     function GetPatParNew(sType1: string): Integer;
     //  병동별 낙상 조회-New
     function GetPatParNewWard(sType1,sType2:String):Integer;
     //낙상환자 보바스_병동별 조회
     function GetPatParNewList(sType1,sType2 : String) : Integer;
     //(추가. 2010.07.13 김송주) 욕창환자 평가
     function GetPatBedsore(sType1: String) : Integer;
     //(추가. 2010.07.13 김송주) 욕창환자 평가
     function GetPatBedsoreMon(sType1,sType2: String) : Integer;
     //(추가. 2010.07.19 김송주) 욕창환자 병동별 조회
     function GetPatBedsoreList(sType1,sType2,sType3 : String) : Integer;
     // 통증
     function GetPatPainList(sType1,sType2:String):Integer;
     // 통증(환자별)
     function GetPatPainTermList(sType1,sType2,sType3:String):Integer;
     // 환자의 기간별 진료과 조회 2005.04.28 조일영 추가
     function GetPatDept(PatNo,FromDate,ToDate:String):Integer;
     // Medical Plan 입력/수정, KimDaeYong 2014-08-21
     function PutMedPlan(sPatno, sAdmdate, sMedplan, sEditid, sEditip:string):Integer;
     //응급의학과 추가. KYA. 201501.
     function IPDLS_E1(sType1,sType2,sType3,sType4,sType5:String):Integer;
     //암중증/산정특례대상자 환자여부 체크, KimDaeYong 2017-01-31
     function Caninfo(inPatno, inOrddate:string):Integer;
     //처방전 예약타임 취소여부 체크, KimDaeYong 2019-02-13
     function ChkMedtime(inPatno, inMeddate, inMeddept, inMeddr, inMedtime:string):Integer;

    end;

    // 전과전실요청
    HmdMovett = class
     sPatno     : Variant; // 환자번호
     sAdmdate   : Variant; // 입원일자
     sReqdate   : Variant; // 요청일자
     iSeqno     : Variant; // 순번
     sFromward  : Variant; // 현병동번호
     sFromdept  : Variant; // 현진료과
     sFromroom  : Variant; // 현병실번호
     sFrombed   : Variant; // 현병상번호
     sFromchdr  : Variant; // 현주치의
     sFromgedr  : Variant; // 현담당의
     sReqdept   : Variant; // 요청진료과
     sReqward   : Variant; // 요청병동번호
     sReqroom   : Variant; // 요청병실번호
     sReqbed    : Variant; // 요청병상번호
     sReqward2  : Variant; // 요청병동번호(이중방)
     sReqroom2  : Variant; // 요청병실번호(이중방)
     sReqbed2   : Variant; // 요청병상번호(이중방)
     sReqchadr  : Variant; // 변경희망주치의
     sReqgendr  : Variant; // 변경희망담당의
     sRemark    : Variant; // 특기사항
     sReqname   : Variant; // 요청자명
     sCofmname  : Variant; // 원무승인자명
     sCofmdate  : Variant; // 확인/확정일자
     sSdate     : Variant; // 시작일자
     sTodept    : Variant; // 진료과
     sToward    : Variant; // 병동번호
     sToroom    : Variant; // 병실번호
     sTobed     : Variant; // 병상번호
     sToward2   : Variant; // 병동번호(이중방)
     sToroom2   : Variant; // 병실번호(이중방)
     sTobed2    : Variant; // 병상번호(이중방)
     sTochadr   : Variant; // 주치의
     sTogendr   : Variant; // 담당의
     sEnddate   : Variant; // 종료일자
     sRoomgrad  : Variant; // 병실등급
     sRoomtype  : Variant; // 병실구분
     sFromdeptNm: Variant; // 현진료과명
     sReqdeptNm : Variant; // 요청진료과명
     sTodeptNm  : Variant; // 승인진료과명
     sFromchdrNm: Variant; // 현주치의명
     sFromgedrNm: Variant; // 현담당의명
     sReqchadrNm: Variant; // 변경희망주치의명
     sReqgendrNm: Variant; // 변경희망담당의명
     sTochadrNm : Variant; // 주치의명
     sTogendrNm : Variant; // 담당의명
     sEditid    : Variant; // 수정자ID
     sEditip    : Variant; // 수정자IP
     sEditdate  : Variant; // 수정일시
     function RequestInsert(lSeqno:Integer;sType,sPatno,sAdmdate,sReqdate,
                            sFromdept,sFromward,sFromroom,sFrombed,sFromchdr,
                            sFromgedr,sReqdept,sReqward,sReqroom,sReqbed,
                            sReqward2,sReqroom2,sReqbed2,sReqchadr,sReqgendr,
                            sRemark,sReqname,sSdate,sEditid,sEditip:String):Integer;
     function RequestSelect(sType1,sType2,sType3,sType4:String):Integer;
    end;

    // 인사마스타 (신규생성)
    HmdInsamt = class
     sEmpNo      : Variant;  // 개인번호
     sEmpNm      : Variant;  // 성명
     sComCdNm    : Variant;  // 직급명
     sDeptCd     : Variant;  // 진료과/병동코드
     sDeptNm     : Variant;  // 진료과/병동명
     sLicNo      : Variant;  // 면허번호
     sMajorNo    : Variant;  // 전문의번호
     sLcnNo      : Variant;  // 분과(세부)전문의번호
     sLcnCd      : Variant;  // 분과(세부)전문의코드
     //응급호출, KimDaeYong 2016-08-09
     sHphoneno   : Variant;  // 휴대전화번호

     function ListUserInfo(sType1,sType2,sType3,sType4:String):Integer;
     function ListImUserInfo (sType1,sType2:String):Integer;
     function Select1(inLocate, inEmpno:string):Integer;  //응급호출, KimDaeYong 2016-08-09
    end;

    // 처치재료반납
    HmdTrtret = class
     sIodate	 : Variant;  // 반납일자
     sIono	    : Variant;  // 번호
     sOrdcd	    : Variant;  // 처방코드
     sPatsect   : Variant;  // 환자구분
     sPatsite   : Variant;  // 원무환자구분
     sMeddept   : Variant;  // 진료과
     sMeddate   : Variant;  // 진료일자
     sQty 	    : Variant;  // 수량
     sCount	    : Variant;  // 횟수
     sPatno	    : Variant;  // 환자번호
     sOrddate   : Variant;  // 처방일자
     sOrdseqno  : Variant;  // 처방순번
     sReturnyn  : Variant;  // 환불여부
     sRtnid	    : Variant;  // 반납자
     sEditid	 : Variant;  //
     sEditip	 : Variant;  //
     sEditdate  : Variant;  //
     sPatName   : Variant;  // 환자이름
     sSex       : Variant;
     sBirtdate  : Variant;
     sOrdname   : Variant;
     sTotCnt    : Variant;
     sBckflag   : Variant;
     function SelectTrtre(sType1,sType2,sType3:String):Integer;    // 환자구분, 반납일자, 병동(진료과)
     function CountReturnMed(sType1,sType2,sType3:String;sType4:Integer):Integer;
     // 처치/재료 반납 입력/수정/삭제
     function InsUpDelTrtre(sType1,sType2,sType3,sQty,sRtnid,sEditid,sEditip,
                            sType4,sType5,sType6,sType7,sType8,sType9,
                            sType10,sType11,sType12,sType13:String):Integer;
    end;


    //환자별 간호계획관리
    HmdInrpft = class
     sPatno      : Variant;    //* 환자번호 */
     sAdmdate    : Variant;    //* 입원일시 */
     sAppldate   : Variant;    //* 적용일자 */
     iAppseqno   : Variant;    //* 적용순번 */
     sDiagnocd   : Variant;    //* 간호진단코드 */
     sPlancode   : Variant;    //* 간호계획중재코드 */
     sPlanname   : Variant;     //* 간호계획중재코드명 */
     sEnddate    : Variant;    //* 종료일자 */
     sEditid     : Variant;    //* 사용자 */
     sEditdate   : Variant;    //* 작업일자 */
     sEditip     : Variant;
     sNrplcode   : Variant;     //* 간호계획대분류코드 */
     sNrplname   : Variant;     //* 간호계획대분류코드명 */
     sNrpmcode   : Variant;     //* 간호계획중분류코드 */
     sNrpmname   : Variant;     //* 간호계획중분류코드명 */
     sDiagcode   : Variant;     //* 간호계획진단코드 */
     sDiagname   : Variant;     //* 간호계획진단명 */
     sPatname    : Variant;     //환자이름
     sSex        : Variant;     //성별(나이)
     sBirtdate   : Variant;     // 생일
     sDiagnosis  : Variant;     //대분류중분류진단
     sObjdiag    : Variant;     // 객관적 자료
     sSubdiag    : Variant;     // 주관적 자료
     sRes        : Variant;     //평가결과
     sRoomno     : Variant;
     sCauseCd    : Variant;     // 관련요인코드
     sCauseNm    : Variant;     // 관련요인명칭
     sAct        : Variant;

     // 간호계획 분류코드 조회2
     function NrplInform(sCode1,sType1,sType2,sType3,sType4,sType5:string):Integer;
     // 병동전체 간호계획 분류코드 조회
     function NrplInformWard(sType1,sType2,sType3,sType4,sType5,sType6,sType7:string):Integer;
     // 조회1
     function IfplanInform04(sType1,sType2,sType3:string):Integer;
     // 입력
     function IfplanInsert(Cnt:Integer):Integer;
     //  조회3
     function PrintInform(sType1,sType2,sType3,sType4,sType5:string):Integer;
     // 간호계획 분류코드 조회2
     function ActingInform(sCode1,sType1,sType2,sType3,sType4,sType5:string):Integer;
    end;

    // 간호계획대분류코드마스타
    HmdInrplt = class
     sNrplcode  : Variant;     //* 간호계획대분류코드 */
     sNrplname  : Variant;     //* 간호계획대분류코드명 */
     sNrpmcode  : Variant;     //* 간호계획중분류코드 */
     sNrpmname  : Variant;     //* 간호계획중분류코드명 */
     sDiagcode  : Variant;     //* 간호계획진단코드 */
     sDiagname  : Variant;     //* 간호계획진단명 */
     sPlancode  : Variant;     //* 간호계획중재코드 */
     sPlanname  : Variant;     //* 간호계획중재코드명 */
     // 조회
     function IfplanInform(sType1,sType2,sType3:string):Integer;
     function IfplanInform02:Integer;
    end;

    // 간호계획중분류코드마스타
    HmdInrpmt = class
     sNrplcode  : Variant;     //* 간호계획대분류코드 */
     sNrpmcode  : Variant;     //* 간호계획중분류코드 */
     sNrpmname  : Variant;     //* 간호계획중분류코드명 */
     // 조회
     function IfplanInform03(sType1:string):Integer;

   end;

    // 간호계획 Acting 기록
    HmdInract = class
      sPatNo    : Variant;   // 환자번호
      sAdmDate  : Variant;   // 입원일
      sEditDate : Variant;   // 입력일
      sEditDuty : Variant;   // 입력번
      sdiagNoCd : Variant;   // 진단
      sPlanCode : Variant;   // 중재코드
      sUserId   : Variant;   // 사용자 ID
      sUserIp   : Variant;   // 사용자 Ip
      sDispSeq  : Variant;
      sApplDate : Variant;
      sPlanname : Variant;      
      // 저장
      function ActingInsert(Cnt:Integer):Integer;
      //조회
      function ActingSelect(sCode1,sType1,sType2,sType3,sType4:string):Integer;
    end;   

    // 타시스템 코드
    HmdExCode = class
     sType1	    : Variant;  // 검색조건1
     sType2	    : Variant;  // 검색조건2
     // 사용자정보
     sUserId	 : Variant;  // 사용자ID
     sUserNm	 : Variant;  // 사용자명
     sDeptCd	 : Variant;  // 소속부서
     sDeptNm	 : Variant;  // 소속부서명
     sLicNo	    : Variant;  // 의사면허번호
     sMajorNo	 : Variant;  // 전문의번호
     sJikGup	 : Variant;  // 직급(의사구분 11:STAFF 22:레지던트 33:인턴)
     sJicJong	 : Variant;  // 직종(사용자구분 11:의사 22:간호사)
     sWardNo1   : Variant;  // 담당근무병동 1
     sWardNo2   : Variant;  // 담당근무병동 2
     sSort	    : Variant;  // Set 조회순서
     sInscfmYn	 : Variant;  // 처방저장시 확인여부
     sPatSel	 : Variant;  // 병동환자 선택기준
     sNextScr	 : Variant;  // 병동환자 선택후 다음화면
     sDiagSel	 : Variant;  // 진단명(영문 or 한글)
     sCode      : Variant;  // 상병코드
     sEngName   : Variant;  // 상병영문명
     sKorName   : Variant;  // 상병한글명
     sLargCd    : Variant;  // 대분류코드
     sMiddCd    : Variant;  // 중분류코드
     sSmalCd    : Variant;  // 소분류코드
     sCodeName  : Variant;  // 분류코드명
     ilevel     : Variant;  // level
     sRsvdate   : Variant;  // 예약일자
     sExecdate  : Variant;  // 실시일자
     sGendrnm   : Variant;  // 실시자
     iSeqno     : Variant;  // 순번
     sPnottext  : Variant;  // 경과기록
     iCount1    : Variant;  // 용법 횟수
     sCount1    : Variant;  // 1회 수량
     sMethodcd  : Variant;  // 용법
     sAbbr      : Variant;  // 용법 약어
     sDgijtype  : Variant;  // 용법 경로
     sInfegrd   : Variant;  // ICD 구분자(전염병등급)
     sCond      : Variant;  // 구분자
     sComCdDtl  : Variant;  // 진지공통 코드
     sComCdNm   : Variant;  // 진지공통 코드값
     sJikGupNm  : Variant;  // 직급명
     sSpeedBtn  : Variant;  // 스피드버튼
     sReturnYn  : Variant;  // 환불여부
     sUseDay    : Variant;  // 처방 일수
     sDayQty    : Variant;  // 1일용량
     sMaxDay    : Variant;  // 최대투여일수
     sOrdYn     : Variant;  // 처방가능여부
     sMethod    : Variant;  // 용법/용량
     sDisease   : Variant;  // 적응증
     sInsInfo   : Variant;  // 인정기준
     sProdCode  : Variant;  // 장비코드
     sProdName  : Variant;  // 장비명
     sDays      : Variant;  // 약처방기본일수
     sCounts    : variant;  // 약처방기본회수
     sPatNo     : Variant;  // 환자번호
     sPatName   : Variant;  // 환자명
     sResNo1    : Variant;  // 주민번호1
     sResNo2    : Variant;  // 주민번호2
     sBirtDate  : Variant;  // 생년월일
     sSex       : Variant;  // 성별
     sTelNo1    : Variant;  // 전화번호1
     sTelNo2    : Variant;  // 전화번호2
     sTelNo3    : Variant;  // 핸드폰
     sZipCd     : Variant;  // 우편번호
     sAddress   : Variant;  // 주소
     sDrugCd    : Variant;  // 약품코드
     sDrugNm    : Variant;  // 약품명
     sIdrgNm    : Variant;  // 약성분명
     sDrgInf    : Variant;  // 약품정보
     sWkareaCd  : Variant;  // 작업장코드
     sDay       : Variant; //공휴일 날짜(9월13일 방용균 추가)
     sHolyn     : Variant;  // 공휴일여부
     sHosName   : Variant;  // 병원명
     sHosAddress: Variant;  // 병원 주소
     sHosTel    : Variant;  // 병원 전화번호
     sHosDr     : Variant;  // 병원장
     sHosFax    : Variant;  // 병원 팩스번호
     sLabNo     : Variant;  // 임상연구번호
     sLabDesc   : Variant;  // 임상연구명
     sFromDate  : Variant;  // 시작일
     sToDate    : Variant;  // 종료일
     sInsurId   : Variant;  // 요양기관번호
     sIoDate    : Variant;
     sOrdGrp    : Variant;
     sConvqty   : variant;
     sOrdFont	 : Variant;  // 처방입력List Font
     sPreFont   : Variant;  // 전처방List Font
     sSetFont	 : Variant;  // Set처방List Font
     sConsltYn	 : Variant;  // 컨설트처방 Repeate 여부
     sWeightYn  : Variant;  // 환자체중별용량 사용 여부
     sMedDate   : Variant;
     sPatselYn  : Variant;
     sPreordyn  : Variant;  // 전처방 펼쳐보이기
     sOutordyn  : variant;  // 전 처방중 외래 처방만 보이기
     sResltopt  : Variant;  // 검사결과 조회기준
     sSelmm     : Variant;  // 검사결과 조회기간
     sRsvselfg  : Variant;  // 재진예약시 예약현황 조회기준
     sRefresh   : Variant;  // 외래환자 Refresh
     sFeeYn     : Variant;  // 만성질환 관리료
     sOrgDept   : Variant;  // 사용자 원소속과.
     sCelledit  : Variant;  // 처방셀입력모드
     sOrdcopy   : Variant;  // 전처방자동복사
     sDrugprt   : Variant;  // 마약처방전자동출력
     sPhone     : Variant;  // 진료과 전화번호
     sCalYn     : Variant;  // 계산여부
     sSdTot     : Variant;  // 불출총량
     sDoseUnit  : Variant;  // 포장단위
     sRejtOrd   : Variant;  // 반납총량
     //추가. 2002.11.9 약품반납확인자
     sRetCfDr   : Variant;  // 약품반납확인약사.
     //추가. 2002.11.14 이용언
     sPatWardno : Variant;
     sPatRoomno : Variant;
     sPatdept   : Variant;
     sDrugunit  : Variant;
     sTypecd    : Variant;   // 특정상병일때 본인부담20% 적용유무
     // 퇴원약 Multi 반납용 추가 2005.04.19 조일영
     sFlag      : Variant;   // 구분자
     sOrdcd     : Variant;   // 처방코드
     sOrdname   : Variant;   // 처방명
     sIoqty     : Variant;   // 일회수량
     sIounit    : Variant;   // 단위
     sTotqty    : Variant;   // 총량
     sCount     : Variant;   // 회수
     sOrdseqno  : Variant;   // 처방순번
     sOrdqty    : Variant;   // 반납량
     sRtnid     : Variant;   // 반납자
     sDosno     : Variant;   // 투약번호
     sStatus    : Variant;   // 상태
     sIoto      : Variant;   //(추가. 2010.07.15 김송주) 반납병동

     // 산정특례(희귀,난치,치매,결핵,암) 등록기준 코드 관련 2009.07.07 김송주
     sRareDiagCd    : Variant;   // 희귀난치성 진단코드
     sRareDisease   : Variant;
     sRareEndisease : Variant;
     sBasis         : Variant;
     sExam1         : Variant;
     sExam2         : Variant;
     sExam3         : Variant;
     sExam4         : Variant;
     sExam5         : Variant;
     sExam6         : Variant;
     sRareNumber    : Variant; // 희귀난치질환자 등록번호
     sExammix       : Variant;  //필수검사조합, KimDaeYong 2014-09-30
     sRgttxt        : Variant;  //등록구분, KimDaeYong 2014-09-30
     sGubun         : Variant;  //산정특례구분, KimDaeYong 2019-01-03
     sGubunname     : Variant;  //산정특례구분명, KimDaeYong 2019-05-14
     //sTodate        : Variant;  //희귀질환종료일자, KimDaeYong 2014-10-06,
     sLeavecnt      : Variant;  //희귀질환남은일수, KimDaeYong 2014-10-06
     sChart1        : Variant;
     sChart2        : Variant;
     sYesNo         : Variant;  //PassWord확인, KimDaeYong 2014-07-30
     sExcepyn       : Variant;  //예외적용가능여부, KimDaeYong 2019-04-25
     sExcepexam     : Variant;  //예외적용필수검사항목, KimDaeYong 2019-04-25
     sRehyn         : Variant;  //장애여부, KimDaeYong 2019-05-16
     sDiagcdref     : Variant;  //참고질환코드, KimDaeYong 2019-05-16
     sDiagseqno     : Variant;  //상병일련번호, KimDaeYong 2019-05-16
     sRarermk       : Variant;  //비고, KimDaeYong 2020-01-06

     //질병관리본부 감염병신고2차개발용 주소/상세주소 추가 변수. KimDaeYong 2017-07-13
     sAddress1      : Variant;
     sAddress2      : Variant;

     //CCOMCDT용 변수. KimDaeYong 2018-10-24
     sCdprtnm       : Variant;
	 sCdvalue       : Variant;
	 sCdmaxval      : Variant;
	 sCdminval      : Variant;
	 sCdetca        : Variant;
	 sCdetcb        : Variant;
	 sCdetcc        : Variant;
	 sRemark        : Variant;

     //완화의료기록지용 변수. KimDaeYong 2021-11-24
     sAdmdate       : Variant;

     // 사용자정보 조회
     function UserInform(sType1,sType2:string):Integer;
     // 진료과 및 병동코드 조회
     function SelDeptNm(sType1,sType2:string):Integer;
     // 재활치료현황 조회
     function ListRehInfo(sType1,sType2,sType3:string;lType3:integer):Integer;
     // 재활경과기록지 조회
     function ListRehNote(sType1:string):Integer;
     function ListGroup(sType1,sType3,sType4,sType5,inMeddate:string):Integer;
     function ListIcdGroup(sType1,sType2,sType3:string):Integer;
     // 용법코드 조회
     function ListMethCd(sType1,sType2,sType3,sType4,sType5,sType6:string):Integer;
     // 공통코드(전체) List 조회
     function ListComCodeName(Code1,Code2:String):Integer;
     // 공통코드(만성질환코드) List 조회
     function ListComCodeName2(Code1:String):Integer;
     // 검체코드 List 조회
     function ListSpcCodeName(SlipCd,Code1:String):Integer;
     // 약효능분류코드 List 조회
     function ListDrugGroup(GrpType,Code1,Code2:String):Integer;
     // 검사실코드 List 조회
     function ListExRoomCode(SlipCd,Code1:String):Integer;
     // 진지공통코드 조회
     function ListSDComNm(sType1:string):Integer;
     // 재활의학공통코드 조회
     function ListSaComCode(Code1,Code2:String):Integer;
     // 병실코드 조회
     function ListRoomCode(sWardNo,sFromdate:String):Integer;
     // 약품반납 수정
     function SelectIrejt(sType1,sType2,sType3:String):Integer;
     function InsertIrejt(sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                          sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                          sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd:String):Integer;
     function DeleteIrejt(sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                          sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                          sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd:String):Integer;
     //보험인정기준 정보 SELECT
     function SelectInsInfo(OrdCd: String):Integer;
     // 환자정보조회
     function SelectPat(sType1 : String) : Integer;
     function ListIcdCD(sType1,sType2,sType3,inDate:string):Integer;
     // 사용자 P.W Check
     function Login(sType1,sType2,sPasswd:string):Integer;
     // 수술장비 조회
     function ListOPInst(sType1,sType2,sType3:string):Integer;

     // 약품정보 조회
     function DrugInfo(sType1:String):Integer;
     // 지정한 달을 공휴일을 조회
     function ListHolyday(sMonth:string):Integer;
     // 환자진료통계
     function ListPatOrder(sType1,sType2,sType3:String):Integer;
     // 법정 전염병 분류등급 조회
     function SelLegalDiag(sType1, sType2:string):Integer;
     // 간호사 수행예정 등록
     function UpdateAddod(sPatno, sAdmdate, sOrddate, sConfid, sEditid, sEditip : String):Integer;
     // 병원 기본정보 조회
     function HosInform(sLocate:String):Integer;
     //환자별 임상연구번호 등록
     function ListLabNo(MedDept,MedDr:String):Integer;
          // 해당일 공휴일여부
     function HolydayCheck(sType1:String):Integer;
     // 수간호사 이름 가져오기....
     function SelectHnName(sType1,sType2:String):Integer;
     //보험인정기준 추가정보 SELECT
     function SelectInsAddInfo(OrdCd: String):Integer;
     //추가. 2002.11.27 이용언) 가능검체 가져오기
     function ListSpcCodeName2(SlipCd, Code1, Ordcd, Type1:String):Integer;
     //2003-12-31 추가 특정상병일때 본인부담20% 적용유무
     function ChkIcdCD(sType1,sType2:string):Integer;
     //진료과코드조회(내과전공의)
     function SelImDeptNm(sType1,sType2:string):Integer;
     // 퇴원약 Multi 반납 조회 2005.04.19 추가 조일영
     function SelectMultiIrejt(sGubun,sPatno,sDschDate,sWardNo:String):Integer; // 구분, 환자번호, 퇴원일, 병동번호
     // 희귀난치성 코드 체크
     function ChkRareDiagCd(sDiagCd:String):Integer;
     // 희귀난치성 질환 등록 번호 조회 2009.07.09
     function SelectRareNumber(sPatno:String):Integer;
     // 희귀난치성 질환자 등록 기준 조회
     function ListRareInfo(inDiagCd,inRgttxt,inGubun:String):Integer;
     // 환자별산정특례등록정보조회. KimDaeYong 2019-05-14
     function ListRarePatInfo(inPatno, inSeldate:String):Integer;

    end;

    //  조건항목
    HmdSearct = class
     sClasscd1    : Variant;         // 대분류
     sClasscd2    : Variant;         // 중분류
     sClassnm1    : Variant;         // 대분류명
     sClassnm2    : Variant;         // 중분류명
     sTblname     : Variant;         // TABLE 명
     sColname     : Variant;         // COLUMN 명
     sComent      : Variant;         // 비고
     // 조건항목 코드 조회
     function ListCode:Integer;
    end;

    //  조건검색
    HmdSelect 	= class
     sPatno      : Variant;     // 환자번호
     sPatname    : Variant;     // 환자명
     sSex        : Variant;     // 성별
     sAge        : Variant;     // 나이
     sWardno     : Variant;     // 병동
     sMeddept    : Variant;     // 진료과
     sChadr      : Variant;     // 주치의
     sGendr      : Variant;     // 담당의
     sDiagname   : Variant;     // 진단명
     sMeddate    : Variant;     // 진료일
     sRoomno     : Variant;     // 병실      병실 추가 20071012

     // 조건검색 (Dinamic SQL)
     function ListQuery(sType, sFromCon, sWhereCon : String):Integer;
    end;

    // 법정전염병신고서
    Hmdinfrpt = class
     sPATNO		  : Variant ; // 환자번호
     sRGTDATE    : Variant ; // 등록일자
     sRPTKIND    : Variant ; // 신고서구분
     sMEDDEPT    : Variant ; // 진료과/진료부서
     sMEDDR      : Variant ; // 진료의사(발행의사)
     sMedDrnm    : Variant ; // 진료의사명(발행의사)
     sCVNAME     : Variant ; // 보호자명
     sADDRSYN    : Variant ; // 거주지불명여부
     sUNIDENTYN  : Variant ; // 신원미상여부
     sJobcd      : Variant ; // 직업코드
     sJOB        : Variant ; // 직업
     sINFEGRD    : Variant ; // 전염병등급
     sINFECD     : Variant ; // 전염병코드
     sNINFSYND   : Variant ; // 신종전염병증후군
     sINFENAME   : Variant ; // 기타전염병명
     sSICKDT     : Variant ; // 발병일
     sDIAGDT     : Variant ; // 진단일
     sCONFRSLT   : Variant ; // 확진검사결과
     sINFTYPE    : Variant ; // 전염병환자구분
     sDEATHYN    : Variant ; // 사망여부
     sINFROUTE   : Variant ; // 추정감염경로
     sINFZONE    : Variant ; // 추정감염지역
     sINFNATIN   : Variant ; // 추정감염국명
     sSTAYTERM   : Variant ; // 추정감염체류기간
     sSTAYTERMDD : Variant ; // 추정감염체류기간DD. KimDaeYong 2019-11-01
     sCHNGRPT    : Variant ; // 변경신고
     sADDRCHNG   : Variant ; // 주소변경=>매독텍스트로 변경, KimDaeYong 2014-04-17
     sNATION     : Variant ; // 국적
     sADMITDT    : Variant ; // 입국일
     sTBHX       : Variant ; // 결핵과거치료력
     sTBTXTERM   : Variant ; // 결핵치료기간
     sTBTXCNT    : Variant ; // 결핵치료횟수
     sBCGYN      : Variant ; // BCG반흔여부
     sBCGROUTE   : Variant ; // BCG접종법
     sSPUTSMEA   : Variant ; // 객담도말검사
     sSPUTCULT   : Variant ; // 객담배양검사
     sSPCSMEAR   : Variant ; // 객담이외의 검체 도말검사
     sOTHRCULT   : Variant ; // 객담이외의 검체 배양검사
     sPATHEXAM   : Variant ; // 조직검사
     sOTHREXAM   : Variant ; // 기타검사
     sXRAY       : Variant ; // 방사선사진
     sTBTEST     : Variant ; // 투베르클린 검사
     sTBTESTSZ   : Variant ; // 투베르클린경결크기(mm)
     sDIAGCD     : Variant ; // 진단/질환코드
     sTBPTTYPE   : Variant ; // 결핵환자구분
     sTXSTDT     : Variant ; // 치료시작일자
     sINHYN		  : Variant ; // INH사용여부
     sRFPYN      : Variant ; // RFP사용여부
     sPZAYN      : Variant ; // PZA사용여부
     sEMBYN      : Variant ; // EMB사용여부
     sSMYN       : Variant ; // SM사용여부
     sPTAYN      : Variant ; // PTA사용여부
     sCSYN       : Variant ; // CS사용여부
     sLFXYN      : Variant ; // LFX사용여부, KimDaeYong 2014-04-18
     sPASYN      : Variant ; // PAS사용여부
     sOLXYN      : Variant ; // OLX사용여부
     sKMYN       : Variant ; // KM사용여부
     sTUMYN      : Variant ; // TUM사용여부
     sAKYN       : Variant ; // AK사용여부
     sOTHERYN    : Variant ; // OTHER사용여부
	  sOTHRDRUG   : Variant ; // 기타치료약제
     sTXENDDT    : Variant ; // 치료종결일자
     sTXRESULT   : Variant ; // 치료결과 및 퇴록구분
     sHEPATYPE   : Variant ; // 간염질환구분
     sVACCINHX   : Variant ; // 예방접종내력
     sVDTYPE     : Variant ; // 성병질환구분
     sVDPTTYPE   : Variant ; // 성병환자구분
     sREMARK     : Variant ; // 비고. KimDaeYong 2019-11-01
     sACUTE      : Variant ; // 급성여부(B형간염). KimDaeYong 2019-11-11
     sFRGNR      : Variant ; // 외국인여부. KimDaeYong 2019-11-18
     sWardNo     : Variant ; // 병동번호
     sRoomNo     : Variant ; // 병실번호
     sEDITID     : Variant ; // 수정자 ID
     sEDITIP     : Variant ; // 수정자 IP
     sEDITDATE   : Variant ; // 수정일시
     sReporter    : Variant ; // 최초출력자(추가)
     sReportDt    : Variant ; // 최초출력일자(추가)
     // 환자정보
     sPatName   : Variant;  // 환자명
     sResNo1    : Variant;  // 주민번호1
     sResNo2    : Variant;  // 주민번호2
     sBirtDate  : Variant;  // 생년월일
     sSex       : Variant;  // 성별
     sDeptNm     : Variant ; // 진료과명
     sLocate     : Variant ; // 사업장
     sType1      : Variant ; // 구분자
     //선천성매독, KimDaeYong 2014-04-07
     sDiagyn    : Variant ; // 균확인
     sTrayn     : Variant ; // 항체양성
     sLgmyn     : Variant ; // 특이lgM항체검출
     sBvdrlyn   : Variant ; // 뇌척수액VDRL양성
     sMvdrlyn   : Variant ; // 연속검사상VDRL역가상승
     sXryn      : Variant ; // 방사선검사상 선천성매독 합당소견
     sOthyn     : Variant ; // 기타
     sOthtxt    : Variant ; // 기타텍스트

     sDiagcdBas : Variant ; // 기초진단코드, KimDaeYong 2014-04-15
     sDeathText : Variant ; // 감염병탭(사망텍스트), KimDaeYong 2014-04-17

     //결핵신고서 변경으로 추가. KimDaeYong 2020-01-23
     sRptgubun		 : Variant;	// 결핵_신고
     sRptdeathdt     : Variant;  // 결핵_신고_사망일
     sRptdeath       : Variant;  // 결핵_신고_사망관련
//     sAdmitdt2       : Variant;  // 결핵_입국일자, sAdmitdt가 오류(?)나서 재선언.KimDaeYong 2020-02-04
     sTbtelno        : Variant;  // 결핵_전화번호
     sTbhpno         : Variant;  // 결핵_휴대번호
     sJobgubun       : Variant;  // 결핵_직업구분
     sInstit         : Variant;  // 결핵_시설명
     sInstitzipcd    : Variant;  // 결핵_시설우편번호
     sInstitaddr     : Variant;  // 결핵_시설주소
     sXraycoldt      : Variant;  // 결핵_방사선_검체채취일
     sSmeacoldt      : Variant;  // 결핵_도말_검체채취일
     sSmeatiss       : Variant;  // 결핵_도말_검체종류
     sCultcoldt      : Variant;  // 결핵_배양_검체채취일
     sCulttiss       : Variant;  // 결핵_배양_검체종류
     sTbpcr          : Variant;  // 결핵_핵산증폭검사
     sTbpcrcoldt     : Variant;  // 결핵_핵산_검체채취일
     sTbpcrtiss      : Variant;  // 결핵_핵산_검체종류
     sXpert          : Variant;  // 결핵_XPERT
     sXpertcoldt     : Variant;  // 결핵_XPERT_검체채취일
     sXperttiss      : Variant;  // 결핵_XPERT_검체종류
     sPathcoldt      : Variant;  // 결핵_조직_검체채취일
     sPathtiss       : Variant;  // 결핵_조직_검체종류
     sTbkind         : Variant;  // 결핵_결핵종류
     sTbkind2txt     : Variant;  // 결핵_결핵종류_2텍스트
     sTbkind3txt     : Variant;  // 결핵_결핵종류_3텍스트
     sTbpattype2     : Variant;  // 결핵_환자구분_재치료자구분
     sTxyn           : Variant;  // 결핵_치료실시여부
     sTxdate         : Variant;  // 결핵_치료시작예정일
     sTxmedi         : Variant;  // 결핵_치료약제
     sTxmedioth      : Variant;  // 결핵_치료약제기타
     sAntitbrslt     : Variant;  // 결핵_항결핵약제_검사결과
     sAntitbrslt3    : Variant;  // 결핵_항결핵약제_검사결과3
     sAntitbmthd     : Variant;  // 결핵_항결핵약제_검사방법
     sAntitbmedi     : Variant;  // 결핵_항결핵약제_내성약제
     sAntitbmedioth  : Variant;  // 결핵_항결핵약제_내성약제기타
     sAntitbcode     : Variant;  // 결핵_항결핵약제_내성코드
     sAntitbcoldt    : Variant;  // 결핵_항결핵약제_검체채취일
     sTxgubun        : Variant;  // 결핵_치료결과구분
     sTxgubun2       : Variant;  // 결핵_치료결과구분2
     sTxdcsdt        : Variant;  // 결핵_치료결과판정일
     sSputsmea2      : Variant;  // 결핵_도말검사2
     sSmeacoldt2     : Variant;  // 결핵_도말_검체채취일2
     sSmeatiss2      : Variant;  // 결핵_도말_검체종류2
     sSputcult2      : Variant;  // 결핵_배양검사2
     sCultcoldt2     : Variant;  // 결핵_배양_검체채취일2
     sCulttiss2      : Variant;  // 결핵_배양_검체종류2
     sTbpcr2         : Variant;  // 결핵_핵산증폭검사2
     sTbpcrcoldt2    : Variant;  // 결핵_핵산_검체채취일2
     sTbpcrtiss2     : Variant;  // 결핵_핵산_검체종류2


     // 법정전염병 신고서 입력
     function Insert1:Integer;
     // 법정전염병 신고서 수정
     function Update1:Integer;
     // 법정전염병(간염) 신고서 입력
     function Insert2:Integer;
     // 법정전염병(간염) 신고서 수정
     function Update2:Integer;
     // 법정전염병(간염) 신고서 조회
     function Retrieve2(sFromDate, sToDate : String) :Integer;
     // 법정전염병(산모B형간염) 신고서 입력
     function Insert3:Integer;
     // 법정전염병(산모B형간염) 신고서 수정
     function Update3:Integer;
     // 법정전염병(산모B형간염) 신고서 조회
     function Retrieve3(sFromDate, sToDate : String) :Integer;
     // 법정전염병(성병) 신고서 입력
     function Insert4:Integer;
     // 법정전염병(성병) 신고서 수정
     function Update4:Integer;
     // 법정전염병(성병) 신고서 조회
     function Retrieve4(sFromDate, sToDate : String) :Integer;
     // 법정전염병(결핵) 신고서 입력
     function Insert5:Integer;
     // 법정전염병(결핵) 신고서 수정
     function Update5:Integer;
     // 법정전염병(결핵) 출력자 Update
     function Update6(sFromDate, sToDate : String):Integer;
     // 법정전염병 신고서 조회
     function Retrieve6 :Integer;
     // 법정전염병(선천성매독) 신고서 입력, KimDaeYong 2014-04-07
     function Insert7:Integer;
     // 법정전염병(선천성매독) 신고서 수정, KimDaeYong 2014-04-07
     function Update7:Integer;
     // 법정전염병(선천성매독) 신고서 조회, KimDaeYong 2014-04-07
//     function Retrieve7(sFromDate, sToDate : String) :Integer;
     // 법정전염병 신고서 1건 조회
     function Select1 :Integer;
     //추가. 2002.11.4 이용언 퇴원지시시 법정전염병 1종 신고 환자 신고변경서 작성 체크
     function CheckInfrpt(sType1,sType2,sType3,sType4 :String):Integer;
     // 법정전염병 신고서 출력기록, KimDaeYong 2020-01-29
     function UpdatePrt(sPATNO, sRGTDATE,sRptKind, sEDITID,sEditip : String):Integer;
    end;

    // 과별수술분류
    HmdOpGrct = class
     sGroupCd  : Variant ; // 과별 수술 분류코드
     sGroupNm  : Variant ; // 과별 수술 분류명
     sDeptNm   : Variant ; // 진료과명
     sMedDept  : Variant ; // 진료과코드
     // 과별 수술분류 select
     function ListOpGroup(sDeptCd, sLocate : String) :Integer;
    end;

    // 과별수술코드
    HmdOpCdct = class
     sOPCode   : Variant ; // 과별 수술 코드
     sOPName   : Variant ; // 과별 수술 명
     sGroupCd  : Variant ; // 과별 수술 분류코드
     sGroupNm  : Variant ; // 과별 수술 분류명
     // 과별 수술코드 select
     function ListOpCode(sDeptCd,sOPGrt : String) :Integer;
    end;

    // 원무에서 요청 09.07 윤형배 + 유병희 대리
    Hapipdls = class         // 09.07 윤형배대리
     tAdmdate    : Variant;  // 예약일자/접수일자/입원일자
     sPatno      : Variant;  // 환자번호
     sQueryType  : String;   // 조회구분

     function APIPDLS_U6: Integer;
    end;

        //외래환자내역 ///////////////////////////////////////////////////
   HAPOPDLST = class
      sPatno    :Variant; // S_PATNO   환자번호
      sMeddate  :Variant; // S_MEDDATE 진료일자
      sMeddept  :Variant; // S_MEDDEPT 진료과
      sMeddr    :Variant; // S_DR1     진료의사
      sMedtime  :Variant; // S_TIME1   진료예약시간
      sOrddate  :Variant; // S_ORDDATE  처방일자/예약신청일자
      iStayno   :Variant; // L_SEQNO1  진료대기순서
      sRsvtype  :Variant; // S_TYPE1   예약구분
      sRsvcfmyn :Variant; // S_YN1     예약확인
      sPattype  :Variant; // S_TYPE2   환자유형
      sTypecd   :Variant; // S_TYPE3   유형보조
      sSpcdryn  :Variant; // S_YN2     선택의사여부
      sFstmedty :Variant; // S_TYPE4   초재진구분
      sMedrcpyn :Variant; // S_YN3     진찰료수납여부
      sRcpyn    :Variant; // S_YN4     수납여부
      sMedyn    :Variant; // S_YN5     진찰여부
      sMedchgid :Variant; // S_USERID1 진찰여부수정자
      sErdate   :Variant; // S_DATETIME1   응급실도착시간
      sOeflag   :Variant; // S_FLAG1   외래응급여부
      sOiflag   :Variant; // S_FLAG2   외래/입원구분
      sHdsflag  :Variant; // S_FLAG3   인공신장투석구분
      sRejtdate :Variant; // S_REJTDATE   취소일시
      sFstinpid :Variant; // S_USERID2    최초입력자
      sFsttime  :Variant; // S_DATETIME2  최초입력시간
      iRcpseq   :Variant; // L_SEQNO2  수납순번
      sAdmidate :Variant; // S_DATE1 예약일자/접수일자/입원일자
      sCustcd   :Variant; // S_CODE1   계약처코드
      sDccode   :Variant; // S_CODE2   감면코드
      sUncolcd  :Variant; // S_CODE3   미수사유코드
      sNochcd   :Variant; // S_CODE4   무료접수사유코드
      sRemark   :Variant; // S_DESC1   비고
      sRecodyn  :Variant; // S_YN6     기록실접수여부
      sOutdate  :Variant;
      sChartYn  :Variant;
      sFilmYn   :Variant;
      sFollow   :Variant;
      sEditid   :Variant; // S_EDITID  수정자ID
      sEditip   :Variant; // S_EDITIP  수정단말IP
      sEditdate :Variant; // S_EDITDATE   수정일시

      sFlag     :Variant; // S_FLAG4   조건구분
      sFromdt   :Variant; // S_FROM1   예약시작일자
      sTodt     :Variant; // S_TO1     예약종료일자
      sDrname   :Variant; // S_DRNAME1 의사명
      sPatname  :Variant; // S_PATNAME 환자명
      sMeddeptnm:Variant; // S_NAME1   진료과명
      sFstinpnm :Variant; // S_USERNAME1 최초변경자명
      sOldPatno :Variant; // S_USERID3   변경전환자번호
      sOldMeddept:Variant;// S_CODE5    변경전진료과
      sOldMeddr :Variant; // S_DR2      변경전의사
      sOldMeddate:Variant;// S_DATETIME3 변경전진료일자
      sOldMedtime:Variant;// S_DATETIME3 변경전진료일시
      sPattypenm :Variant;// S_NAME2 환자유형명
      sTypecdnm  :Variant;// S_NAME3 유형보조명
      sFstmedtynm:Variant;// S_NAME4 초재진구분명
      sCustcdnm  :Variant;// S_CODE 계약처코드명
      sDccodenm  :Variant;// S_NAME 감면코드명
      sRsvtypenm :Variant;// S_NAME 예약방법명
      sNochcdnm  :Variant;// S_NAME 무료접수사유명
      sUncolcdnm :Variant;// S_NAME 미수사유명
      sResno1    :Variant;// S_NO1 주민등록번호1
      sResno2    :Variant;// S_NO2 주민등록번호2
      sTelno1    :Variant;// S_NO3 전화번호1
      sTelno2    :Variant;// S_NO4 전화번호2
      sTelno3    :Variant;// S_NO5 전화번호3
      sMeddrnm   :Variant;// 진료의사명
      sEditidnm  :Variant;// 수정자명
      sExceptcd  :Variant;// 의약분업예외코드
      sExceptcdnm:Variant;// 의약분업예외코드명
      sHostype   :Variant;// 투석구분
      sFstinpidnm:Variant;// 최초입력자명

      sRcpstat   :Variant;//
      sJobtype   :Variant;//
      sRcpid     :Variant;//
      sDummy     :Variant;//
      lRcpamt    :Variant;//
      lTotamt    :Variant;//
      lOwnamt    :Variant;//
      lSpcamt    :Variant;//
      lUncamt    :Variant;//
      lDcamt     :Variant;//
      lCustamt   :Variant;//
      lPreamt    :Variant;//

      sSex       :Variant;//
      sBirtdate  :Variant;//

      sRcpdate   : Variant; //08/10 이하 예약증 발행을 위한 것임
      lRcpseq    : Variant; //08/10
      sTypename  : Variant; //08/10
      sGuide     : Variant; //08/10

      sFromdate  : Variant;
      sTodate    : Variant;
      sLabno     : Variant; //임상실험 랩번호 (11/16)

      sSpgubun   : Variant; // 신종플루

      function OPDLS_U5 : Integer;
      //-----------------------------------------------------------
      // SERVER   : AP_B111X
      // SERVICE  : AP_OPDLS_U5
      //-----------------------------------------------------------
      // 응급의학 관리료를 산정하지 않음
      // argument : sPatno,sMeddate,sMedtime,sMeddr,sEditid,sEditip
      //-----------------------------------------------------------
      function OPDLS_I2 : Integer;
      function Opdls_s13 : Integer;
   end;

   // 신생아 퇴원 기록지    ///////////////////////////////////////////Add by 송원철
   HmdDsbnrt = Class
      sPatno     : Variant;    //입원일자
      sAdmdate   : Variant;    //퇴원일자
      sDschdate  : Variant;    //체중
      sWeight    : Variant;    //체온
      sBodytemp  : Variant;    //호흡수
      sRespcnt   : Variant;    //심박동수
      sHrtbt     : Variant;    //활동정도
      sActdeg    : Variant;    //혈액형ABO
      sBldabo    : Variant;    //혈액형RH
      sBldrh     : Variant;    //아기 인수장
      sTakebaby  : Variant;    //아기인수장 기타
      sTakeetc   : Variant;    //주민등록번호(산모)
      sResno1    : Variant;    //주민등록번호(아기인수장)
      sResno2    : Variant;    //수유방법
      sDimthd    : Variant;    //분유회사종류
      sMilktype  : Variant;    //분유회사기타
      sMilketc   : Variant;    //수유내용
      sDiminfo   : Variant;    //목욕
      sBath      : Variant;    //신생아황달
      sJaundice  : Variant;    //신생아황달 검사유무
      sExemyn    : Variant;    //검사내용
      sJaunexm   : Variant;    //예방접종
      sPre       : Variant;    //실내환경
      sRoomenv   : Variant;    //적정온도
      sApptemp   : Variant;    //적정습도
      sApphumid  : Variant;    //기타교육
      sEtcedu    : Variant;    //추후관리유무
      sAfteryn   : Variant;    //추후관리 내용
      sAfteredu  : Variant;    //추후관리 기타
      sAfteretc  : Variant;    //추가설명내용
      sRemark    : Variant;    //담당간호사
      sNurse     : Variant;    //수정자 ID
      sDimint    : Variant;    //수유간격
      sDimqty    : Variant;    //현재 1회 수유량
      sEditid    : Variant;    //수정자 IP
      sEditip    : Variant;    //수정일시


      v_Patno    : Variant;  // 환자번호
      v_Admdate  : Variant;  // 입원일자
      v_Dschdate : Variant;  // 퇴원일자
      v_Weight   : Variant;  // 체중
      v_Bodytemp : Variant;  // 체온
      v_Cmdyn    : Variant;  // 대사이상
      v_Respcnt  : Variant;  // 호흡수
      v_Hrtbt    : Variant;  // 심박동수
      v_Bldabo   : Variant;  // 혈액형 ABO
      v_Bldrh    : Variant;  // 혈액형 RH
      v_Dschcare : Variant;  // 퇴원시건강상태
      v_Resno1   : Variant;  // 주민등록번호(산모)
      v_Resno2   : Variant;  // 주민등록번호 (아기 인수장)
      v_Dimthd   : Variant;  // 수유방법
      v_Milktype : Variant;  // 분유회사기타
      v_Milketc  : Variant;  // 분유회사종류
      v_Dimint   : Variant;  // 수유간격
      v_Dimqty   : Variant;  // 1회수유량
      v_Bath     : Variant;  // 목욕
      v_Jaundice : Variant;  // 신생아황달
      v_Exemyn   : Variant;  // 신생아황달 검사유무
      v_Jaunexm  : Variant;  // 검사내용
      v_Pre      : Variant;  // 예방접종
      v_Roomenv  : Variant;  // 실내환경
      v_Apptemp  : Variant;  // 적정습도
      v_Apphumid : Variant;  // 적정온도
      v_Etcedu   : Variant;  // 기타 교육
      v_Remark   : Variant;  // 특기사항
      v_Nurse    : Variant;  // 간호사
      v_Editid   : Variant;  // 수정자ID
      v_Editip   : Variant;  // 수정자IP
      v_Pulse    : Variant;  // 심박동
      v_Bldprehi : Variant;  // 혈압(high)
      v_Bldprelo : Variant;  // 혈압(low)




     function SelectDsbnr(sPatno,
                          sAdmdate:String):Integer;
     function SelectVS(sPatno  :String):Integer;

     function InsertDsbnrt(sPatno    ,   // 환자번호
                           sAdmdate  ,   // 입원일자
                           sDschdate ,   // 퇴원일자
                           sWeight   ,   // 체중
                           sBodytemp ,   // 체온
                           sCmdyn    ,   // 대사이상
                           sRespcnt  ,   // 호흡수
                           sHrtbt    ,   // 심박동수
                           sBldabo   ,   // 혈액형 ABO
                           sBldrh    ,   // 혈액형 RH
                           sDschcare ,   // 퇴원시건강상태
                           sResno1   ,   // 주민등록번호(산모)
                           sResno2   ,   // 주민등록번호 (아기 인수장)
                           sDimthd   ,   // 수유방법
                           sMilktype ,   // 분유회사기타
                           sMilketc  ,   // 분유회사종류
                           sDimint   ,   // 수유간격
                           sDimqty   ,   // 1회수유량
                           sBath     ,   // 목욕
                           sJaundice ,   // 신생아황달
                           sExemyn   ,   // 신생아황달 검사유무
                           sJaunexm  ,   // 검사내용
                           sPre      ,   // 예방접종
                           sRoomenv  ,   // 실내환경
                           sApptemp  ,   // 적정습도
                           sApphumid ,   // 적정온도
                           sEtcedu   ,   // 기타 교육
                           sRemark   ,   // 특기사항
                           sNurse    ,   // 간호사
                           sEditid   ,   // 수정자ID
                           sEditip       // 수정자IP
                           : String):Integer;
    end;

    HmdTrinft = Class
       sPatNo      : Variant;    // 환자번호
       sAdmDate    : Variant;    // 입원일자
       sTrSeqNo    : Variant;
       sTrDate     : Variant;    // 전과전실일자
       sRoomNo     : Variant;    // 병실번호
       sFromWard   : Variant;    // 보낸병동
       sFromDept   : Variant;    // 보낸과
       sFromNrs    : Variant;    // 보낸간호사
       sToWard     : Variant;    // 받는병동
       sToDept     : Variant;    // 받는과
       sToNrs      : Variant;    // 받는간호사
       sDiagName   : Variant;    // 진단명
       sOpName     : Variant;    // 수술명
       sOpDate     : Variant;    // 수술일자
       sTrGoal     : Variant;    // 목적
       sTrGoal1    : Variant;    //
       sTrGoal2    : Variant;    //
       sTrGoal3    : Variant;    //
       sTrGoal4    : Variant;    //
       sSummary    : Variant;    // 요약기록
       sHbp        : Variant;    // 혈압HIGH
       sLbp        : Variant;    // 혈압LOW
       sBodyTemp   : Variant;    // 체온
       sPulse      : Variant;    //
       sRespCnt    : Variant;    //
       sDiet       : Variant;    //
       sNotExm     : Variant;    //
       sRsvExm     : Variant;    //
       sOralYn     : Variant;    //
       sBldYn      : Variant;    //
       sBldKind    : Variant;    //
       sInjectYn   : Variant;    //
       sDrugYn     : Variant;    //
       sDrugKind   : Variant;    //
       sAllergy    : Variant;    //
       sAllergy1   : Variant;    //
       sAllergy2   : Variant;    //
       sAllergy3   : Variant;    //
       sRemark     : Variant;    //
       //(추가. 2002.11.29 이용언) 보낼 서류로 인한 추가
       sType1      : Variant;
       sType2      : Variant;
       sType3      : Variant;
       sType4      : Variant;
       sType5      : Variant;
       sType6      : Variant;
       sType7      : Variant;
       //
       sWithdr     : Variant;
       sWithdrtxt  : Variant;


       function InsTrinf(sPatNo,    sAdmDate,  sTrDate,   sRoomNo,  sFromWard,
                         sFromDept, sFromNrs,  sToWard,   sToDept,  sToNrs,
                         sDiagName, sOpName,   sOpDate,   sTrGoal,  sTrGoal1,
                         sTrGoal2,  sTrGoal3,  sTrGoal4,  sSummary, sHbp,
                         sLbp,      sBodyTemp, sPulse,    sRespCnt, sDiet,
                         sNotExm,   sRsvExm,   sOralYn,   sBldYn,   sBldKind,
                         sInjectYn, sDrugYn,   sDrugKind, sAllergy, sAllergy1,
                         sAllergy2, sAllergy3, sRemark,   sEditId,  sEditIp,
                         sTrSeqNo,
                         //(추가. 2002.11.29 이용언) 보낼 서류 추가.
                         sChk1, sChk2, sChk3, sChk4, sChk5, sChk6, sChk7,
                         // 의료진 동반 여부 추가 2011.08.12 김송주
                         sWithdr, sWithdrtxt
                          :String):Integer;
      function HistoryTrinf(sType1,sPatNo,sAdmDate:String):Integer;
      function SelectTrinf(sPatno,sAdmDate,sTrSeqNo:String):Integer;
      function DelTrinf(sPatNo, sAdmDate, sTrSeqNo:String):Integer;
    end;

    HmdDnsstt = Class
       sSort1     : Variant;    // 소트순서
       sDeptnm1   : Variant;    // 진료과명
       sSort2     : Variant;    // 소트순서
       sDeptnm2   : Variant;    // 진료과명
       sFst_tot  : Variant;     // 초진합계
       sRe_tot   : Variant;     // 재진합계
       sTot_tot  : Variant;     // 총계합계
       sMeddept  : Variant;     // 병    동
       sPrecnt   : Variant;     // 전일재원수
       sAdmcnt   : Variant;     // 입원환자수
       sDschcnt  : Variant;     // 퇴원환자수
       sIncCnt   : Variant;     // 전과증가
       sDsccnt   : Variant;     // 전과감소
       sStaytot  : Variant;     // 금일재원수
       sMedstay  : variant;     // 과별재원수
       sBedcnt   : Variant;     // 침상수
       sOpcnt    : Variant;      // 수술환자수
       sExpcnt   : Variant;     // 사망환자수
       sOp_tot   : Variant;
       sSu_tot   : Variant;    //건진환자 총계
       sFree_tot : Variant;    // 무료접수환자통계  /* 2005.11.09 김송주 추가 */

       function  Dailystatic(sType1,sType2,sType3:String): Integer;
    end;

    //  수술전 처치 및 간호상태확이표
    HmdOpinft = Class
       sPatno      : Variant;        // 등록번호
       sOpdate     : Variant;        // 수술일자
       sOpseqno    : Variant;        // 수술순번
       sAdmdate    : Variant;        // 입원(진료)일자
       sPatsect    : Variant;        // 환자구분
       sMeddept    : Variant;        // 진료과
       sDeptnm     : Variant;        // 진료과명
       sChadr      : Variant;        // 주치의
       sChadrnm    : Variant;        // 주치의명
       sGendr      : Variant;        // 주치의
       sWardno     : Variant;        // 병동번호
       sRoomno     : Variant;        // 병실번호
       sOpcode     : Variant;        // 수술코드
       sOpname     : Variant;        // 수술명
       sStarvtm    : Variant;        // 대기실도착시간
       sVmcautn    : Variant;        // Viral Marker
       sVmremark   : Variant;        // Viral Marker 기타
       sAllcautn   : Variant;        // 알러지여부
       sAllergy    : Variant;        // 알러지기타
       sItem1      : Variant;        // 환자확인
       sItem2      : Variant;        // 수술동의서
       sItem3      : Variant;        // 수혈동의서
       sItem4      : Variant;        // 금식
       sItemtime   : Variant;        // 금식시간
       sItem5      : Variant;        // 의치,안경...
       sItem6      : Variant;        // 장신구 제거
       sItem7      : Variant;        // 화장제거
       sItem8      : Variant;        // 환의착용
       sItem9      : Variant;        // 수술전 검사
       sItem10     : Variant;        // 형액준비
       sItemkind   : Variant;        // 예약, 확인, 혈액밴드
       sItem11     : Variant;        // 수술부위 피부준비
       sItem12     : Variant;        // 유치카테더
       sItem13     : Variant;        // 위관삽입
       sItem14     : Variant;        // 관장
       sPremedi    : Variant;        // 수술전 투약(premedi)
       sPre        : Variant;        // 수술전 투약(pre)
       sPrepare    : Variant;        // 수술전 투약(prepare)
       sBldprehi   : Variant;        // 혈압H
       sBldprelo   : Variant;        // 혈압L
       sBodytemp   : Variant;        // 체온
       sPulse      : Variant;        // 맥박
       sRespcnt    : Variant;        // 호흡
       sWeight     : Variant;        // 몸무게
       sPrepyn     : Variant;        // 보내는 물품 및 약품
       sPreTrt     : Variant;        // 종류
       sPrepkind   : Variant;        // 기타종류
       sPrepetc    : Variant;        // 기타
       sHeadnrs    : Variant;        // 수간호사
       sActnrs     : Variant;        // 간호단위 담당간호사
       sActnrsnm   : Variant;        // 간호단위 담당간호사명
       sOprnrs     : Variant;        // 수술장 담당간호사
       sOprnrsnm   : Variant;        // 수술장 담당간호사명
       sEditid     : Variant;        // 수정자ID
       sEditip     : Variant;        // 수정자IP
       sEditdate   : Variant;        // 수정일시
       sOrddesc1   : Variant;        // Order내역1
       sOrddesc2   : Variant;        // Order내역2
       sBldAbo     : Variant;
       sBldRh      : Variant;
       sWdouttm    : Variant; // 병실출발시간

       function  SelectOrder(sType1,sType2,sType3,sType4,sType5:String): Integer;
       function  ListInf1(sType1,Patno,Opdate,Opseqno:String): Integer;
       //과거 간호상태확인표 조회
       function  HistoryOpinf(patno:String): Integer;
       function  UpdateOrInsert(Cnt:integer):Integer;
       function  DelInf1(sType1,sType2,sType3,sType4,sType5:String):Integer;
    end;

    //소아과 약품별 몸무게별 용량
    HmdPdqtyt = class
     sSetType	 : Variant;  // 사용자ID or 부서
     sOrdcd     : Variant;  // 처방코드
     sOrdname   : Variant;  // 처방명
     sWeight	 : Variant;  // 체중
     sDosqty	 : Variant;  // 용량
     sUnittype  : Variant;  // 단위구분 1,2
     sOrdunit   : Variant;  // 단위
     sEditId	 : Variant;  // 수정자 ID
     sEditIp	 : Variant;  // 수정자 IP
     sEditDate  : Variant;  // 수정일시
     sOrdYn     : Variant;  // 처방가능여부
     sDoseUnit  : Variant;  //포장단위
     sQtyUnit   : Variant;  //함량단위

     // 소아과 약품별 몸무게별 용량 삭제 (Multi Input)
     function DeleteQty(Cnt:Integer):Integer;
     // 소아과 약품별 몸무게별 용량 삭제(약품별)
//     function DeleteOrdcd(SetType,Ordcd:String):Integer;
     // 소아과 약품별 몸무게별 용량 수정 (Multi Input)
     function UpdatePdQty(Cnt:Integer):Integer;
     // 소아과 약품별 몸무게별 용량 입력
     function InsertPdQty(SetType,Ordcd,Weight,DosQty,Unittype,Ordunit,EditId,EditIp:String):Integer;
     // 소아과 약품별 몸무게별 용량 정보 조회 (1건)
     function SelectPdQty(UserId,DeptCd,Ordcd,Weight:String):Integer;
     // 소아과 약품별 몸무게별 용량 조회(SETTYPE별)
     function ListPdQty(Type1,SetType,Ordcd:String):Integer;
    end;

    // Refer System
    HmdRefert = Class
     sType1     : Variant;
     sPatno     : Variant;
     sPatname   : Variant;
     sReqdate   : Variant;
     sBirtdate  : Variant;
     sResno1    : Variant;
     sResno2    : Variant;
     sSex       : Variant;
     sTelno     : Variant;
     sRefdr     : Variant;
     sRefdrnm   : Variant;
     sRefhosp   : Variant;
     sRefhospnm : Variant;
     sMeddept   : Variant;
     sDeptnm    : Variant;
     sMeddr     : Variant;
     sMeddrnm   : Variant;
     sMeddate   : Variant;
     sRtncode   : Variant;
     sRtndate   : Variant;
     sRemark    : Variant;
     sLocate   : Variant;    // 사업장
     iReqseq   : Variant;    // 의뢰순번
     sReqstat  : Variant;    // 진행상태
     sUserid   : Variant;    // 의뢰의
     sUsername : Variant;    // 의뢰의명
     sHospcode : Variant;    // 의뢰병원
     sHospname : Variant;    // 의뢰병원명
     sMeddoc1  : Variant;    // 희망의1
     sMeddate1 : Variant;    // 희망진료일1
     sMedtime1 : Variant;    // 희망진료시간1
     sResno    : Variant;    // 등록번호
     iAge      : Variant;    // 나이
     sAddress  : Variant;    // 주소
     sDiagtext : Variant;    // 상병명
     sMedterm  : Variant;    // 진료기간
     sMedtype  : Variant;    // 환자구분
     sCarecomm : Variant;    // 상태/소견
     sRepdate  : Variant;    // 회신서 작성일자
     iRepseq   : Variant;    // 회신서 순번
     sSenddate : Variant;    // 회신서발송일자
     sRepstat  : Variant;    // 회신방법
     sLicense  : Variant;    // 의사면허번호
     sCyberno  : Variant;    // 가상환자번호
     sDiagcode : Variant;    // 상병코드(본원)
     sIcd10code: Variant;    // ICD-10 코드
     sEditid   : Variant;    // 수정자 ID
     sEditip   : Variant;    // 수정자 IP

     // Refer 의뢰내역 조회
     function ListRefer(sType1,sType2,sType3,sType4,sType5,sType6 : String):Integer;
     // Refer 진료회신서 내용 조회
     function ReplyInform(Locate,g_Repdate:String;g_Repseq:Integer):Integer;
     // Refer 진료회신서 Insert
     function InsertReply(Locate,RepDate,MedDept,MedDr,License,ReqDate,UserId,
                     HospCode,PatName,ResNo1,ResNo2,Sex,DiagText,MedTerm,
                     MedType,CareComm,EdirId,EditIp,Reqstat,PatNo:String;
                     RepSeq,ReqSeq,Age:Integer):Integer;
     function RefertUpdate(sLocate,sReqDate,sPatno,sReqstat,sEditId,sEditIp:String;
                           iReqSeq:Integer):Integer;
     // 진료회신서 리스트 조회
     function ReplyList(sReqDate,sPatNo,sLocate:String;iReqSeq:Integer):Integer;
     // 환자별 refer 현황
     function PatRefer(sPatNo,sLocate:String):Integer;
    end;

    //투석환자리스트
    Hmdhpactt = Class
      sPatNo    : Variant;    // 환자번호
      sPatname  : Variant;    // 환자명
      sWardNo   : Variant;    // 병동
      sHdshift  : Variant;    // 구분
      scomCdNm  : Variant;    // 투석종류
      sHdMedYn  : Variant;    // 초/재진
      sChaDr    : Variant;    // 진료의
      sHbType   : Variant;    // 감염종류
      sBirtDate : Variant;    // 생년월일
      sSex      : Variant;    // 성별
      sDiagname : Variant;    // 진단명

      //투석환자 통합리스트 조회
      function SelectHdList(sType1,sType2,sType3,sType4:String):Integer;
    end;

    //교실일지
    HmdClasst = Class
      sRgtdate  : Variant;   // 등록일자
      sMeddept  : Variant;   // 진료과
      sDutydr   : Variant;   // 당직의사
      sStaffdr  : Variant;   // 담당교수
      sRsdt4dr  : Variant;   // R4
      sRsdt3dr  : Variant;   // R3
      sRsdt2dr  : Variant;   // R2
      sRsdt1dr  : Variant;   // R1
      sRemark   : Variant;   // 비고
      sPatstat  : Variant;   // 상황
      sPatno    : Variant;   // 환자번호
      sWardno   : Variant;   // 병동
      sRoomno   : Variant;   // 호실
      sDiagnm   : Variant;   // 진단명
      sOpname   : Variant;   // 수술명
      sChadr    : Variant;   // 담당교수
      sGendr    : Variant;   // 주치의
      sOpdr     : Variant;   // 집도의
      sOpdr2    : Variant;   // 조수
      sPatname  : Variant;   // 환자명
      sSex      : Variant;   // 성별
      sBirtdate : Variant;   // 생년월일
      sChadrnm  : Variant;   // 담당교수명
      sGendrnm  : Variant;   // 주치의명
      sOpdrnm   : Variant;   // 집도의명
      sOpdr2nm  : Variant;   // 조수명
      iAdmcnt   : Variant;
      iDschcnt  : Variant;
      iTrincnt  : Variant;
      iTroutcnt : Variant;
      iTotcnt   : Variant;
      sEditid   : Variant;
      sEditip   : Variant;

      //교실일지조회
      function ListClassmt(sType1,sType2:String):Integer;
      //교실일지저장
      function InsertList(Cnt:Integer):Integer;
    end;

    //적출물
    HmdExtrct = Class
      sYear    : Variant;
      sSeqNo   : Variant;
      sExtDate : Variant;
      sPatNo   : Variant;
      sExtract : Variant;
      sExtWgt  : Variant;
      sTakeDate: Variant;
      sTaker   : Variant;
      sEditId  : Variant;
      sEditIp  : Variant;
      sPatName : Variant;
      sSex     : Variant;
      sBirtDate: Variant;
      sExtDr   : Variant;
      sTotWgt  : Variant;

      //적출물 대장 조회
      function ListExtrct(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
      function InsExtrct(sType1, sPatNo, sExtract, sExtWgt, sExtDate, sTaker,
                         sTakeDate, sExtDr, sYear, sSeqno, sUserid, sUserIp,
                         sOldYear, sTotWgt:String):Integer;
    end;

    // 분만외 시술대장
    // 분만외 시술대장
    HmdPattxt = class
      v_Rgtdate  : Variant;  // 등록일자
      v_Rgttime  : Variant;  // 예약시간
      v_Patno    : Variant;  // 환자번호
      v_Seqno    : Variant;  // 등록순번
      v_Admcou   : Variant;  // 입원경로
      v_ItemCd1  : Variant;  // 항목코드1
      v_ItemCd2  : Variant;  // 항목코드2
      v_Remark   : Variant;  // 특기사항
      v_Patname  : Variant;  // 환자명
      v_Sex      : Variant;  // 성별
      v_Birtdate : Variant;  // 생년월일
      v_Cnt      : Variant;  // 통계사용시 Count
      v_Wardrm   : Variant;  // 병동병실      
      // 통계
      function SelStat(sType1:String):Integer;
      function ListPattxt(sItemcd1 , // 항목코드1
                          sItemcd2 , // 항목코드1
                          sFromDate, // 조회 시작일자
                          sToDate    // 조회 종료일자
                          :String):Integer;
      function InsPattxt(sType1  , // 1: 입력, 2: 수정 3:삭제*/
                             sRgtdate, // 등록일자  */
                             sRgttime, // 등록시간  */
                             sPatno  , // 환자번호  */
                             sSeqno  , // 등록순번  */
                             sAdmcou , // 내원경유  */
                             sWardrm , // 병동 병실
                             sItemCd1, // 항목코드1 */
                             sItemCd2, // 항목코드2 */
                             sRemark , // 특기사항  */
                             sChgdate, // 수정시 바뀐날짜 */
                             sEditid , // 수정자ID  */
                             sEditip   // 수정자IP  */
                             : String):Integer;
    end;

    // 알람시스템
    HmdAlarmt = Class
      sRgtDr    : Variant;
      sSeqNo    : Variant;
      sPatNo    : Variant;
      sRgtDate  : Variant;
      sAlarmfDt : Variant;
      sAlarmtDt : Variant;
      sAlarmTxt : Variant;
      sAlarmYn  : Variant;
      sPatName  : Variant;
      sSex      : Variant;
      sBirtDate : Variant;
      sTerm     : Variant;
      sTermUnit : Variant;

      function ListAlarmt(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
      function InsAlarmt(sType1,sPatNo,sRgtDr,sRgtDate,sAlarmfDt,sAlarmtDt,
                         sAlarmTxt,sAlarmYn,sEditId,sEditIp,sSeqNo,sTerm,sTermUnit:String):Integer;
    end;

    HmdNrrect = Class
      sType       : Variant;
      sIUCond     : Variant;
      sPatNo      : Variant;
      sActDate    : Variant;
      sActSeqNo   : Variant;
      sActTime    : Variant;
      sActTxt     : Variant;
      sExecId     : Variant;
      sExecNm     : Variant;
      sDeptCd     : Variant;
      sWardNo     : Variant;
      sRoomNo     : Variant;
      sOldDate    : Variant;
      sEditId     : Variant;
      sEditIp     : Variant;
      sAdmDate    : Variant;

// 이선규 추가 12.11
      sBodytemp   : Variant;
      sBldprehi   : Variant;
      sBldprelo   : Variant;
      sPulse      : Variant;
      sRespcnt    : Variant;
      sAdmyn      : Variant;
      sAdmcou     : Variant;
      sAdmmeth    : Variant;
      sCondst     : Variant;
      sCondstrm   : Variant;
      sJuicdnm    : Variant;
      sRmgendr    : Variant;
      sRemark     : Variant;
      sWeight     : Variant;
      sHeight     : Variant;
      sPggbn      : Variant;    //경과기록범주, KimDaeYong 2015-03-09
      sOrdcnt     : Variant;    //실시된 시술처방 갯수, KimDaeYong 2015-04-22
      sPgncnt     : Variant;    //기록된 "수술/시술후기록" 갯수, KimDaeYong 2015-04-22
      sResult     : Variant;    //입원연장사유 체크, KimDaeYong 2016-07-05

     sSignData : Variant;              // SONGLIM_THOMA  수정
     sSerialNo : Variant;
     sSubjectDN : Variant;


      function ListNrrect(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
      function InsNrrect(Cnt:Integer):Integer;   // SONGLIM_THOMA  수정
      // 간호기록지의 입원내역 입력시 간호정보조사지 와 V/S입력하는 부분
      function InsNrrect1(sType1   ,// 'I' 입력 ,'U' :수정
                          sPatno   ,
                          sAdmdate ,
                          sAdmme   , // 입원시경로
                          sAdmmeth , // 입원방법
                          sbldprehi, // 혈압(high)
                          sbldprelo, // 혈압(LOW)
                          sVs      , // 맥박
                          sTemp    , // 체온
                          sBret    , // 호흡
                          sPs      , // 의식상태
                          sAdmreson, // 입원동기
                          sMeddept , // 진료과
                          sChadr   , // 주치의사
                          sGendr   , // 담당의사
                          sWardno  , // 병동
                          sRoomno  , // 병실
                          sInputdt , // 입력일자
                          sInputtm , // 입력시간
                          sNurse   , // 간호사ID
                          sEditip  , // 사용자 IP
                          sIcd     , // 주증상
                          sWeight  , // 체중
                          sHeight    // 신장
                          : String):Integer;

      //(추가. 2003.04.08 이용언) 의사 Progress Note
      function InsNrrect2(Cnt:Integer):Integer;   // SONGLIM_THOMA  수정
      function ListNrrect2(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
      //2015인증평가, "수술/시술후기록" 체크, KimDaeYong 2015-04-22
      function SelectNrrect1(inPatno, inAdmdate:String):Integer;
      //입원연장사유 체크, KimDaeYong 2016-07-04
      function SelectNrrect2(inFlag, inPatno, inAdmdate, inMaindiag:String):Integer;
    end;

    //통증환자 관리
    HmdPcatxt = Class
      sPatno    : Variant;   // 환자번호
      sTxdate   : Variant;   // 등록일자
      sMeddept  : Variant;   // 진료과
      sMeddr    : Variant;   // 진료의
      sDiagcd   : Variant;   // 진단코드
      sDiagname : Variant;   // 진단명
      sPatsect  : Variant;   // 환자구분
      sPattype  : Variant;   // 환자유형
      sPcatype1 : Variant;   // 통증치료종류1
      sPcatype2 : Variant;   // 통증치료종류2
      sPcacode1 : Variant;   // 통증치료내용1
      sPcacode2 : Variant;   // 통증치료내용2
      sAnesdr1  : Variant;   // 치료의사1
      sAnesdr2  : Variant;   // 치료의사2
      sAnesnr1  : Variant;   // 치료간호사1
      sAnesnr2  : Variant;   // 치료간호사2
      sRemark   : Variant;   // 특기사항
      sWardno   : Variant;   // 병동
      sRoomno   : Variant;   // 호실
      sPatname  : Variant;
      sSex      : Variant;
      sBirtdate : Variant;

      //조회
      function ListPcatx(sType1:String):Integer;
      //최근치료내역복사
      function LastPcatx(Type1,Patno,Type2:String):Integer;
      //통증치료등록
      function InsertPcatx(PatNo,TxDate,MedDept,MedDr,DiagCd,DiagNm,PatSect,
                           Pattype,PcaType1,PcaType2,PcaCode1,PcaCode2,AnesDr1,
                           AnesDr2,AnesNr1,AnesNr2,Remark,Wardno,Roomno,
                           EditId,EditIp  : String):Integer;
      //삭제
      function DeletePcatx(Type1,Patno:String):Integer;
      //통증보고서
      function ListDaypca(Txdate:String):Integer;
    end;

    // 판독결과
    HmdEndrdt = Class
      sPatno     : Variant;   // 환자번호z
      //판독저장
      function InsDelEndrd(sType1, sPatNo, sOrdDate, sReadDate, sReadDr, sReadText, sOrdcd, sOrdseqno, sSlipcd, sEditId, sEditIp : String):Integer;
    end;


    HmdTxstat = Class
      sMeddept  : Variant;   // 진료과
      sSeqno    : Variant;   // 순번
      sOrdcd    : Variant;   // 처방코드
      sOrdgrp   : Variant;   // 처방구분
      sOrdname  : Variant;   // 처방명
      sEditid   : Variant;
      sEditip   : Variant;

      function ListTxstat(sMeddept:String):Integer;
      function InsertTxstat(Cnt:Integer):Integer;
    end;

    //Umls 코드 조회
    HmdUmlsmt = Class
      sCode     : Variant;
      sSeq      : Variant;
      sChiefcom : Variant;

      function UmlsSearch(sType1, sType2:String):Integer;
    end;

    HmdMenumt = Class
      sSeqNo    : Variant;   // 순번
      sMenuId   : Variant;   // 메뉴아이디
      sMenuName : Variant;   // 메뉴명
      sRemark   : Variant;   // 메뉴설명
      sRootYn   : Variant;
      sUseYn    : Variant;
            
      function GetMenu(sType1,sType2,sType3,sType4,sType5:String):Integer;
      function InUpMenu(sType1,sSeqNo,sMenuId,sMenuName,sUseYn,sRootYn,
                        sRemark,sEditId,sEditIp:String):Integer;
    end;

    HmdMenudt = Class
      sUserName : Variant;
      sUserId   : Variant;
      sVisible  : Variant;
      sMenuId   : Variant;
      sMenuYn   : Variant;
      sEditId   : Variant;
      sEditIp   : Variant;
      //추가. 2002.11.1 이용언. 감염내과에서 제한항균제 승인권한 부여 권한을 가지도록 추가
      sGubun    : Variant;


      function GetUserMenu(sType1,sType2,sType3,sType4,sType5:String):Integer;
      function PutUserMenu(Cnt:Integer):Integer;
      //추가. 2002.11.1 이용언.
      function Checkgrant(userid :String):Integer;
      function changegrant(sType1,sType2,sType3,sType4 :String):Integer;
    end;

    HapDrmedt = Class
      sMeddr     : Variant;
      sMeddept   : Variant;
      sFromdate  : Variant;
      sSubdept   : Variant;
      sMedable   : Variant;
      sTodate    : Variant;
      sCholicyn  : Variant;
      sChoyn     : Variant;
      sEditid    : Variant;
      sEditip    : Variant;
      sEditdate  : Variant;
      sDrname    : Variant;
      sMeddeptnm : Variant;
      sSubdeptnm : Variant;
      sFlag      : Variant;
      smeddate   : Variant;

      function DRMED_S2 : Integer;
    end;

    HmdIcudpt = Class
      sPatNo      : Variant;
      sPatName    : Variant;
      sSex        : Variant;
      sBirtdate   : Variant;
      sAdmDate    : Variant;
      sRegDate    : Variant;
      sMeddept    : Variant;
      sWardno     : Variant;
      sRoomno     : Variant;
      sChadr      : Variant;
      sChadrnm    : Variant;
      sGendr      : Variant;
      sGendrnm    : Variant;
      sDiedate    : Variant;
      sDiagnm     : Variant;
      sConfdate   : Variant;
      sRemark     : Variant;
      sEditid     : Variant;
      sEditip     : Variant;
      sRecdate       : Variant;
      sTeamcondate   : Variant;
      sTeamarrdate   : Variant;
      sOragndate     : Variant;
      sFirdrugdate   : Variant;
      sCprstartdate  : Variant;
      sCprstopdate   : Variant;
      sCprtime       : Variant;
      sCprresult     : Variant;
      sGennurnm      : Variant;
      sGennur        : Variant;

      function InsIcudpt(sType1,    sPatNo,   sAdmDate, sRegDate, sMeddept, sWardno,
                         sRoomno,   sChadr,   sGendr,   sDiedate, sDiagnm,
                         sConfdate, sRemark,  sEditid,  sEditip : String) : Integer;

      function GetIcudpt(sType1,sFromDate,sToDate,sIcuCd : String) : Integer;
      //HWS
      function InsCprdpt(sType1,    sPatNo,   sAdmDate, sRegDate, sMeddept, sWardno,
                         sRoomno,   sChadr,   sGendr,  sRecdate, sTeamcondate, sTeamarrdate,
                         sOragndate, sFirdrugdate, sCprstartdate, sCprstopdate, sCprtime, sCprresult,
                         sDiagnm, sRemark,  sEditid,  sEditip : String) : Integer;

      //HWS
      function GetCprdpt(sType1,sFromDate,sToDate,sIcuCd : String) : Integer;
    end;

    HmdIcustt = Class
      sStatDate   : Variant;
      sWardNo     : Variant;
      sStayCnt    : Variant;
      sAdmCnt     : Variant;
      sInCnt      : Variant;
      sOutCnt     : Variant;
      sDschCnt    : Variant;
      sDieCnt     : Variant;
      sOpCnt      : Variant;
      sVenCnt     : Variant;
      sOneCnt     : Variant;
      sTwoCnt     : Variant;
      sThreeCnt   : Variant;
      sFourCnt    : Variant;
      sFiveCnt    : Variant;
      sSixCnt     : Variant;
      sEditId     : Variant;
      sEditIp     : Variant;
      sType       : Variant;

// 이선규 추가 20030908
      v_Date       : Variant;  // 일자
      v_Allbaby    : Variant;  // 재원
      v_Born       : Variant;  // 출생
      v_Out        : Variant;  // 퇴원
      v_Adm        : Variant;  // 입원
      v_Die        : Variant;  // 사망
      v_Opt        : Variant;  // 수술환자수
      v_Nicu       : Variant;  // NICU
      v_Incu       : Variant;  // INCUBA
      v_Sickbaby   : Variant;  // SICKBAAY
      v_Normal     : Variant;  // NORMAL
      v_Etc        : Variant;  // ETC
      v_Trin       : Variant;  // 전입수
      v_Trout      : Variant;  // 전출수

      function InsIcustt(sStatDate, sStayCnt,  sAdmCnt,  sInCnt,   sOutCnt,  sDschCnt,
                         sDieCnt,   sOpCnt,    sVenCnt,  sOneCnt,  sTwoCnt,  sThreeCnt,
                         sFourCnt,  sFiveCnt,  sSixCnt,  sEditid,  sEditip,  sWardNo : String) : Integer;
      {function InsIcustt(sStatDate, sStayCnt,  sAdmCnt,  sInCnt,   sOutCnt,  sDschCnt,
                         sDieCnt,   sOpCnt,    sVenCnt,  sOneCnt,  sTwoCnt,  sThreeCnt,
                         sFourCnt,  sFiveCnt,  sSixCnt,  sEditid,  sEditip,  sWardNo,
                         sType : String) : Integer;}
      function InsIcustt2(Cnt:Integer; sEditid,  sEditip : String) : Integer;
      function GetIcustt(sType1,sType2,sType3:String;LastDay:Integer) : Integer;
      function GetNNRData(sDate:String) : Integer;
    end;

    //
    HmdEmptyt = Class
      sCode1  : Variant;
      sCode2  : Variant;
      sCode3  : Variant;
      sCode4  : Variant;
      sCode5  : Variant;
      sCode6  : Variant;
      sCode7  : Variant;
      sCode8  : Variant;
      sCode9  : Variant;
      sCode10 : Variant;
      sCode11 : Variant;
      sCode12 : Variant;
      sCode13 : Variant;
      sCode14 : Variant;
      sCode15 : Variant;

      sCode16 : Variant;
      sCode17 : Variant;

      lCode1 : Variant;
      lCode2 : Variant;
      lCode3 : Variant;
      lCode4 : Variant;
      lCode5 : Variant;

      // 병실등급구하기
      function GetWardGrade(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
      //(추가. 2002.12.04 이용언) 병동별 팀 체크
      function select(WardCd : String):Integer;
   end;
    //


    //임상시험약 등록의사 정보 2003-08-26 최태성
    Hsdlabmst = class

     sMedDr   : Variant;  // 진료의사
     sDeptcd  : Variant;  // 부서코드
     sOrdcd   : Variant;  // 약품코드

     // 임상시험약 등록의사 정보조회
     function ListLabinfo(Condi,userid :String):Integer;

    end;


    //pacs image용 사용자Passwd 조회 2003-09-29 최태성
    Hccusermt = Class
      sUserName : Variant;
      sPasswd   : Variant;

      function UserPasswdQuery(userid :String):Integer;
    end;


    //약품마스터 tablqty 정보조회 2004-01-19 최태성
    Hsddgcdmt = class
     sTablqty   : Variant;  // 함량(MG)
     sDayxyn    : Variant;  // 일수적용여부(y/N)
     sLocls     : Variant;  // 외용전용약품
     sDrugcode  : Variant;  // 약품코드
     sDrugname  : Variant;  // 약품명
     sSimcodeYn : Variant;  // 유사코드 여부
     sSimpronYn : Variant;  // 유사발음 여부
     sSamigrdYn : Variant;  // 동일성분 여부
     sPrnOrdYn  : Variant;  // PRN 처방 여부
     sPrnOrdRmk : Variant;  // PRN 처방 실시 기준 & 금기증
     sDrugType  : Variant;  // 약품종류
     sPrnStpRmk : Variant;  // PRN 실시 기준
     sPrnCnt    : Variant;  // PRN 처방 최대 횟수
     sFhrisk    : Variant;  // 낙상고위험약물여부
     sHrisk     : Variant;  // 고위험약물여부


     // 임상시험약 등록의사 정보조회
     function Listsdinfo(sOrdcd :String):Integer;
     // 특정약품일때 투약일수 1일이상 여부 Check
     function Listsdinfo1(sOrdcd :String):Integer;
     // 퇴원오더일때 원외전용약 오더여부 Check
     function Listsdinfo2(sType1,sOrdcd : String):Integer;
     // 항생제 사용여부 체크
     function ListAntiuse(sOrdcd, sPatno, sAdmdate, sType:String):Integer;
     // 고주의약품여부(유사코드, 유사발음, 동일성분, PRN처방여부) 2011.05.17 김송주 추가
     // 2012.8.23 약품종류 추가(항암제여부 체크하기 위하여)
     function CheckHighAttMed(sOrdcd:String):Integer;
     //항응고제복용 체크, KimDaeYong 2014-01-22
     function CheckAnticoagDg(vsPatno,vsOrddate:String):Integer;
     //항생제여부 체크, KimDaeYong 2015-08-04
     function CheckAntibioDg(sOrdcd:String):Integer;

    end;

   //퇴원환자추후관리 추가 (2004.08.09) : MN003-01
   HmdDschct = class
      sHcDate   : Variant;  //Happy Call 일자
      sWardNo   : Variant;  //병동번호
      iDschCnt  : Variant;  //퇴원환자수
      iThkCnt   : Variant;  //감사통화건수
      iPnsqCnt  : Variant;  //예후질문통화건수
      iWmgmCnt  : Variant;  //상처관리통화건수
      iPmgmCnt  : Variant;  //통증관리통화건수
      iEtcCnt   : Variant;  //기타통화건수
      iNorchCnt : Variant;  //통화안됨건수
      iTothcCnt : Variant;  //전체통화수
      sEditId   : Variant;  //수정자 ID
      sEditIp   : Variant;  //수정자 IP

      // 퇴원환자추후관리 조회
      function SelectDschct(HcDate,WardNo : String) : integer;

      // 퇴원환자추후관리 현황조회
      function SelectDschct1(WardNo,Fromdate,Todate : String) : integer;

      // 퇴원환자추후관리 입력
      function InsertDschct(HcDate,WardNo,EditId,EditIp : String;
                            DschCnt,ThkCnt,PnsqCnt,WmgmCnt,PmgmCnt,EtcCnt,NorchCnt,TothcCnt : Integer) : integer;

      // 퇴원환자추후관리 삭제
      function DeleteDschct(HcDate,WardNo : String) : integer;

   end;

   Hsdbaehat = class
      sDrugCd1   : Variant;  //약품코드1
      sDrugCd2   : Variant;  //약품코드2
      sDrugCd3   : Variant;  //포장단위  # 저함량 약품조회를 위해 추가한 변수 ## 2007.08.20 김송주 추가
      sTypeCd    : Variant;  //제한종류

      // 연령제한약품 조회
      function SelectIncomDrug : integer;
      // 배합금기약품 조회
      function SelectBaehab : integer;
      // 저함량 약품조회 ## 2007.08.14 김송주 추가
      function SelectLowDrug : integer;
      // AISPLIMT
      function SelectAisplimt : integer;      
   end;

   Hccdeptct = class
      sWardtype    : Variant;  //

      //
      function GetWardtype(sMedDept : String) : integer;
   end;

   Hapinsurt = class
      sUnioncd  : Variant;  //사업장기호
      sLicencno : Variant;  //보험기관승인번호
      sInsname  : Variant;  //피보험자성명
      sInsresno : Variant;  //주민번호
      sFromdate : Variant;  //적용개시일자
      sTodate   : Variant;  //적용종료일자

      // 환자보험정보(피보험자,주민번호)
      function GetInsuInfo(sPatno,sPattype : String) : integer;
   end;

   // 낙상위험환자
   HmdDnPart = class
      sChkDate : Variant;
      sChkDay : Variant;
      sChkItem1 : Variant;
      sChkItem2 : Variant;
      sChkItem3 : Variant;
      sChkItem4 : Variant;
      sChkItem5 : Variant;
      sChkItem6 : Variant;
      sChkItem7 : Variant;
      sChkItem8 : Variant;
      sChkItem9 : Variant;
      sChkItem10 : Variant;
      sTotGrad : Variant;
      sEditName : Variant;
      sChkItem11 : Variant;
      sChkItem12 : Variant;
      sChkItem13 : Variant;
      sChkItem14 : Variant;
      sChkItem15 : Variant;
      sChkItem16 : Variant;
      sTotGrad2 : Variant;

      function GetListData(Patno, ChkDate: string): Integer;
      function SetParData(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                          ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
                          ChkItem9, ChkItem10, TotGrad, EditID, EditIP: string): Integer;
      // New 성인용 낙상
      function GetListDataNew(Patno, ChkDate: string): Integer;
      function SetParDataNew(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                             ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
                             TotGrad, EditID, EditIP, ChkItem9, ChkItem10, ChkItem11,
                             ChkItem12, ChkItem13, ChkItem14, TotGrad2 : string): Integer;
      // New 소아용 낙상
      function GetListDataPedNew(Patno, ChkDate: string): Integer;
      function SetParDataPedNew(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                                ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
                                ChkItem9, TotGrad, EditID, EditIP,
                                ChkItem10, ChkItem11, ChkItem12, ChkItem13,
                                ChkItem14, ChkItem15, ChkItem16, TotGrad2 : string): Integer;

   end;

   // (추가 2010.07.13 김송주)욕창위험환자
   HmdDnBedt = class
      sChkDate  : Variant;
      sChkDay   : Variant;
      sChkItem1 : Variant;
      sChkItem2 : Variant;
      sChkItem3 : Variant;
      sChkItem4 : Variant;
      sChkItem5 : Variant;
      sChkItem6 : Variant;
      sTotGrad  : Variant;
      sEditName : Variant;

      function GetListData(Patno, ChkDate: string): Integer;
      function SetBedData(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                          ChkItem4, ChkItem5, ChkItem6,
                          TotGrad, EditID, EditIP: string): Integer;
   end;

   // (추가 2011.08.30 김송주) 통증평가
   HmdDpaint = class
      sChkdate   : Variant;
      sExamtype  : Variant;
      sPainYn    : Variant;
      sPosition  : Variant;
      sLook      : Variant;
      sStrength  : Variant;
      sTool      : Variant;
      sFrequency : Variant;
      sPainTime  : Variant;
      sMediate1  : Variant;
      sMediate2  : Variant;
      sMediate3  : Variant;
      sPainside  : Variant;
      sEducation : Variant;
      sFlacc1 : Variant;
	  sFlacc2 : Variant;
	  sFlacc3 : Variant;
	  sFlacc4 : Variant;
	  sFlacc5 : Variant;
	  sFlaccSum : Variant;
	  sNips1 : Variant;
	  sNips2 : Variant;
	  sNips3 : Variant;
	  sNips4 : Variant;
	  sNips5 : Variant;
	  sNips6 : Variant;
	  sNipsSum : Variant;
	  sFprsSum : Variant;

      function SetDPainData(PatNo, Admdate, Chkdate, Examtype, Pain, Position,
                            Look, Strength, Tool, Frequency, Time, Painside,
                            Mediate1, Mediate2, Mediate3, Education, Editid, Editip,
                            Flacc1, Flacc2, Flacc3, Flacc4, Flacc5, sFlaccSum,
                            sNips1, sNips2, sNips3, sNips4, sNips5, sNips6, sNipsSum, sFprsSum :String):Integer;
      function GetDPainData(PatNo, Admdate:String):Integer;
      function GetDPainChkDate(PatNo, Chkdate:String):Integer;
      function GetDPainDataList(Patno, Admdate:String):Integer;
   end;

   // 간호처치정보
   HmdRectrt = class
      sPatNo : Variant;
      sPatName : Variant;
      sRecDate : Variant;
      sAdmDate : Variant;
      shygcare1 : Variant;
      shygcare2 : Variant;
      shygcare3 : Variant;
      shygcare4 : Variant;
      shygcare5 : Variant;
      smovcare1 : Variant;
      smovcare2 : Variant;
      sdietsup1 : Variant;
      sdietsup2 : Variant;
      sdietsup3 : Variant;
      stubeman : Variant;
      schkplo1 : Variant;
      schkplo2 : Variant;
      sevacare1 : Variant;
      sevacare2 : Variant;
      sevacare3 : Variant;
      srousebr1 : Variant;
      srousebr2 : Variant;
      ssafecare1 : Variant;
      ssafecare2 : Variant;
      ssafecare3 : Variant;
      shurtcare1 : Variant;
      shurtcare2 : Variant;
      shurtcare3 : Variant;

      function SearchDate(s_Patno, s_Recdate, s_Recto: string): Integer;
      function SaveDate(sPatno, sRecDate, sAdmDate, sItem1, sItem2,
                        sItem3, sItem4, sItem5, sItem6, sItem7,
                        sItem8, sItem9, sItem10, sItem11, sItem12,
                        sItem13, sItem14, sItem15, sItem16, sItem17,
                        sItem18, sItem19, sItem20, sItem21, sItem22,
                        sItem23, sItem24, sEditID, sEditIP, WeekDay : string): Integer;
   end;

   // 호스피스 간호기록지
   HmdHprect = class // 클래스 추가
      sType : Variant;
      sPatNo : Variant;
      sActDate : Variant;
      sActSeqno : Variant;
      sAdmDate : Variant;
      sActTime : Variant;
      sActText : Variant;
      sExecID : Variant;
      sExecNM : Variant;
      sWardNo : Variant;
      sRoomNo : Variant;
      sEditID : Variant;
      sEditIP : Variant;

      function ListHPrect(sType1, sType2, sType3, sType4, sType5, sType6: string): Integer;
      function InsHPrect(Cnt: Integer): Integer;
   end;

   HmdObdept  = class
      sPatno       : Variant;
      sAdmdate     : Variant;
      sAge         : Variant;
      sRegdate     : Variant;
      sLmp         : Variant;
      sPmp         : Variant;
      sEdc         : Variant;
      sLaborbgn    : Variant;
      sContract    : Variant;
      sInterval    : Variant;
      sDuration    : Variant;
      sCharact     : Variant;
      sFhr         : Variant;
      sFhrshow     : Variant;
      sFhrbleed    : Variant;
      sMembrane    : Variant;
      sMemdate     : Variant;
      sBldrh       : Variant;
      sBldabo      : Variant;
      sXraydate    : Variant;
      sXrayrslt    : Variant;
      sPrewt       : Variant;
      sPrewtg      : Variant;
      sPrenav      : Variant;
      sPrehyper    : Variant;
      sPrehache    : Variant;
      sPreedema    : Variant;
      sPrebleed    : Variant;
      sOthcomp     : Variant;
      sPastpara    : Variant;
      sPastal      : Variant;
      sPastherb    : Variant;
      sPastiron    : Variant;
      sMenache     : Variant;
      sMarriage    : Variant;
      sMenscycl    : Variant;
      sMensintv    : Variant;
      sMensdula    : Variant;
      sMensamt     : Variant;
      sSurghis     : Variant;
      sFmhis       : Variant;
      sWeight      : Variant;
      sBodytyp     : Variant;
      sHead        : Variant;
      sEars        : Variant;
      sNosnthr     : Variant;
      sMouth       : Variant;
      sTeeth       : Variant;
      sDenture     : Variant;
      sThyroid     : Variant;
      sBreast      : Variant;
      sNipple      : Variant;
      sLung        : Variant;
      sHeart       : Variant;
      sAbdomen     : Variant;
      sBacnspn     : Variant;
      sHof         : Variant;
      sPresent     : Variant;
      sPosition    : Variant;
      sFethfhr     : Variant;
      sFetaloc     : Variant;
      sFetalimp1   : Variant;
      sFetalimp2   : Variant;
      sFetalimp3   : Variant;
      sFetalimp4   : Variant;
      sFetalimp5   : Variant;
      sBydr        : Variant;
      sAssistnr    : Variant;
      sDelvdate    : Variant;
      sPlcdelvt    : Variant;
      sPrepscrb    : Variant;
      sPrepdrap    : Variant;
      sPrepcath    : Variant;
      sPreppos     : Variant;
      sPrepstat    : Variant;
      sPrepdila    : Variant;
      sAnesth      : Variant;
      sAnenur       : Variant;
      sDelvspon    : Variant;
      sDelvtxt     : Variant;
      sPlaspon     : Variant;
      sPlatxt      : Variant;
      sPlacond     : Variant;
      sBldloss     : Variant;
      sEpst        : Variant;
      sLacerat     : Variant;
      sReptpsut    : Variant;
      sMeddelv     : Variant;
      sPdelvbp     : Variant;
      sPdelvp      : Variant;
      sInfantsx    : Variant;
      sInfantwt    : Variant;
      sInfntabn    : Variant;
      sRespir      : Variant;
      sRespiro2    : Variant;
      sImcarecd    : Variant;
      sImcareye    : Variant;
      sImcarbph    : Variant;
      sApgar1      : Variant;
      sApgar2      : Variant;
      sApgar3      : Variant;
      sApgar4      : Variant;
      sApgar5      : Variant;
      sApgar6      : Variant;
      sApgar7      : Variant;
      sApgar8      : Variant;
      sApgar9      : Variant;
      sApgar10     : Variant;
      sApgarm      : Variant;
      sDiscdate    : Variant;
      sDiscuper    : Variant;
      sDisccomp1   : Variant;
      sDsbreast    : Variant;
      sDsnipple    : Variant;
      sNursing     : Variant;
      sUtinvol     : Variant;
      sUtinvlab    : Variant;
      sLochiana    : Variant;
      sLochiaab    : Variant;
      sCondperi    : Variant;
      sCondepis    : Variant;
      sDisccomp2   : Variant;
      sRemark      : Variant;
      sAdfmyn      : Variant;
      sSigndr      : Variant;
      sGestWks     : Variant;
      sPdelfun     : Variant;
      sBydrcd      : Variant;
      sAssistnrcd  : Variant;
      sSigndrcd    : Variant;
      sAnenurnm    : Variant;
      sDelvdate2   : Variant;
      sDelvdate3   : Variant;
      sInfantsx2   : Variant;
      sInfantsx3   : Variant;
      sInfantwt2   : Variant;
      sInfantwt3   : Variant;
      sInfntabn2   : Variant;
      sInfntabn3   : Variant;
      sRespir2     : Variant;
      sRespir3     : Variant;
      sRespiro2b   : Variant;
      sRespiro2c   : Variant;
      sApgarm2     : Variant;

      function ListmdObdept(sType1, sType2: string): Integer;
      function InsertObdept(sPatno, sAdmdate, sAge, sLmp, sEdc, sPmp,
                            sWks, sLabBgn, sCont, sInter, sDurat, sChar,
                            sFHR, sFhrshow, sFhrbleed, sMembrane, sMemdate, sBldRH,
                            sBldAbo, sXrayDt, sXrayRs, sPreWtg, sPreNav, sPreHyper,
                            sPreHache, sPreEdema, sPreBleed, sOthComp, sPastPara,sPastAc,
                            sPastHerb, sPastIron, sMenache, sMenAge, sMensCycl, sMensIntv,
                            sMensDula, sMensAmt, sSurgHis, sFmHis, sWeight, sBodytyp,
                            sHead, sEars, sNosnThr, sMouth, sTeeth, sDenture,
                            sThyroid, sBreast, sNipple, sLung, sHeart, sAbdoMen,
                            sBacnspn, sHOF, sPresent, sPosition, sFethfhr, sFetaLoc,
                            sFetalImp1, sFetalImp2, sFetalImp3, sFetalImp4, sFetalImp5, sBydr,
                            sAssistnr, sDelvdate, sPlcdelvt, sPrepscrb, sPrepdrap, sPrepcath,
                            sPreppos, sPrepstat, sPrepdila, sAnesth, sAnedr, sDelvspon,
                            sDelvtxt, sPlaspon, sPlatxt, sPlacond, sBldloss, sEpst,
                            sLacerat, sReptpsut, sMeddelv, sPdelfun, sPdelvbp, sPdelvp,
                            sInfantsx, sInfantwt, sInfntabn, sRespir, sRespiro2, sImcarecd,
                            sImcareye, sImcarbph, sAPgar1, sAPgar2, sAPgar3, sAPgar4,
                            sAPgar5, sDiscDate, sDiscuper, sDisccomp1, sDsbreast, sDsnipple,
                            sNursing, sUtinvol, sUtinvlab, sLochiana, sLochiaab, sCondperi,
                            sCondepis, sDisccomp2, sRemark, sAdfmyn, sSigndr, sEditid,
                            sEditip, sAPgar6, sAPgar7, sAPgar8, sAPgar9,  sAPgar10,
                            sDelvdate2, sDelvdate3, sInfantSx2, sInfantSx3, sInfantwt2,
                            sInfantwt3, sInfntabn2, sInfntabn3, sRespir2, sRespir3, sRespiro2B,
                            sRespiro2C, sAPgarm, sAPgarm2   : string) : Integer;
                           
   end;

   HmdOblabt  = class
      sPatno     : Variant;
      sAdmdate   : Variant;
      sRegdate   : Variant;
      sAge       : Variant;
      sGarvid    : Variant;
      sPartur    : Variant;
      sDrops     : Variant;
      sGestwrk   : Variant;
      sPresenta  : Variant;
      sStation   : Variant;
      sDilatati  : Variant;
      sEffacemn  : Variant;
      sMembrane  : Variant;
      sInterval  : Variant;
      sDuration  : Variant;
      sCharacter : Variant;
      sRate      : Variant;
      sLocation  : Variant;
      sBldpres   : Variant;
      sPulse     : Variant;
      sEditid    : Variant;
      sEditip    : Variant;

      function ListmdOblabt(sType1, sType2: string): Integer;
      function InsertmdOblabt(sPatno, sAdmdate, sRegdate, sAge, sGarvid,
                              sPartur, sDrops, sGestwrk, sPresenta, sStation,
                              sDilatati, sEffacemn,  sMembrane, sInterval, sDuration,
                              sCharacter, sRate, sLocation, sBldpres, sPulse,
                              sEditid, sEditip: string): Integer;
    function UpdatemdOblabt(sPatno, sAdmdate, sRegdate, sAge, sGarvid,
                              sPartur, sDrops, sGestwrk, sPresenta, sStation,
                              sDilatati, sEffacemn,  sMembrane, sInterval, sDuration,
                              sCharacter, sRate, sLocation, sBldpres, sPulse,
                              sEditid, sEditip: string): Integer;
    function DeletemdOblabt(sPatno, sAdmdate, sRegdate: string) : Integer;

   end;

   // 마이크로 필름 / CD 조회 2005.11.01 KIM SJ Add
   Hsicdchrt = class

      sPatno    : Variant;   //환자번호
      sIoflag   : Variant;   //입/외구분
      sSeqno    : Variant;   //순번
      sKindcd   : Variant;   //매체종류
      sCdno     : Variant;   //CD번호
      sRemark   : Variant;   //비고  2005.03.23
      sEditid   : Variant;   //수정자
      sEditip   : Variant;   //수정자IP

      //si_cdchrt_s1.pc (조회)
      function cdchrtSelect(patno: String): Integer;
   end;

  /////////////////////////////////////////////////////////////
  // 전자인증을 위한 추가부분 SONGLIM_THOMA
  /////////////////////////////////////////////////////////////
  HmdCertUsr = class
     sUserid      :   Variant; {현재인증서}
     sSignCert    :   Variant; {현재인증서}
     sSignPriKey  :   Variant; {현재개인키}
     sChange_Tm   :   Variant; {암호변경일자}
     sCertPW      :   Variant; {개인키암호}
     sResNo       :   Variant; {주민번호}

     //사용자 인증서정보 조회()
     function CertSearch(Userid: String): Integer;
  end;

    HmdCertInj = class
     sUserid      :   Variant; {현재인증서}
     sSerialNo    :   Variant; {현재인증서}
     sSubjectDn  :   Variant; {현재개인키}
     sSignCert   :   Variant; {암호변경일자}

     //사용자 인증서정보 조회()
     function CertSearch(Userid,SerialNo,SubjectDN: String): Integer;
  end;
  ///////////////////////////////////////////////////////////////////

  // 병실 마스터 APCLASS1 가져다 씀  김송주 2006.09.0
  HAPRMCDCT = class
      sWardno       : Variant; // 병동번호
      sRoomno       : Variant; // 병실번호
      sFromdate     : Variant; // 적용개시일자
      sRoomtype     : Variant; // 병실구분
      sRoomgrad     : Variant; // 병실등급
      sSex          : Variant; // 성별
      lBedcnt       : Variant; // 병상수
      lStaycnt      : Variant; // 재원자수
      lDschecnt     : Variant; // 퇴원예정자수
      lAdmecnt      : Variant; // 입원예정자수(병동별)
      lTadmcnt      : Variant; // 총입원예정자수
      sMeddept      : Variant; // 진료과
      sTelno        : Variant; // 전화번호
      sTodate       : Variant; // 적용종료일자
      sRoomnm       : Variant; // 병실명
      sEditid       : Variant; // 수정자ID
      sEditip       : Variant; // 수정단말IP
      sEditdate     : Variant; // 수정일시

      sOldWardno    : Variant; // 구병동번호
      sOldRoomno    : Variant; // 구병실번호
      sOldFromdate  : Variant; // 구적용개시일자

      sFlag         : Variant; // 입력구분/공병상구분
      sWardnonm     : Variant; // 병동명
      sRoomtypenm   : Variant; // 병실구분명
      sRoomgradnm   : Variant; // 병실등급명
      sSexnm        : Variant; // 성별명
      sMeddeptnm    : Variant; // 진료과명
      lEmptycnt     : Variant;
      sBedstat      : Variant;
      sInsPrice     : Variant; // 병실료차액 - LEC
      sO2           : Variant;

      //-----------------------------------------------------------
      function RMCDC_S3 : Integer;
      //-----------------------------------------------------------
      // SERVER   : AP_A112NX
      // SERVICE  : AD_RMCDC_S3
      //-----------------------------------------------------------
      // 병동별 병상수,재원환자수, 입원예정자수, 퇴원예정자수를 구한다
      // 마지막데이터는 총건수가 들어온다.
      // argument : 없음.
      //-----------------------------------------------------------
  end;

  // DUR 점검 사유 저장
  Hmddurtxt = Class
      sPatno       : Variant;
      sOrddate     : Variant;
      sMeddate     : Variant;
      sPatsect     : Variant;
      sDurtext     : Variant;
      sDosno       : Variant;
      sMeddr       : Variant;
      sType        : Variant;

      function InsertDurText(sPatno,sOrddate,sMeddate,sMeddr,sPatsect,sDurtext,sType:String):Integer;
  end;

  Hmddurckt = Class
      sPatno       : Variant;
      sOrddate     : Variant;
      sMeddate     : Variant;
      sPatsect     : Variant;
      sDosno       : Variant;
      sMeddr       : Variant;
      sIgrdcode1   : Variant;
      sIgrdcode2   : Variant;
      sSpcAge      : Variant;
      sSpcAgeUnit  : Variant;
      sSpcAgeMonth : Variant;
      sExamType    : Variant;
      sContradGrade: Variant;

      function CheckDurBaehap(sDrug1,sDrug2:String):Integer;
      function CheckDurIncomDrug(sDrug1:String):Integer;
      function CheckDurImBuDrug(sDrug1:String):Integer;
      function GetPatMonth(sPatNo:String):Integer;
  end;

  // KIMS 처방 사유
  HmdKimsmt = Class
      sKimsOrderNo : Variant;
      sPatno       : Variant;
      sDeptcd      : Variant;
      sOrddate     : Variant;
      sMeddate     : Variant;
      sPatsect     : Variant;
      sAlertType   : Variant;
      sDrugcd1     : Variant;
      sSeqno1      : Variant;
      sDrugcd2     : Variant;
      sSeqno2      : Variant;
      sReasoncd    : Variant;
      sReasontxt   : Variant;

      function InsertKimsmt(sKimsOrderNo, sPatno, sDeptcd, sOrddate, sMeddate, sPatsect, sAlertType,
                            sDrugcd1, sSeqno1, sDrugcd2, sSeqno2, sReasoncd, sReasontxt : String):Integer;
  end;

  HmdScopyt = Class
      sPatno            : Variant;
      sOrddate          : Variant;
      sMhChk1           : Variant;
      sMhChk2           : Variant;
      sMhChk3           : Variant;
      sMhChk4           : Variant;
      sMhChk5           : Variant;
      sDhChk1           : Variant;
      sDhChk2           : Variant;
      sDhChk3           : Variant;
      sDhChk4           : Variant;
      sDhChk5           : Variant;
      sColAddYn         : Variant;
      sColChk1          : Variant;
      sColChk2          : Variant;
      sColChk3          : Variant;
      sColFchk1         : Variant;
      sColFchk2         : Variant;
      sEditid           : Variant;   //수정자
      sEditip           : Variant;   //수정자IP

      function InsertScopyt:Integer;
      function SelectScopyt(sPatno,sOrddate:String):Integer;
  end;




  //급성심근경색증 KimDaeYong 2008-06-16
  HmqManagt = class
      sPatno            : Variant;
      sMeddate          : Variant;
      sDiagcd           : Variant;
      sOddblood         : Variant;
      sPastsick         : Variant;
      sPastsick3        : Variant;
      sPastpci          : Variant;
      sPastcabg         : Variant;
      sEjecfract        : Variant;
      sLvwallmot        : Variant;
      sThornblood       : Variant;
      sLeftmaindis      : Variant;
      sUnexecpci        : Variant;
      sUnexecpci4       : Variant;
      sUnexecpci6       : Variant;
      sHeartsysmp       : Variant;
      sKillipcls        : Variant;
      sHeartview        : Variant;
      sHeartviewoth     : Variant;
      sPcidocutime      : Variant;
      sBlddocutime      : Variant;
      sBlddelay         : Variant;
      sBlddelay3        : Variant;
      sPcidelay         : Variant;
      sPcidelay2        : Variant;
      sPcirmk           : Variant;
      sPunctm           : Variant;
      sBalltm           : Variant;
      sAspunord         : Variant;
      sAspunord7        : Variant;
      sDaspunord        : Variant;
      sDaspunord4       : Variant;
      sBetaunord        : Variant;
      sBetaunord13      : Variant;

      sBldfrsttm        : Variant;  //혈전용해제 첫 투약시간(처방수행시간)

      sSpasmMI          : Variant;

      function updateMqmanagt1(sPatno, sMeddate,
                               sAMI1, sAMI2, sAMI3, sAMI3other, sPciDate, sBldDate,
                               sBlddelay, sBlddelay3, sPunctm, sBalltm, sPcidelay, sPcidelay2,
                               sEditid, sEditip, sPcirmk,
                               sOddblood, sPastsick, sPastsick3, sPastpci, sPastcabg,
                               sEjecfract, sLvwallmot, sThornblood, sLeftmaindis, sSpasmMI : string):integer;
      function UpdateMqmanagt2(sPatno, sMeddate,
                               sDaspunord, sDaspunord4, sBetaunord, sBetaunord13,
                               sEditid, sEditip :String):Integer;
      function SelectMqmanagt1(sPatno,sMeddate : string):integer;
      function SelectMqmanagt2(sPatno,sMeddate : string):integer;
      function SelectMqmanagt3(sPatno,sMedtime : string):integer;
  end;

  //뇌졸중 KimDaeYong 2008-09-11
  HmqStrokt = class
      sPatno            : Variant;
      sMeddate          : Variant;
      sDiagcd           : Variant;
      sOthsickstk       : Variant;
      sPaststk          : Variant;
      sExtstk           : Variant;
      sTabaco           : Variant;
      sGcseo            : Variant;
      sGcsbvr           : Variant;
      sGcsbmr           : Variant;
      sGcstot           : Variant;
      sPlayrightup      : Variant;
      sPlayleftup       : Variant;
      sPlayrightlow     : Variant;
      sPlayleftlow      : Variant;
      sSense            : Variant;
      sCranial          : Variant;
      sReflex           : Variant;
      sDyspexecdt       : Variant;
      sDryswall         : Variant;
      sWetswall         : Variant;
      sDyspvol          : Variant;
      sDysppne          : Variant;
      sDyspsec          : Variant;
      sDysptong         : Variant;
      sDyspsen          : Variant;
      sDyspgag          : Variant;
      sUndysp           : Variant;
      sUndysp4          : Variant;
      sFeedmeth         : Variant;
      sFeedmeth4        : Variant;
      sUnctmri          : Variant;
      sUnctmri5         : Variant;
      sUntpa            : Variant;
      sUntpa8           : Variant;
      sDschtype         : Variant;
      sDschtype7        : Variant;
      sUnbld            : Variant;
      sUnbld4           : Variant;
      sHeart            : Variant;
      sUnclot           : Variant;
      sUnclot4          : Variant;
      sEntid            : Variant;
      sEditid           : Variant;
      sEditip           : Variant;

      sMedtime          : Variant;
      sOrdtime          : Variant;
      sExectime         : Variant;
      sActtime          : Variant;
      sMedname          : Variant;
      sCtkind           : Variant;
      sOrdcd            : Variant;

      sRehdate          : Variant;
      sUnreh            : Variant;
      sUnreh6           : Variant;
      sLDLdate          : Variant;
      sTotdate          : Variant;
      sHDLdate          : Variant;
      sTrigdate         : Variant;

      sDyspDelaytime    : Variant;  // 미실시 사유 입력 시간 추가 2010.08.12
      sRehDelaytime     : Variant;  // 미실시 사유 입력 시간 추가 2010.08.12 QI실 요구

      //뇌졸중 평가 전반적 수정, KimDaeYong 201-01-30
      //뇌졸중 평가 전반적 수정, KimDaeYong 201-01-30
      sDisctime         : Variant;
      sConftime         : Variant;
      sAccidate         : Variant;
      sTabinvtime       : Variant;
      sTabid            : Variant;
      sTabnm            : Variant;
      sTabaco1          : Variant;
      sTabaco2          : Variant;
      sTabaco21         : Variant;
      sTabaco22         : Variant;
      sTabaco3          : Variant;
      sTabnotex         : Variant;
      sTabnotexoth      : Variant;
      sGcstime          : Variant;
      sGcsid            : Variant;
      sGcsnm            : Variant;
      sUntpah           : Variant;
      sUntpahX          : Variant;  //KimDaeYong 2020-09-10
      sBldMedcd         : Variant;
      sBldMednm         : Variant;
      sBldActtm         : Variant;
      sDbldMedcd        : Variant;
      sDbldMednm        : Variant;
      sDclotMedcd       : Variant;
      sDclotMednm       : Variant;
      sDietdate         : Variant;
      sDietname         : Variant;
      sDysptime         : Variant;
      sDyspid           : Variant;
      sDyspnm           : Variant;
      sDyspchk          : Variant;
      sRehtime          : Variant;
      sRehid            : Variant;
      sRehnm            : Variant;
      sRehchk           : Variant;
      sRehcont          : Variant;
      sRehcontoth       : Variant;
      sRehno            : Variant;
      sReqdate          : Variant;
      sRespdate         : Variant;
      sRehexdate        : Variant;
      sDschtime         : Variant;
      sDschid           : Variant;
      sDschnm           : Variant;
      sPathcd           : Variant;
      sStepcd           : Variant;
      sDecdate          : Variant;
      sPtmiermt         : Variant;
      sAdmtime          : Variant;
      sCofmdate         : Variant;
      sResno            : Variant;
      sSex              : Variant;
      sAge              : Variant;
      sMeddept          : Variant;
      sChadr            : Variant;
      sWardno           : Variant;
      sRoomno           : Variant;
      smRSlevel         : Variant;
      sDschmrs          : Variant;
      sGcsnihss         : Variant;
      //뇌졸중교육. KimDaeYong 2018-09-08
      sEduexeYn         : Variant;
      sEduexechkY       : Variant;
      sEduexechkN       : Variant;
      sEduexeNoth       : Variant;
      //NIHSS점수표 추가. KimDaeYong 2021-07-28
      sNih1a            : Variant;
      sNih1b            : Variant;
      sNih1c            : Variant;
      sNih2             : Variant;
      sNih3             : Variant;
      sNih4             : Variant;
      sNih5             : Variant;
      sNih6             : Variant;
      sNih7             : Variant;
      sNih8             : Variant;
      sNih9             : Variant;
      sNih10            : Variant;
      sNih11            : Variant;
      sNih12            : Variant;
      sNih13            : Variant;

      function UpdateMqstrokt1 : integer;
      function SelectMqstrokt1(sPatno,sMeddate:String) : integer;
  end;

  //중환자평가관리, KimDaeYong 2008-07-15
  HmdApacht = class
      sPatno            : Variant;
      sInputtime        : Variant;
      sPh               : Variant;
      sPco2             : Variant;
      sPulse            : Variant;
      sMeanbplo         : Variant;
      sMeanbphi         : Variant;
      sTemp             : Variant;
      sRespiration      : Variant;
      sPao2             : Variant;
      sHematocrit       : Variant;
      sWbc              : Variant;
      sCreatinine       : Variant;
      sUrine            : Variant;
      sBun              : Variant;
      sSodium           : Variant;
      sAlbumin          : Variant;
      sBilirubin        : Variant;
      sGlucose          : Variant;
      sGcs              : Variant;
      sAge              : Variant;
      sScore1           : Variant;
      sScore2           : Variant;
      sScore3           : Variant;
      sScore4           : Variant;
      sScore5           : Variant;
      sScore6           : Variant;
      sScore7           : Variant;
      sScore8           : Variant;
      sScore9           : Variant;
      sScore10          : Variant;
      sScore11          : Variant;
      sScore12          : Variant;
      sScore13          : Variant;
      sScore14          : Variant;
      sScore15          : Variant;
      sScore16          : Variant;
      sScore17          : Variant;
      sAids             : Variant;
      sHepatic          : Variant;
      sLymphoma         : Variant;
      sMetastatic       : Variant;
      sLeukemia         : Variant;
      sImmunos          : Variant;
      sCirrhosis        : Variant;
      sVentyn           : Variant;
      sVentilator       : Variant;
      sArfyn            : Variant;
      sTotScore         : Variant;
      sEditid           : Variant;
      sEditip           : Variant;
      sEditdate         : Variant;

      //입력을 위해 최근값 조회시 필요한 변수
      sExam             : Variant;
      sRslt1            : Variant;
      sRslt2            : Variant;

      sUsername         : Variant;

      function listMdapacht1(inType1,inType2,inType3,inType4:string):integer;
      function selectMdapacht1(inType1:String):Integer;
      function insertMdapacht1:Integer;
      function updateMdapacht1:Integer;
      function deleteMdapacht1:Integer;

  end;

  // DUR 점검 사유 저장
  Hmdduprst = Class
      sPatno       : Variant;
      sOrddate     : Variant;
      sMeddate     : Variant;
      sMeddept     : Variant;
      sMedtime     : Variant;
      sOrddr       : Variant;
      sDuprscd     : Variant;
      sDuprsdt     : Variant;
      sPreorddate  : Variant;

      function InsertDupreason:Integer;
  end;

  // 간질환 약품 처방일자 저장
  HmdLivert = Class
      sPatno       : Variant;
      sOrdcd       : Variant;
      sChangeCd    : Variant;
      sStartdt     : Variant;
      sFrgtdt      : Variant;
      sLiverCount  : Variant;
      sOrddate     : Variant;
      sEditid      : Variant;
      sEditip      : Variant;

      function InsertLiverStart:Integer;
      function SelectLiverStart:Integer;
      function CheckLiverStart(sPatno : String):Integer;
      function CheckLiverDay(sPatno,sOrdcd:String):Integer;
  end;

  HmdSktstt = Class
     sPatno     : Variant;
     sPatname   : Variant;
     sExecDate  : Variant;
     sTestno    : Variant;
     sSeqno     : Variant;

     sField1    : Variant;
     sField2    : Variant;
     sField3    : Variant;
     sField4    : Variant;
     sField5    : Variant;
     sField6    : Variant;
     sField7    : Variant;
     sField8    : Variant;
     sField9    : Variant;
     sField10   : Variant;
     sField11   : Variant;
     sField12   : Variant;
     sField13   : Variant;
     sField14   : Variant;
     sField15   : Variant;
     sField16   : Variant;
     sField17   : Variant;
     sField18   : Variant;
     sField19   : Variant;
     sField20   : Variant;
     sField21   : Variant;
     sField22   : Variant;
     sField23   : Variant;
     sField24   : Variant;
     sField25   : Variant;
     sField26   : Variant;
     sField27   : Variant;
     sField28   : Variant;
     sField29   : Variant;
     sField30   : Variant;
     sField31   : Variant;
     sField32   : Variant;
     sField33   : Variant;
     sField34   : Variant;
     sField35   : Variant;
     sField36   : Variant;
     sField37   : Variant;
     sField38   : Variant;
     sField39   : Variant;
     sField40   : Variant;
     sField41   : Variant;
     sField42   : Variant;
     sField43   : Variant;
     sField44   : Variant;
     sField45   : Variant;
     sField46   : Variant;
     sField47   : Variant;
     sField48   : Variant;
     sField49   : Variant;
     sField50   : Variant;
     sField51   : Variant;
     sField52   : Variant;
     sField53   : Variant;
     sField54   : Variant;

     sEditid    : Variant;
     sEditip    : Variant;

     function InsertMdsktstt1:Integer;
     function UpdateMdskttst1(iPatno, iExecdate, iSeqno:String):Integer;
     function SelectMdskttst1(iPatno, iExecdate, iSeqno:String):Integer;
     function ListMdskttst1(iPatno,iFromdate,iTodate:String):Integer;
  end;

  HmdMethat = Class
     sPatno     : Variant;
     sPatname   : Variant;
     sExecDate  : Variant;
     sSeqno     : Variant;
     sTestno    : Variant;

     sField1    : Variant;
     sField2    : Variant;
     sField3    : Variant;
     sField4    : Variant;
     sField5    : Variant;
     sField6    : Variant;
     sField7    : Variant;
     sField8    : Variant;
     sField9    : Variant;
     sField10   : Variant;
     sField11   : Variant;
     sField12   : Variant;
     sField13   : Variant;
     sField14   : Variant;
     sField15   : Variant;
     sField16   : Variant;
     sField17   : Variant;
     sField18   : Variant;
     sField19   : Variant;
     sField20   : Variant;
     sField21   : Variant;
     sField22   : Variant;
     sField23   : Variant;
     sField24   : Variant;
     sField25   : Variant;
     sField26   : Variant;
     sField27   : Variant;
     sField28   : Variant;
     sField29   : Variant;
     sField30   : Variant;
     sField31   : Variant;
     sField32   : Variant;
     sField33   : Variant;
     sField34   : Variant;
     sField35   : Variant;
     sField36   : Variant;
     sField37   : Variant;
     sField38   : Variant;
     sField39   : Variant;
     sField40   : Variant;
     sField41   : Variant;
     sField42   : Variant;
     sField43   : Variant;
     sField44   : Variant;
     sField45   : Variant;
     sField46   : Variant;
     sField47   : Variant;
     sField48   : Variant;
     sField49   : Variant;
     sField50   : Variant;
     sField51   : Variant;
     sField52   : Variant;
     sField53   : Variant;
     sField54   : Variant;
     sField55   : Variant;
     sField56   : Variant;
     sField57   : Variant;
     sField58   : Variant;
     sField59   : Variant;
     sField60   : Variant;
     sField61   : Variant;
     sField62   : Variant;
     sField63   : Variant;
     sField64   : Variant;
     sField65   : Variant;
     sField66   : Variant;
     sField67   : Variant;
     sField68   : Variant;
     sField69   : Variant;
     sField70   : Variant;
     sField71   : Variant;

     sEditid    : Variant;
     sEditip    : Variant;

     function InsertMdmethat1:Integer;
     function UpdateMdmethat1(iPatno, iExecdate, iSeqno:String):Integer;
     function SelectMdmethat1(iPatno, iExecdate, iSeqno:String):Integer;
     function ListMdmethat1(iPatno,iFromdate,iTodate:String):Integer;
  end;

  HmdAnopqt = class
     sPatno     : Variant;
     sAdmdate   : Variant;
     sOpCode    : Variant;

     sPre1      : Variant;
     sPre2      : Variant;
     sPre3      : Variant;
     sPre4      : Variant;
     sPre5      : Variant;
     sPre6      : Variant;
     sPre7      : Variant;
     sPre8      : Variant;
     sPre9      : Variant;
     sPre11     : Variant;
     sPre12     : Variant;
     sPre13     : Variant;
     sPre14     : Variant;
     sPre15     : Variant;
     sPre16     : Variant;
     sPre17     : Variant;
     sPre18     : Variant;
     sPre19     : Variant;
     sPre20     : Variant;
     sStatus1   : Variant;
     sStatus2   : Variant;
     sStatus3   : Variant;
     sStatus4   : Variant;
     sStatus5   : Variant;
     sStatus6   : Variant;
     sStatus7   : Variant;
     sStatus8   : Variant;
     sPost1     : Variant;
     sPost2     : Variant;
     sPost3     : Variant;
     sPost4     : Variant;
     sPost5     : Variant;
     sPost6     : Variant;
     sPost7     : Variant;
     sPost8     : Variant;
     sPost9     : Variant;
     sEtc1      : Variant;
     //2020.03이후버젼 추가. KimDaeYong 2020-02-18
     sPre21     : Variant;
     sPre22     : Variant;
     sPre23     : Variant;
     sPre231    : Variant;
     sPre24     : Variant;
     sPre25     : Variant;
     sStatus21  : Variant;
     sStatus211 : Variant;
     sStatus22  : Variant;
     sStatus221 : Variant;
     sPost21    : Variant;
     sPost22    : Variant;
     sPost221   : Variant;
     sPost23    : Variant;
     sPost231   : Variant;
     sDiagname  : Variant;
     sCoopdate  : Variant;
     sFstdate   : Variant;
     sRecdate   : Variant;

     sEditid    : Variant;
     sEditip    : Variant;

     function InsertMdAnopqt:Integer;
     function InsertMdAnPatt:Integer;
     function SelectMdAnpatt(inPatno,inAdmdate:string):Integer; //제외사유조회.KimDaeYong 2020-02-21
     function DeleteMdAnPatt:Integer; //수술예방적항생제 제외사유 삭제 및 재등록. KimDaeYong 2020-03-10
  end;

  HmdOcrprt = class
     sNewYn     : Variant;
     sPrintYn   : Variant;

     function SelectChartNewYn(sPatno,sMeddept:String) : Integer;
     function SelectChartPrintYn(sPatno,sMeddept,sMeddr,sMeddate,sMedtime:String) : Integer;
  end;

  HmdAdmnot = class
     sPatno         : Variant;
     sMeddept       : Variant;
     sAdmdate       : Variant;
     sChadr         : Variant;
     sGendr         : Variant;
     sCc            : Variant;
     sPi            : Variant;
     sPh            : Variant;
     sFh            : Variant;
     sSh            : Variant;
     sRos           : Variant;
     sPe            : Variant;
     sImpression    : Variant;
     sCareplan1     : Variant;
     sCareplan2     : Variant;
     sCareplan3     : Variant;
     sCareplan4     : Variant;
     sCareplan5     : Variant;
     sDischargedate : Variant;
     sDischargeplan : Variant;
     sRecdate       : Variant;
     sFstipdt       : Variant;
     sFstipdr       : Variant;
     sBirtdate      : Variant;
     sWardno        : Variant;
     sRoomno        : Variant;
     sChadrnm       : Variant;
     sGendrnm       : Variant;
     sEditid        : Variant;
     sEditnm        : Variant;
     sEditip        : Variant;
     osMeddept      : Variant;
     //
	   sChkdate1      : Variant;
	   sPosition      : Variant;
	   sLook          : Variant;
	   sStrength      : Variant;
	   sTool          : Variant;
	   sFrequency     : Variant;
	   sPaintime      : Variant;
	   sChkdate2      : Variant;
	   sTotgrad1      : Variant;
	   sChkdate3      : Variant;
	   sTotgrad2      : Variant;
     sDnclass       : Variant;
     //2015인증평가, KimDaeYong 2015-01-19
     sActtime       : Variant;
     sPblm1         : Variant;
     sPblm2         : Variant;
     sPblm3         : Variant;
     sPblm4         : Variant;
     sPblm5         : Variant;
     sCaregoal1     : Variant;
     sCaregoal2     : Variant;
     sCaregoal3     : Variant;
     sCaregoal4     : Variant;
     sCaregoal5     : Variant;
     sGoaldate1     : Variant;
     sGoaldate2     : Variant;
     sGoaldate3     : Variant;
     sGoaldate4     : Variant;
     sGoaldate5     : Variant;
     sOutPlace      : Variant;
     sDischargeplan1: Variant;
     sDischargeplan2: Variant;
     sDischargeplan3: Variant;
     sPatname       : Variant;
     sChkhour       : Variant;
     sAdmrecyn      : Variant;
     sFprssum       : Variant;
     sFlaccsum      : Variant;
     sNipssum       : Variant;
     sPainyn        : Variant;
     sSavestat      : Variant;  //저장상태, KimDaeYong 2016-05-04

     sSignData      : Variant;              // SONGLIM_THOMA  수정
     sSerialNo      : Variant;
     sSubjectDN     : Variant;

     function InsertAdmNote(sSignData,sSerialNo,sSubjectDN:string):Integer;
     function SelectAdmNote(sPatno,sMeddept,sAdmdate:String):Integer;
     function ListAdmNote(sPatno:String):Integer;
     function SelectInit(sPatno,sAdmdate:String):Integer;
     //입원기록24시간시한성체크, KimDaeYong 2015-09-21
     function SelectAdmNote3(inPatno,inAdmdate:String):Integer;
  end;

  HmdAdmset = class
     sMeddept       : Variant;
     sSeqno         : Variant;
     sCc            : Variant;
     sPi            : Variant;
     sPh            : Variant;
     sFh            : Variant;
     sSh            : Variant;
     sRos           : Variant;
     sPe            : Variant;
     sImpression    : Variant;
     sCareplan1     : Variant;
     sCareplan2     : Variant;
     sCareplan3     : Variant;
     sCareplan4     : Variant;
     sCareplan5     : Variant;
     sDischargeplan : Variant;
     sEditid        : Variant;
     sEditip        : Variant;
     //2015인증평가, KimDaeYong 2015-01-19
     sPblm1         : Variant;
     sPblm2         : Variant;
     sPblm3         : Variant;
     sPblm4         : Variant;
     sPblm5         : Variant;
     sCaregoal1     : Variant;
     sCaregoal2     : Variant;
     sCaregoal3     : Variant;
     sCaregoal4     : Variant;
     sCaregoal5     : Variant;
     sOutPlace      : Variant;
     sDischargeplan1: Variant;
     sDischargeplan2: Variant;
     sDischargeplan3: Variant;
     osMeddept      : Variant;

     function InsertAdmSet:Integer;
     function SelectAdmSet(sMeddept,sSeqno,sPatno,sAdmdate:String):Integer;
  end;

 HsrAcpordt = class
     sMetfdt        : Variant;
     sMetfnm        : Variant;
     sCreatdt       : Variant;
     sCreat         : Variant;
     sFstdate       : Variant;
     sOrddate       : Variant;
     sOrdcode       : Variant;
     sPretrt        : Variant;
     sOrdname       : Variant;

     function SelectAcpordt(inPatno,inOrddate,inFlag:String):Integer;
  end;

  Hsqnstrqt = class
     //공통
     sPatno      		: Variant;
     sPatname    		: Variant;
     sMeddate       : Variant;
     sEditid     		: Variant;
     sEditip     		: Variant;

     //영양집중지원의뢰
     sRqseq         : Variant;
     sMeddept    		: Variant;
     sWardno     		: Variant;
     sRoomno     		: Variant;
     sChadr      		: Variant;
     sChadrname    	: Variant;
     sGendr      		: Variant;
     sGendrname     : Variant;
     sSex        		: Variant;
     sAge        		: Variant;
     sDiagcd        : Variant;
     sDiagname      : Variant;
     sSeldate       : Variant;
     sSelid         : Variant;
     sSelidname     : Variant;
     sReqdate       : Variant;
     sReqid         : Variant;
     sReqidname     : Variant;
     sReqcomm    		: Variant;
     sAppetite      : Variant;
     sAppetitename  : Variant;
     sWetchg        : Variant;
     sWetchgname    : Variant;
     sStress        : Variant;
     sStatus     		: Variant;
     sStatusname    : Variant;
     //KimDaeYong add, 2011-04-20
     sFrtdate       : Variant;
     sFrtid         : Variant;
     sFrtidname     : Variant;
     //KimDaeYong 2015-10-19
     sInitdate      : Variant;
     sInitresult    : Variant;

     //영양집중지원영양평가
     sApseq         : Variant;
     sHeight     		: Variant;
     sWeight     		: Variant;
     sIbw        		: Variant;
     sIbw2       		: Variant;
     sAlbumin       : Variant;
     sTlc           : Variant;
     sChol          : Variant;
     sHb            : Variant;
     sDietcd        : Variant;
     sDietname      : Variant;
     sNstrqcause    : Variant;
     sReqcause      : Variant;
     
     function SelectResult(sPatno,sAdmdate:String):Integer;
     function Insert2(inFlag : string) : integer;
     function Insert3(inFlag : string) : integer; // 컨설트에서 사용.
     function Select2(inPatno, inMeddate, inRqseq : String) : integer;  //영양집중의뢰내역 2015.5.29 김송주     
     
  end;

  Hsikeywdt = class
     sCode          : Variant;
     sEname         : Variant;
     sHname         : Variant;

     function ListCode(sInCode, sInEname, sInHname:String):Integer;
  end;

  HmdInscnt = class   // 2011.10.07 보험고시에 따른 급여구분 제어 김송주
     sAge           : Variant;
     sAgeUnit       : Variant;
     sDiagCd        : Variant;
     sDiagSubYn     : Variant;
     sAppType       : Variant;
     sAppRslt       : Variant;

     function SelectInsCode(sInCond, sInCode:String):Integer;
  end;

  HsqHistrt = class
     sOrdname       : Variant;
     sCfmdate       : Variant;
     sCfmnm         : Variant;

     function SelectSqHistrtList(sPatno, sAdmdate:String):Integer;
  end;

  Hmdhosptt = class
     sHospcd        : Variant;
     sHospTypecd    : Variant;
     sHospType      : Variant;
     sHospName      : Variant;
     sHospAddr      : Variant;

     function ListHospital(sType1:String):Integer;
  end;

  Hmdbcafst = class
     sPatno         : Variant;
     sFamilyhis     : Variant;
     sFamilyhisdt   : Variant;
     sPresize       : Variant;
     sPretnm        : Variant;
     sPretnmstage   : Variant;
     sPstsize       : Variant;
     sPsttnm        : Variant;
     sPsttnmstage   : Variant;
     sOpdate        : Variant;
     sOpnm          : Variant;
     sReopyn        : Variant;
     sReopnm        : Variant;
     sReopdt        : Variant;
     sOplimptype    : Variant;
     sOplimpcause   : Variant;
     sRestoreyn     : Variant;
     sRestorenm     : Variant;
     sRestoredt     : Variant;
     sErrslt        : Variant;
     sErrsltetc     : Variant;
     sPrrslt        : Variant;
     sPrrsltetc     : Variant;
     sFishrslt      : Variant;
     sFishrsltetc   : Variant;
     sSishrslt      : Variant;
     sSishrsltetc   : Variant;
     sHer2rslt      : Variant;
     sHer2rsltetc   : Variant;
     sCareplan1     : Variant;
     sCareplan2     : Variant;
     sCareplan3     : Variant;
     sCareplan4     : Variant;
     sFstcaredt     : Variant;
     sFstcareetc    : Variant;
     sAgreedoc1     : Variant;
     sAgreedoc1dt   : Variant;
     sAgreedoc2     : Variant;
     sAgreedoc2dt   : Variant;
     sAgreedoc3     : Variant;
     sAgreedoc3dt   : Variant;
     sAgreedoc4     : Variant;
     sAgreedoc4dt   : Variant;
     sRecendyn      : Variant;

     sEditid    : Variant;
     sEditip    : Variant;

     function SetCancerInitRec:Integer;
  end;

  Hmdcpendt = class
     sPatno     : Variant;
     sAdmdate   : Variant;
     sStartdt   : Variant;
     sEnddt     : Variant;
     sCpregdr   : Variant;
     sCpenddr   : Variant;
     sPatcause01 : Variant;
     sPatcause02 : Variant;
     sPatcause03 : Variant;
     sPatcause04 : Variant;
     sPatcause05 : Variant;
     sPatcause06 : Variant;
     sPatcause07 : Variant;
     sPatcause08 : Variant;
     sPatcause09 : Variant;
     sPatcause10 : Variant;
     sDrcause01  : Variant;
     sDrcause02  : Variant;
     sDrcause03  : Variant;
     sDrcause04  : Variant;
     sDrcause05  : Variant;
     sEtccause   : Variant;
     //only-CP. KimDaeYong 2018-08-29
     sCpcause01  : Variant;
     sCpcause02  : Variant;
     sCpcause03  : Variant;
     sCpcause04  : Variant;
     sCpcause05  : Variant;
     sCpcause06  : Variant;
     sEditid     : Variant;
     sEditip     : Variant;

     function InsertCPEndCause:Integer;
     function SelectCPEndCause(sPatno,sAdmdate:String):Integer;
  end;

  Hmdimprvt = class
     sPatno      : Variant;
     sAdmdate    : Variant;
     sOpdate     : Variant;
     sDrg11      : Variant;
     sDrg211     : Variant;
     sDrg212     : Variant;
     sDrg213     : Variant;
     sDrg214     : Variant;
     sDrg22      : Variant;
     sDrg23      : Variant;
     sDrg24      : Variant;
     sDrg31      : Variant;
     sDrg321     : Variant;
     sDrg322     : Variant;
     sDrg323     : Variant;
     sDrg324     : Variant;
     sDrg325     : Variant;

     sEditid     : Variant;
     sEditip     : Variant;
     
     function InsertImprove:Integer;
     function SelectImprove(sPatno,sAdmdate:String):Integer;
  end;

  //허혈성심질환평가, KimDaeYong 2013-08-26
  Hmdihdmst = class
    //MDIHDMST
	sPatno          : Variant	;
    sMeddate        : Variant	;
    sDschdate       : Variant	;
    //1TAB  	                  	
    sEntid1       	: Variant	;
    sEntnm1			: Variant	;
    sEntdate1       : Variant	;
    sHeight			: Variant	;
    sWeight			: Variant	;
    sPath           : Variant  	;
    sDschtype		: Variant	;	
    sDiedate		: Variant	;
    sCreat			: Variant	;
    sCreatrsdt		: Variant	;
    sLdl			: Variant	;
    sLdlrsdt		: Variant	;
    sVessel         : Variant  	;
    sLmd            : Variant  	;
    sPthist         : Variant  	;
    sCabgorxp       : Variant  	;
    sAspdrugnm1		: Variant	;
    sStatdrugnm1	: Variant	;
    //2TAB  	    
    sEntid2         : Variant  	;
    sEntnm2			: Variant	;
    sEntdate2      	: Variant  	;
    sMedtime		: Variant	;
    sPathcd			: Variant	;
    sOccurtime      : Variant  	;
    sBldpress		: Variant	;
    sPulse			: Variant	;    
    sPatstat     	: Variant  	;
    sSymp      		: Variant  	;
    sKillip         : Variant  	;
    sEcg48h         : Variant  	;
    sEcg48hoth      : Variant  	;
    sEjectfrac2     : Variant  	;
    sLvwall         : Variant  	;
    sTabacoflag		: Variant	;
    sTabaco			: Variant	;
    sEdutabaco		: Variant	;
    sHighbld		: Variant	;
    sExecpci        : Variant  	;
    sUnexecpci      : Variant  	;
    sUnexecpci4oth  : Variant  	;
    sUnexecpci6oth  : Variant  	;
    sBloodnm		: Variant	;
    sBloodtm		: Variant	;			
    sLateblood      : Variant  	;
    sLateblood2oth  : Variant  	;
    sLateblood3oth  : Variant  	;
    sLateblood4oth  : Variant  	;
    sPcikind        : Variant  	;
    sPunctime       : Variant  	;
    sBalloontime    : Variant  	;
    sLatepci        : Variant  	;
    sLatepci2oth    : Variant  	;
    sLatepci3oth    : Variant  	;
    sLatepci4oth    : Variant  	;    
    sAspdrugnm2		: Variant	;
    sBetadrugnm2	: Variant	;
    sStatdrugnm2	: Variant	;    
    //3TAB          
    sEntid3         : Variant  	;
    sEntnm3			: Variant	;
    sEntdate3       : Variant  	;
    sPciapp         : Variant  	;
    sEjectfrac3     : Variant  	;
    sEjectfrac3chk  : Variant  	;
    sPciiabp        : Variant  	;
    sLastdiag       : Variant  	;
    sShock          : Variant  	;
    sCardiac        : Variant  	;
    sAspdrugnm3		: Variant	;
    sBlddrugnm3		: Variant	;
    sStatdrugnm3	: Variant	;
    //MDIHDDTT      
    sSeq			: Variant	;
    sPcidate		: Variant	;
    sPcitype		: Variant	;
    sLtmain			: Variant	;
    sLad			: Variant	;
    sLcx			: Variant	;
    sRca			: Variant	;
    sGraft			: Variant	;
    sStent			: Variant	;
    sEditid			: Variant	;
    sEditip			: Variant	;
    //추가
    sMeddept        : Variant	;
    sDiagcd         : Variant	;
    sMaindiag       : Variant	;
    sPciordcd       : Variant	;
    sPciordtime     : Variant	;

    function Insert1(inFlag, inPciflag : string):Integer;
    function Select1(inPatno, inMeddate, inPatsect : string):Integer;
    function List1(inPatno, inMeddate, inPatsect : string):Integer;
  end;


  //환자별급여초음파이력조회, KimDaeYong 2013-11-13
  //소스제공 : 최근우Tc
  HAICHOCALT   =  class
      sPatno         : Variant   ;
      sFromdate      : Variant   ;
      sTodate        : Variant   ;
      sIogubun       : Variant   ;
      sMeddept       : Variant   ;
      sOrddate       : Variant   ;
      sExedate       : Variant   ;
      sSugacode      : Variant   ;
      sKorname       : Variant   ;
      sCnt           : Variant   ;
      sQty           : Variant   ;
      sUseday        : Variant   ;
      sInstype       : Variant   ;
      sOrddr         : Variant   ;
      sReqdate       : Variant   ;

      //AI_CHOCALT_S1
      function CHOCALT_S1 : Integer;
    end;

  //임상질지표 2013.12.12 KYA
  HMDNVENTT = class
     sPatno         : Variant;
     sAdmdate       : Variant;
     sFspildate     : Variant;
     sSeqno         : Variant;
     sChkdate       : Variant;
     sRspildate     : Variant;
     sWardno        : Variant;
      sSpilday       : Variant;
      sTracheyn      : Variant;
      sStanday       : Variant;
      sStaneve       : Variant;
      sStannit       : Variant;
      sCfabday       : Variant;
      sCfabeve       : Variant;
      sCfabnit       : Variant;
      sIndepday      : Variant;
      sIndepeve      : Variant;
      sIndepnit      : Variant;
      sDropdate      : Variant;
      sVentyn        : Variant;
      sHetyn         : Variant;
      sEvdyn         : Variant;
      sCityn         : Variant;
      sEtc           : Variant;
      sIpcyn         : Variant;
      sCohyn         : Variant;
      sLvryn         : Variant;
      sLccyn         : Variant;
      sIpcetc        : Variant;
      sDrugcode      : Variant;
      sDrugname      : Variant;
      sScale         : Variant;
      sEditid        : Variant;
      sEditip        : Variant;
      sRemark        : Variant;

      sIsWardno      : Variant;
      sRoomno        : Variant;
      sPatname       : Variant;


     function NVENTT_I1 : Integer;
     function NVENTT_S1(sIsWardno : string) : Integer;
     function NVENTT_S2(sInPatno,sInChkdate,sSeqno : string)  :Integer;
     function NVENTT_S3(sInPatno,sInAdmDate : string)  :Integer;
     function NVENTT_S4(sInPatno, sInAdmDate, sInChkdate, sInFspildate:string)  :Integer;
     function NVENTT_S5(sInPatno,sInChkdate : string)  :Integer;
     function NVENTT_S7(sInPatno,sInFromdate,sInTodate : string)  :Integer;

  end;

  //간암평가, QI(이지숙)요청
  //KimDaeYong 2014-06-27
  HmdHptmat = class

     sPatno       : Variant;
     sAdmdate     : Variant;
     sPastopyn    : Variant;
     sTaceyn      : Variant;
     sRfayn       : Variant;
     sAnticanyn   : Variant;
     sXryn        : Variant;
     sBildate     : Variant;
     sBilrslt     : Variant;
     sCreatdate   : Variant;
     sCreatrslt   : Variant;
     sInrdate     : Variant;
     sInrrslt     : Variant;
     sAlbdate     : Variant;
     sAlbrslt     : Variant;
     sPladate     : Variant;
     sPlarslt     : Variant;
     sAcsrslt     : Variant;
     sGrade       : Variant;
     sLastdate    : Variant;
     sLastid      : Variant;
     sLastnm      : Variant;
     sEditid      : Variant;
     sEditip      : Variant;

     function Select1(inPatno, inMeddate:string) : Integer;
     function Insert1(inFlag:string) : Integer;
  end;

{=======SDCLASS4 이용==============================================
   //의약품부작용모니터링
   //KimDaeYong add 2014-07-08
   HMDADREXT = class
      //MDADREXT(의약품부작용사례)
      sPatno        : Variant;   // 환자번호 
      sPatname      : Variant;   // 환자명
      sSex          : Variant;   // 성별 
      sAge          : Variant;   // 나이 
      sGendate      : Variant;   // 발생인지일 
      sPatsect      : Variant;   // 환자구분 
      sRepflag      : Variant;   // 보고구분(1:최초보고,n:추적보고) 
      sMeddate      : Variant;   // 진료일자 
      sMeddept      : Variant;   // 진료과   
      sDeptnm       : Variant;   // 진료과명 
      sMaindiag     : Variant;   // 주진단   
      sMaindiagnm   : Variant;   // 주진단명 
      sSubdiag      : Variant;   // 부진단   
      sSubdiagnm    : Variant;   // 부진단명 
      sPatstat      : Variant;   // 환자상태 
      sPatstatoth   : Variant;   // 환자상태기타 
      sRevdate      : Variant;   // 증상발현일 
      sEnddate      : Variant;   // 증상종료일 
      sProgyn       : Variant;   // 현재진행여부 
      sWholebody    : Variant;   // 전신반응 
      sSkin         : Variant;   // 피부 
      sFace         : Variant;   // 눈코귀입목 
      sVessel       : Variant;   // 심혈관 
      sGastro       : Variant;   // 위장관 
      sLiver        : Variant;   // 간및담도 
      sBreath       : Variant;   // 호흡기 
      sBlood        : Variant;   // 혈액 
      sKidney       : Variant;   // 신장 
      sPsycho       : Variant;   // 신경정신 
      sReprod       : Variant;   // 내분비-비뇨생식 
      sBorn         : Variant;   // 근골격 
      sOther        : Variant;   // 기타 
      sExam         : Variant;   // 유해사례조치 
      sExamoth      : Variant;   // 유해사례조치(투약변경상세) 
      sExamrslt1    : Variant;   // 유해사례진행결과(자연회복일수) 
      sExamrslt2    : Variant;   // 유해사례진행결과(처치후회복통원일수) 
      sExamrslt3    : Variant;   // 유해사례진행결과(처치후회복입원일수) 
      sExamrslt4    : Variant;   // 유해사례진행결과(미회복) 
      sExamrslt5    : Variant;   // 유해사례진행결과(미회복사망일자) 
      sExamrslt6    : Variant;   // 유해사례진행결과(판정불능) 
      sReexamyn     : Variant;   // 재투여유해사례발현여부 
      sExamothopi   : Variant;   // 유해사례기타의견 
      sRepdate      : Variant;   // 보고일시 
      sRepid        : Variant;   // 보고자 
      sRepname      : Variant;   // 보고자명 
      sRepflag2     : Variant;   // 보고자구분(의사,간호사,약사,기타) 
      sReptel       : Variant;   // 보고자전화번호 
      sRepemail     : Variant;   // 보고자email 
      sPhopi        : Variant;   // 약국소견 
      sPhopidate    : Variant;   // 약국소견입력일시 
      sPhopiid      : Variant;   // 약국소견입력자 
      sProcstat     : Variant;   // 진행상태       

      //MDADRDRT(의약품부작용투여약품)
      sDrugcode     : Variant;   // 약품코드 
      sDrugname     : Variant;   // 약품명 
      sParmname     : Variant;   // 제조회사 
      sFirstcap     : Variant;   // 1회용량 
      sFirstdate    : Variant;   // 최초투여일자 
      sEnddate2     : Variant;   // 최종투여일자 
      sPurpose      : Variant;   // 투여목적 
      sPastyn       : Variant;   // 과거사용여부 
      sAdryn        : Variant;   // 부작용약품여부 
      sOrddate      : Variant;   // 처방일자 
      sOrdseqno     : Variant;   // 처방번호 

      //MDADRAPT(의약품부작용평가)
      sContent      : Variant;   // 부작용내용 
      sDoubt        : Variant;   // 의심되는약물 
      sJoin         : Variant;   // 병용투여약물 
      sReact        : Variant;   // 알려진반응 
      sCause        : Variant;   // 원인 
      sStatis       : Variant;   // 통계 
      sReactex      : Variant;   // 반응정도 
      sOccur        : Variant;   // 발생기전 
      sOccurfr      : Variant;   // 발생빈도 
      sPharm        : Variant;   // 약리학적 
      sRepyn        : Variant;   // 보고할만한가? 
      sAppraisal1   : Variant;   // 복용약품검토및부작용평가1 
      sApdate1      : Variant;   // 복용약품검토및부작용평가일1 
      sApid1        : Variant;   // 복용약품검토및부작용평가자1 
      sApname1      : Variant;   // 복용약품검토및부작용평가자명1 
      sAppraisal2   : Variant;   // 복용약품검토및부작용평가2 
      sApdate2      : Variant;   // 복용약품검토및부작용평가일2 
      sApid2        : Variant;   // 복용약품검토및부작용평가자2 
      sApname2      : Variant;   // 복용약품검토및부작용평가자명2 
      sOpposite     : Variant;   // 원내대응방안및F/U 
      sRslt         : Variant;   // 경과              
      sRslt3txt     : Variant;   // 경과3내용         
      sRslt6txt     : Variant;   // 경과6내용         
      sEditnm       : Variant;   // 약국평가보고자    

      //functions
      function List1(inFromdate,inTodate,inPatno:string):integer;     //부작용 환자리스트조회
      function Select1(inPatno, inRepdate:string):integer;            //부작용 환자별정보조회
      function Select2(inPatno, inRepdate:string):integer;            //부작용 환자별 평가보고조회
      function List2(inPatno, inRepdate, inFromdrug, inTodrug:string):integer;              //부작용의약품 투여약품정보
      function Update1(inPatno, inRepdate, inPhopi, inRepid, inUserid, inUserip, inFlag : string):integer; //부작용의약품 약국소견 입력
      function Insert1(inPatno, inGendate, inContent, inDoubt, inJoin, inReact, inCause, inStatis, inReactex,
                           inOccur, inOccurfr, inPharm, inRepyn, inAppraisal1, inApdate1, inApid1, inAppraisal2,
                           inApdate2, inApid2, inOpposite, inRslt, inRslt3txt, inRslt6txt,
                           inUserid, inUserip : string): Integer; //부작용의약품 평가보고서 입력/수정
      function Insert2(inPatno, inRepdate, inRepid, inGendate, inMeddept, inMeddate, inPatsect, inRepflag, inMaindiag, inMaindiagnm,
                       inSubdiag, inSubdiagnm, inPatstat, inPatstatoth, inRevdate, inEnddate, inProgyn, inWholebody, inSkin, inFace,
                       inVessel, inGastro, inLiver, inBreath, inBlood, inKidney, inPsycho, inReprod, inBorn, inOther,
                       inExam, inExamoth, inExamrslt1, inExamrslt2, inExamrslt3, inExamrslt4, inExamrslt5, inExamrslt6, inReexamyn, inExamothopi,
                       inRepflag2, inReptel, inRepemail, inEditid, inEditip : string;
                       inDrugcode, inDrugname, inParmname, inFirstcap, inFirstdate, inEnddate2, inPurpose, inPastyn, inOrddate, inOrdseqno : Variant;
                       iDrugCnt : integer): Integer; //부작용의약품 사례보고서 입력/수정
      function Delete1(inFlag, inPatno, inRepdate : string):integer; //부작용의약품 사례/평가보고서 삭제
   end;
================================================================================}


   //CURB 제외사유(제외 되지 않을 경우 CURB 작성 여부까지 포함시킴, 평가대상 상병 환자인경우는 무조건 작성되어야함)
   Hmdcurbet = class
      sPatno        : Variant;
      sAdmdate      : Variant;
      sFillYn       : Variant;   { 제외사유 작성여부 및 CURB 작성여부 포함}
      sExceptKind   : Variant;
      sDetailOptn   : Variant;
      sEditid       : Variant;
      sEditip       : Variant;

      function CheckFillYn(inPatno,inPatsect:string):integer;     //
      function Select1(inPatno, inAdmdate:String):integer;
      function Insert1:Integer;
   end;

   //CURB 사항
   Hmdcurbit = class
      sPatno        : Variant;
      sAdmdate      : Variant;
      sConfYn       : Variant;
      sConfPoint    : Variant;  
      sBu           : Variant;
      sBuPoint      : Variant;
      sRr           : Variant;
      sRrPoint      : Variant;
      sBpHi         : Variant;
      sBpLo         : Variant;
      sBpPoint      : Variant;
      sAge          : Variant;
      sAgePoint     : Variant;
      sVaccinYn     : Variant;
      sRegid        : Variant;
      sRegname      : Variant;  
      sRegdate      : Variant;
      sInitTot      : Variant;
      sSmokeType    : Variant; // 흡연력
      sEduExec      : Variant; // 금연교육 실시여부
      sEduNone      : Variant; // 금연교육 미실시 사유
      sEditid       : Variant;
      sEditip       : Variant;

      function Select1(inPatno, inAdmdate:String):Integer;
      function Select2(inPatno, inAdmdate:String):Integer;
      function Insert1:Integer;
   end;

   //2015인증평가
   //재평가(30일단위), KimDaeYong 2015-02-16
   Hmdreadmt = class
      sPatno        : Variant;
      sAdmdate      : Variant;
      sSeq          : Variant;
      sMeddept      : Variant;
      sChadr        : Variant;
      sChaname      : Variant;
      sGendr        : Variant;
      sGenname      : Variant;
      sSubject      : Variant;
      sObject       : Variant;
      sRos          : Variant;
      sPex          : Variant;
      sDiag         : Variant;
      sCareplan     : Variant;
      sPblm         : Variant;
      sCaregoal     : Variant;
      sGoaldate     : Variant;
      sDisdate      : Variant;
      sDisplan      : Variant;
      sRecid        : Variant;
      sRecname      : Variant;
      sRecdate      : Variant;
      sCofmdate     : Variant;
      sActtime      : Variant;
      sSigndata     : Variant;
      sSerialno     : Variant;
      sSubjectdn    : Variant;
      sEditid       : Variant;
      sEditip       : Variant;

      //30일단위 재평가기록 체크, KimDaeYong 2015-03-11
      sAdmdays      : Variant;
      sFromdate     : Variant;
      sCnt          : Variant;

      function List1(inPatno, inAdmdate:String):Integer;
      function Select1(inPatno, inAdmdate, inSeq:String):Integer;
      function Insert1(sFlag, sSignData, sSerialNo, sSubjectDN:string):Integer;
      function Select2(inPatno, inAdmdate, inMeddept:String):Integer;
      function Delete1(inPatno, inAdmdate, inSeq:String):Integer;
   end;

   //2015인증평가
   //재평가예문(30일단위), KimDaeYong 2015-02-16
   Hmdresett = class
      sMeddept      : Variant;
      sSubject      : Variant;
      sObject       : Variant;
      sRos          : Variant;
      sPex          : Variant;
      sDiag         : Variant;
      sCareplan     : Variant;
      sPblm         : Variant;
      sCaregoal     : Variant;
      sDisplan      : Variant;
      sEditid       : Variant;
      sEditip       : Variant;

      function Select1(sMeddept:String):Integer;
      function Insert1:Integer;
   end;

   //2015인증평가
   //응급간호기록지 20150205. KYA.
  HmdNerect = Class
      sType       : Variant;
      sIUCond     : Variant;
      sPatNo      : Variant;
      sActDate    : Variant;
      sActSeqNo   : Variant;
      sActTime    : Variant;
      sActTxt     : Variant;
      sExecId     : Variant;
      sExecNm     : Variant;
      sDeptCd     : Variant;
      sWardNo     : Variant;
      sRoomNo     : Variant;
      sOldDate    : Variant;
      sEditId     : Variant;
      sEditIp     : Variant;
      sAdmDate    : Variant;


      sBodytemp   : Variant;
      sBldprehi   : Variant;
      sBldprelo   : Variant;
      sPulse      : Variant;
      sRespcnt    : Variant;
      sAdmyn      : Variant;
      sAdmcou     : Variant;
      sAdmmeth    : Variant;
      sCondst     : Variant;
      sCondstrm   : Variant;
      sJuicdnm    : Variant;
      sRmgendr    : Variant;
      sRemark     : Variant;
      sWeight     : Variant;
      sHeight     : Variant;

     sSignData : Variant;
     sSerialNo : Variant;
     sSubjectDN : Variant;

     function ListNerect(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
     function InsNerect(Cnt:Integer):Integer;
 end;

  //식이처방조회, KimDaeYong 2015-05-07
  HsqDietdt = Class
      sDietcode    : Variant;
      sDietname    : Variant;
      sApplypat    : Variant;
      sDietcount   : Variant;
      sNutrition   : Variant;
      sCompos1     : Variant;
      sCompos2     : Variant;
      sCompos3     : Variant;
      sCompos4     : Variant;
      sCompos5     : Variant;
      sCompos6     : Variant;
      sCompos7     : Variant;
      sGoodsinfo   : Variant;
      sEtcinfo     : Variant;
      sEditId      : Variant;
      sEditIp      : Variant;

     function Select1(inDietcode:String):Integer;
 end;

 // 신규 NST  HsqNstapt ListEvalPatno
  HsqNstapt = class
      //공통
      sFlag       : Variant;

      sPatno      : Variant;
      sPatname    : Variant;
      sAdmdate    : Variant;
      sRqseq      : Variant;
      sApseq      : Variant;
      sStatus     : Variant;
      sAge        : Variant;
      sSex        : Variant;

      sCmcomm     : Variant;
      sCmdate     : Variant;
      sCmid       : Variant;
      sCmname     : Variant;
      sCqcomm     : Variant;
      sCqdate     : Variant;
      sCqid       : Variant;
      sCqname     : Variant;
      sCdcomm     : Variant;
      sCddate     : Variant;
      sCdid       : Variant;
      sCdname     : Variant;
      sCncomm     : Variant;
      sCndate     : Variant;
      sCnid       : Variant;
      sCnname     : Variant;

      sFmcomm     : Variant;
      sFmdate     : Variant;
      sFmid       : Variant;
      sFmname     : Variant;
      sFqcomm     : Variant;
      sFqdate     : Variant;
      sFqid       : Variant;
      sFqname     : Variant;
      sFdcomm     : Variant;
      sFddate     : Variant;
      sFdid       : Variant;
      sFdname     : Variant;
      sFncomm     : Variant;
      sFndate     : Variant;
      sFnid       : Variant;
      sFnname     : Variant;

      sAptcomm    : Variant;
      sAptdate    : Variant;
      sAptid      : Variant;
      sAptname    : Variant;

      sApenddate  : Variant;
      sApendid    : Variant;
      sApendname  : Variant;

      sReqdate    : Variant;
      sReqid      : Variant;
      sReqname    : Variant;
      sReqcomm    : Variant;

      sUnsetYn    : Variant;
      sUnsetType  : Variant;

      sEditid     : Variant;
      sEditip     : Variant;

      function UpdateEval:Integer;
      //function ListEval(inFlag:String):Integer;
      function ListEvalPatno(inPatno:String):Integer;
      function SelectEval(inPatno,inAdmdate,inRqseq,inApseq:String):Integer;
      function SelectStatus(inPatno,inAdmdate:String):Integer;
 end;

   HsqNstsgt = class
        sPatno      : Variant;
        sAdmdate    : Variant;
        sRqseq      : Variant;
        sApseq      : Variant;

        sHeight     : Variant;
        sNweight    : Variant;
        sIbw        : Variant;
        sIbwp       : Variant;
        sBmi        : Variant;
        sWdweek     : Variant;
        sWdp        : Variant;
        sWdstep     : Variant;
        sWnstep     : Variant;
        sAlbumin    : Variant;
        sAbstep     : Variant;
        sTakestep   : Variant;
        sMealptype  : Variant;
        sMealpstep  : Variant;
        sBustep     : Variant;
        sBokstep    : Variant;
        sPistep     : Variant;
        sGumstep    : Variant;
        sNutstate   : Variant;
        sCriweight  : Variant;
        sBee        : Variant;
        sAfactor    : Variant;
        sIfactor    : Variant;
        sQweight    : Variant;
        sQfact1     : Variant;
        sQfact2     : Variant;
        sPweight    : Variant;
        sPfact1     : Variant;
        sPfact2     : Variant;
        sWneed      : Variant;
        sEnqcal     : Variant;
        sEnpg       : Variant;
        sPnqcal     : Variant;
        sPnpg       : Variant;

        sPattypenm  : Variant;
        sTypecdnm   : Variant;

        sEditid     : Variant;
        sEditip     : Variant;

        function InsertNurtInf:Integer;
        function SelectNurtInf(inPatno,inAdmdate,inRqseq,inApseq:String):Integer;
   end;

   //2015인증평가, KimDaeYong 2015-07-08
   //권한관리
   HmdAuthht = class
        sPatno      : Variant;
        sReqdate    : Variant;
        sMeddate    : Variant;
        sMeddept    : Variant;
        sChadr      : Variant;
        sGendr      : Variant;
        sWardno     : Variant;
        sRoomno     : Variant;
        sPatsect    : Variant;
        sReqid      : Variant;
        sReqdept    : Variant;
        sBgndate    : Variant;
        sEnddate    : Variant;
        sAcsaim     : Variant;
        sAcsaimoth  : Variant;
        sSignyn     : Variant;
        sSignid     : Variant;
        sSigndept   : Variant;
        sSigndate   : Variant;
        sSelform    : Variant; 
        sEditid     : Variant;
        sEditip     : Variant;

        function List1(inPatno,inEmpno,inJikjong:String):Integer;
        function Insert1:Integer;
   end;


   //2015인증평가, 금기약어, KimDaeYong 2015-10-02
   HmdTaboht = class
      sPatno    : Variant;
      sUsedate  : Variant;
      sMeddept  : Variant;
      sChadr    : Variant;
      sGendr    : Variant;
      sWardno   : Variant;
      sRoomno   : Variant;
      sPatsect  : Variant;
      sEmpno    : Variant;
      sDeptcd   : Variant;
      sTaboo    : Variant;
      sSelform  : Variant;
      sFromdate : Variant;
      sTodate   : Variant;
      sRemarks  : Variant;
      sEditid   : Variant;
      sEditip   : Variant;

      function List1 : integer;
      function Insert1 : integer;
   end;

   //응급실 검체 상황등록, 20151116. kya.
   HmdNspcdt = class
      sSpccode   : Variant;
      sReleaid   : Variant;
      sReleaip   : Variant;
      sPatno     : Variant;
      sOrddate   : Variant;
      sOrdseqno  : Variant;
      sPatname   : Variant;
      sSpcid1    : Variant;
      sOrdcd     : Variant;
      sOrddesc1  : Variant;
      sColldate  : Variant;
      sReleadate : Variant;
      sAcptdate  : Variant;
      sExecdate  : Variant;
      sReaddate  : Variant;

      function SPCDT_I1(sType,sSpccode,sReleaid,sReleaip : string) : integer;
      function SPCDT_S1(IsSpcid1: string):Integer;
      function SPCDT_S2(IsPatno,IsOrddate: string):Integer;
   end;

   //재진예약시 의사 리마크, KimDaeYong 2015-12-01
   //외래(조혜숙) 요청
   HapSchdrt = class
      sRemark    : Variant;

      function Select1(inMeddept, inMeddr, inMeddate : string) : integer;
   end;


   //중증도분류 KTAS, 20151215. kya.
   HmdNktast = class
      sKtascd1   : Variant;
      sKtascd2   : Variant;
      sKtasnm2   : Variant;
      sKtascd3   : Variant;
      sKtasnm3   : Variant;
      sKtascd4   : Variant;
      sKtasnm4   : Variant;
      sKtascd    : Variant;
      sLvlcd     : Variant;
      sAge       : Variant;
      sCategory  : Variant;
      sKtascmt  : Variant;
      sLinktxt  : Variant;
      sLinkurl  : Variant;

      function NKTAS_L1(sInCodecd, sInGubun, sInKtascd1,sInKtascd3,sInKtascd4,sInCategory : String) : Integer;
      function NKTAS_I1(sPatno,sMeddate,sMedtime,sPatname,sUserid,sInfect,
                        sJikjong,sFktas15y,sFktascdb,sFktascda,sBktas15y,sBktascdb,sBktascda,sEditId,sEditIp  : string):Integer;
   end;

   //의사진료일정(응급센터), KimDaeYong 2016-02-16
   HmdSchemt = class
      sMeddept  : Variant;
      sMeddr    : Variant;
      sMedmonth : Variant;
      sMeddate  : Variant;
      sSchgbn   : Variant;
      sBgndate  : Variant;
      sFnsdate  : Variant;
      sEditid   : Variant;
      sEditip   : Variant;

      //의사의 월별 근무스케줄 조회
      function List1(inMeddept,inMeddr,inMedmonth:string):integer;
      function Insert1(iCnt:integer):integer;
      function Delete1(inMeddept,inMeddr,inMedmonth:string):Integer;
   end;


   //응급센터진료기록, KimDaeYong 2016-02-24
   HmdEmnott = class
     sPatno         : Variant;
     sPatname       : Variant;
     sMeddate       : Variant;
     sMedtime       : Variant;
     sMeddept       : Variant;
     sMeddeptnm     : Variant;
     sMeddr         : Variant;
     sMednm         : Variant;
     sCc            : Variant;
     sPi            : Variant;
     sPh            : Variant;
     sFh            : Variant;
     sSh            : Variant;
     sRos           : Variant;
     sPe            : Variant;
     sImpression    : Variant;
     sCareplan      : Variant;
     sAllnote       : Variant;
     sRecdate       : Variant;
     sRecid         : Variant;
     sRecnm         : Variant;
     sSavestat      : Variant;
     sSignData      : Variant;
     sSerialNo      : Variant;
     sSubjectDN     : Variant;
     sEditid        : Variant;
     sEditip        : Variant;

     sMainyn        : Variant;
     sRecyn         : Variant;
     sConndate      : Variant;
     sLinkdate      : Variant;
     sArvdate       : Variant;
     sOutdate       : Variant;
     sBirtdate      : Variant;
     sChadr         : Variant;
     sChadrnm       : Variant;


     function List1(inPatno,inMeddate,inMedtime:String):Integer;
     function List2(inPatno,inMeddept:String):Integer;
     function Select1(inRecyn, inPatno, inMeddate, inMedtime, inMeddept, inMeddr:String):Integer;
     function Insert1(sSavestat,sSignData,sSerialNo,sSubjectDN:String):Integer;
     function Insert2:Integer;
     function List3(inFromdate, inTodate, inMeddept, inChadr, inSavestat:String):Integer;
  end;


  //응급호출, KimDaeYong 2016-07-18
  HmdEmcalt = class
     sPatno         : Variant;
     sPatname       : Variant;
     sMeddate       : Variant;
     sMedtime       : Variant;
     sSeqno         : Variant;
     sSendid        : Variant;
     sSendnm        : Variant;
     sSendtel       : Variant;
     sSenddept      : Variant;
     sSenddate      : Variant;
     sRcvid         : Variant;
     sRcvnm         : Variant;
     sRcvtel        : Variant;
     sRcvdept       : Variant;
     sSubject       : Variant;
     sMessage       : Variant;
     sArrid         : Variant;
     sArrnm         : Variant;
     sArrdept       : Variant;
     sArrdate       : Variant;
     sStatus        : Variant;
     sEditid        : Variant;
     sEditip        : Variant;
     sEditdate      : Variant;

     function List1(inFlag, inPatno,inMeddate,inMedtime,inFrMeddate,inToMeddate,inRcvdept,inRcvid:String):Integer;
     function List2(inRcvid:String):Integer;
     function Insert1:Integer;
     function Update1(iCnt:integer):Integer;
     function List3:Integer;
  end;

  //초음파처방사유, KimDaeYong 2016-09-27
  HmdSonomt = class
     sOrdcd     : Variant;
     sGubun     : Variant;
     sSonoEdicd : Variant;
     sSonoEdinm : Variant;

     function List1(inOrdcd:String):Integer;
  end;

  //정신건강의학과 입원유형, KimDaeYong 2016-10-25
  HmdNpipct = class
     sPatno     : Variant;
     sAdmdate   : Variant;
     sFromdate  : Variant;
     sTodate    : Variant;
     sNpipcd    : Variant;
     sNpipnm    : Variant;
     sNpipetc   : Variant;
     sEditid    : Variant;
     sEditip    : Variant;

     function List1(inPatno, inAdmdate:String):Integer;
     function Update1(inPatno, inAdmdate, inFromdate, inNpipcd, inNpipetc, inEditid, inEditip:String):Integer;
     function Delete1(inPatno, inAdmdate, inFromdate, inEditid, inEditip:String):Integer;
  end;


  //외래환자이송사유, KimDaeYong 2016-11-04
  HmdOtrnst = class
     sPatno      : Variant;
     sMeddate    : Variant;
     sMeddept    : Variant;
     sMeddr      : Variant;
     sMedtime    : Variant;
     sTransrsn   : Variant;
     sTransetc   : Variant;
     sTranshosnm : Variant;
     sTranshosgbn: Variant;
     sRmkyn      : Variant;
     sRmketc     : Variant;
     sOpinyn     : Variant;
     sEditid     : Variant;
     sEditip     : Variant;

     function Insert1:Integer;
  end;

  //임산부관리,20161223.kya.
  HmdNpregt = class
     sPatno     : Variant;
     sFromdate  : Variant;
     sTodate    : Variant;
     sMeddept   : Variant;
     sPregyn    : Variant;
     sCycle     : Variant;
     sInputId   : Variant;
     sInputIp   : Variant;
     sEditid    : Variant;
     sEditip    : Variant;

     function NPREG_I1(sType,sPatno,sFromdate,sTodate,sMeddept,sPregyn,sCycle,sInputId,sInputIp,sEditId,sEditIp  : string):Integer;
     function NPREG_S1(tType,tPatno,tFromdate:String):Integer;
  end;

  //중환자평가관리(SAPS3), KimDaeYong 2017-03-08
  HmdSapstt = class
     sPatno     : Variant;
     sPatname   : Variant;
     sAdmdate   : Variant;
     sAdmtime   : Variant;
     sSaps01    : Variant;
     sSaps02    : Variant;
     sSaps03    : Variant;
     sSaps04    : Variant;
     sSaps05    : Variant;
     sSaps06    : Variant;
     sSaps07    : Variant;
     sSaps08    : Variant;
     sSaps09    : Variant;
     sSaps10    : Variant;
     sSaps11    : Variant;
     sSaps12    : Variant;
     sSaps13    : Variant;
     sSaps14    : Variant;
     sSaps15    : Variant;
     sSaps16    : Variant;
     sSaps17    : Variant;
     sSaps18    : Variant;
     sSaps19    : Variant;
     sSaps20    : Variant;
     sSaps21    : Variant;
     sSaps22    : Variant;
     sSaps23    : Variant;
     sSaps24    : Variant;
     sExecdate15: Variant;
     sExecdate17: Variant;
     sExecdate19: Variant;
     sExecdate20: Variant;
     sExecdate21: Variant;
     sExecdate23: Variant;
     sSaps23ventyn: Variant;
     sTotscore  : Variant;
     sProdeath  : Variant;
     sFstrecid  : Variant;
     sFstrecnm  : Variant;
     sFstrecdate: Variant;
     sRecid     : Variant;
     sRecnm     : Variant;
     sRecdate   : Variant;
     sEditid    : Variant;
     sEditip    : Variant;

     sExam      : Variant;
     sRslt1     : Variant;
     sRslt2     : Variant;
     sExecdate  : Variant;

     function List1(inFlag, inType1, inFromdate, inTodate : string):Integer;
     function Select1(inPatno, inAdmtime : string):Integer;
     function Insert1(inFlag : string):Integer;
  end;

  //중환자평가관리(SAPS3) SEPSIS팝업, KimDaeYong 2017-04-10
  HmdSepsit = class
     sPatno         : Variant;
     sPatname       : Variant;
     sAdmdate       : Variant;
     sSeqno         : Variant;
     sMeddept       : Variant;
     sWardno        : Variant;
     sRgtdate       : Variant;
     sDiagcd        : Variant;
     sDiagname      : Variant;
     sMaindiag      : Variant;
     sBundle01yn    : Variant;
     sBundle01rsn   : Variant;
     sBundle02yn    : Variant;
     sBundle02rsn   : Variant;
     sBundle03yn    : Variant;
     sBundle03rsn   : Variant;
     sBundle04yn    : Variant;
     sBundle04rsn   : Variant;
     sBundle05yn    : Variant;
     sBundle05rsn   : Variant;
     sBundle06yn    : Variant;
     sBundle06rsn   : Variant;
     sRecid         : Variant;
     sRecname       : Variant;
     sRecdate       : Variant;
     sEditid        : Variant;
     sEditip        : Variant;

     //추가
     sComcd3        : Variant;

     function Insert1(inFlag:string):Integer;
     function List1(inPatno, inAdmdate:string):Integer;
     function Select1(inPatno, inAdmdate, inDiagcd:string):Integer;
  end;

  //위암평가. KimDaeYong 2017-12-07
  //위암평가 관련 4개 테이블을 하나로 클래스 구성한다.
  HmdStcamt = class
     //공통
     sPatno           : Variant; 
     sPatname         : Variant;
     sBegdate         : Variant;
     sEnddate         : Variant;
     sMeddate         : Variant;
     sEditid          : Variant;
     sEditip          : Variant;
     sRecid           : Variant;
     sRecname         : Variant;
     sRecdate         : Variant;

     //메인
     sFststyn         : Variant; 
     sFivestyn        : Variant; 
     sAnthendoyn      : Variant;
     sMovestyn        : Variant;
     sOptext          : Variant;
     sOpbef7th        : Variant;
     sOpaft7th        : Variant;
     sEndotext        : Variant;
     sEndostyn        : Variant;
     sEndobldyn       : Variant;
     sAddstyn         : Variant;
     sOpbefmthd       : Variant;
     sOpaftxray       : Variant;
     sOpaftchem       : Variant;
     sOpaftchemnot    : Variant;
     sOpaftchemoth    : Variant;
     sOpaft8chemyn    : Variant;
     sOpaft8chemtext  : Variant;
     sClintestyn      : Variant;
     sClintesttext    : Variant;
     sChemcntyn       : Variant;
     sChemexnot       : Variant;
     sChemexnototh    : Variant;
     sSixtyabdomyn    : Variant;
     sSixtyabdomtext  : Variant;
     sPathrecyn       : Variant;
     sPathrectext     : Variant;
     sEndoaft7th      : Variant;
                      
     //항암화학요법
     sChemobj         : Variant;
     sRegim           : Variant;
     sRegimoth        : Variant;
     sSeqno           : Variant;
     sEcog            : Variant;
     sHeight          : Variant;
     sWeight          : Variant;
     sBsa             : Variant;
     sTnm             : Variant;
     sTnmname         : Variant;
     sChemtext        : Variant;
     sHgb             : Variant;
     sWbc             : Variant;
     sPlt             : Variant;
     sBun             : Variant;
     sSgot            : Variant;
     sHct             : Variant;
     sAnc             : Variant;
     sReact           : Variant;
     //검사결과조회
     sExamcode        : Variant;
     sRslt1           : Variant;
     sOrddate         : Variant;
     sExecdate        : Variant;
     sRsltdate        : Variant;

     //부작용평가
     sHb              : Variant;
     sAnc2            : Variant;
     sPlt2            : Variant;
     sFebril          : Variant;
     sFever           : Variant;
     sAst             : Variant;
     sBilir           : Variant;
     sFatig           : Variant;
     sAnor            : Variant;
     sNaus            : Variant;
     sVamit           : Variant;
     sDiarr           : Variant;
     sMucos           : Variant;
     sRash            : Variant;
     sPerip           : Variant;
     sOthtext         : Variant;
     sNone            : Variant;
     sApdate          : Variant;
     sApid            : Variant;
     sApname          : Variant;

     //종양반응평가
     sRecist        : Variant;
     sApdate2         : Variant;
     sApid2           : Variant;

     function Insert1 : integer;
     function Select1(inPatno:string) : integer;
     function Insert2 : integer;
     function List1(inPatno:string) : integer;
     function Insert3 : integer;
     function Select2(inPatno, inBegdate:string) : integer;
     function Insert4 : integer;
     function Select3(inPatno, inBegdate:string) : integer;
     function List2(inPatno, inDate:string) : integer;
     function Delete1(inPatno, inBegdate:string) : integer;
  end;

  //의사 근무스케줄 체크. KimDaeYong 2018-06-12
  //전공의는 "교육수련"의 ORAG1 소유의 GMRMWORKMT, GMRMCODEDT 테이블에서 스케줄 조회
  //전문의는 추후 ORAM1 소유의 별도 테이블에 생성할 예정임
  HmdDrwrkt = class
     sWktype          : Variant;    //근무타입
     sWkplace         : Variant;    //근무타입
     sWkfromdt        : Variant;    //근무시작일시
     sWktodt          : Variant;    //근무종료일시
     sWkoddhh         : Variant;    //근무남은시간
     sWkoddmi         : Variant;    //근무남은분

     function Select1(inUserid, inDeptcd : string) : integer;
  end;

  //신생아중환자평가관리(CRIB2), KimDaeYong 2018-06-19
  HmdNicutt = class
     sPatno         : Variant;
     sPatname       : Variant;
     sAdmdate       : Variant;
     sAdmtime       : Variant;
     sSex           : Variant;
     sGestvalue     : Variant;
     sBirthvalue    : Variant;
     sGsbrtpoint    : Variant;
     sTempvalue     : Variant;
     sTemppoint     : Variant;
     sBasevalue     : Variant;
     sBasepoint     : Variant;
     sTotscore      : Variant;
     sPredrate      : Variant;
     sFstrecid      : Variant;
     sFstrecnm      : Variant;
     sFstrecdate    : Variant;
     sRecid         : Variant;
     sRecnm         : Variant;
     sRecdate       : Variant;
     sEditid        : Variant;
     sEditip        : Variant;

     function Insert1(inFlag:string):Integer;
     function List1(inFlag, inType1, inFromdate, inTodate:string):Integer;
     function Select1(inPatno, inAdmdate:string):Integer;
  end;

  //CP제외사유, KimDaeYong 2018-08-30
  HmdCpexct = class
     sPatno         : Variant;
     sPatname       : Variant;
     sAdmdate       : Variant;
     sPre1          : Variant;
     sPre2          : Variant;
     sPre3          : Variant;
     sPre4          : Variant;
     sPre5          : Variant;
     sStatus1       : Variant;
     sStatus2       : Variant;
     sPost1         : Variant;
     sPost2         : Variant;
     sPost3         : Variant;
     sEtc           : Variant;
     sEntid         : Variant;
     sEntname       : Variant;
     sEditid        : Variant;
     sEditip        : Variant;

     function Insert1:Integer;
     function Select1(inPatno, inAdmdate:string):Integer;
  end;

  //활력증상복사.20180809.kya.
  HmdVitald = class
     sBodytemp   : Variant;

     function VITAL_S2(sPatNo, sType1:String):Integer;
  end;

  //요양급여의뢰서(V352등), KimDaeYong 2018-10-23
  HmdReqdct = class
     sPatno         : Variant;
     sPatname       : Variant;
     sGubun         : Variant;
     sMeddept       : Variant;
     sSeqno         : Variant;
     sFromdate      : Variant;
     sTodate        : Variant;
     sDiagcd        : Variant;
     sDiagname      : Variant;
     sEntid         : Variant;
     sEntname       : Variant;
     sMeddate       : Variant;
     sRemark        : Variant;
     sDeldate       : Variant;
     sEditid        : Variant;
     sEditip        : Variant;
     sDocday        : Variant;  //요양급여의뢰서 남은/지난 일수

     function List1(inPatno, inGubun, inMeddept : String):Integer;
     function Insert1(inFlag, inPatno, inGubun, inMeddept, inFromdate, inTodate, inDiagcd,
                      inEntid, inMeddate, inRemark, inSeqno, inEditid, inEditip : string):Integer;
     function List2(inPatno, inGubun, inFromdate1, inFromdate2 : String):Integer;
     function Delete1(inPatno, inGubun, inMeddept, inSeqno, inFromdate, inEditid, inEditip : string):Integer;
  end;

  //의료기기 환자정보등록.20180706.kya.
   HmdNudimt = class
     sUdicode      : Variant;
     sPatno        : Variant;
     sSeqno        : Variant;
     sLotno        : Variant;
     sSerialno     : Variant;
     sActdate      : Variant;
     sMakedate     : Variant;
     sOrdqty       : Variant;
     sRemark       : Variant;
     sPatname      : Variant;
     sBirtdate     : Variant;
     sSex          : Variant;
     sAddr         : Variant;
     sUsedate      : Variant;
     sUsesite      : Variant;
     sEditid       : Variant;
     sEditip       : Variant;

    function NUDIM_I1(sUdicode,sPatno,sUsedate,sUsesite,sEditid,sEditip : string):Integer;
    function NUDIM_S1(IsUdicode: string):Integer;
    function NUDIM_S2(IsPatno, IsUsedate: string):Integer;
    function NUDIM_D1(sUdicode,sPatno,sSeqno : string):Integer;
   end;


   /////////////////////////////////////////////////////////
   // 신속대응체계관리.20190903. kya.
   ////////////////////////////////////////////////////////

   HmdNrrtlt = class
     sPatNo     :  Variant;
     sPatName   :  Variant;
     sSex       :  Variant;
     sBirtDate  :  Variant;
     sDeptNm    :  Variant;
     sChaName   :  Variant;
     sRoomNo    :  Variant;
     sWardNo    :  Variant;
     sExectime  :  Variant;
     sBodytemp  :  Variant;
     sPulse     :  Variant;
     sRespcnt   :  Variant;
     sBldprehi  :  Variant;
     sSat       :  Variant;
     sConsyn    :  Variant;
     sConstate  :  Variant;
     sScoring   :  Variant;
     sConfirm   :  Variant;
     sAdmdate   :  Variant;
     sExecdate  :  Variant;

     function NRRTL_L1(Type1,Type2:String):Integer;

   end;


   /////////////////////////////////////////////////////////
   // 의사근무스케줄관리. KimDaeYong 2020-06-02
   ////////////////////////////////////////////////////////
   HmdJobdrt = class
     sMeddr     :  Variant;
     sMeddept   :  Variant;
     sJobdate   :  Variant;
     sJobgbn    :  Variant;
     sJobcont   :  Variant;
     sJobname   :  Variant;
     sRemark    :  Variant;
     sEditid    :  Variant;
     sEditip    :  Variant;

     function List1(inJobdate,inMeddept,inMeddr:String):Integer;
     function Insert1(iCnt:Integer):Integer;
   end;

   /////////////////////////////////////////////////////////
   // 검사 전 평가기록 Ohjunsu 2022-04-29
   ////////////////////////////////////////////////////////
    Hsrsuveyt = class
       sPatno     : Variant;
       sOrddate   : Variant;
       sOrdcd     : Variant;
       sOrdseqno  : Variant;
       sAcptdate  : Variant;
       sGubun     : Variant;
       sOigubun   : Variant;
       sMeddept   : Variant;
       sWardno    : Variant;
       sRoomno    : Variant;
       sChklist   : Variant;
       sDigegita  : Variant;
       sAlergy    : Variant;
       sMedihist  : Variant;
       sMediabort : Variant;
       sEtcetera  : Variant;
       sEditid    : Variant;
       sEditdate  : Variant;
       sEditip    : Variant;
       IsGubun    : Variant;

       sEstmdate     : Variant;
       sPostbph      : Variant;
       sPostbpl      : Variant;
       sPostpr       : Variant;
       sPostrr       : Variant;

       //function InsertMgt:Integer;
       function SrsuveytSel :Integer;
    end;
   

var
    mdvcnift : Hmdvcnift;
// 이선규 병동 Class 지정
    apipdlst : Hapipdlst;
    adrmcdct : Hadrmcdct;
    appatbat : Happatbat;
    apcancrt : Hapcancrt;
////////////이선규 끝 ///////////////////////////
    apprivmt : Happrivmt; // 정보보호내용 공유(인증평가관련)  2011.06.20 김송주

  // 과별 재원환자수 2006.11.23 김송주
    mdApipdt : HMDAPIPDT;
    mdSetbmt : HmdSetbmt;   // SET처방기본
    mdSetbdt : HmdSetbdt;   // SET처방상세
    mdGrupmt : HmdGrupmt;   // 모음기본
    mdGrupdt : HmdGrupdt;   // 모음상세
    mdTemplt : HmdTemplt;   // 예문관리
    mdSliptt : HmdSliptt;   // 처방코드분류
    mdOffdrt : HmdOffdrt;   // 처방코드분류
    mdOrdrct : HmdOrdrct;   // 처방Reference
    mdNotift : HmdNotift;   // Noti.
    mdUsrent : HmdUsrent;   // 개인환경정보
    mdActtct : HmdActtct;   // 투약시간
    mdMcomct : HmdMcomct;   // 진료공통코드
    mdSchbmt : HmdSchbmt;   // 의사진료일정기준정보
    mdSchbdt : HmdSchbdt;   // 의사진료일정기준정보상세
    mdSchdrt : HmdSchdrt;   // 의사진료일정
    mdPdiagt : HmdPdiagt;   // 환자진단내역
    mdCautnt : HmdCautnt;   // 환자 Caution
//    mdCertit : HmdCertit;   // 제증명(일반진단서)
    mdOrderv : HmdOrderv;   // 전체처방View
    mdBasort : HmdBasort;   // 기본처방
    mdMedort : HmdMedort;   // 약처방
    mdMedalt : HmdMedalt;   // 대체조제내역
    mdAntort : HmdAntort;   // 항균제처방
    mdExmort : HmdExmort;   // 검사처방
    mdTrtort : HmdTrtort;   // 처치/수술/마취/재료처방
    mdBldort : HmdBldort;   // 수혈처방
    mdRehort : HmdRehort;   // 재활처방
    mdRehrst : HmdRehrst;   // 재활치료현황
    mdConslt : HmdConslt;   // 컨설트기록
    mdAdmret : HmdAdmret;   // 입원예약
    mdResult : HmdResult;   // 통합검사결과
    mdRsltht : HmdRsltht;   // 통합검사결과 History
    mdDchsut : HmdDchsut;   // 퇴원요약
    mdRschmt : HmdRschmt;   // 관심환자기본
    mdRschdt : HmdRschdt;   // 관심환자상세
    mdOpreqt : HmdOpreqt;   // 수술의뢰내역
    mdOprptt : HmdOprptt;   // 수술/마취간호기록
    mdOprect : HmdOprect;   // 수술기록지
    mdPdiett : HmdPdiett;   // 환자식이관리
    mdNractt : HmdNractt;   // 병동간호Acting
    mdWrkLst : HmdWrkLst;   // 병동현황(Work List)
    mdAdinft : HmdAdinft;   // 간호정보조사지(일반성인)
    mdPdinft : HmdPdinft;   // 간호정보조사지(소아)
    mdBdinft : HmdBdinft;   // 신생아 분만기록
//    mdKdinft : HmdKdinft;   // 분만외 시술대장
    mdDbabyt : HmdDbabyt;   // 사망아
    mdNbabyt : HmdNbabyt;   // 신생아
    mdTbabyt : HmdTbabyt;   // 신생아 일일현황
    mdSbabyt : HmdSbabyt;   // 분만실 통계표
//    mdOginft : HmdOginft;   // 간호정보조사지(산부인과)
//    mdNbinft : HmdNbinft;   // 간호정보조사지(신생아)
    mdPyinft : HmdPyinft;   // 간호정보조사지(정신과)
    mdPtclmt : HmdPtclmt;   // 간호환자분류기본
    mdPtcldt : HmdPtcldt;   // 간호환자분류상세
    mnPgrpmt : HmnPgrpmt;   // 환자분류코드기본 (cr. by mms ) 새로 추가됨
    mnPgrpdt : HmnPgrpdt;   // 환자분류코드상세 (cr. by mms ) 새로 추가됨
    mdVitalt : HmdVitalt;   // V/S기록
    mdIochkt : HmdIochkt;   // I/O & Check
    mdIoqtct : HmdIoqtct;   // I/O기준량
    mdOpdlst : HmdOpdlst;   // 외래예약내역(원무)
    mdPlanct : HmdPlanct;   // 간호계획코드
    mdPplant : HmdPplant;   // 환자별간호계획
    mdDsnrpt : HmdDsnrpt;   // 퇴원시간호계획
    mdErinft : HmdErinft;   // 응급간호정보조사지
    mdDrcont : HmdDrcont;   // 응급담당의
    mdIjdayt : HmdIjdayt;   // 주사일정
    mdIcusmt : HmdIcusmt;   // 중환자업무일지
    mdIcupat : HmdIcupat;   // 중환자실환자정보
    mdHpdort : HmdHpdort;   // 투석지시
    mdPatInf : HmdPatInf;   // 환자정보
    mdMovett : HmdMovett;   // 환자정보
    mdInsamt : HmdInsamt;   // 인사마스타
    mdTrtret : HmdTrtret;   // 처치재료반납
    mdInrpft : HmdInrpft;   // 환자별 간호계획관리
    mdInrplt : HmdInrplt;   // 간호계획대분류코드마스타
    mdInrpmt : HmdInrpmt;   // 간호계획중분류코드마스타
    mdInract : HmdInract;   // 간호계획 Acting 기록
    mdExCode : HmdExCode;   // 타시스템 코드
    mdSearct : HmdSearct;   // 조건항목
    mdSelect : HmdSelect;   // 조건검색
    mdinfrpt : Hmdinfrpt;   // 법정전염병신고서
    mdOpGrct : HmdOpGrct;   // 과별수술분류
    mdOpCdct : HmdOpCdct;   // 과별수술코드
    apipdls  : Hapipdls;    // 원무신생아 등록
    APOPDLST : Hapopdlst;   //원무 외래예약
    mdDsbnrt : HmdDsbnrt;   //  신생아 퇴원기록지
    mdTrinft : HmdTrinft;
    mdDnsstt : HmdDnsstt;   // 일일 진료내역 간호부통계
    mdOpinft : HmdOpinft;   // 수술전 처치기록지.
    mdPdqtyt : HmdPdqtyt;   //소아과 체중별, 약품별 용량
    mdRefert : HmdRefert;
    mdhpactt : Hmdhpactt;   //투석환자조회
    mdClasst : HmdClasst;   // 교실일지
    mdExtrct : HmdExtrct;
    mdAlarmt : HmdAlarmt;
    mdPattxt : HmdPattxt;
    mdNrrect : HmdNrrect;
    mdPcatxt : HmdPcatxt;
    mdEndrdt : HmdEndrdt;
    mdTxstat : HmdTxstat;   //검사처치재료 통계관리
    mdMenumt : HmdMenumt;
    mdMenudt : HmdMenudt;
    apDrmedt : HapDrmedt;
    mdIcudpt : HmdIcudpt;
    mdIcustt : HmdIcustt;
    mdEmptyt : HmdEmptyt;
    adtypect : Hadtypect;   //원무 유형보조
    sdlabmst : Hsdlabmst;   //약국 임상시험약품
    ccusermt : Hccusermt;   //사용자 Passwd조회
    sddgcdmt : Hsddgcdmt;   //약품 tablqty조회
    //퇴원환자 추후관리추가 (2004.08.09) : MN003-01
    mdDschct : HmdDschct;
    //배합금기,연령제한추가(2004.10.14)
    sdbaehat : Hsdbaehat;
    ccdeptct : Hccdeptct;
    //환자보험정보
    apinsurt : Hapinsurt;
    mdDnPart : HmdDnPart;
    mdRectrt : HmdRectrt;
    mdHprect : HmdHprect;
    mdObdept : HmdObdept;
    mdOblabt : HmdOblabt;
    mdUmlsmt : HmdUmlsmt;

    // MT/CD 번호 정보
    sicdchrt : Hsicdchrt;

    mdCertUsr : HmdCertUsr;                                     //SONGLIM_THOMA
    mdCertInj : HmdCertInj;                                      //SONGLIM_THOMA

    // 병실 마스터 2006.09.05 APCLASS1 에서 가져다 씀 김송주
    APRMCDCT : HAPRMCDCT;    // 병실마스터

    // DUR 관련 클래스  2008.04.04
    mddurtext : Hmddurtxt; // DUR 점검 결과 저장 2008.04.01 김송주
    mdDurCkt  : Hmddurckt;
    mqManagt  : HmqManagt; //급성심근경색증 KimDaeYong 2008-06-16
    mdApacht  : HmdApacht; //중환자평가관리 KimDaeYong 2008-07-15
    mqStrokt  : HmqStrokt; //뇌졸중관리 KimDaeYong 2008-09-11
    mdDuprst  : Hmdduprst; // 중복처방사유 김송주 2008.10.24

    mdLivert  : HmdLivert; // 간질환 처방 시작일 김송주 2009.02.04
    mdSktstt  : HmdSktstt; // 스킨 테스트(알레르기검사) 2009.04.03
    mdMethat  : HmdMethat; // Methacholine Provocation Test 2009.05.25

    mdAnopqt  : HmdAnopqt; // 예방적 항생제 대상자 김송주 2009.07.31
    mdDnbedt  : HmdDnBedt; // 욕창환자 김송주 2010.07.13

    mdOcrprt  : HmdOcrprt; // N-Chart 2010.11.2

    // Admission Note 클래스 2011.07.19 김송주
    mdAdmnot  : HmdAdmnot;
    mdAdmset  : HmdAdmset;

    mdDpaint  : HmdDpaint; // 통증

    srAcpordt : HsrAcpordt; // METFORMIN/CREATININE 클래스
    sqNstrqt  : HsqNstrqt;  // NST 결과
    siKeywdt  : HsiKeywdt;  // 약어검색
    mdInscnt  : HmdInscnt;  // 급여구분제어
    sqHistrt  : HsqHistrt;  // 치료식 확인현황

    mdKimsmt  : Hmdkimsmt;  // KIMS 역
    mdhosptt  : HmdHosptt;  // 병원리스트
    mdScopyt  : HmdScopyt;  // 내시경 처방 추가 정보.
    mdBcafst  : HmdBcafst;  // 유방암 환자평가 초기기록 2012.09.11
    mdCpendt  : HmdCpendt;  // CP 변인 및 중단 사유 2013.05.31
    mdImprvt  : Hmdimprvt;  // DRG질점검표
    mdEmrejt  : HmdEmrejt;  // 응급실 접수취소 사유
    mdihdmst  : Hmdihdmst;  // 허혈성심질환평가, KimDaeYong 2013-08-26
    lAICHOCALT: HaiChocalt; // 환자별급여초음파이력조회, KimDaeYong 2013-11-13 소스제공(최근우Tc)
    mdNventt  : Hmdnventt;  // 임상질지표 2013.12.12 KYA
    mdHptmat  : HmdHptmat;  // 간암평가, KimDaeYong 2014-06-27

//    mdAdrext  : HmdAdrext;  // 의약품부작용모니터링, KimDaeYong 2014-07-08. SDCLASS4이용해서 삭제. KimDaeYong 2017-11-13

    mdCurbet  : Hmdcurbet;  // 폐렴-CURB 제외사유(김송주)
    mdCurbit  : Hmdcurbit;  // 폐렴-CURB 조사값(김송주)

    //2015인증평가, KimDaeYong 2015-02-16
    mdreadmt  : Hmdreadmt;  // 재평가(30일단위)
    mdresett  : Hmdresett;  // 재평가예문(30일단위)
    mdNerect  : HmdNerect;  // 응급간호기록지
    mdAuthht  : HmdAuthht;  // 권한관리, KimdaeYong 2015-07-08
    mdTaboht  : HmdTaboht;  //2015인증평가, 금기약어관리, KimDaeYong 2015-10-02

    sqDietdt  : HsqDietdt;  // 식이정보조회
    sqNstapt  : HsqNstapt;  // 신규 NST
    sqNstsgt  : HsqNstsgt;  // 신규 NST          
    mdNspcdt  : HmdNspcdt;  // 응급실 검체상황등록, 20151116. kya.
    apSchdrt  : HapSchdrt;  // 재진예약시 의사 리마크, KimDaeYong 2015-12-01
    mdNktast  : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdNktast1 : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdNktast2 : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdNktast3 : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdNktast4 : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdNktast5 : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdNktast6 : HmdNktast;  //중증도분류 KTAS, 20151215. kya.
    mdSchemt  : HmdSchemt;  //의사진료일정(응급센터), KimDaeYong 2016-02-16
    mdEmnott  : HmdEmnott;  //응급센터진료기록, KimDaeYong 2016-02-24
    mdEmcalt  : HmdEmcalt;  //응급호출, KimDaeYong 2016-07-18
    mdSonomt  : HmdSonomt;  //초음파처방사유, KimDaeYong 2016-09-27
    mdNpipct  : HmdNpipct;  //정신건강의학과 입원유형, KimDaeYong 2016-10-25
    mdOtrnst  : HmdOtrnst;  //외래환자이송사유, KimDaeYong 2016-11-04
    mdNpregt  : HmdNpregt;   //임산부관리.20161223.kya.
    mdSapstt  : HmdSapstt;   //중환자평가관리(SAPS3), KimDaeYong 2017-03-08
    mdSepsit  : HmdSepsit;   //중환자평가관리(SAPS3) SEPSIS팝업, KimDaeYong 2017-04-10
    mdStcamt  : HmdStcamt;  //위암평가. KimDaeYong 2017-12-07
    mdDrwrkt  : HmdDrwrkt;  //의사근무체크. KimDaeYong 2018-06-12
    mdNicutt  : HmdNicutt;  //신생아중환자평가관리(CRIB2). KimDaeYong 2018-06-19
    mdCpexct  : HmdCpexct;  //CP제외사유. KimDaeYong 2018-08-30
    mdVitald  : HmdVitald;  //활력증상복사.20180912.kya.
    mdReqdct  : HmdReqdct;  //요양급여의뢰서(V352 등). KimDaeYong 2018-10-23
    mdNudimt  : HmdNudimt;  //의료기기 환자정보등록.20180706.kya.
    //2019인증평가
    mdNrrtlt  : HmdNrrtlt;  //신속대응팀. KYA 2019-09-20
    mdJobdrt  : HmdJobdrt;  //의사근무스케줄관리. KimDaeYong 2020-06-02
    srsuveyt  : Hsrsuveyt;  //검사 전 평가기록관리 Oh Junsu 2022-04-29


    // 진료시스템에서 사용되는 Global변수 선언부
    // 사용자관련 정보
    md_UserId   : string;    // 사용자ID
    md_UserNm   : string;    // 사용자명
    md_DeptCd   : string;    // 소속부서
    md_DeptNm   : string;    // 소속부서명
    md_LicNo    : string;    // 의사면허번호
    md_MajorNo  : string;    // 전문의번호
    md_JicJong  : string;    // 직종(사용자구분 HAA:의사 HAB:간호사  HAC : 기사)
    md_JikGup   : string;    // 직급
    md_JikGupNm : string;    // 직급명 (추가)
    md_Sort     : string;    // SET순서(1:개인 2:진료과)
    md_InscfmYn : string;    // 처방저장시 확인여부('Y':확인)
    md_PatSel   : string;    // 입원환자선택기준(1:주치의 2:담당의 3:진료과 4:병동)
    md_NextScr  : string;    // 환자선택후다음화면(1:환자상세 2:처방)
    md_DiagSel  : string;    // 진단명사용(1:영문 2:한글)
    md_WardNo1  : string;    // 근무병동1 (추가)
    md_WardNo2  : string;    // 근무병동2 (추가)
    md_SpeedBtn : string;    // 스피드버튼 (추가)
    md_Days     : string;    // 약처방기본일수
    md_Counts   : string;    // 약처방기본회수
    md_WkareaCd : string;    // 작업장코드
    md_PatSelYn : string;    // 처방내림후 환자선택화면으로 이동
    md_PreOrdYn : String;    //전처방 펼쳐보기 여부
    md_OutOrdYn : String;    //전처방중 외래처방만 보이기
    md_Selmm    : String;    // 검사결과 조히기간
    md_Rsvselfg : String;    // 재진예약시 예약현황조회기준
    md_Refresh  : String;
    md_OrgDept  : String;    // 원소속과.
    md_CellEdit : String;    // 처방셀입력모드
    md_OrdCopy  : String;    // 전처방자동복사
    md_DrugPrt  : String;    // 마약처방전자동복사
    md_Drugunit : String;    // 기본 약단위.
    md_Svrip    : String;    // 서버IP, KimDaeYong 2015-03-06
    //의사직 근무내용(전담근무) 변수. KimDaeYong 2018-06-15
    md_Wktype   : String;    // 전담근무여부
    md_Wkplace  : String;    // 전담근무장소(병동)

    // 환자기본정보
    md_PatCls   : string;    // 현재선택된 환자구분 (I:입원, O:외래, E:응급)
    md_PatNo    : string;    // 환자번호
    md_PatName  : string;    // 환자명
    md_ResNo1   : string;    // 주민번호1
    md_ResNo2   : string;    // 주민번호2
    md_BirtDate : string;    // 생년월일
    md_Sex      : string;    // 성별(F/M)
    md_TelNo1   : string;    // 집 전화번호
    md_TelNo2   : string;    // 직장 전화번호
    md_TelNo3   : string;    // 핸드폰 전화번호
    md_EMail    : string;    // E-Mail
    md_ZipCd    : string;    // 우편번호
    md_Address  : string;    // 주소
    md_ExceptCd : string;    // 분업예외코드
    md_ExceptCd1: string;    // 분업예외코드1
    md_ReferYn  : string;    // Refer 여부(Y)
    md_MedTime  : string;    // 진료시간/응급실도착시간
    md_Resltopt : String;    // 결과조회기준
    md_Passptno : String;    // 여권번호.KimDaeYong 2020-02-03
    md_Silinsyn : String;    // 실비보험가입여부.KimDaeYong 2020-11-25

    // 입원환자정보
    md_AdmDate  : string;    // (병동:입원일, 외래:진찰일)
    md_Admtime  : string;    // (입원시간)
    md_PatType  : string;    // 환자유형
    md_MedDept  : string;    // 진료과
    md_SpDept   : string;    // 진료과목코드(청구용).DUR에서 사용.KimDaeYong 2020-07-17
    md_MedDeptNm: string;    // 진료과명
    md_WardNo   : string;    // 병동
    md_RoomNo   : string;    // 병실
    md_NowWardNo: string;    // 병동(현위치)
    md_NowRoomNo: string;    // 병실(현위치)
    md_BedNo    : string;    // 병상
    md_ChaDr    : string;    // 담당교수
    md_ChaDrNm  : string;    // 담당교수명
    md_GenDr    : string;    // (병동:주치의, 외래:진료의)
    md_GenDrNm  : string;    // 주치의명
    md_DrgYn    : string;    // DRG여부(Y/N)
    md_SubInsut : string;    // 부보험유형(지병여부)
    md_DiagCd   : string;    // 주진단코드
    md_DiagName : string;    // 주진단명
    md_LstOpDt  : string;    // 최근수술일
    md_OpCode   : string;    // 최근수술코드
    md_OpName   : string;    // 최근수술명
    md_Fstmedty : string;    // (1:초진 2:재진 3:신환 4:재초진)
    md_Dschexdt : string;    // 퇴원예정일
    md_OpDate   : string;    // 수술(예정)일
    md_OpSeqNo  : string;    // 수술(예정)순번
    md_MedYn    : string;    // 진료여부
    md_Height   : string;    // 신장
    md_Weight   : string;    // 체중
    md_BckStat  : string;    // 퇴원심사진행상태
    // (0:퇴원지시,1:퇴원지시확인,2:심사중,3:심사완료,4:계산서출력,5:가퇴원,6:퇴원/수납완료)
    md_Follow   : string;    // 외래환자 FollowUp예약여부
    md_Bodytemp : string;    //외래 소아과환자 체온
    md_RsvType  : string;    //외래 예약구분
    md_RenPatYn : string;    //인공신장실 환자선택여부
    //선택진료
    md_Spcdr    :string;     //선택진료의
    md_Spopyn   :string;     //처치수술선택진료구분
    md_Spexyn   :string;     //검사선택진료구분
    md_Sprayn   :string;     //영상진단선택진료구분
    md_Spcryn   :string;     //방사선치료선택진료구분
    md_Spanyn   :string;     //마취선택진료구분
    md_Sppsyn   :string;     //정신요법선택진료구분
    //유형보조
    md_Typecd   :string;
    md_Typecdnm :string;

    md_Dccode   :string;
    md_Custcd   :string;
    // 2010.10.21 소견서, 영상물 지참여부 추가
    md_Refpaper :String;
    md_Pacscd   :String;

    // 병원정보
    md_HosName    : String;      // 병원명
    md_HosAddress : String;      // 병원주소
    md_HosTel     : String;      // 병원 전화번호
    md_HosDr      : String;      // 병원장
    md_HosFax     : String;      // 병원 팩스번호
    md_InsurId    : String;

    // 처방관련.
    md_OrdFont  : string;    // 처방입력List Font
    md_PreFont  : string;    // 전처방List Font
    md_SetFont  : string;    // Set처방List Font
    md_ConsltYn : string;    // 컨설트처방 Repeat 여부
    md_WeightYn : string;    // 환자체중별용량 사용 여부
    //(2003.03.04 이용언)
    md_Orddr    : String;    // 이비인후과 처방의.

    md_ImNmList : Variant;
    md_ImCdList : Variant;
    md_ImCnt    : Integer;

    //외과분과, KimDaeYong 2014-11-03
    md_SurgNmList : Variant;
    md_SurgCdList : Variant;
    md_SurgCnt    : Integer;

    //(추가. 2003.2.24 이용언)
    md_DenNmList: Variant;
    md_DenCdList: Variant;
    md_DenCnt   : Integer;

    md_TeeUpLt  : string;    //치열(좌상)
    md_TeeUpRt  : string;    //치열(우상)
    md_TeeDwLt  : string;    //치열(좌하)
    md_TeeDwRt  : string;    //치열(우하)

    md_Conslt   : string;    //처방화면 컨설트버튼 활성화 여부
    md_LabYn    : string;    //일괄예문 적용여부
    md_admyn    : string;    //외래환자 입원지시 여부
    md_RehSet   : string;    //재활SET 작성할때 예약일수를 Check여부 2003.10.01
    //혈압추가
    md_Bldprehi : string;
    md_Bldprelo : string;

    md_chart1   : String;    // N-차트 옵션 1
    md_chart2   : String;    // N-차트 옵션 2
    // 낙상고위험군 여부
    md_NakYn    : String;
    md_ImbuYn   : String;    // 임부여부 2011.11.23 김송주

    md_cpstat   : String;    // CP등록상태 2013.6.3 Y:등록, N:미등록 S:CP중단, X:CP제외
    md_cpordyn  : String;    // 처방 형태  Y:CP셋오더 ,  N:일반오더
    md_zpaddress: String;    // 2013.8.1 김송주

    md_Spcdryn  : String;    //선택진료여부, KimDaeYong 2013-12-27

    //2015인증평가, 수술기록지 시한성체크, KimDaeYong 2015-09-17
    md_Oprecyn  : String;   //수술기록지작성여부
    md_OprecMsg : String;   //수술기록지 메시징 내용

    //KIMS(DUR) 글로벌 변수. KimDaeYong 2017-11-01
    md_KimsSvr     : string;       //메인서버(172.16.100.51)
    md_KimsSvr_bk  : string;       //백업서버(172.16.100.52)

implementation

uses TuxCom, TuxMsg, MDC100U1, VarCom; //VarCom 임시추가. 추후 삭제 예정(2002.12.11 이용언)

////////////////////////////////////////////////////////////////////////////////
//  HmdSetbmt 	SET처방기본                                                    //
////////////////////////////////////////////////////////////////////////////////

// SET 처방 기본 List 조회
function HmdSetbmt.ListSetOrdBase(SetType,OrdGrp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[SetType,OrdGrp] );

   //Tuxedo Service Call
   if (txGetF32('MD_SETBM_L1')) then
   begin
      GetFldVar32('S_STRING1' , sSetType );  // SET type
      GetFldVar32('S_STRING2' , sSetName );  // SET명
      GetFldVar32('S_STRING3' , sUpCode  );  // 상위코드
      GetFldVar32('S_STRING4' , sLowerYn );  // 하위여부
      GetFldVar32('S_STRING5' , sDiagcd );   // 진단코드
      GetFldVar32('S_STRING6' , sDiagname ); // 진단명
      GetFldVar32('L_SEQNO1'  , iSetSeqno);  // SET항목순서
      GetFldVar32('L_SEQNO2'  , iDispSeq );  // 나열순서

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

function HmdSetbmt.UpdateSetFolder(SetType,SeqNo,SetName,Upcode,Loweryn,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue(0,[SetType,SeqNo,SetName,Upcode,Loweryn,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 조회
function HmdSetbmt.SearchSet(SetType1,SetType2,Setname:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[SetType1,SetType2,Setname] );

   //Tuxedo Service Call
   if (txGetF32('MD_SETBM_L2')) then
   begin
      GetFldVar32('S_STRING1' , sSetType );  // SET type
      GetFldVar32('S_STRING2' , sSetName );  // SET명
      GetFldVar32('S_STRING3' , sUpCode  );  // 상위코드
      GetFldVar32('S_STRING4' , sLowerYn );  // 하위여부
      GetFldVar32('S_STRING5' , sDiagCd  );  // 진단코드
      GetFldVar32('S_STRING6' , sDiagName);  // 진단명
      GetFldVar32('L_SEQNO1'  , iSetSeqno);  // SET항목순서
      GetFldVar32('L_SEQNO2'  , iDispSeq );  // 나열순서

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// SET 처방 수정 (상병코드입력)
function HmdSetbmt.InsertDiag(SetType,SeqNo,Diagcd,Diagname,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[SetType,SeqNo,Diagcd,Diagname,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_U3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 수정 (상병코드삭제)
function HmdSetbmt.DeleteDiag(SetType,SeqNo,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[SetType,SeqNo,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_U4')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 수정 (SET명)
function HmdSetbmt.UpdateSetOrd(SetType,SeqNo,SetName,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[SetType,SeqNo,SetName,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 삭제 (기본,상세)
function HmdSetbmt.DeleteSetOrd(SetType,SeqNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[SetType,SeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdSetbdt 	SET처방상세                                                   //
////////////////////////////////////////////////////////////////////////////////

// SET 처방 상세 List 조회
function HmdSetbdt.ListSetOrdDetail(SetType,Locate:String;SetSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;L_SEQNO1');
   SetFldValue32(0,[SetType,Locate,SetSeqNo]);

   //Tuxedo Service Call
   if (txGetF32('MD_SETBD_L1')) then
   begin
      GetFldVar32('S_STRING1'   , sOrdGrp   );  // 처방분류
      GetFldVar32('S_STRING2'   , sOrdCdGrp );  // 처방코드분류
      GetFldVar32('S_STRING3'   , sErYn	    );  // 응급여부
      GetFldVar32('S_STRING4'   , sOrdCd    );  // 처방코드
      GetFldVar32('S_STRING5'   , sOrdName  );  // 처방명
      GetFldVar32('S_STRING6'   , sPrnYn    );  // PRN 여부
      GetFldVar32('S_STRING7'   , sOrdUnit  );  // 단위
      GetFldVar32('S_STRING8'   , sUnitType );  // 선택단위구분(1:함량 2:규격 3:포장) */
      GetFldVar32('S_STRING9'   , sDgijType );  // 약주사구분
      GetFldVar32('S_STRING10'  , sDetRoute );  // 상세투여경로
      GetFldVar32('S_STRING11'  , sMethodCd );  // 용법코드
      GetFldVar32('S_STRING12'  , sMethdRmk );  // 용법비고
      GetFldVar32('S_STRING13'  , sPowYn    );  // Powder여부
      GetFldVar32('S_STRING14'  , sAstYn    );  // AST(After Skin Test) 여부
      GetFldVar32('S_STRING15'  , sMixYn    );  // MIX여부
      GetFldVar32('S_STRING16'  , sMainYn   );  // MAIN여부
      GetFldVar32('S_STRING17'  , sPortYn   );  // PORTABLE(이동)여부
      GetFldVar32('S_STRING18'  , sFcrYn    );  // FCR검사여부
      GetFldVar32('S_STRING19'  , sDruginYn );  // 항생제투여여부
      GetFldVar32('S_STRING20'  , sOrdText  );  // 임상소견/지시내용
      GetFldVar32('S_STRING21'  , sSpcCode1 );  // 검체코드1
      GetFldVar32('S_STRING22'  , sSpcCode2 );  // 검체코드2
      GetFldVar32('S_STRING23'  , sAnethMm  );  // 마취시간(분)
      GetFldVar32('S_STRING24'  , sTeeUpLt  );  // 치열(상좌)
      GetFldVar32('S_STRING25'  , sTeeUpRt  );  // 치열(상우)
      GetFldVar32('S_STRING26'  , sTeeDwLt  );  // 치열(하좌)
      GetFldVar32('S_STRING27'  , sTeeDwRt  );  // 치열(하우)
      GetFldVar32('S_STRING28'  , sUseCode  );  // 사용용도
      GetFldVar32('S_STRING29'  , sFiltYn   );  // FILTER여부
      GetFldVar32('S_STRING30'  , sIrradYn  );  // IRRADIATION 여부
      GetFldVar32('S_STRING31'  , sRemark   );  // 특기사항
      GetFldVar32('S_STRING32'  , sDrugKind );  // 약품구분('5'=제한항균제)
      GetFldVar32('S_STRING33'  , sInputtyp );  // 입력구분
      GetFldVar32('S_STRING34'  , sOrdDesc1 );  // 처방상세1
      GetFldVar32('S_STRING35'  , sOrdDesc2 );  // 처방상세2
      GetFldVar32('S_STRING36'  , sOrdGrpNm );  // 처방분류명
      GetFldVar32('S_STRING37'  , sGttUnit  );  // Gtt 단위
      GetFldVar32('S_STRING38'  , sOrigGrp  );  // 처방분류(처방Master)
      GetFldVar32('S_STRING39'  , sOrigSlip );  // Slip코드(처방Master)
      GetFldVar32('S_STRING40'  , sInsType  );  // 급여구분
      GetFldVar32('S_STRING41'  , sInjtLoc  );  // 주사장소
      GetFldVar32('S_STRING42'  , sInOutYn  );  // 원내/원외구분
      GetFldVar32('S_STRING43'  , sInResn   );  // 원내처방사유
      GetFldVar32('S_STRING44'  , sPrepYn   );  // Prepare여부
      GetFldVar32('S_STRING45'  , sSideYn   );  // Side여부(수액)
      GetFldVar32('S_STRING46'  , sChemoYn  );  // Chemo여부
      GetFldVar32('S_STRING47'  , sOrdYn    );  // 처방가능여부
      GetFldVar32('S_STRING48'  , sTxDrugYn );  // 처치약제여부
      GetFldVar32('S_STRING49'  , sTrtLoc   );  // 처치.재료시행장소
      GetFldVar32('S_STRING50'  , sReadYn   );  // 판독대상여부
      GetFldVar32('S_NAME1'     , sPreMedYn );  // PreMedication여부
      GetFldVar32('S_TYPE1'     , sConsDept );  // 희망부서
      GetFldVar32('S_TYPE2'     , sConsDr   );  // 희망의사
      GetFldVar32('S_TYPE3'     , sConsCtnt );  // 의뢰내용
      GetFldVar32('S_TYPE4'     , sConsType );  // 컨설트 구분 (1:일반,2:EMG)
      GetFldVar32('S_TYPE5'     , sCallYn   );  // 왕진여부
      GetFldVar32('S_TYPE6'     , sDmDietYn );  // 당뇨조식여부
      GetFldVar32('S_TYPE7'     , sCsOrdCd  );  // (컨설트)처방코드
      GetFldVar32('S_TYPE8'     , sCsOrdGrp );  // (컨설트)처방분류
      GetFldVar32('S_TYPE9'     , sCsSlipCd );  // (컨설트)Slip코드
      GetFldVar32('S_TYPE10'    , sCsDeptNm );  // 희망부서명
      GetFldVar32('S_TYPE11'    , sCsDrNm   );  // 희망의사명
      GetFldVar32('S_TYPE12'    , sCsOrdNm  );  // (컨설트)처방명
      GetFldVar32('S_TYPE13'    , sLabDate  );  // 검사시행일시
      GetFldVar32('S_NUMVAL1'   , sSeqNo    );  // 순번
      GetFldVar32('S_NUMVAL2'   , sQty	    );  // 수량
      GetFldVar32('S_NUMVAL3'   , sCount    );  // 횟수
      GetFldVar32('S_NUMVAL4'   , sDoseQty  );  // 투여량(1회차)
      GetFldVar32('S_NUMVAL5'   , sDoseQty2 );  // 투여량(2회차)
      GetFldVar32('S_NUMVAL6'   , sDoseQty3 );  // 투여량(3회차)
      GetFldVar32('S_NUMVAL7'   , sDoseQty4 );  // 투여량(4회차)
      GetFldVar32('S_NUMVAL8'   , sDoseQty5 );  // 투여량(5회차)
      GetFldVar32('S_NUMVAL9'   , sTotQty   );  // 총량
      GetFldVar32('S_NUMVAL10'  , sUseDay   );  // 일수
      GetFldVar32('S_NUMVAL11'  , sBundleNo );  // 묶음번호
      GetFldVar32('S_NUMVAL12'  , sGtt      );  // Gtt
      GetFldVar32('S_NUMVAL13'  , sSiteCd   );  // 처방부위
      GetFldVar32('S_NUMVAL14'  , sTermsCd  );  // 처방빈도
      GetFldVar32('S_NUMVAL15'  , sDayCnt   );  // 1일 처방횟수
      GetFldVar32('S_NUMVAL16'  , sDays     );  // 처방일수
      GetFldVar32('S_NUMVAL17'  , sAseven   );  //검사처방 A7 여부.
      // 주성분코드 추가 2008.09.30 김송주
      GetFldVar32('S_STRING51'  , sMaincd   );  // 주성분코드 --> 유사성분(2009.01.08)
      GetFldVar32('S_STRING52'  , sPrnOrdRmk);  // PRN 실시 기준
      GetFldVar32('S_STRING53'  , sSetTypeCP);
      //의사공유메시지여부. KimDaeYong 2019-07-19
      GetFldVar32('S_STRING54'  , sDrmsgyn);

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


{
// SET 처방 등록 (Multi Input)
function HmdSetbdt.InsertSetOrd(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;'+
              'S_STRING37;S_STRING38;'+
              'S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4;S_NUMVAL5;S_NUMVAL6;'+
              'S_NUMVAL7;S_NUMVAL8;S_NUMVAL9;S_NUMVAL10;S_NUMVAL11;S_NUMVAL12');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sSetType[i]),String(sOrdGrp[i]),String(sOrdCdGrp[i]),
                     String(sErYn[i]),String(sOrdCd[i]),String(sOrdName[i]),
                     String(sPrnYn[i]),String(sOrdUnit[i]),String(sUnitType[i]),
                     String(sDgijType[i]),String(sDetRoute[i]),String(sMethodCd[i]),
                     String(sMethdRmk[i]),String(sPowYn[i]),String(sAstYn[i]),
                     String(sMixYn[i]),String(sMainYn[i]),String(sPortYn[i]),
                     String(sFcrYn[i]),String(sDruginYn[i]),String(sOrdText[i]),
                     String(sSpcCode1[i]),String(sSpcCode2[i]),String(sAnethMm[i]),
                     String(sTeeUpLt[i]),String(sTeeUpRt[i]),String(sTeeDwLt[i]),
                     String(sTeeDwRt[i]),String(sUseCode[i]),String(sFiltYn[i]),
                     String(sIrradYn[i]),String(sRemark[i]),String(sSetName[i]),
                     String(sEditId[i]),String(sEditIp[i]),String(sOrdDesc1[i]),
                     String(sOrdDesc2[i]),String(sGttUnit[i]),
                     String(sQty[i]),String(sCount[i]),String(sDoseQty[i]),
                     String(sDoseQty2[i]),String(sDoseQty3[i]),String(sDoseQty4[i]),
                     String(sDoseQty5[i]),String(sTotQty[i]),String(sUseDay[i]),
                     String(sBundleNo[i]),String(sSetSeqNo[i]),String(sGtt[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF32('MD_SETBD_I1')) then
   begin
      Result := 1;
      txFree32;
   end;
end;
}

// SET 처방 등록 (Multi Input)
function HmdSetbdt.InsertOrdSet(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;'+
              'S_STRING37;S_STRING38;S_STRING39;S_STRING40;S_STRING41;S_STRING42;'+
              'S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;'+
              'S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;'+
              //'S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;'+
              'S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4;S_NUMVAL5;S_NUMVAL6;'+
              'S_NUMVAL7;S_NUMVAL8;S_NUMVAL9;S_NUMVAL10;S_NUMVAL11;S_NUMVAL12;'+
              //재활처방 추가.
              'S_NUMVAL13;S_NUMVAL14;S_NUMVAL15;S_NUMVAL16;'+
              //검사처방 A7추가
              'S_NUMVAL17;'+
              //의사공유메시지여부. KimDaeYong 2019-07-19
              'S_STRING49');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sSetType[i]),String(sOrdGrp[i]),String(sOrdCdGrp[i]),
                     String(sErYn[i]),String(sOrdCd[i]),String(sOrdName[i]),
                     String(sPrnYn[i]),String(sOrdUnit[i]),String(sUnitType[i]),
                     String(sDgijType[i]),String(sDetRoute[i]),String(sMethodCd[i]),
                     String(sMethdRmk[i]),String(sPowYn[i]),String(sAstYn[i]),
                     String(sMixYn[i]),String(sMainYn[i]),String(sPortYn[i]),
                     String(sFcrYn[i]),String(sDruginYn[i]),String(sOrdText[i]),
                     String(sSpcCode1[i]),String(sSpcCode2[i]),String(sAnethMm[i]),
                     String(sTeeUpLt[i]),String(sTeeUpRt[i]),String(sTeeDwLt[i]),
                     String(sTeeDwRt[i]),String(sUseCode[i]),String(sFiltYn[i]),
                     String(sIrradYn[i]),String(sRemark[i]),String(sSetName[i]),
                     String(sEditId[i]),String(sEditIp[i]),String(sOrdDesc1[i]),
                     String(sOrdDesc2[i]),String(sGttUnit[i]),String(sInstype[i]),
                     String(sInjtLoc[i]),String(sInOutYn[i]),String(sInResn[i]),
                     String(sPrepYn[i]),String(sSideYn[i]),String(sChemoYn[i]),
                     String(sTxDrugYn[i]),String(sTrtLoc[i]),String(sPreMedYn[i]),
                     String(sConsDept[i]),String(sConsDr[i]),String(sConsCtnt[i]),
                     String(sConsType[i]),String(sCallYn[i]),String(sDmDietYn[i]),
                     String(sCsOrdCd[i]), String(sLabDate[i]),String(sQty[i]),
                     //String(sCsOrdCd[i]), String(sQty[i]),
                     String(sCount[i]),String(sDoseQty[i]),String(sDoseQty2[i]),
                     String(sDoseQty3[i]),String(sDoseQty4[i]),String(sDoseQty5[i]),
                     String(sTotQty[i]),String(sUseDay[i]),String(sBundleNo[i]),
                     String(sSetSeqNo[i]),
                     String(sGtt[i]),
                     //재활처방 추가.
                     String(sSiteCd[i]),String(sTermsCd[i]),String(sDayCnt[i]),
                     String(sDays[i]),
                     //검사처방 A7
                     String(sAseven[i]),
                     //의사공유메시지여부. KimDaeYong 2019-07-19
                     String(sDrmsgyn[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF32('MD_SETBD_I1')) then
   begin
      Result := 1;
      txFree32;
   end;
end;



//SET 폴더 생성
function HmdSetbdt.InsertSetFolder(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_NUMVAL1;');
   cnt := 1;
   {GET (S_STRING1, 0,  sSettype [0]);   /* SET구분(개인/진료과)*/
   GET (S_STRING2, 0,  sSetname [0]);   /* SET/모음명         */
   GET (S_STRING3, 0,  sUpcode  [0]);   /* 처방상세1          */
  GET (S_STRING4, 0,  sLoweryn [0]);   /* 처방상세2          */
   GET (S_STRING5, 0,  sEditid  [0]);   /* 수정자ID           */
   GET (S_STRING6, 0,  sEditip  [0]);   /* 수정자IP           */

   GET (S_NUMVAL1, 0,  sSetseqno[0]);   /* SET순번            */ }
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sSetType[i]),String(sSetName[i]),
                     String(sUpcode[i]),
                     String(sLoweryn[i]),
                     String(sEditId[i]),
                     String(sEditIp[i]),
                     String(sSetSeqNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;
// SET 처방 상세 삭제
function HmdSetbdt.DeleteSetDetail(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3'); //SetType,Set순번,SEt처방상세순번
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sSetType[i]),String(sSetSeqNo[i]),String(sSeqNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SETBD_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 복사
function HmdSetbdt.InsertSetCopy(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;');
   cnt := 1;

   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sTarget[i]),
                     String(sSource[i]),
                     String(sSetSeqNo[i]),
                     String(sLoweryn[i]),
                     String(sSetName[i]),
                     String(sUpcode[i]),
                     String(sEditId[i]),
                     String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 처방SET 전체복사
function HmdSetbdt.InsertSetAllCopy(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;');
   cnt := 1;

   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sTarget[i]),
                     String(sSource[i]),
                     String(sEditId[i]),
                     String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SETBM_I3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 상세내역 항목<순번> 수정 (Multi Update)
function HmdSetbdt.UpdateSetSeqno(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4'); //SetType,Set순번,순번,New순번
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sSetType[i]),String(sSetSeqNo[i])
                    ,String(sSeqNo[i]),String(sNewSeqNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SETBD_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// SET 처방 상세 - 묶음번호 최종값 구하기
function HmdSetbdt.SetMaxBundleNo(SetType:String;SetSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;L_SEQNO1');
   SetFldValue(0,[SetType,SetSeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_SETBD_L2')) then
   begin
      GetFldVar('S_STRING1'  , sBundleNo );  // 묶음번호

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
////////////////////////////////////////////////////////////////////////////////
//  HmdGrupmt 	모음기본                                                       //
////////////////////////////////////////////////////////////////////////////////


// 모음(진단,수술,처치,재료) 약속명 조회
function HmdGrupmt.ListGroup(sItem,sType : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2');
   SetFldValue(0,[sItem,sType]);
   if (txGetF('MD_GRUPM_L1')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iSetSeqno);
      GetFldVar('L_LONG2',iDispSeq);
      GetFldVar('S_STRING3',sSetName);
      Result := GetRecordCnt('S_STRING3');
      txFree;
   end;
end;

// 모음(진단,수술,처치,재료) 약속명 조회
function HmdGrupmt.ListGroup2(sItem,sType : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2');
   SetFldValue(0,[sItem,sType]);
   if (txGetF('MD_GRUPM_L3')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iSetSeqno);
      GetFldVar('L_LONG2',iDispSeq);
      GetFldVar('S_STRING3',sSetName);
      GetFldVar('S_STRING4',sSetItem);
      Result := GetRecordCnt('S_STRING3');
      txFree;
   end;
end;

// 모음(진단,수술,처치,재료) 입력
function HmdGrupmt.ListGroupTree(sType1,sType2,sType3,sType4 : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   if (txGetF('MD_GRUPM_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sPart);
      GetFldVar('S_STRING2',sDeptNm);
      GetFldVar('S_STRING3',sSetname);
      GetFldVar('S_STRING4',sSetitem);
      GetFldVar('S_STRING5',sSettype);
      GetFldVar('L_LONG1',iSetSeqno);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 모음(진단,수술,처치,재료) 입력
function HmdGrupmt.InputGroup(sSetItem,sSetType,sSetName,sEditId,sEditIp, sUpCode, sLeafYn: string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7');
   SetFldValue(0,[sSetItem,sSetType,sSetName,sEditId,sEditIp,sUpCode, sLeafYn]);
   if (txPutF('MD_GRUPM_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// SET복사
function HmdGrupmt.CopyGroup(sSetItem,sSetType1,sEditId,sEditIp,sSetType2: string;iSetSeqno:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;L_LONG1');
   SetFldValue(0,[sSetItem,sSetType1,sEditId,sEditIp,sSetType2,iSetSeqno]);
   if (txPutF('MD_GRUPM_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 모음(진단,수술,처치,재료) 모음명 수정
function HmdGrupmt.UpdateGroupNm(sSetItem, sSetType,sSetName,sEditId,sEditIp: string;iSetSeqno,iDispSeq: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;L_LONG1;L_LONG2');
   SetFldValue(0,[sSetItem,sSetType,sSetName,sEditId,sEditIp,iSetSeqno,iDispSeq]);
   if (txPutF('MD_GRUPM_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 모음(진단,수술,처치,재료) 나열순서 수정
function HmdGrupmt.UpdateGroupSeq(Cnt: integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;L_LONG1;L_LONG2');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sSetItem[i]),String(sSetType[i]),String(sSetName[i]),String(sEditId[i]),
                     String(sEditIp[i]),Integer(iSetSeqno[i]),Integer(iDispSeq[i])]);
   if (txPutF('MD_GRUPM_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 모음(진단,수술,처치,재료) 삭제
function HmdGrupmt.DeleteGroup(sSetItem, sSetType: string;iSetSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;L_LONG1');
   SetFldValue(0,[sSetItem,sSetType,iSetSeqno]);
   if (txPutF('MD_GRUPM_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdGrupdt 	모음상세                                                      //
////////////////////////////////////////////////////////////////////////////////

// 모음(처치,수술,검사,재료) 상세항목 조회
function HmdGrupdt.SelectGroupDetail(sSetitems,sSetType : string; iSetSeqno:Integer):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_STRING1;S_STRING2;L_LONG1');
   SetFldValue32(0,[sSetitems,sSetType,iSetSeqno]);
   if (txGetF32('MD_GRUPD_L1')) then begin //Tuxedo Service Call
      GetFldVar32('L_LONG2',iSeqNo);
      GetFldVar32('L_LONG3',iDispSeq);
      GetFldVar32('S_STRING3',sSetCode);
      GetFldVar32('S_STRING4',sSlipnm);
      GetFldVar32('S_STRING5',sCodename);
      GetFldVar32('S_STRING6',sDiagennm);
      GetFldVar32('S_STRING7',sDiagkrnm);
      GetFldVar32('S_STRING8',sInfeGrd);
      GetFldVar32('S_STRING9',sSlipCd);
      GetFldVar32('S_STRING10',sInputTyp);
      GetFldVar32('S_STRING11',sInsType);
      GetFldVar32('S_STRING12',sSetItem);
      GetFldVar32('S_STRING13',sInsType2);
      GetFldVar32('S_STRING14',sQty);
      GetFldVar32('S_STRING15',sFeeyn);
      GetFldVar32('S_STRING16',sTypecd);
      GetFldVar32('S_STRING17',sProdcode);
      GetFldVar32('S_STRING18',sProdsize);

      Result := GetRecordCnt32('S_STRING3');
      txFree32;
   end;
end;

// 모음(처치,수술,검사,재료) 상세항목 삭제
function HmdGrupdt.DeleteGroupDetail(sSetItem, sSetType: string; iSetSeqno,iSeqNo : integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;L_LONG1;L_LONG2');
   SetFldValue(0,[sSetItem,sSetType,iSetSeqno,iSeqNo]);
   if (txPutF('MD_GRUPD_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 모음 상세 입력
function HmdGrupdt.InputGroupDetail(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;L_LONG1;L_LONG2;L_LONG3');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sIUCond[i]),String(sSetItem[i]),String(sSetType[i]),String(sSetCode[i]),
                     String(sCodeName[i]),String(sEditId[i]),String(sEditIp[i]),Integer(iSetSeqno[i]),
                     Integer(iSeqNo[i]),Integer(iDispSeq[i])]);
   if (txPutF('MD_GRUPD_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 모음 상세 입력
function HmdGrupdt.InputGroupDetail2(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;L_LONG1;L_LONG2;L_LONG3;S_STRING7;S_STRING8');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sIUCond[i]),String(sSetItem[i]),String(sSetType[i]),String(sSetCode[i]),
                     String(sCodeName[i]),String(sEditId[i]),String(sEditIp[i]),Integer(iSetSeqno[i]),
                     Integer(iSeqNo[i]),Integer(iDispSeq[i]),String(sQty[i]),String(sInsType2[i])]);
   if (txPutF('MD_GRUPD_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdTemplt 	예문관리                                                      //
////////////////////////////////////////////////////////////////////////////////

// 예문 약속명 조회
function HmdTemplt.ListTemplet(sItem,sType : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2');
   SetFldValue(0,[sItem,sType]);
   if (txGetF('MD_TEMPL_L1')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iSetSeqno);
      GetFldVar('S_STRING3',sTitle);
      GetFldVar('S_STRING4',sContents);

      Result := GetRecordCnt('S_STRING3');
      txFree;
   end;
end;

// 예문 약속명 조회2
function HmdTemplt.ListTemplet2(sItem,sType : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2');
   SetFldValue(0,[sItem,sType]);
   if (txGetF('MD_TEMPL_L2')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iSetSeqno);
      GetFldVar('S_STRING3',sTitle);
      GetFldVar('S_STRING4',sContents);
      GetFldVar('S_STRING5',sContent2);
      GetFldVar('S_STRING6',sContent3);
      Result := GetRecordCnt('S_STRING3');
      txFree;
   end;
end;

// 예문입력
function HmdTemplt.InputTemplet(sItem,sType,sTitle,sContents,sEditId,sEditIp: string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6');
   SetFldValue(0,[sItem,sType,sTitle,sContents,sEditId,sEditIp]);
   if (txPutF('MD_TEMPL_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 예문입력2
function HmdTemplt.InputTemplet2(sItem,sType,sTitle,sContents,sEditId,sEditIp,sContent2,sContent3: string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8');
   SetFldValue(0,[sItem,sType,sTitle,sContents,sEditId,sEditIp,sContent2,sContent3]);
   if (txPutF('MD_TEMPL_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 예문 update
function HmdTemplt.UpdateTemplet(sItem, sType, sTitle, sContents, sEditId, sEditIp: string; iSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;L_LONG1');
   SetFldValue(0,[sItem,sType,sTitle,sContents,sEditId,sEditIp,iSeqno]);
   if (txPutF('MD_TEMPL_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 예문 update 2
function HmdTemplt.UpdateTemplet2(sItem, sType, sTitle, sContents, sEditId, sEditIp,sContent2,sContent3: string; iSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;L_LONG1');
   SetFldValue(0,[sItem,sType,sTitle,sContents,sEditId,sEditIp,sContent2,sContent3,iSeqno]);
   if (txPutF('MD_TEMPL_U2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;
// 예문삭제
function HmdTemplt.DeleteTemplet(sItem, sType: string; iSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;L_LONG1');
   SetFldValue(0,[sItem,sType,iSeqno]);
   if (txPutF('MD_TEMPL_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//(추가. 2003.03.29 이용언)
function HmdTemplt.WardEtcTmpSelect(Wardno, TeamNo : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[Wardno,Teamno]);
   if (txGetF('MD_TEMPL_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sContents);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdTEmplt.WardEtcTmpInsert(Wardno, TeamNo, Contents, Editid, Editip : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[Wardno, Teamno, Contents, Editid, Editip]);
   if (txPutF('MD_TEMPL_I3')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdSliptt 	처방코드분류                                                  //
////////////////////////////////////////////////////////////////////////////////

// 수가분류 트리
function HmdSliptt.ListSlipt(sType1,sLevel1,sSlip1,sSlip2: string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sLevel1,sSlip1,sSlip2]);
   if (txGetF32('MD_SLIPT_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sSlip1Cd);
      GetFldVar32('S_STRING2',sSlip2Cd);
      GetFldVar32('S_STRING3',sSlip3Cd);
      GetFldVar32('S_STRING4',sSlipNm);
      GetFldVar32('S_STRING5',sOrdname);
      GetFldVar32('S_STRING6',sCond);
      GetFldVar32('S_STRING7',sOrdgrp);
      GetFldVar32('S_STRING8',sOrdGrpNm);
      GetFldVar32('S_STRING9',sInputTyp);
      GetFldVar32('S_STRING10',sInsType);
      GetFldVar32('S_STRING11',sSetexyn);
      GetFldVar32('S_STRING12',sGroupyn);
      GetFldVar32('S_STRING13',sProdcode);
      GetFldVar32('S_STRING14',sProdsize);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

function HmdSliptt.Insert(sSlip1, sSlip2, sSlip3, sSlipNm,
                          sOrdGrp, sRsltType, s_EditId, s_EditIp : string;
                          iDispSeq: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_EDITID;S_EDITIP;L_LONG1');
   SetFldValue(0,[sSlip1, sSlip2, sSlip3, sSlipNm, sOrdGrp, sRsltType, s_EditId, s_EditIp, iDispSeq]);

   if (txPutF('MD_SLIPT_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdSliptt.ListSlipt3(sType1,sLevel1,sSlip1,sSlip2: string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sLevel1,sSlip1,sSlip2]);
   if (txGetF32('MD_SLIPT_L3')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1' ,sSlip1Cd);
      GetFldVar32('S_STRING2' ,sSlip2Cd);
      GetFldVar32('S_STRING3' ,sSlip3Cd);
      GetFldVar32('S_STRING4' ,sSlipNm);
      GetFldVar32('S_STRING5' ,sOrdname);
      GetFldVar32('S_STRING6' ,sCond);
      GetFldVar32('S_STRING7' ,sOrdgrp);
      GetFldVar32('S_STRING8' ,sOrdGrpNm);
      GetFldVar32('S_STRING9' ,sInputTyp);
      GetFldVar32('S_STRING10',sInstype);
      GetFldVar32('S_STRING11',sTxdrugyn);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdOffdrt   의사휴진일정                                                  //
////////////////////////////////////////////////////////////////////////////////

//휴진일정 조회
function HmdOffdrt.ListDrOff(sType1,sMedDept,sMedDr,FromDate,ToDate:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_TYPE2;S_TYPE3;S_STRING1;S_STRING2');
    SetFldValue(0,[sType1,sMedDept,sMedDr,FromDate,ToDate]);
    if (txGetF('MD_OFFDR_L1')) then begin
       GetFldVar('S_STRING1', sFromDate);
       GetFldVar('S_STRING2', sToDate);
       GetFldVar('S_STRING3', sOffResnNm);
       GetFldVar('S_STRING4', sRemark);
       GetFldVar('S_STRING5', sAMPMFLAG);
       GetFldVar('S_STRING6', sRoundyn);
       GetFldVar('S_STRING7', sTransdr);
       GetFldVar('S_STRING8', sTransnm);
       GetFldVar('S_STRING9', sLicno1);

       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;
// 의사 휴진일정 조회(2003.05.13) 이선규 추가
function HmdOffdrt.ListtotDrOff(FromDate,ToDate,meddept,meddr:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');

    SetFldValue(0,[FromDate,ToDate,meddept,meddr]);
    if (txGetF('MD_OFFDR_L3')) then
    begin
       GetFldVar('S_STRING1', sMedDept  );
       GetFldVar('S_STRING2', sMedDr	 );
       GetFldVar('S_STRING3', sFromDate );
       GetFldVar('S_STRING4', sToDate   );
       GetFldVar('S_STRING5', sOffResnNm);
       GetFldVar('S_STRING6', sRemark   );
       GetFldVar('S_STRING7', sAMPMFLAG );
       GetFldVar('S_STRING8', sRoundyn  );
       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

//휴진일정 달력표시를 위한 조회
function HmdOffdrt.ListOffDrDay(sMonth:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_TYPE2;S_TYPE3');
    SetFldValue(0,[sMonth,sMedDept,sMedDr]);
    if (txGetF('MD_OFFDR_L2')) then begin
       GetFldVar('S_STRING1', sFromDate);
       GetFldVar('S_STRING2', sToDate);
       GetFldVar('S_STRING3', sOffResn);

       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

function HmdOffdrt.InputDrOff(sMedDept,sMedDr,sFromDate,sToDate,sOffResn,sRemark,sEditId,sEditIp,sAMPMFLAG,sRoundyn,sTransdr,sLicno1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12');
   SetFldValue(0,[sMedDept,sMedDr,sFromDate,sToDate,sOffResn,sRemark, sEditId,sEditIp, sAMPMFLAG,sRoundyn,
                  sTransdr,sLicno1]);
   if (txPutF('MD_OFFDR_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//휴진일정 삭제
function HmdOffdrt.DeleteDrOff(sMedDept,sMedDr,sFromDate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0,[sMedDept,sMedDr,sFromDate]);
   if (txPutF('MD_OFFDR_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//휴진일정수정
function HmdOffdrt.UpdateDrOff(sMedDept,sMedDr,sFromDate,sRemark,sEditId,sEditIp,sTransdr,sLicno1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8');
   SetFldValue(0,[sMedDept,sMedDr,sFromDate,sRemark, sEditId,sEditIp,sTransdr,sLicno1]);
   if (txPutF('MD_OFFDR_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdOrdrct 	처방Reference                                                 //
////////////////////////////////////////////////////////////////////////////////

// SLIP코드로 찾기
function HmdOrdrct.SearchOrdrc(sType1, sType2, sType3: String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType1,sType2,sType3] );
   if (txGetF32('MD_ORDRC_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sOrdCd);
      GetFldVar32('S_STRING2',sSlipNm);
      GetFldVar32('S_STRING3',sOrdName);
      GetFldVar32('S_STRING4',sOrdgrp);
      GetFldVar32('S_STRING5',sSlipcd);
      GetFldVar32('S_STRING6',sInputtyp);
      GetFldVar32('S_STRING7',sInsType);
      GetFldVar32('S_STRING8',sProdcode);
      GetFldVar32('S_STRING9',sProdsize);
      GetFldVar32('S_STRING10',sCitem01);
      GetFldVar32('S_STRING11',sKitset);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


//처방명,Slip코드,약효군코드,처방코드로 처방코드 List SELECT
function HmdOrdrct.ListOrdCd(QryKind,Code1,code2,Code3: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[QryKind,Code1,code2,Code3] );

   //Tuxedo Service Call
   if (txGetF32('MD_ORDRC_L2')) then
   begin
      GetFldVar32('S_STRING1', sOrdCd   );  // 처방코드
      GetFldVar32('S_STRING2', sOrdName );  // 처방명
      GetFldVar32('S_STRING3', sdrugKind);  // 약품구분
      GetFldVar32('S_STRING4', sOrdGrp  );  // 처방분류
      GetFldVar32('S_STRING5', sSlipCd  );  // SLIP코드
      GetFldVar32('S_STRING6', sOrdYn   );  // 처방가능여부
      GetFldVar32('S_STRING7', sInputTyp);  // 입력구분
      GetFldVar32('S_STRING8', sOrdGrpNm);  // 처방분류명
      GetFldVar32('S_STRING9' ,sIgrdName);  // 약성분명
      GetFldVar32('S_STRING10',sSlipNm  );  // Slip대분류명
      GetFldVar32('S_STRING11',sDoseUnit);  // 포장단위
      GetFldVar32('S_STRING12',sQtyUnit );  // 함량단위
      //(추가.2002.11.19 이용언) SET 검사 여부
      GetFldVar32('S_STRING13',sSetexyn );
      GetFldVar32('S_STRING14',sGroupyn );
      // 추가 2008.09.30 김송주 주성분코드-> 유사성분 분류로 변경
      GetFldVar32('S_STRING15',sMaincd  );  // 유사성분 분류

      GetFldVar32('L_LONG1'  , iDispseq );  // 나열순서

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


//처방명,Slip코드,약효군코드,처방코드로 처방코드 List SELECT (병동 처치/재료)
function HmdOrdrct.ListOrdCd2(QryKind,Code1,code2,Code3: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[QryKind,Code1,code2,Code3] );

   //Tuxedo Service Call
   if (txGetF32('MD_ORDRC_L5')) then
   begin
      GetFldVar32('S_STRING1', sOrdCd   );  // 처방코드
      GetFldVar32('S_STRING2', sOrdName );  // 처방명
      GetFldVar32('S_STRING3', sdrugKind);  // 약품구분
      GetFldVar32('S_STRING4', sOrdGrp  );  // 처방분류
      GetFldVar32('S_STRING5', sSlipCd  );  // SLIP코드
      GetFldVar32('S_STRING6', sOrdYn   );  // 처방가능여부
      GetFldVar32('S_STRING7', sInputTyp);  // 입력구분
      GetFldVar32('S_STRING8', sOrdGrpNm);  // 처방분류명
      GetFldVar32('S_STRING9' ,sIgrdName);  // 약성분명
      GetFldVar32('S_STRING10',sSlipNm  );  // Slip대분류명
      GetFldVar32('L_LONG1'  , iDispseq );  // 나열순서

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//처방코드정보 SELECT
function HmdOrdrct.SelOrdCodeInfo(OrdCode: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[OrdCode] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDRC_S1')) then
   begin
     GetFldVar('S_STRING1',  sOrdcd   );       // 처방코드
     GetFldVar('S_STRING2',  sOrdName );       // 처방명
     GetFldVar('S_STRING3',  sOrdGrp  );       // 처방분류
     GetFldVar('S_STRING4',  sSlipCd  );       // SLIP코드
     GetFldVar('S_STRING5',  sOrdYn   );       // 처방가능여부
     GetFldVar('S_STRING6',  sCalyn   );       // 계산여부(외용약)(<--LAWCLS)
     GetFldVar('S_STRING7',  sDrugKind);       // 약품구분(<--GENCLS)
     GetFldVar('S_STRING8',  sDgijType);       // 약주사구분
     GetFldVar('S_STRING9',  sDetRoute);       // 상세투여경로
     GetFldVar('S_STRING10', sMethodCd);       // 용법코드
     GetFldVar('S_STRING11', sQtyunit );       // 함량단위
     GetFldVar('S_STRING12', sDoseunit);       // 기본투여단위
     GetFldVar('S_STRING13', sSetexYn );       // SET검사여부
     GetFldVar('S_STRING14', sRsvexmYn);       // 예약검사여부
     GetFldVar('S_STRING15', sDptrsvYn);       // 진료과예약여부
     GetFldVar('S_STRING16', sOpYn    );       // 수술장검사여부
     GetFldVar('S_STRING17', sSpcCode1);       // 검체코드1
     GetFldVar('S_STRING18', sSpcCode2);       // 검체코드2
     GetFldVar('S_STRING19', sRoomCode);       // 검사실코드
     GetFldVar('S_STRING20', sRsltType);       // 검사결과TYPE
     GetFldVar('S_STRING21', sRsltunit);       // 검사결과단위
     GetFldVar('S_STRING22', sPrexamYn);       // 진료전예약여부
     GetFldVar('S_STRING23', sOldCode );       // 구코드
     GetFldVar('S_STRING24', sExamtime);       // 검사소요시간
     GetFldVar('S_STRING25', sExamtext);       // 검사특기사항
     GetFldVar('S_STRING26', sFcrYn   );       // FCR검사여부
     GetFldVar('S_STRING27', sPortYn  );       // PORTABLE(이동)여부
     GetFldVar('S_STRING28', sOrdtxtYn);       // 임상소견필수입력여부
     GetFldVar('S_STRING29', sContYn  );       // 연속검사여부
     GetFldVar('S_STRING30', sPatguide);       // 환자가야할곳
     GetFldVar('S_STRING31', sExamDept);       // 검사/처치지시시행진료과
     GetFldVar('S_STRING32', sInsChkYn);       // 보험기준적용구분
     GetFldVar('S_STRING33', sInsType );       // 급여구분
     GetFldVar('S_STRING34', sPreactYn);       // 선실시여부
     GetFldVar('S_STRING35', sApplDate);       // 적용일자
     GetFldVar('S_STRING36', sEndDate );       // 종료일자
     GetFldVar('S_STRING37', sErYn    );       // 응급검사 가능여부
     GetFldVar('S_STRING38', sSpcDrYn );       // 선택진료(가능)여부
     GetFldVar('S_STRING39', sSpcDr   );       // 선택진료의사
     GetFldVar('S_STRING40', sSugaYn  );       // 수가해당여부
     GetFldVar('S_STRING41', sInputTyp);       // 입력구분
     GetFldVar('S_STRING42', sDrgOpYn );       // DRG수술처치여부
     GetFldVar('S_STRING43', sOutOdYn );       // 원외처방여부
     GetFldVar('S_STRING44', sExceptCd);       // 의약분업예외코드
     GetFldVar('S_STRING45', sExmTxtYn);       // 검사특기사항여부
     GetFldVar('S_STRING46', sChkQty  );       // 1일제한량
     GetFldVar('S_STRING47', sAbciNo  );       // 절대불가여부
     GetFldVar('S_STRING48', sDrugType);       // 약품구분(1=인슐린,9=일반)
     GetFldVar('S_STRING49', sTxDrugYn);       // 처치약제
     GetFldVar('S_STRING50', sTeethYn );       // 치식필수입력여부
     GetFldVar('S_STRING51', sGroupyn );
     GetFldVar('S_STRING52', sStatCd  );
     GetFldVar('S_STRING53', sSameCd  );
     GetFldVar('S_STRING54', sProdcode);       //물품코드. 20150105. kya
     GetFldVar('S_STRING55', sProdsize);       //규격. 20150105. kya

     GetFldVar('D_DOUBLE1',  iContQty );       // 함량
     GetFldVar('D_DOUBLE2',  iAdultQty);       // 성인상용량
     GetFldVar('D_DOUBLE3',  iChildQty);       // 소아상용량
     GetFldVar('S_NUMVAL4',  iSeqNo   );       // 순번

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//처방코드정보 SELECT
function HmdOrdrct.SelTxDrugInfo(sType1: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[sType1]);

   //Tuxedo Service Call
   if (txGetF32('MD_ORDRC_L4')) then
   begin
     GetFldVar32('S_STRING1',  sOrdcd   );       // 처방코드
     GetFldVar32('S_STRING2',  sOrdName );       // 처방명
     GetFldVar32('S_STRING3',  sOrdGrp  );       // 처방분류
     GetFldVar32('S_STRING4',  sSlipCd  );       // SLIP코드
     GetFldVar32('S_STRING5',  sOrdYn   );       // 처방가능여부
     GetFldVar32('S_STRING6',  sCalyn   );       // 계산여부(외용약)(<--LAWCLS)
     GetFldVar32('S_STRING7',  sDrugKind);       // 약품구분(<--GENCLS)
     GetFldVar32('S_STRING8',  sDgijType);       // 약주사구분
     GetFldVar32('S_STRING9',  sDetRoute);       // 상세투여경로
     GetFldVar32('S_STRING10', sMethodCd);       // 용법코드
     GetFldVar32('S_STRING11', sQtyunit );       // 함량단위
     GetFldVar32('S_STRING12', sDoseunit);       // 기본투여단위
     GetFldVar32('S_STRING13', sSetexYn );       // SET검사여부
     GetFldVar32('S_STRING14', sRsvexmYn);       // 예약검사여부
     GetFldVar32('S_STRING15', sDptrsvYn);       // 진료과예약여부
     GetFldVar32('S_STRING16', sOpYn    );       // 수술장검사여부
     GetFldVar32('S_STRING17', sSpcCode1);       // 검체코드1
     GetFldVar32('S_STRING18', sSpcCode2);       // 검체코드2
     GetFldVar32('S_STRING19', sRoomCode);       // 검사실코드
     GetFldVar32('S_STRING20', sRsltType);       // 검사결과TYPE
     GetFldVar32('S_STRING21', sRsltunit);       // 검사결과단위
     GetFldVar32('S_STRING22', sPrexamYn);       // 진료전예약여부
     GetFldVar32('S_STRING23', sOldCode );       // 구코드
     GetFldVar32('S_STRING24', sExamtime);       // 검사소요시간
     GetFldVar32('S_STRING25', sExamtext);       // 검사특기사항
     GetFldVar32('S_STRING26', sFcrYn   );       // FCR검사여부
     GetFldVar32('S_STRING27', sPortYn  );       // PORTABLE(이동)여부
     GetFldVar32('S_STRING28', sOrdtxtYn);       // 임상소견필수입력여부
     GetFldVar32('S_STRING29', sContYn  );       // 연속검사여부
     GetFldVar32('S_STRING30', sPatguide);       // 환자가야할곳
     GetFldVar32('S_STRING31', sExamDept);       // 검사/처치지시시행진료과
     GetFldVar32('S_STRING32', sInsChkYn);       // 보험기준적용구분
     GetFldVar32('S_STRING33', sInsType );       // 급여구분
     GetFldVar32('S_STRING34', sPreactYn);       // 선실시여부
     GetFldVar32('S_STRING35', sApplDate);       // 적용일자
     GetFldVar32('S_STRING36', sEndDate );       // 종료일자
     GetFldVar32('S_STRING37', sErYn    );       // 응급검사 가능여부
     GetFldVar32('S_STRING38', sSpcDrYn );       // 선택진료(가능)여부
     GetFldVar32('S_STRING39', sSpcDr   );       // 선택진료의사
     GetFldVar32('S_STRING40', sSugaYn  );       // 수가해당여부
     GetFldVar32('S_STRING41', sInputTyp);       // 입력구분
     GetFldVar32('S_STRING42', sDrgOpYn );       // DRG수술처치여부
     GetFldVar32('S_STRING43', sOutOdYn );       // 원외처방여부
     GetFldVar32('S_STRING44', sExceptCd);       // 의약분업예외코드
     GetFldVar32('S_STRING45', sExmTxtYn);       // 검사특기사항여부
     GetFldVar32('S_STRING46', sChkQty  );       // 1일제한량
     GetFldVar32('S_STRING47', sAbciNo  );       // 절대불가여부
     GetFldVar32('D_DOUBLE1',  iContQty );       // 함량
     GetFldVar32('D_DOUBLE2',  iAdultQty);       // 성인상용량
     GetFldVar32('D_DOUBLE3',  iChildQty);       // 소아상용량
     GetFldVar32('S_NUMVAL4',  iSeqNo   );       // 순번
     GetFldVar32('S_STRING48', sProdcode  );     // 물품코드
     GetFldVar32('S_STRING49', sProdsize  );     // 규격

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 처방코드 수가조회
function HmdOrdrct.GetPrice(OrdCd: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[OrdCd] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDRC_S2')) then
   begin
      GetFldVar('D_DOUBLE1', iPriceIns );  // 의보수가
      GetFldVar('D_DOUBLE2', iPriceGen );  // 일반수가
      GetFldVar('D_DOUBLE3', iPriceGen2 );  // 일반수가2(가산율 계산안된 순수 일반수가), KimDaeYong 2016-10-07

      //조회건수 return
      Result := GetRecordCnt('D_DOUBLE1');
      txFree;
   end;
end;

// 처방수가그룹 조회
function HmdOrdrct.GetGroupList(OrdCd, sType: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[OrdCd,sType] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDRC_L3')) then
   begin
      GetFldVar('S_STRING1', sOrdCd   );  // 처방코드
      GetFldVar('S_STRING2', sOrdName );  // 처방명
      GetFldVar('S_STRING3', sQtyunit );  // 수량/횟수
      GetFldVar('S_STRING4', sSlipCd  );  // Slip코드
      GetFldVar('S_STRING5', sOrdYn   );  // 처방가능여부

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//처방코드 기준치정보 SELECT
function HmdOrdrct.SelOrdCodeInfo2(OrdCode: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[OrdCode] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDRC_S3')) then
   begin
      GetFldVar('S_STRING1', sExamtext);       // 검사특기사항

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
//제한항균제 승인의뢰 진료과별 기준 조회
function HmdOrdrct.SelAntOrdDept(OrdCode,LimitType,MedDept: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[OrdCode,LimitType,MedDept] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDRC_S4')) then
   begin
      GetFldVar('S_STRING1',  sAntChkyn);  //승인의뢰여부

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//(추가. 2002.11.18 이용언) 처방 마스터 <> 수가 마스터 처방가능 여부 체크
function HmdOrdrct.CheckOrdYn(Ordcd, Orddate, sGubun :String): Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[Ordcd,Orddate,sGubun]);

   if (txGetF('MD_ORDRC_S5')) then
   begin
      GetFldVar('S_STRING1',sOrdyn);
      GetFldVar('S_STRING2',sInsinfo);

      Result := GetReCordCnt('S_STRING1');
      txfree;
   end;
end;

// 추가 성분코드 조회
function HmdOrdrct.GetIgrdcode(Ordcd:String): Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_CODE1');
   SetFldValue(0,[Ordcd]);

   if (txGetF('MD_ORDRC_L6')) then
   begin
      GetFldVar('S_STRING1',sIgrdcode);

      Result := GetReCordCnt('S_STRING1');
      txfree;
   end;
end;

function HmdOrdrct.ListDrugType(sType1:String): Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_CODE1');
   SetFldValue(0,[sType1]);

   if (txGetF('MD_ORDRC_L7')) then
   begin
      GetFldVar('S_STRING1',sOrdcd);
      GetFldVar('S_STRING2',sDrugname);

      Result := GetReCordCnt('S_STRING1');
      txfree;
   end;
end;

function HmdOrdrct.SelEfccode(OrdCode:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_CODE1');
   SetFldValue(0,[OrdCode]);

   if (txGetF('MD_ORDRC_L8')) then
   begin
      GetFldVar('S_STRING1',sEfccodel);
      GetFldVar('S_STRING2',sEfccodem);
      GetFldVar('S_STRING3',sEfccodes);

      Result := GetReCordCnt('S_STRING1');
      txfree;
   end;
end;

function HmdOrdrct.SelSyrupYn(sType1:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1');
   SetFldValue(0,[sType1]);

   if (txGetF('MD_ORDRC_S7')) then
   begin
      GetFldVar('S_STRING1',sSyrupYn);

      Result := GetReCordCnt('S_STRING1');
      txfree;
   end;
end;

//처치재료입력에 추가. kya. 20140917.
function HmdOrdrct.ORDRC_S8(Ordcd :String): Integer;
begin
   Result := -1;

   txAlloc32;

   SetFldName32 ('S_TYPE1');
   SetFldValue32(0,[Ordcd]);

   if (txGetF32('MD_ORDRC_S8')) then
   begin
      GetFldVar32('S_STRING1',sCustname);
      GetFldVar32('S_STRING2',sProdsize);
      GetFldVar32('S_STRING3',sProdcode);
      GetFldVar32('S_STRING4',sCustcode);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//바코드처방추가. 20141224.KYA.
function HmdOrdrct.SearchOrdrc1(sType1, sType2, sType3: String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType1,sType2,sType3] );
   if (txGetF32('MD_ORDRC_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sOrdCd);
      GetFldVar32('S_STRING2',sSlipNm);
      GetFldVar32('S_STRING3',sOrdName);
      GetFldVar32('S_STRING4',sOrdgrp);
      GetFldVar32('S_STRING5',sSlipcd);
      GetFldVar32('S_STRING6',sInputtyp);
      GetFldVar32('S_STRING7',sInsType);
      GetFldVar32('S_STRING8',sProdcode); 
      GetFldVar32('S_STRING9',sProdsize);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdNotift 	Noti.                                                         //
////////////////////////////////////////////////////////////////////////////////

// Noti. 유무 Check
function HmdNotift.NotiList(sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
    Result := -1;
    txAlloc32;
    SetFldNamE32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
    SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);
    if (txGetF32('MD_NOTIF_L1')) then begin
       GetFldVar32('L_CNT1',   iCnt);
       GetFldVar32('L_LONG1',  iSeqno);
       GetFldVar32('S_CODE1',  sRecvid);
       GetFldVar32('S_CODE2',  sNotiType);
       GetFldVar32('S_CODE3',  sNotiDate);
       GetFldVar32('S_CODE4',  sTitle);
       GetFldVar32('S_CODE5',  sContents);
       GetFldVar32('S_CODE6',  sRecvDate);
       GetFldVar32('S_CODE7',  sAnswerYn);
       GetFldVar32('S_CODE8',  sErYn);
       GetFldVar32('S_CODE9',  sSendId);
       GetFldVar32('S_CODE10', sUserName);
       GetFldVar32('S_CODE11', sRecvname);
       GetFldVar32('S_CODE12', sSendDate);
       Result := GetRecordCnt32('S_CODE1');
       txFree32;
    end;
end;

// Noti. 유무 Check
function HmdNotift.NotiList2(sType1,sType2,sType3,sType4,sType5,sType6:string):Integer;
begin
    Result := -1;
    txAlloc32;
    SetFldNamE32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
    SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
    if (txGetF32('MD_NOTIF_L3')) then begin
       GetFldVar32('L_CNT1',   iCnt     );
       GetFldVar32('L_LONG1',  iSeqno   );
       GetFldVar32('S_CODE1',  sRecvid  );
       GetFldVar32('S_CODE2',  sNotiType);
       GetFldVar32('S_CODE3',  sNotiDate);
       GetFldVar32('S_CODE4',  sTitle   );
       GetFldVar32('S_CODE5',  sContents);
       GetFldVar32('S_CODE6',  sRecvDate);
       GetFldVar32('S_CODE7',  sAnswerYn);
       GetFldVar32('S_CODE8',  sErYn    );
       GetFldVar32('S_CODE9',  sSendId  );
       GetFldVar32('S_CODE10', sUserName);
       GetFldVar32('S_CODE11', sRecvname);
       GetFldVar32('S_CODE12', sSendDate);

       GetFldVar32('S_STRING1' , sPatno    );
       GetFldVar32('S_STRING2' , sOrddate  );
       GetFldVar32('S_STRING3' , sOrdseqno );
       GetFldVar32('S_STRING4' , sMeddate  );
       GetFldVar32('S_STRING5' , sMedtime  );
       GetFldVar32('S_STRING6' , sPatsect  );
       GetFldVar32('S_STRING7' , sMeddept  );
       GetFldVar32('S_STRING8' , sChadr    );
       GetFldVar32('S_STRING9' , sOrddr    );
       GetFldVar32('S_STRING10', sConsdept );
       GetFldVar32('S_STRING11', sConsdr   );
       GetFldVar32('S_STRING12', sRespdate );
       GetFldVar32('S_STRING13', sRespdr   );
       GetFldVar32('S_STRING14', sCallyn   );
       GetFldVar32('S_STRING15', sPatname  );
       GetFldVar32('S_STRING16', sDeptnm   );
       GetFldVar32('S_STRING17', sReqdeptnm);
       GetFldVar32('S_STRING18', sOrddrnm  );
       GetFldVar32('S_STRING19', sConsdrnm );
       GetFldVar32('S_STRING20', sRespdrnm );
       GetFldVar32('S_STRING21', sWardno   );
       GetFldVar32('S_STRING22', sBirtdate );
       GetFldVar32('S_STRING23', sSex      );
       GetFldVar32('S_STRING24', sRoomno   );
       GetFldVar32('S_STRING25', sHopedate );
       GetFldVar32('S_STRING26', sOrdname  );
       GetFldVar32('S_STRING27', sConstype );
       GetFldVar32('S_STRING28', sOrdcd    );

       Result := GetRecordCnt32('S_CODE1');
       txFree32;
    end;
end;

// Noti. 내용
function HmdNotift.NotiSelect(sType1,sType2:string;llong1:integer):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_TYPE2;L_LONG1');
    SetFldValue(0,[sType1,sType2,llong1]);
    if (txGetF('MD_NOTIF_S1')) then begin
       GetFldVar('L_LONG1',  iSeqno   );
       GetFldVar('S_CODE1',  sRecvid  );
       GetFldVar('S_CODE2',  sNotiType);
       GetFldVar('S_CODE3',  sNotiDate);
       GetFldVar('S_CODE4',  sTitle   );
       GetFldVar('S_CODE5',  sContents);
       GetFldVar('S_CODE6',  sRecvDate);
       GetFldVar('S_CODE7',  sAnswerYn);
       GetFldVar('S_CODE8',  sErYn    );
       GetFldVar('S_CODE9',  sSendId  );
       GetFldVar('S_CODE10', sUserName);
       GetFldVar('S_CODE11', sRecvname);
       GetFldVar('S_CODE12', sSendDate);
       Result := GetRecordCnt('S_CODE1');
       txFree;
    end;
end;

// Noti. 작성
function HmdNotift.SendNoti(sRecvID,sNotiType,sTitle,sContents,sErYn,sAnswerYn,sEditId,sEditIp,sDeptYn,sLocate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10');
   SetFldValue(0,[sRecvID,sNotiType,sTitle,sContents,sErYn,sAnswerYn,sEditId,sEditIp,sDeptYn,sLocate]);
   if (txPutF('MD_NOTIF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 수신삭제여부 update
function HmdNotift.UpdateRecv(Cnt: integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;L_LONG1');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sType1[i]),String(sRecvID[i]),String(sNotiDate[i]),String(sEditId[i]),
                     String(sEditIp[i]),Integer(iSeqNo[i])]);
   if (txPutF('MD_NOTIF_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

{
// 수신여부 update
function HmdNotift.UpdateAcceptNoti(Cnt: integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;L_LONG1');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sRecvID[i]),String(sNotiDate[i]),String(sEditId[i]),
                     String(sEditIp[i]),Integer(iSeqNo[i])]);
   if (txPutF('MD_NOTIF_U2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;
}

////////////////////////////////////////////////////////////////////////////////
//  HmdUsrent 	개인환경정보                                                   //
////////////////////////////////////////////////////////////////////////////////

/// 개인 환경정보 조회
function HmdUsrent.SelectUserInfo(sEmpNo:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldNamE('S_STRING1');
   SetFldValue(0,[sEmpNo]);

   if (txGetF('MD_USREN_S1')) then
   begin
       GetFldVar('S_STRING2',  sMedDept );
       GetFldVar('S_STRING3',  sWardNo1 );
       GetFldVar('S_STRING4',  sSort    );
       GetFldVar('S_STRING5',  sSpeedBtn);
       GetFldVar('S_STRING6',  sInscfmYn);
       GetFldVar('S_STRING7',  sNextScr );
       GetFldVar('S_STRING8',  sPatSel  );
       GetFldVar('S_STRING9',  sDiagSel );
       GetFldVar('S_STRING10', sWeightyn);
       GetFldVar('S_STRING11', sOrdfont );
       GetFldVar('S_STRING12', sPrefont );
       GetFldVar('S_STRING13', sSetfont );
       GetFldVar('S_STRING14', sConsltyn);
       GetFldVar('S_STRING15', sPatselyn);
       GetFldVar('S_STRING16', sPreordyn);
       GetFldVar('S_STRING17', sOutOrdyn);
       GetFldVar('S_STRING18', sResltopt);
       GetFldVar('S_STRING19', sSelmm   );
       GetFldVar('S_STRING20', sRsvselfg);
       GetFldVar('S_STRING21', sRefresh );
       GetFldVar('S_STRING22' ,sCelledit);
       GetFldVar('S_STRING23' ,sOrdcopy );
       GetFldVar('S_STRING24' ,sDrugprt );
       GetFldVar('S_STRING25' ,sDrugunit);
       GetFldVar('S_STRING26', sChart1  );
       GetFldVar('S_STRING27', sChart2  );

       Result := GetRecordCnt('S_STRING5');
       txFree;
    end;
end;

// 개인 환경정보 입력
function HmdUsrent.InputUserInfo(Cnt:Integer;sType1:String):Integer;
var
   i:Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;L_LONG1;L_LONG2;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;'+
              'S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;'+
              'S_STRING27;S_STRING28;S_STRING29;S_STRING30');

   for i:=0 to Cnt-1 do
   begin
      SetFldValue(i,[sType1,String(sEmpNo[i]),String(sMedDept[i]),String(sWardNo1[i]),String(sWardNo2[i]),
                     String(sSort[i]),String(sSpeedBtn[i]),String(sInscfmYn[i]),String(sNextScr[i]),
                     String(sPatSel[i]),String(sDiagSel[i]),String(sEditId[i]),String(sEditIp[i]),
                     Integer(iDays[i]),Integer(iCounts[i]),String(sWeightyn[i]),String(sOrdFont[i]),
                     String(sPreFont[i]),String(sSetFont[i]),String(sConsltyn[i]),String(sPatselyn[i]),
                     String(sPreordyn[i]),String(sOutordyn[i]),String(sResltopt[i]),String(sSelmm[i]),String(sRsvselfg[i]),String(sRefresh[i]),
                     String(sCelledit[i]),String(sOrdcopy[i]),String(sDrugprt[i]),String(sDrugUnit[i]),
                     String(sChart1[i]),String(sChart2[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_USREN_I1')) then
   begin 
      Result := 1;
      txFree;
   end;
end;

function HmdUsrent.UpdateUserFont(EmpNo,OrdFont,PreFont,SetFont,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[EmpNo,OrdFont,PreFont,SetFont,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_USREN_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdActtct 	투약시간                                                      //
////////////////////////////////////////////////////////////////////////////////

// 용법별 투약시간 조회
function HmdActtct.ListMedAct(sType1,sType2:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_TYPE2');
    SetFldValue(0,[sType1,sType2]);
    if (txGetF('MD_ACTTC_L1')) then
    begin
       GetFldVar('S_STRING1', sAbbr);
       GetFldVar('S_STRING2', sMethodcd);
       GetFldVar('S_STRING3', sDgijnm);
       GetFldVar('S_STRING4', sActtime);
       GetFldVar('S_STRING5', sCount1);

       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

// 용법별 투약시간
function HmdActtct.InsertMedAct(Cnt: integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;L_LONG1');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sWardNo[i]),String(sMethodCd[i]),String(sActTime[i]),String(sEditId[i]),String(sEditIp[i]),Integer(iActBasdt[i])]);
   if (txPutF('MD_ACTTC_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdActtct.DeleteMedAct(sType1,sType2: String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2]);
   if (txPutF('MD_ACTTC_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//     	        예약기준정보                                                  //
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//              예약기준정보상세                                              //
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//     	        예약정보생성                                                  //
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//  HmdMcomct 	진료공통코드                                                  //
////////////////////////////////////////////////////////////////////////////////

// 공통코드 search (같이 쓰세요) -> 서용 작성
function HmdMcomct.ListComCd(sType,Comcd1,Comcd2,Comcd3:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_CODE1;S_CODE2;S_CODE3');
    SetFldValue(0,[sType,Comcd1,Comcd2,Comcd3]);
    if (txGetF('MD_MCOMC_L1')) then
    begin
       GetFldVar('L_CNT1',     iCitem06);
       GetFldVar('L_CNT2',     iCitem07);
       GetFldVar('L_CNT3',     iCitem08);
       GetFldVar('L_CNT4',     iCitem09);
       GetFldVar('L_CNT5',     iCitem10);
       GetFldVar('L_SEQNO1',   iDispseq);
       GetFldVar('S_STRING1',  sComcd1);
       GetFldVar('S_STRING2',  sComcd2);
       GetFldVar('S_STRING3',  sComcd3);
       GetFldVar('S_STRING4',  sComcdnm1);
       GetFldVar('S_STRING5',  sComcdnm2);
       GetFldVar('S_STRING6',  sComcdnm3);
       GetFldVar('S_STRING7',  sCitem01);
       GetFldVar('S_STRING8',  sCitem02);
       GetFldVar('S_STRING9',  sCitem03);
       GetFldVar('S_STRING10', sCitem04);
       GetFldVar('S_STRING11', sCitem05);
       GetFldVar('S_STRING12', sCitem11);
       GetFldVar('S_STRING13', sCitem12);
       GetFldVar('S_STRING14', sDeldate);
       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdSchbmt   의사진료일정기준정보                                          //
////////////////////////////////////////////////////////////////////////////////

// 기준 진료일정 읽어오기
function HmdSchbmt.ListBasicSchedule(sMedDept,sMedDr:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_STRING1;S_STRING2');
    SetFldValue(0,[sMedDept,sMedDr]);
    if (txGetF('MD_SCHBM_L1')) then
    begin
       GetFldVar('L_LONG1',   iTpSeqno);
       GetFldVar('S_STRING3', sTypeName);
       GetFldVar('S_STRING4', sAmStTm);
       GetFldVar('S_STRING5', sAmEdTm);
       GetFldVar('S_STRING6', sAmTerm);
       GetFldVar('L_LONG2',   iAmFstCnt);
       GetFldVar('L_LONG3',   iAmReCnt);
       GetFldVar('L_LONG4',   iAmTotCnt);
       GetFldVar('S_STRING7', sPmStTm);
       GetFldVar('S_STRING8', sPmEdTm);
       GetFldVar('S_STRING9', sPmTerm);
       GetFldVar('L_LONG5',   iPmFstCnt);
       GetFldVar('L_LONG6',   iPmReCnt);
       GetFldVar('L_LONG7',   iPmTotCnt);
       GetFldVar('S_STRING10',sRsvYN);
       GetFldVar('S_STRING11',sComments);

       Result := GetRecordCnt('L_LONG1');
       txFree;
    end;
end;

// 기준 진료일정 저장하기
function HmdSchbmt.InputBasicSchedule(sMedDept,sMedDr,sTypeName,sTypeComment,sEditId,sEditIp:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6');
   SetFldValue(0,[sMedDept,sMedDr,sTypeName,sTypeComment,sEditId,sEditIp]);
   if (txPutF('MD_SCHBM_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


// 기준 진료일정 수정하기
function HmdSchbmt.UpdateBasicSchedule(sType1,sMedDept,sMedDr,sTypeName,sAmStTm,sAmEdTm,sAmTerm,
                                       sPmStTm,sPmEdTm,sPmTerm,sEditId,sEditIp,sRsvYN,sComments:String;
                                       iTpSeqno,iAmFstCnt,iAmReCnt,iAmTotCnt,iPmFstCnt,
                                       iPmReCnt,iPmTotCnt:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;' +
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5;L_LONG6;L_LONG7');
   SetFldValue(0,[sType1,sMedDept,sMedDr,sTypeName,sAmStTm,sAmEdTm,sAmTerm,sPmStTm,sPmEdTm,sPmTerm,
                  sEditId,sEditIp,sRsvYN,sComments,iTpSeqno,iAmFstCnt,iAmReCnt,iAmTotCnt,iPmFstCnt,iPmReCnt,iPmTotCnt]);
   if (txPutF('MD_SCHBM_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 기준 진료일정 삭제하기
function HmdSchbmt.DeleteBasicSchedule(sMedDept,sMedDr:String;iTpSeqno:integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;L_LONG1');
   SetFldValue(0,[sMedDept,sMedDr,iTpSeqno]);
   if (txPutF('MD_SCHBM_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 기준 클리닉일정 읽어오기
function HmdSchbmt.ListBasicClinicSchedule(sMedDept,sMedDr:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_STRING1;S_STRING2');
    SetFldValue(0,[sMedDept,sMedDr]);
    if (txGetF('MD_SCHCM_L1')) then
    begin
       GetFldVar('L_LONG1',   iTpSeqno);
       GetFldVar('S_STRING3', sTypeName);
       GetFldVar('S_STRING4', sAmStTm);
       GetFldVar('S_STRING5', sAmEdTm);
       GetFldVar('S_STRING6', sAmTerm);
       GetFldVar('L_LONG2',   iAmFstCnt);
       GetFldVar('L_LONG3',   iAmReCnt);
       GetFldVar('L_LONG4',   iAmTotCnt);
       GetFldVar('S_STRING7', sPmStTm);
       GetFldVar('S_STRING8', sPmEdTm);
       GetFldVar('S_STRING9', sPmTerm);
       GetFldVar('L_LONG5',   iPmFstCnt);
       GetFldVar('L_LONG6',   iPmReCnt);
       GetFldVar('L_LONG7',   iPmTotCnt);
       Result := GetRecordCnt('L_LONG1');
       txFree;
    end;
end;

// 기준 클리닉일정 저장하기
function HmdSchbmt.InputBasicClinicSchedule(sMedDept,sMedDr,sTypeName,sEditId,sEditIp:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5');
   SetFldValue(0,[sMedDept,sMedDr,sTypeName,sEditId,sEditIp]);
   if (txPutF('MD_SCHCM_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//기준 클리닉 일정 수정하기
function HmdSchbmt.UpdateBasicClinicSchedule(sType1,sMedDept,sMedDr,sTypeName,sAmStTm,sAmEdTm,sAmTerm,
                                       sPmStTm,sPmEdTm,sPmTerm,sEditId,sEditIp:String;
                                       iTpSeqno,iAmFstCnt,iAmReCnt,iAmTotCnt,iPmFstCnt,
                                       iPmReCnt,iPmTotCnt:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;' +
              'S_STRING9;S_STRING10;S_STRING11;L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5;L_LONG6;L_LONG7');
   SetFldValue(0,[sType1,sMedDept,sMedDr,sTypeName,sAmStTm,sAmEdTm,sAmTerm,sPmStTm,sPmEdTm,sPmTerm,
                  sEditId,sEditIp,iTpSeqno,iAmFstCnt,iAmReCnt,iAmTotCnt,iPmFstCnt,iPmReCnt,iPmTotCnt]);
   if (txPutF('MD_SCHCM_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 기준 클리닉 일정 삭제하기
function HmdSchbmt.DeleteBasicClinicSchedule(sMedDept,sMedDr:String;iTpSeqno:integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;L_LONG1');
   SetFldValue(0,[sMedDept,sMedDr,iTpSeqno]);
   if (txPutF('MD_SCHCM_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdSchbdt   의사진료일정기준정보상세                                      //
////////////////////////////////////////////////////////////////////////////////

function HmdSchbdt.ListScheduleDetail(sType1,sType2,sType3,sType4:String;lType1:integer):Integer;
begin
    SetFldNamE('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;L_CNT1');
    Result := -1;
    txAlloc;
    SetFldValue(0,[sType1,sType2,sType3,sType4,lType1]);
    if (txGetF('MD_SCHBD_L1')) then
    begin
       GetFldVar('L_LONG1', iFstCnt);
       GetFldVar('L_LONG2', iReCnt);
       GetFldVar('L_LONG3', iTotCnt);
       GetFldVar('L_LONG4', iAMCnt);
       GetFldVar('L_LONG5', iPMCnt);
       GetFldVar('S_STRING1', sDow);
       GetFldVar('S_STRING3', sExamtm);
       GetFldVar('S_STRING2', sDownm);
       Result := GetRecordCnt('L_LONG1');
       txFree;
    end;
end;

// 멀티로 기준상세를 입력
function HmdSchbdt.InputMultiSchedule(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;' +
              'S_STRING7;S_STRING8;S_STRING9;L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sDow[i]),String(sExamTm[i]),
                  String(sEditId[i]), String(sEditIp[i]),String(sRsvYN[i]),String(sComments[i]),String(sAMPMFlag[i]),
                  Integer(iTpSeqno[i]),Integer(iSeqno[i]),Integer(iFstCnt[i]),Integer(iReCnt[i]),Integer(iTotCnt[i])]);
   if (txPutF('MD_SCHBD_I1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;

// 기준상세를 입력
function HmdSchbdt.InputSchedule(sType1,sMedDept,sMedDr,sDow,sExamTm,sEditId,sEditIp,sRsvYN,sAMPMFlag:String;
                                 iTpSeqno,iFstCnt,iReCnt,iTotCnt:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;' +
              'L_LONG1;L_LONG2;L_LONG3;L_LONG4');
   SetFldValue(0,[sType1,sMedDept,sMedDr,sDow,sExamTm,sEditId,sEditIp,sRsvYN,sAMPMFlag,
                  iTpSeqno,iFstCnt,iReCnt,iTotCnt]);
   if (txPutF('MD_SCHBD_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


// 기준상세를 요일별로 삭제
//function HmdSchbdt.DeleteWeek(sType1,sMedDept,sMedDr,sDow,sExamTm:String;iTpSeqno:integer):Integer;
function HmdSchbdt.DeleteWeek(cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;L_LONG1');

   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sType1[i]),String(sMedDept[i]),String(sMedDr[i]),
                    String(sDow[i]),String(sExamTm[i]), Integer(iTpSeqno[i])]);
   end;

   if (txPutF('MD_SCHBD_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//Clinic 스케쥴조회
function HmdSchbdt.ListClinicScheduleDetail(sType1,sType2,sType3,sType4:String;lType1:integer):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;L_CNT1');
    SetFldValue(0,[sType1,sType2,sType3,sType4,lType1]);
    if (txGetF('MD_SCHCD_L1')) then
    begin
       GetFldVar('L_LONG1', iFstCnt);
       GetFldVar('L_LONG2', iReCnt);
       GetFldVar('L_LONG3', iTotCnt);
       GetFldVar('S_STRING1', sDow);
       GetFldVar('S_STRING2', sDownm);
       GetFldVar('S_STRING3', sExamtm);
       Result := GetRecordCnt('L_LONG1');
       txFree;
    end;
end;

//Clinic 스케쥴 입력
function HmdSchbdt.InputMultiClinicSchedule(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;' +
              'L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sDow[i]),String(sExamTm[i]),
                  String(sEditId[i]), String(sEditIp[i]),Integer(iTpSeqno[i]),Integer(iSeqno[i]),
                  Integer(iFstCnt[i]),Integer(iReCnt[i]),Integer(iTotCnt[i])]);
   if (txPutF('MD_SCHCD_I1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;

//Clinic 스케쥴 한줄 추가
function HmdSchbdt.InputClinicSchedule(sType1,sMedDept,sMedDr,sDow,sExamTm,sEditId,sEditIp:String;
                                 iTpSeqno,iFstCnt,iReCnt,iTotCnt:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;' +
              'L_LONG1;L_LONG2;L_LONG3;L_LONG4');
   SetFldValue(0,[sType1,sMedDept,sMedDr,sDow,sExamTm,sEditId,sEditIp,
                  iTpSeqno,iFstCnt,iReCnt,iTotCnt]);
   if (txPutF('MD_SCHCD_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// Clinic 일정삭제
function HmdSchbdt.DeleteClinicWeek(sType1,sMedDept,sMedDr,sDow,sExamTm:String;iTpSeqno:integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;L_LONG1');
   SetFldValue(0,[sType1,sMedDept,sMedDr,sDow,sExamTm,iTpSeqno]);
   if (txPutF('MD_SCHCD_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdSchdrt   의사진료일정                                                  //
////////////////////////////////////////////////////////////////////////////////

// 의사진료일정 월별 예약현황 조회
function HmdSchdrt.ScheduleMonth(MedDept,MedDr,MedMonth,sType:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');  //진료과;진료의;진료월
   SetFldValue(0,[MedDept,MedDr,MedMonth,sType] );

   //Tuxedo Service Call
   if (txGetF('MD_SCHDR_L1')) then
   begin
      GetFldVar('S_STRING1', sMedDate);  // 진료예정일자
      GetFldVar('S_STRING2', sAMRsvYN);    // 타과예약가능여부
      GetFldVar('S_STRING3', sPMRsvYN);    // 타과예약가능여부
      GetFldVar('S_STRING4', sAMComments);    // Type명에 대한 Comments
      GetFldVar('S_STRING5', sPMComments);    // Type명에 대한 Comments

      GetFldVar('L_LONG1'  , iAmFstCnt );  // 초진가능인원
      GetFldVar('L_LONG2'  , iAmReCnt  );  // 재진가능인원
      GetFldVar('L_LONG3'  , iAmTotCnt );  // 총가능인원
      GetFldVar('L_LONG4'  , iAmOFstCnt);  // 최초초진가능인원
      GetFldVar('L_LONG5'  , iAmOReCnt );  // 최초재진가능인원
      GetFldVar('L_LONG6'  , iAmOTotCnt);  // 최초총가능인원
      GetFldVar('L_LONG7'  , iAmRsvfCnt);  // 초진예약인원
      GetFldVar('L_LONG8'  , iAmRsvrCnt);  // 재진예약인원
      GetFldVar('L_LONG9'  , iAmRsvtCnt);  // 총예약인원

      GetFldVar('L_LONG10'  , iPmFstCnt );  // 초진가능인원
      GetFldVar('L_LONG11'  , iPmReCnt  );  // 재진가능인원
      GetFldVar('L_LONG12'  , iPmTotCnt );  // 총가능인원
      GetFldVar('L_LONG13'  , iPmOFstCnt);  // 최초초진가능인원
      GetFldVar('L_LONG14'  , iPmOReCnt );  // 최초재진가능인원
      GetFldVar('L_LONG15'  , iPmOTotCnt);  // 최초총가능인원
      GetFldVar('L_LONG16'  , iPmRsvfCnt);  // 초진예약인원
      GetFldVar('L_LONG17'  , iPmRsvrCnt);  // 재진예약인원
      GetFldVar('L_LONG18'  , iPmRsvtCnt);  // 총예약인원
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 의사진료일정 진료일의 시간대별 예약현황 조회
function HmdSchdrt.ScheduleDay(MedDept,MedDr,MedDate,sFlag, sType :String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');  //진료과;진료의;진료일
   SetFldValue(0,[MedDept,MedDr,MedDate, sFlag, sType] );

   //Tuxedo Service Call
   if (txGetF('MD_SCHDR_L2')) then
   begin
      GetFldVar('S_STRING1', sMedDate);  // 진료일
      GetFldVar('S_STRING2', sExamTm );  // 진료예정시간
      GetFldVar('L_LONG1'  , iFstCnt );  // 초진가능인원
      GetFldVar('L_LONG2'  , iReCnt  );  // 재진가능인원
      GetFldVar('L_LONG3'  , iTotCnt );  // 총가능인원
      GetFldVar('L_LONG4'  , iOFstCnt);  // 최초초진가능인원
      GetFldVar('L_LONG5'  , iOReCnt );  // 최초재진가능인원
      GetFldVar('L_LONG6'  , iOTotCnt);  // 최초총가능인원
      GetFldVar('L_LONG7'  , iRsvfCnt);  // 초진예약인원
      GetFldVar('L_LONG8'  , iRsvrCnt);  // 재진예약인원
      GetFldVar('L_LONG9'  , iRsvtCnt);  // 총예약인원
      GetFldVar('L_LONG10' , iRsvnCnt);  // 신환예약인원 2013.3.15

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//예약환자체크
function HmdSchdrt.CheckSchedule(MedDept,MedDr,Fromdate,Todate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');  //진료과;진료의;시작일자;종료일자
   SetFldValue(0,[MedDept,MedDr,Fromdate,Todate] );

   //Tuxedo Service Call
   if (txGetF('MD_SCHDR_L3')) then
   begin
      GetFldVar('S_STRING1', sMedDate);  // 진료일
      GetFldVar('L_LONG1'  , iAmRsvtCnt);  // 초진예약인원
      GetFldVar('L_LONG2'  , iPmRsvtCnt);  // 재진예약인원

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdSchdrt.InputMultiDateSchedule(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;L_LONG1');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i]),String(sDow[i]),
                  String(sEditId[i]), String(sEditIp[i]), String(sType1[i]), Integer(iTpSeqno[i])]);
   if (txPutF('MD_SCHDR_I1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;

//의사진료일정 변경
function HmdSchdrt.DayScheduleUpdate(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;'+
              'S_EDITID;S_EDITIP;'+
              'L_LONG1;L_LONG2;L_LONG3');
   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i]),
                    String(sExamTm[i]),String(sEditId[i]),String(sEditIp[i]),
                    Integer(iFstCnt[i]),Integer(iReCnt[i]),Integer(iTotCnt[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SCHDR_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 의사진료일정 삭제
function HmdSchdrt.DeleteMultiDateSchedule(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i]),String(sAMPMFlag[i])]);
   if (txPutF('MD_SCHDR_D1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;

// 의사진료 일정 생성(한time 생성)
function HmdSchdrt.InsertSchedule(MedDept,MedDr,MedDate,ExamTm,EditId,
                                  EditIp,sType:String;FstCnt,ReCnt,TotCnt:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;L_LONG1;L_LONG2;L_LONG3');
   SetFldValue(0,[MedDept,MedDr,MedDate,ExamTm,EditId,EditIp,sType,FstCnt,ReCnt,TotCnt]);
   if (txPutF('MD_SCHDR_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdSchdrt.Delete(cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4');

   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i]),
                    String(sExamTm[i])]);
   end;

   if (txPutF('MD_SCHDR_D2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// Clinic일정 월별 예약현황 조회
function HmdSchdrt.ClinicScheduleMonth(MedDept,MedDr,MedMonth:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');  //진료과;진료의;진료월
   SetFldValue(0,[MedDept,MedDr,MedMonth] );

   //Tuxedo Service Call
   if (txGetF('MD_SCHCL_L1')) then
   begin
      GetFldVar('S_STRING1', sMedDate);  // 진료예정일자
      GetFldVar('L_LONG1'  , iFstCnt );  // 초진가능인원
      GetFldVar('L_LONG2'  , iReCnt  );  // 재진가능인원
      GetFldVar('L_LONG3'  , iTotCnt );  // 총가능인원
      GetFldVar('L_LONG4'  , iOFstCnt);  // 최초초진가능인원
      GetFldVar('L_LONG5'  , iOReCnt );  // 최초재진가능인원
      GetFldVar('L_LONG6'  , iOTotCnt);  // 최초총가능인원
      GetFldVar('L_LONG7'  , iRsvfCnt);  // 초진예약인원
      GetFldVar('L_LONG8'  , iRsvrCnt);  // 재진예약인원
      GetFldVar('L_LONG9'  , iRsvtCnt);  // 총예약인원

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// Clinic일정 진료일의 시간대별 예약현황 조회
function HmdSchdrt.ClinicScheduleDay(MedDept,MedDr,MedDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');  //진료과;진료의;진료일
   SetFldValue(0,[MedDept,MedDr,MedDate] );

   //Tuxedo Service Call
   if (txGetF('MD_SCHCL_L2')) then
   begin
      GetFldVar('S_STRING1', sMedDate);  // 진료일
      GetFldVar('S_STRING2', sExamTm );  // 진료예정시간
      GetFldVar('L_LONG1'  , iFstCnt );  // 초진가능인원
      GetFldVar('L_LONG2'  , iReCnt  );  // 재진가능인원
      GetFldVar('L_LONG3'  , iTotCnt );  // 총가능인원
      GetFldVar('L_LONG4'  , iOFstCnt);  // 최초초진가능인원
      GetFldVar('L_LONG5'  , iOReCnt );  // 최초재진가능인원
      GetFldVar('L_LONG6'  , iOTotCnt);  // 최초총가능인원
      GetFldVar('L_LONG7'  , iRsvfCnt);  // 초진예약인원
      GetFldVar('L_LONG8'  , iRsvrCnt);  // 재진예약인원
      GetFldVar('L_LONG9'  , iRsvtCnt);  // 총예약인원

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdSchdrt.InputMultiDateClinicSchedule(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;L_LONG1');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i]),String(sDow[i]),
                  String(sEditId[i]), String(sEditIp[i]),Integer(iTpSeqno[i])]);
   if (txPutF('MD_SCHCL_I1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;

//Clinic일정 변경
function HmdSchdrt.DayClinicScheduleUpdate(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;'+
              'S_EDITID;S_EDITIP;'+
              'L_LONG1;L_LONG2;L_LONG3');
   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i]),
                    String(sExamTm[i]),String(sEditId[i]),String(sEditIp[i]),
                    Integer(iFstCnt[i]),Integer(iReCnt[i]),Integer(iTotCnt[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_SCHCL_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// Clinic일정 삭제
function HmdSchdrt.DeleteMultiDateClinicSchedule(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sMedDept[i]),String(sMedDr[i]),String(sMedDate[i])]);
   if (txPutF('MD_SCHCL_D1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;

// Clinic 일정 생성(한time 생성)
function HmdSchdrt.InsertClinicSchedule(MedDept,MedDr,MedDate,ExamTm,EditId,
                                  EditIp:String;FstCnt,ReCnt,TotCnt:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;L_LONG1;L_LONG2;L_LONG3');
   SetFldValue(0,[MedDept,MedDr,MedDate,ExamTm,EditId,EditIp,FstCnt,ReCnt,TotCnt]);
   if (txPutF('MD_SCHCL_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//타과예약가능 여부 변경
function HmdSchdrt.RsvYnUpdate(AmPmFlag, RsvYn :String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sMedDept, sMedDr, sMedDate, AmPmFlag, RsvYn, sEditId, sEditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_SCHDR_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//Comment 변경
function HmdSchdrt.CommentUpdate(AmPmFlag, Comment :String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sMedDept, sMedDr, sMedDate, AmPmFlag, Comment, sEditId, sEditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_SCHDR_U3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//의사진료일정개괄 조회
function HmdSchdrt.SchdrInfom(Type1:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[Type1]);

   //Tuxedo Service Call
   if (txGetF32('MD_SCHDR_S1')) then
   begin
      GetFldVar('L_LONG1' ,  iMona  );  //
      GetFldVar('L_LONG2' ,  iMonp  );  //
      GetFldVar('L_LONG3' ,  iTuea  );  //
      GetFldVar('L_LONG4' ,  iTuep  );  //
      GetFldVar('L_LONG5' ,  iWeda  );  //
      GetFldVar('L_LONG6' ,  iWedp  );  //
      GetFldVar('L_LONG7' ,  iThua  );  //
      GetFldVar('L_LONG8' ,  iThup  );  //
      GetFldVar('L_LONG9' ,  iFria  );  //
      GetFldVar('L_LONG10',  iFrip  );  //
      GetFldVar('L_LONG11',  iSata  );  //
      GetFldVar('L_LONG12',  iSatp  );  //


      //조회건수 return
      Result := GetRecordCnt('L_LONG1');
      txFree;
   end;
end;

//추가 2002.11.12 이용언 진료과 원무예약마감 여부 입력
function HmdSchdrt.SchClose(sType1,sType2,sType3,sType4,sType5,sEditid,sEditip :String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_EDITID;S_EDITIP');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sEditid,sEditip]);

   if (txPutF('MD_SCHDR_U4')) then
   begin
      Result := 1;
      txFree;
   end;

end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPdiagt 	환자진단내역                                                  //
////////////////////////////////////////////////////////////////////////////////

// 환자진단내역(1.현진단,2.진단이력) 조회
function HmdPdiagt.ListPatDiag(PatNo,MedDept,MedDate,Locate,QryKind:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_MEDDEPT;S_MEDDATE;S_STRING1;S_TYPE1');
   SetFldValue(0,[PatNo,MedDept,MedDate,Locate,QryKind] );

   //Tuxedo Service Call
   if (txGetF('MD_PDIAG_L1')) then
   begin
      GetFldVar('S_PATNO'   , sPatNo   );  // 환자번호
      GetFldVar('S_STRING1' , sMedDept );  // 진료과
      GetFldVar('S_STRING2' , sDeptNm  );  // 진료과명
      GetFldVar('S_STRING3' , sMedDate );  // 진료일자/입원일자
      GetFldVar('S_STRING4' , sRgtDate );  // 등록일자
      GetFldVar('S_STRING5' , sPatSect );  // 환자구분
      GetFldVar('S_STRING6' , sDiagCd  );  // 진단코드(ICD-10)
      GetFldVar('S_STRING7' , sDiagName);  // 과진단명/질병명
      GetFldVar('S_STRING8' , sMainDiag);  // 주진단여부
      GetFldVar('S_STRING9' , sCficdYn );  // 확정상병여부(의증/확진여부)
      GetFldVar('S_STRING10', sChaDr   );  // 주치의사
      GetFldVar('S_STRING11', sChaDrNm );  // 주치의사명
      GetFldVar('S_STRING12', sGenDr   );  // 담당의사
      GetFldVar('S_STRING13', sGenDrNm );  // 담당의사명
      GetFldVar('S_STRING14', sOlddxYn );  // 지병구분
      GetFldVar('S_STRING15', sAdmdxYn );  // 입원진단여부
      //GetFldVar('S_STRING16', sEndDate );  // 진단종료일
      GetFldVar('S_STRING16', sPoa     );  // POA. KimDaeYong 2017-06-07
      GetFldVar('S_STRING17', sRemark  );  // 특기사항
      GetFldVar('S_STRING18', sTeeUplt );  // 치열(상좌)
      GetFldVar('S_STRING19', sTeeUprt );  // 치열(상우)
      GetFldVar('S_STRING20', sTeeDwlt );  // 치열(하좌)
      GetFldVar('S_STRING21', sTeeDwrt );  // 치열(하우)
      GetFldVar('S_STRING22', sInfyn   );  // 전염병여부
      GetFldVar('S_STRING23', sFeeyn   );  // 만성질환관리료
      GetFldVar('L_SEQNO1'  , iSeqNo   );  // 순번
      GetFldVar('S_STRING24', sTypecd  );
      GetFldVar('S_STRING25', sDiagkrnm);
      GetFldVar('S_STRING26', sTNM     );  // TNM
      GetFldVar('S_STRING27', sStage   );  // Stage

      {GetFldVar('S_STRING26', sMove  );
      GetFldVar('S_STRING27', sMDate );
      GetFldVar('S_STRING28', sAdd   );
      GetFldVar('S_STRING29', sJikup );
      GetFldVar('S_STRING30', sTel   );
      GetFldVar('S_STRING31', sParent);
      GetFldVar('S_STRING32', sPTel  );}
      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

function HmdPdiagt.ListPatDiag4(PatNo,MedDept,MedDate,Locate,QryKind:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_MEDDEPT;S_MEDDATE;S_STRING1;S_TYPE1');
   SetFldValue(0,[PatNo,MedDept,MedDate,Locate,QryKind] );

   //Tuxedo Service Call
   if (txGetF('MD_PDIAG_L4')) then
   begin
      GetFldVar('S_PATNO'   , sPatNo   );  // 환자번호
      GetFldVar('S_STRING1' , sMedDept );  // 진료과
      GetFldVar('S_STRING2' , sDeptNm  );  // 진료과명
      GetFldVar('S_STRING3' , sMedDate );  // 진료일자/입원일자
      GetFldVar('S_STRING4' , sRgtDate );  // 등록일자
      GetFldVar('S_STRING5' , sPatSect );  // 환자구분
      GetFldVar('S_STRING6' , sDiagCd  );  // 진단코드(ICD-10)
      GetFldVar('S_STRING7' , sDiagName);  // 과진단명/질병명
      GetFldVar('S_STRING8' , sMainDiag);  // 주진단여부
      GetFldVar('S_STRING9' , sCficdYn );  // 확정상병여부(의증/확진여부)
      GetFldVar('S_STRING10', sChaDr   );  // 주치의사
      GetFldVar('S_STRING11', sChaDrNm );  // 주치의사명
      GetFldVar('S_STRING12', sGenDr   );  // 담당의사
      GetFldVar('S_STRING13', sGenDrNm );  // 담당의사명
      GetFldVar('S_STRING14', sOlddxYn );  // 지병구분
      GetFldVar('S_STRING15', sAdmdxYn );  // 입원진단여부
      GetFldVar('S_STRING16', sEndDate );  // 진단종료일
      GetFldVar('S_STRING17', sRemark  );  // 특기사항
      GetFldVar('S_STRING18', sTeeUplt );  // 치열(상좌)
      GetFldVar('S_STRING19', sTeeUprt );  // 치열(상우)
      GetFldVar('S_STRING20', sTeeDwlt );  // 치열(하좌)
      GetFldVar('S_STRING21', sTeeDwrt );  // 치열(하우)
      GetFldVar('S_STRING22', sInfyn   );  // 전염병여부
      GetFldVar('S_STRING23', sFeeyn   );  // 만성질환관리료
      GetFldVar('L_SEQNO1'  , iSeqNo   );  // 순번
      GetFldVar('S_STRING24', sTypecd  );
      GetFldVar('S_STRING25', sDiagkrnm);

      GetFldVar('S_STRING26', sMove  );
      GetFldVar('S_STRING27', sMDate );
      GetFldVar('S_STRING28', sAdd   );
      GetFldVar('S_STRING29', sJikup );
      GetFldVar('S_STRING30', sTel   );
      GetFldVar('S_STRING31', sParent);
      GetFldVar('S_STRING32', sPTel  );

      GetFldVar('S_STRING33', sMovedp );
      GetFldVar('S_STRING34', sMovedpd );

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 환자진단내역 입력 (Multi Input)
function HmdPdiagt.InsertPatDiag(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_MEDDEPT;S_MEDDATE;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;'+
              'S_STRING18;S_EDITID;S_EDITIP;L_SEQNO1;S_STRING19;S_STRING20');
   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sPatNo[i]),String(sMeddept[i]),String(sMedDate[i]),
                    String(sRgtDate[i]),String(sPatSect[i]),String(sDiagCd[i]),
                    String(sDiagName[i]),String(sMainDiag[i]),String(sCficdYn[i]),
                    String(sChaDr[i]),String(sGenDr[i]),String(sOlddxyn[i]),
                    String(sAdmdxYn[i]),{String(sEndDate[i])}String(sPoa[i]),String(sRemark[i]),
                    String(sTeeupLt[i]),String(sTeeupRt[i]),String(sTeedwLt[i]),
                    String(sTeedwRt[i]),String(sInfYn[i]),String(sTypecd[i]),
                    String(sEditId[i]),String(sEditIp[i]),Integer(iSeqNo[i]),
                    String(sTNM[i]),String(sStage[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_PDIAG_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 환자진단내역 삭제
function HmdPdiagt.DeletePatDiag(PatNo,MedDept,MedDate:String;SeqNo:LongInt):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_MEDDEPT;S_MEDDATE;L_SEQNO1');
   SetFldValue(0,[PatNo,MedDept,MedDate,SeqNo] );

   //Tuxedo Service Call
   if (txPutF('MD_PDIAG_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 환자 수진이력 List 조회
function HmdPdiagt.ListDiagHistory(PatNo,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_PATNO;S_TYPE1');
   SetFldValue32(0,[PatNo,Locate] );

   //Tuxedo Service Call
   if (txGetF32('MD_PDIAG_L2')) then
   begin
      GetFldVar32('S_STRING1' , sPatsect );  // 환자구분
      GetFldVar32('S_STRING2' , sIndate  );  // 내원일시
      GetFldVar32('S_STRING3' , sOutdate );  // 퇴원일시
      GetFldVar32('S_STRING4' , sMeddept );  // 진료과/진료부서
      GetFldVar32('S_STRING5' , sDiagcd  );  // 진단/질환코드
      GetFldVar32('S_STRING6' , sDiagname);  // 주진단명
      GetFldVar32('S_STRING7' , sRemark  );  // 특기사항
      GetFldVar32('S_STRING8' , sDeptnm  );  // 진료과명
      GetFldVar32('S_STRING9' , sChadrnm );  // 담당교수명
      GetFldVar32('S_STRING10' , sStayYn );  // 재원여부
      GetFldVar32('S_STRING11' , sWardRoom );// 병동-호실
      GetFldVar32('S_STRING12' , sGenDrNm  );// 주치의명
      GetFldVar32('S_STRING13' , sChaDr  );  // 담당교수
      GetFldVar32('S_STRING14' , sGenDr  );  // 주치의
      GetFldVar32('S_STRING15', sCficdyn );  // R/O여부
      GetFldVar32('S_STRING16', sPattpnm );  // R/O여부
      { 이선규추가 (03.05.15)}
      GetFldVar32('S_STRING17', sOpname  );  // 수술명
      GetFldVar32('S_STRING18', sOpdate  );  // 수술일
      GetFldVar32('S_STRING19', sDrgYn   );  // DRG여부
      {어디선가 사용중. 아마도 제증명(MJ)인듯--------------------
      GetFldVar32('S_STRING20', sAdmpath );  // 입원경로
      GetFldVar32('S_STRING21', sAdmidate);  // 입원진료개시일
      GetFldVar32('S_STRING22', sKtascd  );  // KTASCD
      GetFldVar32('S_STRING23', sWatchyn );  // 관찰여부
      -----------------------------------------------------------}
      GetFldVar32('S_STRING24', sChacode );  // 차상위코드. KimDaeYong 2020-03-18

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 과거진단을 현진단으로 Insert             
function HmdPdiagt.InsertNewDiag(PatNo,MedDept,MedDate,MedDr,PatSect,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_EDITID;S_EDITIP');
   SetFldValue(0,[PatNo,MedDept,MedDate,MedDr,PatSect,EditId,EditIp] );

   //Tuxedo Service Call
   if (txPutF('MD_PDIAG_I2')) then
   begin
      GetFldVar('L_CNT1'   , iSeqNo   );  // 조회건수
      GetFldVar('S_STRING1', sDiagCd  );  // 진단코드(ICD-10)
      GetFldVar('S_STRING2', sDiagName);  // 과진단명/질병명
      GetFldVar('S_STRING3', sTeeUplt );  // 치열(상좌)
      GetFldVar('S_STRING4', sTeeUprt );  // 치열(상우)
      GetFldVar('S_STRING5', sTeeDwlt );  // 치열(하좌)
      GetFldVar('S_STRING6', sTeeDwrt );  // 치열(하우)
      GetFldVar('S_STRING7', sMainDiag);  // 주진단여부 2012.1.2 김송주
      //KimDaeYong 2015-12-31
      GetFldVar('S_STRING8' , sMaxMeddate);  // 최근 진료일자
      GetFldVar('S_STRING9' , sMaxMedCnt );  // 최근 진료일자의 진단건수
      GetFldVar('S_STRING10', sCopyCnt   );  // 현재 진료일자로 복사된 진단건수
      //KimDaeYong 2017-10-18
      GetFldVar('S_STRING11', sCopyPatsect); // 현재 진료일자로 복사된 환자구분(입원/외래)

      Result := 1;
      txFree;
   end;
end;

//SET입력시 환자진단입력(One)
function HmdPdiagt.InsertOneDiag(sPatno,sMeddept,sMeddate,sRgtDate,sPatSect,sDiagCd,sDiagName,sMainDiag,sChaDr,sGenDr,sRemark,sEditid,sEditip:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_MEDDEPT;S_MEDDATE;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'S_STRING8;S_EDITID;S_EDITIP');
   SetFldValue(0,[String(sPatNo),String(sMeddept),String(sMedDate),
                    String(sRgtDate),String(sPatSect),String(sDiagCd),
                    String(sDiagName),String(sMainDiag),
                    String(sChaDr),String(sGenDr),String(sRemark),
                    String(sEditId),String(sEditIp)]);

   //Tuxedo Service Call
   if (txPutF('MD_PDIAG_I3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

     // 환자의 20%감면 진단과 환자유형을 조회한다,
function HmdPdiagt.selectPatTypecd(sPatno,sMeddate,sMeddept : String) : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sPatno,sMeddate,sMeddept] );

   //Tuxedo Service Call
   if (txGetF('MD_PDIAG_L3')) then
   begin
      GetFldVar('S_STRING1' , v_Cnt     );  // 조회건수
      GetFldVar('S_STRING2' , v_Typecd  );  // 환자유형
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//의약품/조영제부작용. 환자 수진이력 List 조회. KimDaeYong 2017-11-09
function HmdPdiagt.ListDiagHistory2(PatNo,Locate,Gubun:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_PATNO;S_TYPE1;S_TYPE2');
   SetFldValue32(0,[PatNo,Locate,Gubun] );

   //Tuxedo Service Call
   if (txGetF32('SD_PDIAG_L2')) then
   begin
      GetFldVar32('S_STRING1' , sPatsect );  // 환자구분
      GetFldVar32('S_STRING2' , sIndate  );  // 내원일시
      GetFldVar32('S_STRING3' , sOutdate );  // 퇴원일시
      GetFldVar32('S_STRING4' , sMeddept );  // 진료과/진료부서
      GetFldVar32('S_STRING5' , sDiagcd  );  // 진단/질환코드
      GetFldVar32('S_STRING6' , sDiagname);  // 주진단명
      GetFldVar32('S_STRING7' , sRemark  );  // 특기사항
      GetFldVar32('S_STRING8' , sDeptnm  );  // 진료과명
      GetFldVar32('S_STRING9' , sChadrnm );  // 담당교수명
      GetFldVar32('S_STRING10' , sStayYn );  // 재원여부
      GetFldVar32('S_STRING11' , sWardRoom );// 병동-호실
      GetFldVar32('S_STRING12' , sGenDrNm  );// 주치의명
      GetFldVar32('S_STRING13' , sChaDr  );  // 담당교수
      GetFldVar32('S_STRING14' , sGenDr  );  // 주치의
      GetFldVar32('S_STRING15', sCficdyn );  // R/O여부
      GetFldVar32('S_STRING16', sPattpnm );  // R/O여부
      { 이선규추가 (03.05.15)}
      GetFldVar32('S_STRING17', sOpname  );  // 수술명
      GetFldVar32('S_STRING18', sOpdate  );  // 수술일
      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;



////////////////////////////////////////////////////////////////////////////////
//  HmdCautnt 	환자 Caution                                                  //
////////////////////////////////////////////////////////////////////////////////

// 환자Caution정보 조회
function HmdCautnt.SelCaution(PatNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO');
   SetFldValue(0,[PatNo]);


   //Tuxedo Service Call
   if (txGetF('MD_CAUTN_S2')) then     // 외래 환자도 보일수 있도록 서비스 수정 S1->S2 김송주
   begin
      GetFldVar('S_PATNO'   , sPatNo);
      GetFldVar('S_STRING1' , sHivYn);
      GetFldVar('S_STRING2' , sVdrlYn);
      GetFldVar('S_STRING3' , sHbsagYn);
      GetFldVar('S_STRING4' , sHcvYn);
      GetFldVar('S_STRING5' , sVmothrYn);
      GetFldVar('S_STRING6' , sVmremark);
      GetFldVar('S_STRING7' , sRadCont);
      GetFldVar('S_STRING8' , sPeniciln);
      GetFldVar('S_STRING9' , sDrugAlgy);
      GetFldVar('S_STRING10', sOtherRmk);
      GetFldVar('S_STRING11', sFstDate);
      GetFldVar('S_STRING12', sFstEmpNo);
      GetFldVar('S_STRING13', sFstEmpNm);
      GetFldVar('S_STRING14', sInform);
      GetFldVar('S_STRING15', sMrsaYn);
      GetFldVar('S_STRING16', sVreYn);
      GetFldVar('S_STRING17', sAfbYn);
      GetFldVar('S_STRING18', sTbYn);
      GetFldVar('S_STRING19', sDiffYn);
      GetFldVar('S_STRING20', sFunYn);
      GetFldVar('S_STRING21', sHbcYn);
      GetFldVar('S_STRING22', sHAVYn);
      GetFldVar('S_STRING23', sSeq); //daelongii add, 2005-10-13
      GetFldVar('S_STRING24', sDschDate);  //daelongii add, 2005-10-17
      GetFldVar('S_STRING25', sRotayn);
      GetFldVar('S_STRING26', sOhmyn);
      GetFldVar('S_STRING27', sEeeyn);
      GetFldVar('S_STRING28', sJangtiyn);
      GetFldVar('S_STRING29', sEeejilyn);
      GetFldVar('S_STRING30', sSuduyn);
      GetFldVar('S_STRING31', sHongyn);
      GetFldVar('S_STRING32', sPungyn);
      GetFldVar('S_STRING33', sNewFluyn);
      GetFldVar('S_STRING34', sInFluyn);    //인플루엔자, KimDaeYong 2014-02-26
      GetFldVar('S_STRING35', sNewinfecyn );
      GetFldVar('S_STRING36', sNewinfecstr);
      GetFldVar('S_STRING37', sBetcyn     );
      GetFldVar('S_STRING38', sBetcstr    );
      GetFldVar('S_STRING39', sCreyn      );
      GetFldVar('S_STRING40', sVrsayn     );
      GetFldVar('S_STRING41', sCjdyn      );
      GetFldVar('S_STRING42', sCetcyn  	  );
      GetFldVar('S_STRING43', sCetcstr    );
      GetFldVar('S_STRING44', sMumpsyn    );
      GetFldVar('S_STRING45', sPeryn	  );
      GetFldVar('S_STRING46', sMenyn 	  );
      GetFldVar('S_STRING47', sDetcyn  	  );
      GetFldVar('S_STRING48', sDetcstr    );
      GetFldVar('S_STRING49', sRepdate    );
      GetFldVar('S_STRING50', sMrpayn	  );
      GetFldVar('S_STRING51', sCpeyn 	  );
      GetFldVar('S_STRING52', sCpetcyn    );
      GetFldVar('S_STRING53', sCpetcstr   );

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 환자 caution 정보 등록
//daelongii(pmc) add, 2005-10-13, Seq 추가..
function HmdCautnt.RegCaution(Type1, PatNo, HivYn, VdrlYn, HbsagYn, HcvYn, VmothrYn,
                              Vmremark, RadCont, Peniciln, DrugAlgy, OtherRmk,
                              FstEmpNo, EditId, EditIp, Inform, MrsaYn, VreYn,
                              AfbYn, TbYn, DiffYn, FunYn, HbcYn, HAVYn, Seq,
                              RotaYn, OhmYn, EeeYn, JangtiYn, EeejilYn, SuduYn, HongYn,
                              PungYn, NewFluYn, InFluYn,
                              Newinfecyn, Newinfecstr, Betcyn, Betcstr, Creyn, Vrsayn, Cjdyn, Cetcyn, Cetcstr, Mumpsyn,
                              Peryn, Menyn, Detcyn, Detcstr, Cancrmk, sRepdate, Mrpayn, Cpeyn, Cpetcyn, Cpetcstr : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_EDITID;S_EDITIP;' +
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;'+
              'S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;'+
              'S_STRING29;S_STRING30;S_STRING31;' +
              'S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;S_STRING41;' +
              'S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;S_STRING51');
   SetFldValue(0,[Type1, PatNo, HivYn, VdrlYn, HbsagYn, HcvYn, VmothrYn,
                  Vmremark, RadCont, Peniciln, DrugAlgy, OtherRmk,
                  FstEmpNo, Inform, EditId, EditIp, MrsaYn, VreYn,
                  AfbYn, TbYn, DiffYn, FunYn, HbcYn, HAVYn, Seq,
                  RotaYn, OhmYn, EeeYn, JangtiYn, EeejilYn, SuduYn, HongYn,
                  PungYn, NewFluYn, InFluYn,
                  Newinfecyn, Newinfecstr, Betcyn, Betcstr, Creyn, Vrsayn, Cjdyn, Cetcyn, Cetcstr, Mumpsyn,
                  Peryn, Menyn, Detcyn, Detcstr, Cancrmk, sRepdate, Mrpayn, Cpeyn, Cpetcyn, Cpetcstr]);

   //Tuxedo Service Call
   if (txPutF('MD_CAUTN_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdCertit 	제증명                                                        //
////////////////////////////////////////////////////////////////////////////////
{
// 제증명서 과거이력 List 조회 (환자번호+증명서구분+사업장)
function HmdCertit.ListCerti(Patno,CertKind,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2'); //환자번호;증명서구분;사업장
   SetFldValue(0,[Patno,CertKind,Locate]);

   //Tuxedo Service Call
   if (txGetF('MD_CERTI_L1')) then
   begin
      GetFldVar('S_STRING1', sRgtDate);  // 발행일
      GetFldVar('S_STRING2', sMedDept);  // 진료과
      GetFldVar('S_STRING3', sDeptNm );  // 진료과name
      GetFldVar('S_STRING4', sMedDr  );  // 발행의
      GetFldVar('S_STRING5', sMedDrNm);  // 발행의name
      GetFldVar('L_SEQNO1' , iSeqNo  );  // 순번
      GetFldVar('L_SEQNO2' , iIssueNo);  // 발급번호

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 제증명서 내용 조회 (환자번호+발행일+순번)
function HmdCertit.SelectCerti(PatNo,RgtDate:String;SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;L_SEQNO1'); //환자번호;발행일;순번;
   SetFldValue(0, [PatNo,RgtDate,SeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_CERTI_S1')) then
   begin
      GetFldVar('S_TYPE1'   , sRgtDate );  // 등록일자
      GetFldVar('S_TYPE2'   , sCertKind);  // 증명서구분
      GetFldVar('S_TYPE3'   , sMedDept );  // 진료과
      GetFldVar('S_TYPE4'   , sMedDr   );  // 발행의
      GetFldVar('S_TYPE5'   , sMedDrNm );  // 발행의name
      GetFldVar('S_TYPE6'   , sBirtDate);  // 생년월일
      GetFldVar('S_TYPE7'   , sAddress );  // 주소
      GetFldVar('S_TYPE8'   , sPerAddr );  // 본적
      GetFldVar('S_TYPE9'   , sTelNo   );  // 전화번호
      GetFldVar('S_STRING1' , sItem1   );  // 항목1
      GetFldVar('S_STRING2' , sItem2   );  // 항목2
      GetFldVar('S_STRING3' , sItem3   );  // 항목3
      GetFldVar('S_STRING4' , sItem4   );  // 항목4
      GetFldVar('S_STRING5' , sItem5   );  // 항목5
      GetFldVar('S_STRING6' , sItem6   );  // 항목6
      GetFldVar('S_STRING7' , sItem7   );  // 항목7
      GetFldVar('S_STRING8' , sItem8   );  // 항목8
      GetFldVar('S_STRING9' , sItem9   );  // 항목9
      GetFldVar('S_STRING10', sItem10  );  // 항목10
      GetFldVar('S_STRING11', sItem11  );  // 항목11
      GetFldVar('S_STRING12', sItem12  );  // 항목12
      GetFldVar('S_STRING13', sItem13  );  // 항목13
      GetFldVar('S_STRING14', sItem14  );  // 항목14
      GetFldVar('S_STRING15', sItem15  );  // 항목15
      GetFldVar('S_STRING16', sItem16  );  // 항목16
      GetFldVar('S_STRING17', sItem17  );  // 항목17
      GetFldVar('S_STRING18', sItem18  );  // 항목18
      GetFldVar('S_STRING19', sItem19  );  // 항목19
      GetFldVar('S_STRING20', sItem20  );  // 항목20
      GetFldVar('S_STRING21', sItem21  );  // 항목21
      GetFldVar('S_STRING22', sItem22  );  // 항목22
      GetFldVar('S_STRING23', sItem23  );  // 항목23
      GetFldVar('S_STRING24', sItem24  );  // 항목24
      GetFldVar('S_STRING25', sItem25  );  // 항목25
      GetFldVar('S_STRING26', sItem26  );  // 항목26
      GetFldVar('S_STRING27', sItem27  );  // 항목27
      GetFldVar('S_STRING28', sItem28  );  // 항목28
      GetFldVar('S_STRING29', sItem29  );  // 항목29
      GetFldVar('S_STRING30', sItem30  );  // 항목30
      GetFldVar('S_STRING31', sItem31  );  // 항목31
      GetFldVar('S_STRING32', sItem32  );  // 항목32
      GetFldVar('S_STRING33', sItem33  );  // 항목33
      GetFldVar('S_STRING34', sItem34  );  // 항목34
      GetFldVar('S_STRING35', sItem35  );  // 항목35
      GetFldVar('S_STRING36', sItem36  );  // 항목36
      GetFldVar('S_STRING37', sItem37  );  // 항목37
      GetFldVar('S_STRING38', sItem38  );  // 항목38
      GetFldVar('S_STRING39', sItem39  );  // 항목39
      GetFldVar('S_STRING40', sItem40  );  // 항목40
      GetFldVar('S_STRING41', sItem41  );  // 항목41
      GetFldVar('S_STRING42', sItem42  );  // 항목42
      GetFldVar('S_STRING43', sItem43  );  // 항목43
      GetFldVar('S_STRING44', sItem44  );  // 항목44
      GetFldVar('S_STRING45', sItem45  );  // 항목45
      GetFldVar('S_STRING46', sItem46  );  // 항목46
      GetFldVar('S_STRING47', sItem47  );  // 항목47
      GetFldVar('S_STRING48', sItem48  );  // 항목48
      GetFldVar('S_STRING49', sItem49  );  // 항목49
      GetFldVar('S_STRING50', sItem50  );  // 항목50
      GetFldVar('S_DESC1'   , sItem51  );  // 항목51
      GetFldVar('S_DESC2'   , sItem52  );  // 항목52
      GetFldVar('S_DESC3'   , sItem53  );  // 항목53
      GetFldVar('S_DESC4'   , sItem54  );  // 항목54
      GetFldVar('S_DESC5'   , sItem55  );  // 항목55
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      GetFldVar('L_SEQNO2'  , iIssueno );  // 발급번호(연번)
      GetFldVar('L_SEQNO3'  , iIssueea );  // 매수
      GetFldVar('L_AMOUNT1' , iAmount1 );  // 금액1
      GetFldVar('L_AMOUNT2' , iAmount2 );  // 금액2
      GetFldVar('L_AMOUNT3' , iAmount3 );  // 금액3
      GetFldVar('L_AMOUNT4' , iAmount4 );  // 금액4
      GetFldVar('L_AMOUNT5' , iAmount5 );  // 금액5
      GetFldVar('L_AMOUNT6' , iAmount6 );  // 금액6
      GetFldVar('L_AMOUNT7' , iAmount7 );  // 금액7
      GetFldVar('L_AMOUNT8' , iAmount8 );  // 금액8
      GetFldVar('L_AMOUNT9' , iAmount9 );  // 금액9
      GetFldVar('L_AMOUNT10', iAmount10);  // 금액10
      GetFldVar('L_AMOUNT11', iAmount11);  // 금액11
      GetFldVar('L_AMOUNT12', iAmount12);  // 금액12
      GetFldVar('L_AMOUNT13', iAmount13);  // 금액13
      GetFldVar('L_AMOUNT14', iAmount14);  // 금액14
      GetFldVar('L_AMOUNT15', iAmount15);  // 금액15
      GetFldVar('L_AMOUNT16', iAmount16);  // 금액16
      GetFldVar('L_AMOUNT17', iAmount17);  // 금액17
      GetFldVar('L_AMOUNT18', iAmount18);  // 금액18
      GetFldVar('L_AMOUNT19', iAmount19);  // 금액19
      GetFldVar('L_AMOUNT20', iAmount20);  // 금액20
      GetFldVar('L_QTY1'    , iQty1    );  // 수량1
      GetFldVar('L_QTY2'    , iQty2    );  // 수량2
      GetFldVar('L_QTY3'    , iQty3    );  // 수량3
      GetFldVar('L_QTY4'    , iQty4    );  // 수량4
      GetFldVar('L_QTY5'    , iQty5    );  // 수량5
      GetFldVar('L_QTY6'    , iQty6    );  // 수량6
      GetFldVar('L_QTY7'    , iQty7    );  // 수량7
      GetFldVar('L_QTY8'    , iQty8    );  // 수량8
      GetFldVar('L_QTY9'    , iQty9    );  // 수량9
      GetFldVar('L_QTY10'   , iQty10   );  // 수량10

      //조회건수 return
      Result := GetRecordCnt('S_TYPE1');
      txFree;
   end;
end;

// 제증명서 내용 삭제 (환자번호+발행일+순번)
function HmdCertit.DeleteCerti(PatNo,RgtDate:String;SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;L_SEQNO1'); //환자번호;발행일;순번;
   SetFldValue(0, [PatNo,RgtDate,SeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력(1.일반진단서)
function HmdCertit.InsertCerti01(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem1,
                            sItem41,sItem42,sItem43,sItem44,sItem21,sItem22,
                            sItem23,sItem24,sItem02,sItem25,sItem26,sItem51,
                            sItem52,sItem10,sItem31,sItem32,sItem37,sItem27,
                            sItem28,sItem29:String;Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem1,sItem41,sItem42,sItem43,sItem44,
                  sItem21,sItem22,sItem23,sItem24,sItem02,sItem25,
                  sItem26,sItem51,sItem52,sItem10,sItem31,sItem32,
                  sItem37,sItem27,sItem28,sItem29,Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I1')) then
   begin
      GetFldVar('L_SEQNO1', iSeqno);  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력(2.소견서)
function HmdCertit.InsertCerti02(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                                 sAddress,sPeraddr,sTelno,sEditid,sEditip,
                                 sItem51,sItem52,sItem1,sItem11,sItem53:String;
                                 Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem51,sItem52,sItem1,sItem11,sItem53,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I2')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


// 제증명서 입력(3.병사용진단서))
function HmdCertit.InsertCerti03(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem21,sItem1,sItem22,sItem41,
                            sItem51,sItem52,sItem53,sItem2,sItem34,sItem54,sItem55,
                            sItem35,sItem23,sItem03:String;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem32,sItem33,sItem21,sItem1,sItem22,sItem41,
                  sItem51,sItem52,sItem53,sItem2,sItem34,sItem54,sItem55,
                  sItem35,sItem23,sItem03,Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I3')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


// 제증명서 입력(4.상해진단서))
function HmdCertit.InsertCerti04(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem1,sItem31,sItem32,sItem33,sItem34,sItem21,sItem22,
                            sItem51,sItem52,sItem53,sItem41,sItem42,sItem43,sItem44,
                            sItem45,sItem23,sItem24,sItem46,sItem47,sItem54:String;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem1,sItem31,sItem32,sItem33,sItem34,sItem21,sItem22,
                  sItem51,sItem52,sItem53,sItem41,sItem42,sItem43,sItem44,
                  sItem45,sItem23,sItem24,sItem46,sItem47,sItem54,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I4')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


// 제증명서 입력 (5.장애진단서)
function Hmdcertit.InsertCerti05(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                       sAddress,sPeraddr,sTelno,sEditid,sEditip,
                       sItem41,sItem21,sItem01,sItem22,sItem23,sItem24,sItem25,
                       sItem26,sItem27,sItem42,sItem28,sItem29,sItem02,
                       sItem51,sItem52,sItem53,sItem43,sItem44,sItem45,sItem46,
                       sItem03,sItem47:String;
                       Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem41,sItem21,sItem01,sItem22,sItem23,sItem24,sItem25,
                  sItem26,sItem27,sItem42,sItem28,sItem29,sItem02,
                  sItem51,sItem52,sItem53,sItem43,sItem44,sItem45,sItem46,
                  sItem03,sItem47,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I5')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력 (6.건강진단서)
function Hmdcertit.InsertCerti06(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                               sAddress,sPeraddr,sTelno,sEditid,sEditip,
                               sItem51,sItem52,sItem53,sItem54,sItem21:String;
                               Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem51,sItem52,sItem53,sItem54,sItem21,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I6')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


//  제증명서 입력 (7.건강진단서(영문))
function Hmdcertit.InsertCerti07(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem01,sItem21,sItem41,sItem02,sItem42,sItem22,
                            sItem51,sItem03,sItem32,sItem23:String;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem01,sItem21,sItem41,sItem02,sItem42,sItem22,
                  sItem51,sItem03,sItem32,sItem23,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I7')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

//  제증명서 입력 (8.사망진단서)
function Hmdcertit.InsertCerti08(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem21,sItem22,sItem23,sItem24,sItem25,sItem26,sItem41,
                            sItem01,sItem31,sItem02,sItem03,sItem32,sItem33,sItem34,
                            sItem35,sItem36,sItem42,sItem37,sItem27,sItem43,sItem28,
                            sItem29,sItem44,sItem04,sItem38,sItem05,sItem39:string;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;'+
              'S_STRING26;S_STRING27;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem21,sItem22,sItem23,sItem24,sItem25,sItem26,sItem41,
                  sItem01,sItem31,sItem02,sItem03,sItem32,sItem33,sItem34,
                  sItem35,sItem36,sItem42,sItem37,sItem27,sItem43,sItem28,
                  sItem29,sItem44,sItem04,sItem38,sItem05,sItem39,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I8')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


//  제증명서 입력 (9.출생증명서)
function Hmdcertit.InsertCerti09(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem34,sItem35,sItem21,sItem22,
                            sItem01,sItem36,sItem02,sItem03,sItem41,sItem42:String;
                            lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                            lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                            lAmount11,lAmount12,lAmount13,lAmount14,
                            Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;S_STRING1;'+
              'S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;'+
              'L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5;L_LONG6;L_LONG7;'+
              'L_LONG8;L_LONG9;L_LONG10;L_LONG11;L_LONG12;L_LONG13;L_LONG14;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem32,sItem33,sItem34,sItem35,sItem21,sItem22,
                  sItem01,sItem36,sItem02,sItem03,sItem41,sItem42,
                  lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                  lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                  lAmount11,lAmount12,lAmount13,lAmount14,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I9')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


//  제증명서 입력 (10.출생증명서(영문))
function Hmdcertit.InsertCerti10(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem21,sItem41,sItem42,sItem32,sItem22,sItem43,
                            sItem44,sItem45,sItem33,sItem01,sItem23,sItem34,
                            sItem35,sItem24:String;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem21,sItem41,sItem42,sItem32,sItem22,sItem43,
                  sItem44,sItem45,sItem33,sItem01,sItem23,sItem34,
                  sItem35,sItem24,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I10')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

//  제증명서 입력 (11.사산증명서)
function Hmdcertit.InsertCerti11(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem34,sItem35,sItem01,
                            sItem36,sItem21,sItem22,sItem02,sItem03,sItem04,
                            sItem05,sItem07,sItem41,sItem08,sItem37:String;
                            lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                            lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                            Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;'+
              'L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5;L_LONG6;L_LONG7;'+
              'L_LONG8;L_LONG9;L_LONG10;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem32,sItem33,sItem34,sItem35,sItem01,
                  sItem36,sItem21,sItem22,sItem02,sItem03,sItem04,
                  sItem05,sItem07,sItem41,sItem08,sItem37,
                  lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                  lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I11')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


//  제증명서 입력 (12.향후치료비추정서)
function Hmdcertit.InsertCerti12(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem41,sItem42,sItem43,sItem44,sItem45,sItem46,
                            sItem47,sItem21,sItem22,sItem23,sItem24,sItem25,
                            sItem26,sItem27,sItem28,sItem29,sItem30,sItem11,
                            sItem12,sItem13,sItem14,sItem15,sItem16,sItem17,
                            sItem18,sItem19,sItem20,sItem31,sItem32,sItem33,
                            sItem34,sItem35,sItem36,sItem37,sItem38,sItem39,
                            sItem40,sItem51,sItem52:String;
                            lQty01,lQty02,lQty03,lQty04,lQty05,
                            lQty06,lQty07,lQty08,lQty09,lQty10,
                            lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                            lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                            lAmount11,lAmount12,lAmount13,lAmount14,lAmount15,
                            lAmount16,lAmount17,lAmount18,lAmount19,lAmount20,
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;'+
              'S_STRING37;S_STRING38;S_STRING39;'+
              'L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5;L_LONG6;L_LONG7;'+
              'L_LONG8;L_LONG9;L_LONG10;'+
              'L_LONG11;L_LONG12;L_LONG13;L_LONG14;L_LONG15;L_LONG16;L_LONG17;'+
              'L_LONG18;L_LONG19;L_LONG20;'+
              'L_LONG21;L_LONG22;L_LONG23;L_LONG24;L_LONG25;L_LONG26;L_LONG27;'+
              'L_LONG28;L_LONG29;L_LONG30;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem41,sItem42,sItem43,sItem44,sItem45,sItem46,
                  sItem47,sItem21,sItem22,sItem23,sItem24,sItem25,
                  sItem26,sItem27,sItem28,sItem29,sItem30,sItem11,
                  sItem12,sItem13,sItem14,sItem15,sItem16,sItem17,
                  sItem18,sItem19,sItem20,sItem31,sItem32,sItem33,
                  sItem34,sItem35,sItem36,sItem37,sItem38,sItem39,
                  sItem40,sItem51,sItem52,
                  lQty01,lQty02,lQty03,lQty04,lQty05,
                  lQty06,lQty07,lQty08,lQty09,lQty10,
                  lAmount01,lAmount02,lAmount03,lAmount04,lAmount05,
                  lAmount06,lAmount07,lAmount08,lAmount09,lAmount10,
                  lAmount11,lAmount12,lAmount13,lAmount14,lAmount15,
                  lAmount16,lAmount17,lAmount18,lAmount19,lAmount20,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I12')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력 (13.연령감정서)
function Hmdcertit.InsertCerti13(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem34,sItem35,sItem36:String;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem32,sItem33,sItem34,sItem35,sItem36,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I13')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력 (14.성별감정서)
function Hmdcertit.InsertCerti14(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                               sAddress,sPeraddr,sTelno,sEditid,sEditip,
                               sItem31,sItem32,sItem33,sItem34,sItem01:String;
                               Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem32,sItem33,sItem34,sItem01,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I14')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno);  // 순번
      Result := 1;
      txFree;
   end;
end;


//  제증명서 입력 (15.입퇴원확인서)
function Hmdcertit.InsertCerti15(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem51,sItem41,sItem42,sItem43,sItem44,sItem45,sItem21,
                            sItem22,sItem23,sItem24,sItem25,sItem46,sItem47,sItem48,
                            sItem49,sItem50,sItem26,sItem27,sItem28,sItem29,sItem30,
                            sItem01,sItem31,sItem32:String;
                            Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem51,sItem41,sItem42,sItem43,sItem44,sItem45,sItem21,
                  sItem22,sItem23,sItem24,sItem25,sItem46,sItem47,sItem48,
                  sItem49,sItem50,sItem26,sItem27,sItem28,sItem29,sItem30,
                  sItem01,sItem31,sItem32,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I15')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

//  제증명서 입력 (16.진료확인서)
function Hmdcertit.InsertCerti16(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem31,sItem32,sItem33,sItem1,sItem41,sItem51,sItem21,
                            sItem22,sItem23,sItem24,sItem25,sItem26,sItem52:String;
                            Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem32,sItem33,sItem1,sItem41,sItem51,sItem21,
                  sItem22,sItem23,sItem24,sItem25,sItem26,sItem52,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I16')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;


// 제증명서 입력 (17.미숙아 및 선천성이상아 출생보고서)
function Hmdcertit.InsertCerti17(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                           sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem21,
                           sItem22,sItem41,sItem23,sItem24,sItem25,sItem11,
                           sItem12,sItem42,sItem43:String;Seqno,iIssueea:Integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem21,sItem22,sItem41,sItem23,sItem24,sItem25,sItem11,
                  sItem12,sItem42,sItem43,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I17')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

//  제증명서 입력 (18.예방접종보고서)
function Hmdcertit.InsertCerti18(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,
                            sItem33,sItem34,sItem35,sItem45,sItem46,sItem47,
                            sItem20,sItem21,sItem22,sItem23,sItem24,sItem25,
                            sItem26,sItem27,sItem28,sItem29,sItem30,sItem36,
                            sItem38,sItem39,sItem40,sItem42,sItem43,sItem44,
                            sItem48,sItem49,sItem50,sItem51,sItem31,sItem52,
                            sItem32,sItem53,sItem54,sItem55,sItem37,sItem41,sItem19:String;
                            Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;'+
              'S_STRING37;L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem33,sItem34,sItem35,sItem45,sItem46,sItem47,
                  sItem20,sItem21,sItem22,sItem23,sItem24,sItem25,
                  sItem26,sItem27,sItem28,sItem29,sItem30,sItem36,
                  sItem38,sItem39,sItem40,sItem42,sItem43,sItem44,
                  sItem48,sItem49,sItem50,sItem51,sItem31,sItem52,
                  sItem32,sItem53,sItem54,sItem55,sItem37,sItem41,sItem19,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I18')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력(19.보험 소견서)
function HmdCertit.InsertCerti19(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                                 sAddress,sPeraddr,sTelno,sEditid,sEditip,
                                 sItem31,sItem20,sItem51,sItem52:String;
                                 Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem31,sItem20,sItem51,sItem52,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I19')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력(20.검사(치료)의뢰서)
function HmdCertit.InsertCerti20(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                                 sAddress,sPeraddr,sTelno,sEditid,sEditip,
                                 sItem20,sItem51,sItem52,sItem41,sItem42,sItem43,
                                 sItem1:String;
                                 Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem20,sItem51,sItem52,sItem41,sItem42,sItem43,sItem1,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I20')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;

// 제증명서 입력 (21.후유장애진단서(신))
function HmdCertit.InsertCerti21(sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                            sAddress,sPeraddr,sTelno,sEditid,sEditip,sItem51,
                            sItem21,sItem01,sItem52,sItem53,sItem54,sItem02,
                            sItem31,sItem55:String;
                            Seqno,iIssueea:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_EDITID;S_EDITIP;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;'+
              'L_SEQNO1;L_SEQNO2');
   SetFldValue(0,[sPatno,sRgtdate,sCertkind,sMeddept,sMeddr,sBirtdate,
                  sAddress,sPeraddr,sTelno,sEditid,sEditip,
                  sItem51,sItem21,sItem01,sItem52,sItem53,sItem54,sItem02,
                  sItem31,sItem55,
                  Seqno,iIssueea]);

   //Tuxedo Service Call
   if (txPutF('MD_CERTI_I21')) then
   begin
      GetFldVar('L_SEQNO1'  , iSeqno   );  // 순번
      Result := 1;
      txFree;
   end;
end;
}

////////////////////////////////////////////////////////////////////////////////
//  HmdOrderv 	전체처방View                                                   //
////////////////////////////////////////////////////////////////////////////////

function HmdOrderv.ExmTrtstat1(sGubun,sPatsect,sFromdt,sTodate,sMeddept:string): Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sGubun,sPatsect,sFromdt,sTodate,sMeddept] );
   if (txGetF32('MD_ORDER_S6')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1' ,sOrdcd);
      GetFldVar32('S_STRING2' ,sOrddate);
      GetFldVar32('S_STRING3' ,sOrdDesc);
      GetFldVar32('S_STRING4' ,sCount );
      Result := GetRecordCnt32('S_STRING1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

// 전처방조회
// sType1 (1:환자의 모든 처방일 2:재원기간중의 처방일 3:특정처방일의 처방내용)
// sType2 (환자번호)  sType3 (sType1이 2는 입원일, 3이면 처방일) sType4 (사업장구분)
{function HmdOrderv.PreOrderSelect(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sType2,sType3,sType4] );
   if (txGetF32('MD_ORDER_L1')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE2'  ,sMedDate );
      GetFldVar32('S_CODE3'  ,sPatSect );
      GetFldVar32('S_CODE4'  ,sPatSite );
      GetFldVar32('S_CODE5'  ,sOrdGrp  );
      GetFldVar32('S_CODE6'  ,sOrdGrpNm);
      GetFldVar32('S_CODE7'  ,sSlipCd  );
      GetFldVar32('S_CODE8'  ,sOrdType );
      GetFldVar32('S_CODE9'  ,sOrdKind );
      GetFldVar32('S_CODE10' ,sDiscYn  );
      GetFldVar32('S_CODE11' ,sErYn    );
      GetFldVar32('S_CODE12' ,sMedDept );
      GetFldVar32('S_CODE13' ,sDeptNm  );
      GetFldVar32('S_CODE14' ,sOrdDr   );
      GetFldVar32('S_CODE15' ,sOrdDrNm );
      GetFldVar32('S_CODE16' ,sOrdCd   );
      GetFldVar32('S_CODE17' ,sOrdDesc1);
      GetFldVar32('S_CODE18' ,sOrdDesc2);
      GetFldVar32('S_CODE19' ,sPrnYn   );
      GetFldVar32('S_CODE20' ,sNurStat );
      GetFldVar32('S_CODE21' ,sRcpStat );
      GetFldVar32('S_CODE22' ,sJinjStat);
      GetFldVar32('S_CODE23' ,sEditDate);
      GetFldVar32('S_CODE24' ,sOrdTime);
      GetFldVar32('S_CODE25' ,sStatName);   // 결과및진행상태
      GetFldVar32('S_CODE26' ,sOrdName );   // 처방명
      GetFldVar32('S_CODE27' ,sOrdTime2);
      GetFldVar32('S_CODE28' ,sPrintCnt);   // 처방전출력횟수
      GetFldVar32('S_CODE29' ,sOrdDesc );   // 처방상세(간호용)
      GetFldVar32('S_CODE30' ,sUseSite );   // 사용장소
      GetFldVar32('S_STRING1',sInOutYn );   // 원내/외구분(약)
      GetFldVar32('S_STRING2',sOrdDept );   // 처방의소속과
      GetFldVar32('S_STRING3',sOrdSite );   // 처방 발행처
      GetFldVar32('S_STRING4',sAltYn   );   // 대체조제여부
      GetFldVar32('S_STRING5',sOrdYn   );   // 처방가능여부
      GetFldVar32('S_STRING6',sDcDate  );   // D/C일자
      GetFldVar32('S_STRING7',sDcOrdDr );   // D/C의사
      GetFldVar32('S_STRING8',sOpexdate);   // D/C의사
      GetFldVar32('S_STRING9',sIoqty );     // D/C의사
      GetFldVar32('S_STRING10',sRtnqty);    // D/C의사

      GetFldVar32('S_STRING11',sExecDate);  // 검사일자

      GetFldVar32('S_STRING12',sRsltupp );
      GetFldVar32('S_STRING13',sRsltlow );
      GetFldVar32('S_STRING14',sRsltVal );
      GetFldVar32('S_STRING15',sInjtloc );
      GetFldVar32('S_STRING16',sSelfyn  );
      GetFldVar32('S_STRING17',sBundleno);
      GetFldVar32('S_STRING18',sMainYn  );

      GetFldVar32('S_STRING19',sOrdunit);
      GetFldVar32('S_STRING20',sDoseqty);
      GetFldVar32('S_STRING21',sMethodcd);
      GetFldVar32('S_STRING22',sGtt);
      GetFldVar32('S_STRING23',sGttunit);
      GetFldVar32('S_STRING24',sDcYn    );  //약국접수취소여부

      // 이선규추가
      GetFldVar32('S_STRING25',sMixyn);
      GetFldVar32('S_STRING26',sActinf);
      GetFldVar32('S_STRING27',sCount);
      GetFldVar32('S_STRING28',sAbbr);
      GetFldVar32('S_STRING29',sTotQty);
      GetFldVar32('S_STRING30',sMgpcc );

      txFree32;
   end;
end;}

// 추가처방내역 조회
function HmdOrderv.SelectAddOrder(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txPutF('MD_ORDER_L4')) then begin //Tuxedo Service Call
      GetFldVar('L_SEQNO1' ,iOrdSeqno);
      GetFldVar('S_CODE1'  ,sOrdDate );
      GetFldVar('S_CODE2'  ,sOrdTime );
      GetFldVar('S_CODE3'  ,sMedDate );
      GetFldVar('S_CODE4'  ,sOrdGrp  );
      GetFldVar('S_CODE5'  ,sOrdGrpNm);
      GetFldVar('S_CODE6'  ,sOrdDrNm );
      GetFldVar('S_CODE7'  ,sOrdCd   );
      GetFldVar('S_CODE8'  ,sOrdDesc1);
      GetFldVar('S_CODE9'  ,sOrdDesc2);
      GetFldVar('S_CODE10' ,sConfNrs );
      GetFldVar('S_CODE11' ,sConfTime);
      GetFldVar('S_CODE12' ,sDcDate  );
      GetFldVar('S_CODE13' ,sDcOrddr );

      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 추가처방내역 조회 변경
function HmdOrderv.SelectAddOrder2(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7] );
   if (txPutF('MD_ORDER_L10')) then begin //Tuxedo Service Call
      GetFldVar('L_SEQNO1' ,iOrdSeqno);
      GetFldVar('S_CODE1'  ,sOrdDate );
      GetFldVar('S_CODE2'  ,sOrdTime );
      GetFldVar('S_CODE3'  ,sMedDate );
      GetFldVar('S_CODE4'  ,sOrdGrp  );
      GetFldVar('S_CODE5'  ,sOrdGrpNm);
      GetFldVar('S_CODE6'  ,sOrdDrNm );
      GetFldVar('S_CODE7'  ,sOrdCd   );
      GetFldVar('S_CODE8'  ,sOrdDesc1);
      GetFldVar('S_CODE9'  ,sOrdDesc2);
      GetFldVar('S_CODE10' ,sConfNrs );
      GetFldVar('S_CODE11' ,sConfTime);
      GetFldVar('S_CODE12' ,sDcDate  );
      GetFldVar('S_CODE13' ,sDcOrddr );

      GetFldVar('S_CODE14'  ,sDiscYn);
      GetFldVar('S_CODE15'  ,sMethodcd);
      GetFldVar('S_CODE16'  ,sActinf);
      GetFldVar('S_CODE17'  ,sSlipCd);
      GetFldVar('S_CODE18'  ,sBundleno);
      GetFldVar('S_CODE19'  ,sMgpcc);
      GetFldVar('S_CODE20'  ,sTotQty);
      GetFldVar('S_CODE21' ,sCount);
      GetFldVar('S_CODE22' ,sMainYn);
      GetFldVar('S_CODE23' ,sDoseqty);
      GetFldVar('S_CODE24' ,sOrdunit);
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 특정 처방내용 조회
// sType1 (1:특정처방일의 Check(V/S) 처방내용 조회, 2:Check(I/O) 처방환자 리스트 조회)
// sType2 (환자번호)  sType3 (처방일자) sType4 (SLIP코드) sType4 (사업장구분)
function HmdOrderv.SelectOrdConts(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6] );
   if (txGetF('MD_ORDER_L2')) then begin //Tuxedo Service Call
      GetFldVar('L_SEQNO1' ,iOrdSeqno);
      GetFldVar('S_CODE1'  ,sOrdDate );
      GetFldVar('S_CODE2'  ,sMedDate );
      GetFldVar('S_CODE3'  ,sPatSect );
      GetFldVar('S_CODE4'  ,sPatSite );
      GetFldVar('S_CODE5'  ,sSlipCd  );
      GetFldVar('S_CODE6'  ,sOrdType );
      GetFldVar('S_CODE7'  ,sOrdKind );
      GetFldVar('S_CODE8'  ,sDiscYn  );
      GetFldVar('S_CODE9'  ,sErYn    );
      GetFldVar('S_CODE10' ,sMedDept );
      GetFldVar('S_CODE11' ,sDeptNm  );
      GetFldVar('S_CODE12' ,sOrdDr   );
      GetFldVar('S_CODE13' ,sOrdDrNm );
      GetFldVar('S_CODE14' ,sOrdCd   );
      GetFldVar('S_CODE15' ,sOrdDesc1);
      GetFldVar('S_CODE16' ,sOrdDesc2);
      GetFldVar('S_CODE17' ,sPrnYn   );
      GetFldVar('S_CODE18' ,sNurStat );
      GetFldVar('S_CODE19' ,sPatNo   );
      GetFldVar('S_CODE20' ,sPatName );
      GetFldVar('S_CODE21' ,sAdmDate );
      GetFldVar('S_CODE22' ,sRoomNo  );
      GetFldVar('S_CODE23' ,sGenDrNm );
      GetFldVar('S_CODE24' ,sLstopDt );
      GetFldVar('S_CODE25' ,sWeight  );
      GetFldVar('S_CODE26' ,sChadrnm );
      GetFldVar('S_CODE27' ,sResno1  );
      GetFldVar('S_CODE28' ,sResno2  );

      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 처방내역 입력 (Multi Input)
function HmdOrderv.InsertTxDrug(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;S_TYPE13;'+
              'S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;'+
              'S_TYPE21;S_TYPE22;S_TYPE23;S_TYPE24;S_TYPE25;S_TYPE26;S_TYPE27;'+
              'S_TYPE28;S_TYPE29;'+
              //약
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_DESC1;'+
              //항균제
              'S_CODE1;'+
              //약-NumValue
              'S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4;S_NUMVAL5;S_NUMVAL6;'+
              'S_NUMVAL7;S_NUMVAL8;S_NUMVAL9;S_NUMVAL10');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i, [String(sPatNo [i]),   String(sOrdDate [i]), String(sMedDate [i]),
                        String(sPatSect [i]), String(sOrdGrp  [i]), String(sSlipCd  [i]),
                        String(sOrdType [i]), String(sOrdKind [i]), String(sErYn    [i]),
                        String(sPreActYn[i]), String(sMedDept [i]), String(sChaDr   [i]),
                        String(sOrdDr   [i]), String(sOrdCd   [i]), String(sWardNo  [i]),
                        String(sRoomNo  [i]), String(sOrdSite [i]), String(sRemark  [i]),
                        String(sOrdDesc1[i]), String(sOrdDesc2[i]), String(sPrnYn   [i]),
                        String(sOldPttp [i]), String(sInsType [i]), String(sEditId  [i]),
                        String(sEditIp  [i]), String(sMedTime [i]), String(sOpDate  [i]),
                        String(sOpSeqNo [i]), String(sMedYn   [i]), String(sPrepYn  [i]),
                        //약
                        String(sOrdUnit [i]), String(sUnitType[i]), String(sDgijType[i]),
                        String(sDetRoute[i]), String(sMethodCd[i]), String(sMethdRmk[i]),
                        String(sSelfYn  [i]), String(sPowYn   [i]), String(sAstYn   [i]),
                        String(sMixyn   [i]), String(sSelfIjYn[i]), String(sInjtloc [i]),
                        String(sMainYn  [i]), String(sLtermRsn[i]), String(sInOutYn [i]),
                        String(sInResn  [i]), String(sInjDate [i]), String(sChemoYn [i]),
                        String(sGttUnit [i]), String(sDgRcpYn [i]), String(sSideYn  [i]),
                        //항균제
                        String(sDrugkind[i]),
                        //약-NumValue
                        String(sDoseQty [i]), String(sDoseQty2[i]), String(sDoseQty3[i]),
                        String(sDoseQty4[i]), String(sDoseQty5[i]), String(sTotQty  [i]),
                        String(sCount   [i]), String(sUseDay  [i]), String(sBundleNo[i]),
                        String(sGtt     [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF32('MD_ORDER_I6')) then
   begin
      Result := 1;
      txFree32;
   end;
end;

// 처방내역 조회 (Multi Select)
function HmdOrderv.SelTxDrug(sType1,sType2,sType3,sType4 : String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sType2,sType3,sType4] );
   if (txGetF32('MD_TRTOR_L5')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE2'  ,sDgijType);  // 약주사구분
      GetFldVar32('S_CODE3'  ,sOrdName);   // 처방명
      GetFldVar32('S_CODE4'  ,sDoseQty);   // 투여량
      GetFldVar32('S_CODE5'  ,sOrdUnit);   // 기본투여단위
      GetFldVar32('S_CODE6'  ,sInsType);   // 급여여부
      GetFldVar32('S_CODE7'  ,sOrdSite);
      GetFldVar32('S_CODE8'  ,sRcpStat);
      GetFldVar32('S_CODE9'  ,sEditId);
      GetFldVar32('S_CODE10' ,sOrdTime);
      GetFldVar32('S_CODE11' ,sOrdGrp);
      GetFldVar32('S_CODE12' ,sSlipCd);
      GetFldVar32('S_CODE13' ,sDrugKind);
      GetFldVar32('S_CODE14' ,sExceptCd);
      GetFldVar32('S_CODE15' ,sMethodCd);
      GetFldVar32('S_CODE16' ,sOrdCd);
      GetFldVar32('S_CODE17' ,iDosNo);
      GetFldVar32('S_CODE18' ,sPatsect);
      GetFldVar32('S_CODE19' ,sDiscyn);
      GetFldVar32('S_CODE20' ,sOrddesc1);
      GetFldVar32('S_CODE21' ,sUnitType);
      GetFldVar32('S_CODE22' ,sUseSite);
      GetFldVar32('S_CODE23' ,sRtnqty);
      GetFldVar32('S_CODE24' ,sOrddr);
      GetFldVar32('S_CODE25' ,sProdcode);
      GetFldVar32('S_CODE26' ,sProdsize);

      Result := GetRecordCnt32('S_CODE1');  // Service를 수행하고 FML Buffer에 PUT된 Record수

      txFree32;
   end;
end;

// 처방내역 D/C 처리 (Multi Input)
function HmdOrderv.UpdateOrdDc(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_EDITID;S_EDITIP;L_SEQNO1');

   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sOrdGrp[i]),
                     String(sJinjStat[i]),String(sRcpStat[i]),String(sPatSect[i]),
                     String(sOrdKind[i]),String(sInOutYn[i]),String(sEditId[i]),
                     String(sEditIp[i]),Integer(iOrdSeqNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 간호사 처방확인 (Multi Update)
function HmdOrderv.ConfirmOrder(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;L_SEQNO1');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sOrdGrp[i]),
                     String(sConfNrs[i]),Integer(iOrdSeqNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;       

// 간호사 처방확인 (Multi Update)Add
function HmdOrderv.ConfirmOrderAdd(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING3;S_ORDDATE;S_STRING1;S_STRING2;L_SEQNO1;S_STRING3;S_STRING4');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sAdmDate[i]),String(sOrdDate[i]),String(sOrdGrp[i]),
                     String(sConfNrs[i]),Integer(iOrdSeqNo[i]),String(sOpexdate[i]),String(sOrdTime[i])]);
   end;

//   Tuxedo Service Call
//   if (txPutF('MD_ORDER_U4')) then
   if (txPutF('MD_ORDER_U7')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//타과진료/처방내역 List SELECT
function HmdOrderv.ListOrdOtherDept(PatNo,MedDate,MedDept,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[PatNo,MedDate,MedDept,Locate] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDER_L3')) then
   begin
      GetFldVar('S_PATNO',    sPatNo   );   // 환자번호
      GetFldVar('S_STRING1',  sOrdDate );   // 처방일
      GetFldVar('S_STRING2',  sMedDate );   // 진료일
      GetFldVar('S_STRING3',  sPatSect );   // 환자구분
      GetFldVar('S_STRING4',  sOrdGrp  );   // 처방분류
      GetFldVar('S_STRING5',  sMedDept );   // 진료과
      GetFldVar('S_STRING6',  sOrdDr   );   // 처방의
      GetFldVar('S_STRING7',  sOrdCd   );   // 처방코드
      GetFldVar('S_STRING8',  sOrdDesc1);   // 처방편집1
      GetFldVar('S_STRING9',  sOrdDesc2);   // 처방편집2
      GetFldVar('S_STRING10', sJinjStat);   // 결과STATUS
      GetFldVar('S_STRING11', sOrdDrNm );   // 처방의명
      GetFldVar('S_STRING12', sDeptNm  );   // 진료과명
      GetFldVar('S_STRING13', sOrdDept );   // 처방의소속과
      GetFldVar('L_SEQNO1',   iOrdSeqNo);   // 처방순번

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

//환자처방 상세정보 SELECT
function HmdOrderv.OrdDetailInfo(OrdGrp,PatNo,OrdDate:String;SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE;L_SEQNO1');
   SetFldValue(0,[OrdGrp,PatNo,OrdDate,SeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_ORDER_S1')) then
   begin
      GetFldVar('S_STRING1',  sOrdCd   );     // 처방코드
      GetFldVar('S_STRING2',  sOrdGrp  );     // 처방분류
      GetFldVar('S_STRING3',  sOldPttp );     // 지병 환자유형
      GetFldVar('S_STRING4',  sInsType );     // 급여구분
      GetFldVar('S_STRING5',  sRemark  );     // 특기사항
      GetFldVar('S_CODE1',    sOrdYn   );     // 처방가능여부
      GetFldVar('S_CODE2'  ,  sOrigGrp );     // 처방분류(처방Master)
      GetFldVar('S_CODE3'  ,  sOrigSlip);     // Slip코드(처방Master)
      GetFldVar('S_CODE4'  ,  sInputTyp);     // 필수입력구분
      GetFldVar('S_CODE5'  ,  sDrugType);     // 약품구분(1=인슐린,9=일반)
      GetFldVar('S_CODE6'  ,  sCkPortYn);     // Portable 가능여부
      GetFldVar('S_CODE7'  ,  sCkFcrYn );     // FCR 가능여부
      GetFldVar('S_CODE8'  ,  sSpcCode );     // 검체코드(처방Master)
      GetFldVar('S_CODE9'  ,  sCkTxYn  );     // 처치약제가능여부(처방Master)
      GetFldVar('S_CODE10' ,  sLabNo   );     // 임상연구번호
      GetFldVar('S_CODE11' ,  sOrddesc1);     // 처방상세1
      GetFldVar('S_CODE12' ,  sTeethYn );     // 치식필수입력여부
      GetFldVar('S_CODE13' ,  sCkInsTyp);     // 보험구분(처방Master)
      GetFldVar('S_DESC1'  ,  sHeaderYn);     // Header구분-Dx,Hd,Pod
      //약처방
      GetFldVar('S_STRING6',  sOrdUnit );     // 단위
      GetFldVar('S_STRING7',  sUnitType);     // 선택단위구분(1:포장 2:함량)
      GetFldVar('S_STRING8',  sMethodCd);     // 용법코드
      GetFldVar('S_STRING9',  sMethdRmk);     // 용법비고
      GetFldVar('S_STRING10', sSelfYn  );     // 외부약 여부
      GetFldVar('S_STRING11', sPowYn   );     // Powder여부
      GetFldVar('S_STRING12', sAstYn   );     // AST(After Skin Test) 여부
      GetFldVar('S_STRING13', sMixYn   );     // MIX여부
      GetFldVar('S_STRING14', sSelfIjYn);     // 자가주사여부
      GetFldVar('S_STRING15', sInjtLoc );     // 주사장소
      GetFldVar('S_STRING16', sMainYn  );     // MAIN여부
      GetFldVar('S_STRING17', sLtermRsn);     // 장기처방사유
      GetFldVar('S_STRING18', sInoutYn );     // 원내/원외구분
      GetFldVar('S_STRING19', sInResn  );     // 원내처방사유
      GetFldVar('S_TYPE1',    sDgijType);     // 약주사구분
      GetFldVar('S_TYPE2',    sDrugKind);     // 일반약구분
      GetFldVar('S_TYPE3',    sOutOdYn );     // 원외처방여부
      GetFldVar('S_TYPE4',    sExceptCd);     // 의약분업예외코드
      GetFldVar('S_TYPE5',    sInschkyn);     // 보험기준적용구분
      GetFldVar('S_TYPE6',    sChemoYn );     // 항암제여부
      GetFldVar('S_TYPE7',    sGttUnit );     // Gtt단위
      GetFldVar('S_TYPE8',    sCalyn   );     // 계산여부(외용약)
      GetFldVar('S_TYPE9',    sDoseUnit);     // 기본투여단위
      GetFldVar('S_TYPE10',   sChkQty  );     // 1일제한량
      GetFldVar('S_TYPE21',   sAbCiNo  );     // 절대불가여부
      GetFldVar('S_TYPE22',   sContQty );     // 함량
      GetFldVar('S_TYPE23',   sSideYn  );     // Side여부(수액)
      GetFldVar('S_TYPE24',   sQtyUnit );     // 함량투여단위
      GetFldVar('S_TYPE25',   sTxDrugYn);     // 처치약제여부
      GetFldVar('S_TYPE26',   sInjDate );     // 주사예정일
      GetFldVar('S_TYPE27',   sPrepYn  );     // Preparation여부(준비물품)
      GetFldVar('S_TYPE28',   sPreMedYn);     // PreMedication여부

      //검사처방
      GetFldVar('S_STRING20', sPortYn  );     // PORTABLE(이동)여부
      GetFldVar('S_STRING21', sFcrYn   );     // FCR검사여부
      GetFldVar('S_STRING22', sDruginYn);     // 항생제투여여부
      GetFldVar('S_STRING23', sOrdText );     // 임상소견/지시내용
      GetFldVar('S_STRING24', sSpcCode1);     // 검체코드1
      GetFldVar('S_STRING25', sSpcCode2);     // 검체코드2
      GetFldVar('S_STRING26', sSpcDr   );     // 선택진료의사
      GetFldVar('S_STRING27', sSpcDryn );     // 선택진료(가능)여부
      GetFldVar('S_TYPE11',   sHopeDate);     // 검사희망일시
      GetFldVar('S_TYPE12',   sRsvYn   );     // 예약검사여부
      GetFldVar('S_TYPE13',   sExmCount);     // 검사횟수
      //처치/재료/수술/마취처방
      GetFldVar('S_STRING28', sOpdOpyn );     // 외래수술여부
      GetFldVar('S_STRING29', sMainOp  );     // 주수술
      GetFldVar('S_STRING30', sReopYn  );     // 재수술여부
      GetFldVar('S_STRING31', sNightYp );     // 심야가산적용여부
      GetFldVar('S_STRING32', sTrSpcYn );     // 선택진료여부
      GetFldVar('S_STRING33', sExecDr  );     // 시행의사(집도의/마취의)
      GetFldVar('S_STRING34', sTrQty   );     // 수량
      GetFldVar('S_STRING35', sTrCount );     // 횟수
      GetFldVar('S_STRING36', sTrUnit  );     // 단위
      GetFldVar('S_STRING37', sAnethMm );     // 마취시간(분)
      GetFldVar('S_STRING38', sTeeUpLt );     // 치열(상좌)
      GetFldVar('S_STRING39', sTeeUpRt );     // 치열(상우)
      GetFldVar('S_STRING40', sTeeDwLt );     // 치열(하좌)
      GetFldVar('S_STRING41', sTeeDwRt );     // 치열(하우)
      GetFldVar('S_NAME1',    sTrtLoc  );     // 처치/재료시행장소
      //수혈처방
      GetFldVar('S_STRING42', sBldQty  );     // 수량
      GetFldVar('S_STRING43', sUseCode );     // 사용용도
      GetFldVar('S_STRING44', sOpexDate);     // 수술예정일자
      GetFldVar('S_STRING45', sFiltYn  );     // FILTER여부
      GetFldVar('S_STRING46', sBldAstYn);     // AST 여부
      GetFldVar('S_STRING47', sTrselfYn);     // 자가수혈여부
      GetFldVar('S_STRING48', sDonrYn  );     // 헌혈자유무
      GetFldVar('S_STRING49', sIrradYn );     // IRRADIATION 여부
      GetFldVar('S_STRING50', sTrnsfLoc);     // 수혈장소
      //약처방-Number value
      GetFldVar('L_CNT1',     iDosNo   );     // 투약번호
      GetFldVar('S_NUMVAL1',  sDoseqty );     // 투여량(1회차)
      GetFldVar('S_NUMVAL2',  sDoseqty2);     // 투여량(2회차)
      GetFldVar('S_NUMVAL3',  sDoseqty3);     // 투여량(3회차)
      GetFldVar('S_NUMVAL4',  sDoseqty4);     // 투여량(4회차)
      GetFldVar('S_NUMVAL5',  sDoseqty5);     // 투여량(5회차)
      GetFldVar('S_NUMVAL6',  sTotqty  );     // 총량
      GetFldVar('S_NUMVAL7',  sCount   );     // 횟수
      GetFldVar('S_NUMVAL8',  sUseday  );     // 일수
      GetFldVar('S_NUMVAL9',  sBundleno);     // 묶음번호
      GetFldVar('S_NUMVAL10', sGtt     );     // gtt(주사약)
      //추가. 2002.10.29 이용언 재활처방
      GetFldVar('S_FLAG1'  ,  sSiteCd  );     // 치료부위
      GetFldVar('S_FLAG2'  ,  sTermsCd );     // 치료빈도
      GetFldVar('S_FLAG3'  ,  sDayCnt  );     // 1일 치료회수
      GetFldVar('S_FLAG4'  ,  sDays    );     // 처방일수
      //추가. 2002.11.8 이용언 검사처방 A7
      GetFldVar('S_FLAG6'  ,  sAseven  );     // 검사처방 A7 여부
      //(추가. 2002.11.19 이용언 SET 검사 여부
      GetFldVar('S_FLAG7',    sSetexyn );     // SET 검사 여부
      GetFldVar('S_FLAG8',    sGroupyn );     // SET 검사 여부
      GetFldVar('S_FLAG9',    sEryn    );     // 응급검사 여부
      GetFldVar('S_FLAG10',   sStatCd  );     // 원무통계 구분
      // 추가 2008.09.30 김송주 주성분코드
      GetFldVar('S_TYPE29',   sMaincd  );     // 주성분코드
      // 추가 2010.06.10 김송주 드레싱팀 구분 코드
      GetFldVar('S_STRING51', sDrteamyn);     // 드레싱팀 여부
      // 추가 2011.08.16 성분코드
      GetFldVar('S_STRING52', sSamecd);
      GetFldVar('S_STRING53', sAntidrugrmk);
      GetFldVar('S_STRING54', sPatsect);


      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;

   end;
end;


// PRN실시입력
function HmdOrderv.InsertPrn(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   // Pointer를 받아옴.
   txAlloc;

   // FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_STRING1;S_NUMVAL1;S_NUMVAL2;S_STRING2;'+
              'S_STRING3;S_STRING4');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo   [i]), String(sOrdDate [i]), String(sOrdGrp  [i]),
                     String(sWardNo  [i]), String(sRoomNo  [i]), String(sOrdSite [i]),
                     String(sEditId  [i]), String(sEditIp  [i]), String(sMainYn  [i]),
                     String(sBundleNo[i]), String(sOrdseqNo[i]), String(sOrddesc1 [i]),
                     String(sOrdKind [i]), String(sOrdType [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// PRN실시입력
function HmdOrderv.InsertPrn2(Cnt:Integer):Integer;
var
  i: integer;
begin

   Result := -1;

   // Pointer를 받아옴.
   txAlloc;

   // FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_STRING1;S_NUMVAL1;S_NUMVAL2;S_STRING2;'+
              'S_STRING3;S_STRING4');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo   [i]), String(sOrdDate [i]), String(sOrdGrp  [i]),
                     String(sWardNo  [i]), String(sRoomNo  [i]), String(sOrdSite [i]),
                     String(sEditId  [i]), String(sEditIp  [i]), String(sMainYn  [i]),
                     String(sBundleNo[i]), String(sOrdseqNo[i]), String(sOrddesc1 [i]),
                     String(sOrdKind [i]), String(sOrdType [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_PRNOR_I2')) then
   begin
      Result := 1;
      txFree;
   end;

end;

// PRN실시입력 (응급실)
function HmdOrderv.InsertERPrn(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_STRING1;S_NUMVAL1;S_NUMVAL2;S_STRING2;');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo   [i]), String(sOrdDate [i]), String(sOrdGrp  [i]),
                     String(sWardNo  [i]), String(sRoomNo  [i]), String(sOrdSite [i]),
                     String(sEditId  [i]), String(sEditIp  [i]), String(sMainYn  [i]),
                     String(sBundleNo[i]), String(sOrdseqNo[i]), String(sOrddesc1 [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_I4')) then
   begin
      Result := 1;
      txFree;
   end;
   
end;                            

// 퇴원시 예약된 검사의 계속실시여부 입력
// 기존처방을 DC하고 새로운 퇴원처방을 입력한다.
function HmdOrderv.InsertDschExam(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_NUMVAL1;S_TYPE4;S_TYPE5');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo   [i]), String(sOrdDate [i]),
                     String(sEditId  [i]), String(sEditIp  [i]),
                     String(sOrdseqNo[i]), String(sMedDept [i]),String(sChadr[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_I3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//환자처방 Status SELECT
function HmdOrderv.OrderStatusInfo(PatNo,OrdDate,OrdGrp:String;SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_TYPE1;L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate,OrdGrp,SeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_ORDER_S2')) then
   begin
      GetFldVar('S_STRING1' ,sDiscYn  );  //D/C여부
      GetFldVar('S_STRING2' ,sNurStat );  //간호Status
      GetFldVar('S_STRING3' ,sRcpStat );  //수납Status
      GetFldVar('S_STRING4' ,sJinjStat);  //진지Status
      GetFldVar('S_STRING5' ,sStatName);  //결과및진행상태
      GetFldVar('S_STRING6' ,sPrintCnt);  //처방전출력횟수
      GetFldVar('S_STRING7' ,sAltYn   );  //대체조제여부
      GetFldVar('S_STRING8' ,sOrdDesc1);  //처방상세1
      GetFldVar('S_STRING9' ,sOrdDesc2);  //처방상세2
      GetFldVar('S_STRING10',sDgPrtCnt);  //마약처방전출력횟수
      GetFldVar('S_STRING11',sPowYn   );  //Powder여부
      GetFldVar('S_STRING12',sDcYn    );  //약국접수취소여부
      GetFldVar('S_STRING13',sTxDrugYn);  //처치약제여부

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


//퇴원시 실시된 검사결과조회
function HmdOrderv.SelectExamDone(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sType2,sType3,sType4] );
   if (txGetF32('MD_ORDER_L6')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE2'  ,sMedDate );
      GetFldVar32('S_CODE3'  ,sPatSect );
      GetFldVar32('S_CODE4'  ,sPatSite );
      GetFldVar32('S_CODE5'  ,sOrdGrp  );
      GetFldVar32('S_CODE6'  ,sOrdGrpNm);
      GetFldVar32('S_CODE7'  ,sSlipCd  );
      GetFldVar32('S_CODE8'  ,sOrdType );
      GetFldVar32('S_CODE9'  ,sOrdKind );
      GetFldVar32('S_CODE10' ,sDiscYn  );
      GetFldVar32('S_CODE11' ,sErYn    );
      GetFldVar32('S_CODE12' ,sMedDept );
      GetFldVar32('S_CODE13' ,sDeptNm  );
      GetFldVar32('S_CODE14' ,sOrdDr   );
      GetFldVar32('S_CODE15' ,sOrdDrNm );
      GetFldVar32('S_CODE16' ,sOrdCd   );
      GetFldVar32('S_CODE17' ,sOrdDesc1);
      GetFldVar32('S_CODE18' ,sOrdDesc2);
      GetFldVar32('S_CODE19' ,sPrnYn   );
      GetFldVar32('S_CODE20' ,sNurStat );
      GetFldVar32('S_CODE21' ,sRcpStat );
      GetFldVar32('S_CODE22' ,sJinjStat);
      GetFldVar32('S_CODE23' ,sEditDate);
      GetFldVar32('S_CODE24' ,sOrdTime);
      GetFldVar32('S_CODE25' ,sStatName);  // 결과및진행상태
      GetFldVar32('S_CODE26' ,sOrdName );  // 처방명
      GetFldVar32('S_CODE27' ,sOrdTime2);
      GetFldVar32('S_CODE28' ,sPrintCnt);  // 처방전출력횟수
      GetFldVar32('S_CODE29' ,sOrdDesc );  // 처방상세(간호용)
      GetFldVar32('S_CODE30' ,sUseSite );  // 사용장소
      GetFldVar32('S_STRING1',sInOutYn );  // 원내/외구분(약)
      Result := GetRecordCnt32('S_CODE1'); // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;


// 환자검색용 일자별 처방조회
function HmdOrderv.DayOrderSelect(Type1,PatNo,AdmDate,Type2,Locate:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[Type1,PatNo,AdmDate,Type2,Locate] );
   if (txGetF32('MD_ORDER_L8')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE2'  ,sMedDate );
      GetFldVar32('S_CODE3'  ,sPatSect );
      GetFldVar32('S_CODE4'  ,sPatSite );
      GetFldVar32('S_CODE5'  ,sOrdGrp  );
      GetFldVar32('S_CODE6'  ,sOrdGrpNm);
      GetFldVar32('S_CODE7'  ,sSlipCd  );
      GetFldVar32('S_CODE8'  ,sOrdType );
      GetFldVar32('S_CODE9'  ,sOrdKind );
      GetFldVar32('S_CODE10' ,sDiscYn  );
      GetFldVar32('S_CODE11' ,sErYn    );
      GetFldVar32('S_CODE12' ,sMedDept );
      GetFldVar32('S_CODE13' ,sDeptNm  );
      GetFldVar32('S_CODE14' ,sOrdDr   );
      GetFldVar32('S_CODE15' ,sOrdDrNm );
      GetFldVar32('S_CODE16' ,sOrdCd   );
      GetFldVar32('S_CODE17' ,sOrdDesc1);
      GetFldVar32('S_CODE18' ,sOrdDesc2);
      GetFldVar32('S_CODE19' ,sPrnYn   );
      GetFldVar32('S_CODE20' ,sNurStat );
      GetFldVar32('S_CODE21' ,sRcpStat );
      GetFldVar32('S_CODE22' ,sJinjStat);
      GetFldVar32('S_CODE23' ,sEditDate);
      GetFldVar32('S_CODE24' ,sOrdTime);
      GetFldVar32('S_CODE25' ,sStatName);  // 결과및진행상태
      GetFldVar32('S_CODE26' ,sOrdName );  // 처방명
      GetFldVar32('S_CODE27' ,sOrdTime2);
      GetFldVar32('S_CODE28' ,sPrintCnt);  // 처방전출력횟수
      GetFldVar32('S_CODE29' ,sOrdDesc );  // 처방상세(간호용)
      GetFldVar32('S_CODE30' ,sUseSite );  // 사용장소
      GetFldVar32('S_STRING1',sInOutYn );  // 원내/외구분(약)
      GetFldVar32('S_STRING2',sOrdDept );  // 처방의소속과
      GetFldVar32('S_STRING3',sDcDate  );  // 처방의소속과
      GetFldVar32('S_STRING4',sRsltupp);
      GetFldVar32('S_STRING5',sRsltlow);
      GetFldVar32('S_STRING6',sRsltVal);
      GetFldVar32('S_STRING7',sOrdsite);
      GetFldVar32('S_STRING8',sDrugKind);
      GetFldVar32('S_STRING9',sDrugtype2);
      GetFldVar32('S_STRING10',sExecdate);
      GetFldVar32('S_STRING11',sSlddocyn);

      Result := GetRecordCnt32('S_CODE1'); // Service를 수행하고 FML Buffer에 PUT된 Record수

      txFree32;
   end;
end;

//PRN실시입력 (응급실->병동)
function HmdOrderv.InsertAdmPrn2(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_STRING1;S_NUMVAL1;S_NUMVAL2;S_STRING2;');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo   [i]), String(sOrdDate [i]), String(sOrdGrp  [i]),
                     String(sWardNo  [i]), String(sRoomNo  [i]), String(sOrdSite [i]),
                     String(sEditId  [i]), String(sEditIp  [i]), String(sMainYn  [i]),
                     String(sBundleNo[i]),String(sOrdseqNo[i]), String(sOrddesc1 [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_PRNOR_I5')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 간호사 처방확인 (Multi Update) -- 응급실용
function HmdOrderv.ConfirmOrder2(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;L_SEQNO1');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sOrdGrp[i]),
                     String(sConfNrs[i]),Integer(iOrdSeqNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_U3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//과내검사 실시취소
function HmdOrderv.ExmCancel(sType1,sPatNo,sOrdDate,sOrdSeqNo,sEditId,sEditIp,
                             sType2,sType3,sType4,sCode1,sCode2,sCode3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_EDITID;S_EDITIP;S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sType1, sPatNo, sOrdDate, sOrdSeqNo, sType2, sType3, sType4,sEditId, sEditIp, sCode1, sCode2, sCode3]);

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_U5')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdOrderv.OrdSiteSelect(sType1,sPatNo,tOrdDate,sLocate:String):Integer;
begin
   Result := -1;
   txAlloc32;   //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sPatNo,tOrdDate,sLocate] );
   if (txGetF32('MD_ORDER_L11')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE2'  ,sMedDate );
      GetFldVar32('S_CODE3'  ,sPatSect );
      GetFldVar32('S_CODE4'  ,sPatSite );
      GetFldVar32('S_CODE5'  ,sOrdGrp  );
      GetFldVar32('S_CODE6'  ,sOrdGrpNm);
      GetFldVar32('S_CODE7'  ,sSlipCd  );
      GetFldVar32('S_CODE8'  ,sOrdType );
      GetFldVar32('S_CODE9'  ,sOrdKind );
      GetFldVar32('S_CODE10' ,sDiscYn  );
      GetFldVar32('S_CODE11' ,sErYn    );
      GetFldVar32('S_CODE12' ,sMedDept );
      GetFldVar32('S_CODE13' ,sDeptNm  );
      GetFldVar32('S_CODE14' ,sOrdDr   );
      GetFldVar32('S_CODE15' ,sOrdDrNm );
      GetFldVar32('S_CODE16' ,sOrdCd   );
      GetFldVar32('S_CODE17' ,sOrdDesc1);
      GetFldVar32('S_CODE18' ,sOrdDesc2);
      GetFldVar32('S_CODE19' ,sPrnYn   );
      GetFldVar32('S_CODE20' ,sNurStat );
      GetFldVar32('S_CODE21' ,sRcpStat );
      GetFldVar32('S_CODE22' ,sJinjStat);
      GetFldVar32('S_CODE23' ,sEditDate);
      GetFldVar32('S_CODE24' ,sOrdTime );
      GetFldVar32('S_CODE25' ,sStatName);   // 결과및진행상태
      GetFldVar32('S_CODE26' ,sOrdName );   // 처방명
      GetFldVar32('S_CODE27' ,sOrdTime2);
      GetFldVar32('S_CODE28' ,sPrintCnt);   // 처방전출력횟수
      GetFldVar32('S_CODE29' ,sOrdDesc );   // 처방상세(간호용)
      GetFldVar32('S_CODE30' ,sUseSite );   // 사용장소
      GetFldVar32('S_STRING1',sInOutYn );   // 원내/외구분(약)
      GetFldVar32('S_STRING2',sOrdDept );   // 처방의소속과
      GetFldVar32('S_STRING3',sOrdSite );   // 처방 발행처
      GetFldVar32('S_STRING4',sAltYn   );   // 대체조제여부
      GetFldVar32('S_STRING5',sOrdYn   );   // 처방가능여부
      GetFldVar32('S_STRING6',sDcDate  );   // D/C일자
      GetFldVar32('S_STRING7',sDcOrdDr );   // D/C의사
      GetFldVar32('S_STRING8',sOpexdate);   // D/C의사
      GetFldVar32('S_STRING9',sBundleNo);
      Result := GetRecordCnt32('S_CODE1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

// 처방발행처 변경
function HmdOrderv.ChangeOrdSite(sType1:String;Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE;L_SEQNO1;S_STRING1');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[sType1,String(sPatNo[i]),String(sOrdDate[i]),
                     Integer(iOrdSeqNo[i]),String(sOrdSite[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_U8')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdOrderv.UpdateDc(strPatNo, strOrdDate, strOrdSeqNo, strStat, strCon, strPatSect:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[strPatNo,strOrdDate,strOrdSeqNo,strStat,strCon, strPatSect]);

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_U9')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//챠트대출 희망부서 확인.
function HmdOrderv.CheckChartYn(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6] );
   if (txGetF32('MD_ORDER_L13')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);

      GetFldVar32('S_CODE1'   , sOrddate   );
      GetFldVar32('S_CODE2'   , sMeddate   );
      GetFldVar32('S_CODE3'   , sPatsect   );
      GetFldVar32('S_CODE4'   , sPatsite   );
      GetFldVar32('S_CODE5'   , sOrdgrp    );
      GetFldVar32('S_CODE6'   , sOrdgrpnm  );
      GetFldVar32('S_CODE7'   , sSlipcd    );
      GetFldVar32('S_CODE8'   , sOrdtype   );
      GetFldVar32('S_CODE9'   , sOrdkind   );
      GetFldVar32('S_CODE10'  , sDiscyn    );
      GetFldVar32('S_CODE11'  , sEryn      );
      GetFldVar32('S_CODE12'  , sMeddept   );
      GetFldVar32('S_CODE13'  , sDeptnm    );
      GetFldVar32('S_CODE14'  , sOrddr     );
      GetFldVar32('S_CODE15'  , sOrddrnm   );
      GetFldVar32('S_CODE16'  , sOrdcd     );
      GetFldVar32('S_CODE17'  , sOrddesc1  );
      GetFldVar32('S_CODE18'  , sOrddesc2  );
      GetFldVar32('S_CODE19'  , sPrnyn     );
      GetFldVar32('S_CODE20'  , sNurstat   );
      GetFldVar32('S_CODE21'  , sRcpstat   );
      GetFldVar32('S_CODE22'  , sProcstat  );
      GetFldVar32('S_CODE23'  , sEditdate  );
      GetFldVar32('S_CODE24'  , sOrdtime   );
//      GetFldVar32('S_CODE25'  , sStatus    );
      GetFldVar32('S_CODE26'  , sOrdname   );
      GetFldVar32('S_CODE27'  , sOrdtime2  );
      GetFldVar32('S_CODE28'  , sPrintcnt  );
      GetFldVar32('S_CODE29'  , sOrddesc   );
      GetFldVar32('S_CODE30'  , sUsesite   );
      GetFldVar32('S_STRING1' , sInoutyn   );
      GetFldVar32('S_STRING2' , sOrddept   );
      GetFldVar32('S_STRING3' , sOrdsite   );
      GetFldVar32('S_STRING4' , sAltyn     );
      GetFldVar32('S_STRING5' , sOrdYn     );
      GetFldVar32('S_STRING6' , sDcdate    );
      GetFldVar32('S_STRING7' , sDcorddr   );
//      GetFldVar32('S_STRING8' , sDcdatef   );
      GetFldVar32('S_STRING9' , sBundleno  );

      {
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE16' ,sOrdCd   );
      GetFldVar32('S_CODE26' ,sOrdName );   // 처방명
      }

      Result := GetRecordCnt32('S_CODE1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

function HmdOrderv.SelectExmTrt(sGubun,sPatsect,sFromdt,sTodate,sMeddept,sSlipcd:string): Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sGubun,sPatsect,sFromdt,sTodate,sMeddept,sSlipcd] );
   if (txGetF32('MD_ORDER_S3')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1' ,sOrdcd);
      GetFldVar32('S_STRING2' ,sOrdDesc);
      GetFldVar32('S_STRING3' ,scount );
      Result := GetRecordCnt32('S_STRING1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

function HmdOrderv.ExmTrtdetail(sGubun,sPatsect,sFromdt,sTodate,sMeddept,sOrdcd:string): Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sGubun,sPatsect,sFromdt,sTodate,sMeddept,sOrdcd] );
   if (txGetF32('MD_ORDER_S4')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1' ,sOrddate  );
      GetFldVar32('S_STRING2' ,sPatno    );
      GetFldVar32('S_STRING3' ,sPatname  );
      GetFldVar32('S_STRING4' ,sSex      );
      GetFldVar32('S_STRING5' ,sBirtdate );
      GetFldVar32('S_STRING6' ,sMeddept1  );
      GetFldVar32('S_STRING7' ,sCount    );
      GetFldVar32('S_STRING8' ,sOrddesc  );
      GetFldVar32('S_STRING9' ,sOrddr  );
      GetFldVar32('S_STRING10',sProcstat );
      GetFldVar32('S_STRING11',sRcpstat  );
      GetFldVar32('S_STRING12',sRoomno );

      Result := GetRecordCnt32('S_STRING1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

function HmdOrderv.ExmTrtOrddr(sGubun,sPatsect,sFromdt,sTodate,sMeddept,sOrdcd:string): Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sGubun,sPatsect,sFromdt,sTodate,sMeddept,sOrdcd] );
   if (txGetF('MD_ORDER_S5')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,sOrddr);
      GetFldVar('S_STRING2' ,sOrddesc);
      GetFldVar('S_STRING3' ,sCount);
      Result := GetRecordCnt('S_STRING1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// Powder 요청
function HmdOrderv.UpMedPow(sType1,sPatNo,sOrddate,sOrdSeqNo,Editid,Editip : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE;S_STRING1;S_EDITID;S_EDITIP');
   SetFldValue(0,[sType1,sPatNo,sOrddate,sOrdSeqNo,Editid,Editip]);

   if (txPutF('MD_ORDER_UA')) then
   begin
      GetFldVar('S_STRING1',sType2); //처리결과(A=입원처리,R=입원예약,Y=예약처리)
      Result := 1;
      txFree;
   end;
end;

//외래환자 미래처방을 외래처방으로 전환
function HmdOrderv.ConvertOutOrd(PatNo,MedDate,MedDept,MedDr,MedTime,
                                 EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_EDITID;S_EDITIP');
   SetFldValue(0,[PatNo,MedDate,MedDept,MedDr,MedTime,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_I8')) then
   begin
      Result := 1;
      txFree;
   end;
end;   

//해당일자+진료과+진료의에 대한 처방유무
function HmdOrderv.CheckOrdYn(sPatno,sMeddate,sMeddept,sChadr:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0,[sPatNo,sMeddate,sMeddept,sChadr]);

   //Tuxedo Service Call
   if (txGetF('MD_ORDER_S7')) then
   begin
      GetFldVar('L_LONG1', iCount);

      //조회건수 return
      Result := GetRecordCnt('L_LONG1');
      txFree;
   end;
end;
//추가..
// 과내검사통계
function Hmdorderv.SelOStat(strType, FromDate, ToDate, strDeptCd, strPatSect, sLocate:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[strType,FromDate,ToDate, strDeptCd,strPatSect,sLocate] );
   if (txGetF32('MD_ORDER_L13')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1' ,iOrdSeqno);
      GetFldVar32('S_CODE1'  ,sOrdDate );
      GetFldVar32('S_CODE16' ,sOrdCd   );
      GetFldVar32('S_CODE26' ,sOrdName );   // 처방명
      Result := GetRecordCnt32('S_CODE1');  // Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

// 처방내역 입력 재활처방 임시 2002.10.28(Multi Input)           SONGLIM_THOMA 수정
function HmdOrderv.InsertOrdList2(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
              'S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;S_TYPE13;'+
              'S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;'+
              'S_TYPE21;S_TYPE22;S_TYPE23;S_TYPE24;S_TYPE25;S_TYPE26;S_TYPE27;'+
              'S_TYPE28;S_TYPE29;S_TYPE30;S_TYPE31;S_TEXT1;S_TEXT2;S_TEXT3;'+
              //약
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              //'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              //'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING13;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_DESC1;S_DESC2;S_DESC3;'+
              //검사
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;'+
              'S_STRING27;S_STRING28;S_STRING29;S_STRING30;S_STRING31;S_STRING32;'+
              'S_CONTENTS1;S_CONTENTS2;'+
              //처치.재료.수술.마취
              'S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;S_NAME6;S_NAME7;'+
              'S_NAME8;S_NAME10;S_NAME11;S_NAME12;S_NAME13;S_NAME14;S_NAME15;'+
              //수혈
              'S_NAME21;S_NAME22;S_NAME23;S_NAME24;S_NAME25;S_NAME26;'+
              'S_NAME27;S_NAME28;S_NAME29;'+
              //항균제
              'S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;'+
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              //컨설트
              'S_STAT1;S_STAT2;S_STAT3;S_STAT4;S_STAT5;S_STAT6;S_STAT7;'+
              'S_STAT8;S_STAT9;S_STAT10;S_FLAG1;'+
              //약-NumValue
              //'S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4;S_NUMVAL5;S_NUMVAL6;'+
              'S_NUMVAL1;S_NUMVAL6;'+
              'S_NUMVAL7;S_NUMVAL8;S_NUMVAL9;S_NUMVAL10;S_NUMVAL11;S_NUMVAL12');
              //재활
              //'S_FLAG2;S_FLAG3');
   for i := 0 to Cnt-1 do
   begin
////

    SetFldValue32(i,[String(sPatNo   [i]), String(sOrdDate [i]), String(sMedDate [i]),
                     String(sPatSect [i]), String(sOrdGrp  [i]), String(sSlipCd  [i]),
                     String(sOrdType [i]), String(sOrdKind [i]), String(sErYn    [i]),
                     String(sPreActYn[i]), String(sMedDept [i]), String(sChaDr   [i]),
                     String(sOrdDr   [i]), String(sOrdCd   [i]), String(sWardNo  [i]),
                     String(sRoomNo  [i]), String(sOrdSite [i]), String(sRemark  [i]),
                     String(sOrdDesc1[i]), String(sOrdDesc2[i]), String(sPrnYn   [i]),
                     String(sOldPttp [i]), String(sInsType [i]), String(sEditId  [i]),
                     String(sEditIp  [i]), String(sMedTime [i]), String(sOpDate  [i]),
                     String(sOpSeqNo [i]), String(sMedYn   [i]), String(sPrepYn  [i]),
                     String(sKindName[i]), String(sMixCheck[i]), String(sLabNo   [i]),
                     String(sHeaderYn[i]), String(sSpecNo  [i]),
                     //약
                     String(sOrdUnit [i]), String(sUnitType[i]), String(sDgijType[i]),
                     String(sDetRoute[i]), String(sMethodCd[i]), String(sMethdRmk[i]),
                     String(sSelfYn  [i]), String(sPowYn   [i]), String(sAstYn   [i]),
                     String(sMixyn   [i]), String(sSelfIjYn[i]), String(sInjtloc [i]),
                     String(sMainYn  [i]),{String(sLtermRsn[i]),}String(sInOutYn [i]),
                     String(sInResn  [i]), String(sInjDate [i]), String(sChemoYn [i]),
                     String(sGttUnit [i]), String(sDgRcpYn [i]), String(sSideYn  [i]),
                     String(sTxDrugYn[i]), String(sPreMedYn[i]),
                     //검사
                     String(sDiagcd  [i]), String(sDiagname[i]), String(sPortyn  [i]),
                     String(sFcryn   [i]), String(sDruginyn[i]), String(sOrdtext [i]),
                     String(sSpccode1[i]), String(sSpccode2[i]), String(sRsvYn   [i]),
                     String(sHopedate[i]), String(sSpcdr   [i]), String(sSpcdryn [i]),
                     String(sExmCount[i]), String(sReadYn  [i]),
                     //처치.재료.수술.마취
                     String(sOpdopyn [i]), String(sMainop  [i]), String(sReopyn  [i]),
                     String(sNightyp [i]), String(sTrSpcyn [i]), String(sExecdr  [i]),
                     String(sTrqty   [i]), String(sTrcount [i]), String(sAnethmm [i]),
                     String(sTeeuplt [i]), String(sTeeuprt [i]), String(sTeedwlt [i]),
                     String(sTeedwrt [i]), String(sTrtLoc  [i]),
                     //수혈
                     String(sBldQty  [i]), String(sUsecode [i]), String(sOpexdate[i]),
                     String(sFiltyn  [i]), String(sBldAstyn[i]), String(sTrselfyn[i]),
                     String(sDonryn  [i]), String(sIrradyn [i]), String(sTrnsFloc[i]),
                     //항균제
                     String(sDrugkind[i]), String(sBasisdx [i]), String(sInfsymtm[i]),
                     String(sChkyn   [i]), String(sFungusnm[i]), String(sSensamc [i]),
                     String(sSensclot[i]), String(sSenscpfx[i]), String(sSensoxa [i]),
                     String(sSensgm  [i]), String(sSensem  [i]), String(sSensctrx[i]),
                     String(sOrdrsncd[i]), String(sOrdrsndt[i]),
                     //컨설트
                     String(sCsOrdgrp[i]), String(sCsSlipcd[i]), String(sCsOrdcd [i]),
                     String(sCallyn  [i]), String(sConsdept[i]), String(sConsdr  [i]),
                     String(sConsctnt[i]), String(sDmdietyn[i]), String(sDietdate[i]),
                     String(sConstype[i]), String(sNotitext[i]),
                     //약-NumValue
                     String(sDoseQty [i]),{String(sDoseQty2[i]), String(sDoseQty3[i]),
                     String(sDoseQty4[i]), String(sDoseQty5[i]),}String(sTotQty  [i]),
                     String(sCount   [i]), String(sUseDay  [i]), String(sBundleNo[i]),
                     String(sGtt     [i]), String(sActSeqNo[i]), String(sTypcd2  [i])]);
////
   end;

   //재활 추가...
   SetFldName32('S_FLAG2;S_FLAG3;S_FLAG4;S_FLAG5;S_FLAG6;'+
                 //검사처방 A7여부 추가.
                'S_FLAG7');

   for i := 0 to Cnt-1 do
   begin
////

    SetFldValue32(i,[String(sSiteCd  [i]), String(sTermsCd [i]), String(sDayCnt [i]),
                     String(sDays    [i]), String(sRsvDays[i]),
                     //검사처방 A7여부
                     String(sAseven  [i])]);
   end;

   // SONGLIM_THOMA 수정
   SetFldName32('S_STRING33;S_STRING34;S_STRING35');
   for i := 0 to Cnt-1 do
   begin
       SetFldValue32(i,[String(sSignData  [i]), String(sSerialNo [i]), String(sSubjectDN [i])]);
   end;

   // 저함량 배수처방 사유기재 추가 김송주
   SetFldName32('S_STRING36;S_STRING37');
   for i := 0 to Cnt-1 do
   begin
       SetFldValue32(i,[String(sLoReasoncd  [i]), String(sLoReason [i])]);
   end;

   // 중복처방 추가 김송주
   SetFldName32('S_STRING38;S_STRING39;S_STRING40');
   for i := 0 to Cnt-1 do
   begin
       SetFldValue32(i,[String(sDuprasncd  [i]), String(sDuprasndt [i]), String(sDupyn [i])]);
   end;

   // DRTEAM 여부 추가 김송주 2010.06.10
   SetFldName32('S_STRING41');
   for i := 0 to Cnt-1 do
   begin
       SetFldValue32(i,[String(sDrteamyn [i])]);
   end;

   // PRN 실시기준 추가 김송주 2011.05.18
   SetFldName32('S_STRING42');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sPrnOrdRmk [i])]);
   end;

   // PRN 실시기준 추가 김송주 2011.05.18
   SetFldName32('S_STRING43');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sAntidrugrmk [i])]);
   end;

   // 치매검사결과
   SetFldName32('S_STRING44');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sDementiaResult[i])]);
   end;

   // 치매검사결과
   SetFldName32('S_STRING45');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sSyrupText[i])]);
   end;

   //산재환자 향정처방사유, KimDaeYong 2014-03-26
   SetFldName32('S_STRING46');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sAntidrugrmk2[i])]);
   end;

   //개정초음파처방사유, KimDaeYong 2016-09-26
   //단순,유도,임산부초음파
   //물품코드(CareCamp용)추가(S_STRING53/sProdcode). KimDaeYong 2018-03-27
   //PRN정보 추가(S_STRING54,S_STRING55). KimDaeYong 2019-05-03
   //신체보호대추가(S_STRING56~63). KimDaeYong 2019-06-05
   //의사공유메시지여부(S_STRING64). KimDaeYong 2019-07-18
   //응급중환자초음파, 해부학적구분2~6/구체적사유2~6. KimDaeYong 2019-07-25
   SetFldName32('S_STRING47;S_STRING48;S_STRING49;' +
                'S_STRING50;S_STRING51;S_STRING52;' +
                'S_STRING53;S_STRING54;S_STRING55;' +
                'S_STRING56;S_STRING57;S_STRING58;' +
                'S_STRING59;S_STRING60;S_STRING61;' +
                'S_STRING62;S_STRING63;S_STRING64;' +
                'S_STRING65;S_STRING66;S_STRING67;' +
                'S_STRING68;S_STRING69;S_STRING70;' +
                'S_STRING71;S_STRING72;S_STRING73;' +
                'S_STRING74' );
   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sSonoAnatCd[i]),String(sSonoEdiCd[i]),String(sSonoRsn[i]),
                       String(sSonoPregWk[i]),String(sSonoPgInsChk[i]),String(sSonoPgInsRsn[i]),
                       String(sProdcode[i]),String(sPrnStpRmk[i]),String(sPrnCnt[i]),
                       String(sRsn[i]),String(sRsnoth[i]),String(sKind[i]),
                       String(sKindoth[i]),String(sRegion[i]),String(sRegionoth[i]),
                       String(sMethd[i]),String(sMethdoth[i]),String(sDrmsgyn[i]),
                       String(sSonoAnatCd2[i]),String(sSonoAnatCd3[i]),String(sSonoAnatCd4[i]),
                       String(sSonoAnatCd5[i]),String(sSonoAnatCd6[i]),String(sSonoRsn2[i]),
                       String(sSonoRsn3[i]),String(sSonoRsn4[i]),String(sSonoRsn5[i]),
                       String(sSonoRsn6[i]) ]);
   end;


   //Tuxedo Service Call
   if (txPutF32('MD_ORDER_ID',600)) then     //md_order_iD.pc  ## 2008.10.28 김송주 최대처리시간 늘려줌
   begin
      GetFldVar32('S_STRING1', sOrdTime);

      Result := 1;
      txFree32;
   end;
end;
//

//(추가. 2003.1.24 이용언) 재활처방 D/C 체크
function HmdOrderv.RehordDc(Patno, Orddate, Ordcd, Ordseqno : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[Patno,Orddate,Ordcd,Ordseqno]);

   if (TxGetF('MD_ORDRC_S6')) then
   begin

      GetFldVar('S_STRING1',sRcpStat);
      GetFldVar('S_STRING2',sExecdate);

      Result := GetReCordCnt('S_STRING1');

      TxFree;
   end;
end;

//(추가. 2003.2.22 이용언) 제증명서 D/C 체크
function HmdOrderv.CheckCerti(Patno, Orddate,Ordseqno : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[Patno,Orddate,Ordseqno]);

   if (TxGetF('MD_CERTI_L2')) then
   begin
      GetFldVar('S_STRING1',sOrddate);
      Result := GetReCordCnt('S_STRING1');

      TxFree;
   end;
end;

//(추가. 2003.05.02 이용언) 테스트              SONGLIM_THOMA 전자인증 수정
// 전처방조회
// sType1 (1:환자의 모든 처방일 2:재원기간중의 처방일 3:특정처방일의 처방내용)
// sType2 (환자번호)  sType3 (sType1이 2는 입원일, 3이면 처방일) sType4 (사업장구분)
function HmdOrderv.PreOrderSelect2(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_ORDER_LD')) then begin //Tuxedo Service Call
      // Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_CODE1');

      SGetFldVar('L_SEQNO1' ,iOrdSeqno);
      sGetFldVar('S_CODE1'  ,sOrdDate );
      sGetFldVar('S_CODE2'  ,sMedDate );
      sGetFldVar('S_CODE3'  ,sPatSect );
      sGetFldVar('S_CODE4'  ,sPatSite );
      sGetFldVar('S_CODE5'  ,sOrdGrp  );
      sGetFldVar('S_CODE6'  ,sOrdGrpNm);
      sGetFldVar('S_CODE7'  ,sSlipCd  );
      sGetFldVar('S_CODE8'  ,sOrdType );
      sGetFldVar('S_CODE9'  ,sOrdKind );
      sGetFldVar('S_CODE10' ,sDiscYn  );
      sGetFldVar('S_CODE11' ,sErYn    );
      sGetFldVar('S_CODE12' ,sMedDept );
      sGetFldVar('S_CODE13' ,sDeptNm  );
      sGetFldVar('S_CODE14' ,sOrdDr   );
      sGetFldVar('S_CODE15' ,sOrdDrNm );
      sGetFldVar('S_CODE16' ,sOrdCd   );
      sGetFldVar('S_CODE17' ,sOrdDesc1);
      sGetFldVar('S_CODE18' ,sOrdDesc2);
      sGetFldVar('S_CODE19' ,sPrnYn   );
      sGetFldVar('S_CODE20' ,sNurStat );
      sGetFldVar('S_CODE21' ,sRcpStat );
      sGetFldVar('S_CODE22' ,sJinjStat);
      sGetFldVar('S_CODE23' ,sEditDate);
      sGetFldVar('S_CODE24' ,sOrdTime);
      sGetFldVar('S_CODE25' ,sStatName);   // 결과및진행상태
      sGetFldVar('S_CODE26' ,sOrdName );   // 처방명
      sGetFldVar('S_CODE27' ,sOrdTime2);
      sGetFldVar('S_CODE28' ,sPrintCnt);   // 처방전출력횟수
      sGetFldVar('S_CODE29' ,sOrdDesc );   // 처방상세(간호용)
      sGetFldVar('S_CODE30' ,sUseSite );   // 사용장소
      sGetFldVar('S_STRING1',sInOutYn );   // 원내/외구분(약)
      sGetFldVar('S_STRING2',sOrdDept );   // 처방의소속과
      sGetFldVar('S_STRING3',sOrdSite );   // 처방 발행처
      sGetFldVar('S_STRING4',sAltYn   );   // 대체조제여부
      sGetFldVar('S_STRING5',sOrdYn   );   // 처방가능여부
      sGetFldVar('S_STRING6',sDcDate  );   // D/C일자
      sGetFldVar('S_STRING7',sDcOrdDr );   // D/C의사
      sGetFldVar('S_STRING8',sOpexdate);   // D/C의사
      sGetFldVar('S_STRING9',sIoqty );     // D/C의사
      sGetFldVar('S_STRING10',sRtnqty);    // D/C의사

      sGetFldVar('S_STRING11',sExecDate);  // 검사일자

      sGetFldVar('S_STRING12',sRsltupp );
      sGetFldVar('S_STRING13',sRsltlow );
      sGetFldVar('S_STRING14',sRsltVal );
      sGetFldVar('S_STRING15',sInjtloc );
      sGetFldVar('S_STRING16',sSelfyn  );
      sGetFldVar('S_STRING17',sBundleno);
      sGetFldVar('S_STRING18',sMainYn  );

      sGetFldVar('S_STRING19',sOrdunit);
      sGetFldVar('S_STRING20',sDoseqty);
      sGetFldVar('S_STRING21',sMethodcd);
      sGetFldVar('S_STRING22',sGtt);
      sGetFldVar('S_STRING23',sGttunit);
      sGetFldVar('S_STRING24',sDcYn    );  //약국접수취소여부

      // 이선규추가
      sGetFldVar('S_STRING25',sMixyn);
      sGetFldVar('S_STRING26',sActinf);
      sGetFldVar('S_STRING27',sCount);
      sGetFldVar('S_STRING28',sAbbr);
      sGetFldVar('S_STRING29',sTotQty);
      sGetFldVar('S_STRING30',sMgpcc );
      sGetFldVar('S_STRING31',sOrddesc3);
      sGetFldVar('S_STRING32',sRsltunit);
      sGetFldVar('S_STRING33',sSdtblqty);
      sGetFldVar('S_STRING34',sDoseunit);
      sGetFldVar('S_STRING35',sInstype);
      sGetFldVar('S_STRING36',sOrdtext);
      sGetFldVar('S_STRING37',sConfid);
      sGetFldVar('S_STRING38',sConfnm);
      sGetFldVar('S_STRING39',sRemark);

      sGetFldVar('S_STRING40',sSignData);
      sGetFldVar('S_STRING41',sSerialNo);
      sGetFldVar('S_STRING42',sSubjectDN);

      // 주성분코드 2008.09.30 김송주 추가
      sGetFldVar('S_STRING49', sMaincd);
      sGetFldVar('S_STRING50', sUsedate);
      // 전체반납여부 2008.10.22 김송주 추가
      sGetFldVar('S_STRING51', sTotrtnyn);
      sGetFldVar('S_STRING52', sPrnOrdRmk);
      sGetFldVar('S_STRING53', sHighCareYn);
      // 보고일시. KimDaeYong 2018-06-11
      sGetFldVar('S_STRING54', sRsltdate);
      //PRN정보 및 ORDTEXT(약,임상소견/지시내용)
      sGetFldVar('S_STRING55', sMedOrdtext);
      sGetFldVar('S_STRING56', sPrnStpRmk);
      sGetFldVar('S_STRING57', sPrnCnt);
      //신체보호대(T800)사유. KimDaeYong 2019-06-07
      sGetFldVar('S_STRING58', sRsn);
      sGetFldVar('S_STRING59', sRsnoth);
      sGetFldVar('S_STRING60', sKind);
      sGetFldVar('S_STRING61', sKindoth);
      sGetFldVar('S_STRING62', sRegion);
      sGetFldVar('S_STRING63', sRegionoth);
      sGetFldVar('S_STRING64', sMethd);
      sGetFldVar('S_STRING65', sMethdoth);
      //S_STRING66,67은 간호에서 사용중.
      //의사공유메시지여부. KimDaeYong 2019-07-18
      sGetFldVar('S_STRING68', sDrmsgyn);


      txFree;
   end;
end;

function HmdOrderv.UpdateInstype(sPatNo,sOrddate,sOrdcd,sInstype,sOrdDesc2,Editid,Editip:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatNo,sOrddate,sOrdcd,sInstype,sOrdDesc2,Editid,Editip]);

   if (txPutF('MD_ORDER_UC')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdOrderv.UpdateOrdtext(sType1,sPatNo,sOrddate,sOrdcd,sOrdseqno,sOrdtext,Editid,Editip:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0,[sType1,sPatNo,sOrddate,sOrdcd,sOrdseqno,sOrdtext,Editid,Editip]);

   if (txPutF('MD_ORDER_UD')) then
   begin
      Result := 1;
      txFree;
   end;
end;

{function HmdOrderv.UpdateRemark(sPatNo,sOrddate,sOrdcd,sOrdseqno,sRemark,Editid,Editip:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatNo,sOrddate,sOrdcd,sOrdseqno,sRemark,Editid,Editip]);

   if (txPutF('MD_ORDER_UD')) then
   begin
      Result := 1;
      txFree;
   end;
end;}

////////////////////////////////////////////////////////////////////////////////
//  HmdBasort 	기본처방                                                      //
////////////////////////////////////////////////////////////////////////////////

// 기본처방 자동 입력
function HmdBasort.Input1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

// 최초 식이처방 조회
function HmdBasort.Select1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdMedort 	약처방                                                        //
////////////////////////////////////////////////////////////////////////////////

// 기간동안의 투약명을 조회
function HmdMedort.ListMedOrdName(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_MEDOR_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrdCd);
      GetFldVar('S_STRING2', sOrdName);
      GetFldVar('S_STRING3', sOrdunit);
      GetFldVar('S_STRING4', sDrugkind);
      GetFldVar('S_STRING5', sQty);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;       

{function HmdMedort.ListMedOrdMeth(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDateS[i]),String(sOrdDateE[i]),String(sOrdCdI[i]),
                     String(sType1[i])]);
   if (txGetF('MD_MEDOR_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrdCd);
      GetFldVar('S_STRING2', sOrdName);
      GetFldVar('S_STRING3', sOrdDate);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;}

function HmdMedort.ListMedOrdMeth(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDateS[i]),String(sOrdDateE[i]),String(sOrdCdI[i]),
                     String(sType1[i]),String(sOrdUnitI[i])]);
   if (txGetF('MD_MEDOR_L2')) then begin //Tuxedo Service Call     md_medor_l2.pc
      GetFldVar('S_STRING1', sOrdCd);
      GetFldVar('S_STRING2', sOrdName);
      GetFldVar('S_STRING3', sOrdDate);
      GetFldVar('S_STRING4', sOrdUnit);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdMedort.ListMedOrdMeth1(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDateS[i]),String(sOrdDateE[i]),String(sOrdCdI[i]),
                     String(sType1[i])]);
   if (txGetF('MD_MEDOR_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrdCd);
      GetFldVar('S_STRING2', sOrdName);
      GetFldVar('S_STRING3', sOrdDate);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수술중 주사약 처방
function HmdMedort.ListOpMeth(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sType2,sType3,sType4] );
   if (txGetF32('MD_MEDOR_L3')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', sOpstm);
      GetFldVar32('S_STRING2', sOproom);
      GetFldVar32('S_STRING3', sPatno);
      GetFldVar32('S_STRING4', sPatnm);
      GetFldVar32('S_STRING5', sMeddept);
      GetFldVar32('S_STRING6', sAge);
      GetFldVar32('S_STRING7', sRoomno);
      GetFldVar32('S_STRING8', sOrdunit);
      GetFldVar32('S_STRING9', sQty);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 약 반납횟수 조회
function HmdMedort.CountReturnMed(sType1,sType2,sType3:String;sType4:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_SEQNO1');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_IREJT_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1', sTotCnt);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 마약처방전 조회
function HmdMedort.ListDrug2(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   if (txGetF('MD_MEDOR_L10')) then begin   //Tuxedo Service Call
      GetFldVar('S_STRING1',  sDiagname);   // 진단명
      GetFldVar('S_STRING2',  sOrddr);      // 처방의
      GetFldVar('S_STRING3',  sDeptNm);     // 진료과Name
      GetFldVar('S_STRING4',  sBirdate);    // 생년월일
      GetFldVar('S_STRING5',  sAddr);       // 주소
      GetFldVar('S_STRING6',  sSex);        // 성별
      GetFldVar('S_STRING7',  sOrddrID);    // 처방의ID
      GetFldVar('S_STRING8',  sLicno);      // 의사면허번호
      GetFldVar('S_STRING9',  sDgPrtCnt);   // 마약처방전 출력수
      GetFldVar('S_STRING10', iOrdseqno);   // 처방순번
      GetFldVar('S_STRING11', sWardNo);     // 병동코드
      GetFldVar('S_STRING12', sRoomNo);     // 병실번호
      GetFldVar('S_STRING13', iOOrdDate);   // PRN 처방일자
      GetFldVar('S_STRING14', sOrdGrp);     // 처방분류
      GetFldVar('S_STRING15', sDiscYn);     // D/C 여부
      GetFldVar('S_STRING16', sErYn);       // 응급여부
      GetFldVar('S_STRING17', sDoseQty);    // 투여량
      GetFldVar('S_STRING18', sOrdUnit);    // 단위
      GetFldVar('S_STRING19', iCount);      // 횟수
      GetFldVar('S_STRING20', iUseDay);     // 일수
      GetFldVar('S_STRING21', sDrugName);   // 한글약품명
      GetFldVar('S_STRING22', sTotCnt);     // 약반납 총횟수
      GetFldVar('S_STRING23', sCalYn);      // 외용약 여부
      GetFldVar('S_STRING24', sMethodCd);   // 용법코드
      GetFldVar('S_STRING25', sAge);        // 나이
      GetFldVar('S_STRING26', sMedDept);
      GetFldVar('S_STRING27', sOrdTime);    //처방시간
      GetFldVar('S_STRING28', sOrdtype);
      GetFldVar('S_STRING29', sOrdkind);
      GetFldVar('S_STRING30', sRemark);
      GetFldVar('S_STRING31', sCc);
      GetFldVar('S_STRING32', sDosno);  //약제과요청추가. 20150107.kya
      GetFldVar('S_STRING33', sInoutyn);  //약제과요청추가. 20210106.kya

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 약품반납
function HmdMedort.ReturnMedi(sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                              sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                              sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;'+
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              'S_CODE15;S_EDITID;S_EDITIP;S_CODE16');
   SetFldValue(0,[sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                  sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                  sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd]);

   //Tuxedo Service Call
   if (txPutF('MD_OREJT_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdMedort.SelectDsnrpJoin(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF('MD_ORDER_L2')) then begin //Tuxedo Service Call
      //(추가. 2002.11.25 이용언)
      GetFldVar('S_CODE11', sRemark);
      GetFldVar('S_CODE15', sOrdCd);
	   GetFldVar('S_CODE16', sMethodCd);
      GetFldVar('S_CODE25', sPrnYn);
      Result := GetRecordCnt('S_CODE15');
      txFree;
   end;
end;

// 약품명으로 환자 조회
//function HmdMedort.ListUseDrug(sFromdate,sTodate,sDrugName:String):Integer;
function HmdMedort.ListUseDrug(sFromdate,sTodate,sDrugName,sDeptcd:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue32(0,[sFromdate,sTodate,sDrugName,sDeptcd] );
   if (txGetF32('MD_MEDOR_L5')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', tOrddate);
      GetFldVar32('S_STRING2', sPatName);
      GetFldVar32('S_STRING3', sPatno);
      GetFldVar32('S_STRING4', sSex);
      GetFldVar32('S_STRING5', sBirtDate);
      GetFldVar32('S_STRING6', sMeddept);
      GetFldVar32('S_STRING7', sOrddr);
      GetFldVar32('S_STRING8', sOrddesc);
      GetFldVar32('S_STRING9', sDoseqty);
      GetFldVar32('S_STRING10',sOrdunit);
      GetFldVar32('S_STRING11',sCount);
      GetFldVar32('S_STRING12',sUseday);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 해당일 해당환자의 원외처방전 조회
function HmdMedort.ListPrintMedor(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_MEDOR_L7')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sDosno);
      GetFldVar('S_STRING2', sOrddr);
      GetFldVar('S_STRING3', sPrintcnt);
      GetFldVar('S_STRING4', sOrdtime);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 처방전회수 (update)
function HmdMedort.UpdatePrintCnt(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_EDITID;S_EDITIP');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sDosno[i]),
                     String(sPrintcnt[i]),String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_MEDOR_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 마약처방출력 count 증가 (update)
function HmdMedort.UpdateDgPrtCnt(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_STRING2;S_EDITID;S_EDITIP');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(iOrdseqno[i]),
                     String(sDgPrtCnt[i]),String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_MEDOR_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 수술환자 DC 약품 조회(Intra Op 중)
function HmdMedort.SelOpDrug(sType1,sType2:String):Integer;  // Intra Op & DC 약처방
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_ORDER_L7')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1',  sPatno);
      GetFldVar('S_CODE2',  sPatname);
      GetFldVar('S_CODE3',  sWardno);
      GetFldVar('S_CODE4',  sRoomno);
      GetFldVar('S_CODE5',  sMeddept);
      GetFldVar('S_CODE6',  sOrddesc1);
      GetFldVar('S_CODE7',  sOrddesc2);  // sOpdrnm 수술의사
      GetFldVar('S_CODE8',  sOrddr);
      GetFldVar('S_CODE9',  sOrdgrp);
      GetFldVar('S_CODE10', iOrdseqno);
      GetFldVar('S_CODE11', sOrdname);
      GetFldVar('S_CODE12', sDcdate);  // sOpname 수술명
      GetFldVar('S_CODE13', sOrddate);
      GetFldVar('S_CODE14', sSex);
      GetFldVar('S_CODE15', sBirtdate);
      GetFldVar('S_CODE16', sPatsect);
      GetFldVar('S_CODE17', sMeddate);
      GetFldVar('S_CODE18', sPatsite);
      GetFldVar('S_CODE19', sDcorddr);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 병동별 약품 집계
function HmdMedort.ListMedOrdSum(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7] );

   if (txGetF32('MD_MEDOR_L9')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', sOrdCd);
      GetFldVar32('S_STRING2', sOrdName);
      GetFldVar32('S_STRING3', sOrdunit);
      GetFldVar32('S_STRING4', sQty);
      GetFldVar32('S_STRING5', sPatName);
      GetFldVar32('S_STRING6', sSex);
      GetFldVar32('S_STRING7', sBirtDate);
      GetFldVar32('S_STRING8', sMedDept);
      GetFldVar32('S_STRING9', sOrdDate);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 병동별 누적약품 집계
function HmdMedort.ListDrugSum(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_INJSU_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrdCd);
      GetFldVar('S_STRING2', sOrdName);
      GetFldVar('S_STRING3', sQty);
      GetFldVar('S_STRING4', sOrdunit);
      GetFldVar('S_STRING5', sDoseQty);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//환자처방일별 묶음번호 Max Value 조회
function HmdMedort.SelMaxBundleNo(Type1,PatNo,OrdDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE');
   SetFldValue(0,[Type1,PatNo,OrdDate]);

   //Tuxedo Service Call
   if (txGetF('MD_MEDOR_S1')) then
   begin
      GetFldVar('L_LONG1', iBundleNo);  //묶음번호Max

      //조회건수 return
      Result := GetRecordCnt('L_LONG1');
      txFree;
   end;
end;

// 항암제사용조회
function HmdMedort.ListChemoDrug(sTodate,sType1, sType2:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue32(0,[sTodate,sType1,sType2] );
   if (txGetF32('MD_MEDOR_L11')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', sWardno);
      GetFldVar32('S_STRING2', sRoomno  );
      GetFldVar32('S_STRING3', sPatno   );
      GetFldVar32('S_STRING4', sPatname );
      GetFldVar32('S_STRING5', sSex     );
      GetFldVar32('S_STRING6', sBirtdate);
      GetFldVar32('S_STRING7', sMeddate );
      GetFldVar32('S_STRING8', sOrdcd   );
      GetFldVar32('S_STRING9', sOrddesc1 );
      GetFldVar32('S_STRING10',sOrddesc2);
      GetFldVar32('S_STRING11',sOrddays );
      GetFldVar32('S_STRING12',sMeddept );
      GetFldVar32('S_STRING13',sPatcnt );
      GetFldVar32('S_STRING14',sChemocnt );
      GetFldVar32('S_STRING15',sDiagname );
      GetFldVar32('S_STRING16',sMixyn );   

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//환자+처방일+처방코드별 용량/일수 sum 조회
function HmdMedort.SelOrdQtyInfo(PatNo,OrdDate,OrdCd,PatSect,OrdKind,MedDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_ORDCODE;S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0,[PatNo,OrdDate,OrdCd,PatSect,OrdKind,MedDate]);

   //Tuxedo Service Call
   if (txGetF('MD_MEDOR_S2')) then
   begin
      GetFldVar('D_DOUBLE1', iUseDay   ); //투여일수Sum
      GetFldVar('D_DOUBLE2', iTotQty   ); //1일용량 Sum
      GetFldVar('S_STRING1', sMaxDay   ); //최대투여일수(외래)
      GetFldVar('S_STRING2', sMaxQty   ); //1일제한용량 (외래)
      GetFldVar('S_STRING3', sInsOrdyn ); //보험인정기준초과시 처방가능여부(외래)
      GetFldVar('S_STRING4', sMethod   ); //용법/용량
      GetFldVar('S_STRING5', sDisease  ); //적응증
      GetFldVar('S_STRING6', sInsInfo  ); //인증기준
      GetFldVar('S_STRING7', sAddInfoYn); //보험인정기준 추가정보여부
      GetFldVar('S_STRING8', sOrdSite2 ); //처방장소(O:외래 I:입원 A:전체)
      GetFldVar('S_STRING9', sMaxDay2  ); //최대투여일수(입원)
      GetFldVar('S_STRING10',sMaxQty2  ); //1일제한용량 (입원)
      GetFldVar('S_STRING11',sInOrdyn2 ); //보험인정기준초과시 처방가능여부(입원)

      //조회건수 return
      Result := GetRecordCnt('D_DOUBLE1');
      txFree;
   end;
end;

// 골다공증약제 최초처방일, 처방일수 조회
function HmdMedort.SelGoldagongInfo(PatNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO');
   SetFldValue(0,[PatNo]);

   //Tuxedo Service Call
   if (txGetF('MD_MEDOR_S3')) then
   begin
      GetFldVar('S_STRING1', sOrddate   ); //최대투여일수(외래)
      GetFldVar('S_STRING2', sUseday   ); //1일제한용량 (외래)

      //조회건수 return
      Result := GetRecordCnt('D_DOUBLE1');
      txFree;
   end;
end;

// 주사실 약품 집계
function HmdMedort.ListIjdaySum(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6] );
   if (txGetF32('MD_IJDAY_L7')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', sOrdCd);
      GetFldVar32('S_STRING2', sOrdName);
      GetFldVar32('S_STRING3', sOrdunit);
      GetFldVar32('S_STRING4', sQty);
      GetFldVar32('S_STRING5', sPatName);
      GetFldVar32('S_STRING6', sSex);
      GetFldVar32('S_STRING7', sBirtDate);
      GetFldVar32('S_STRING8', sMedDept);
      GetFldVar32('S_STRING9', sOrdDate);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 약처방 수정
function HmdMedort.UpdateOrder(Cnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;'+
              'S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;S_TYPE13;'+
              'S_TYPE16;S_TYPE17;S_TYPE18;S_EDITID;S_EDITIP');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatno[i]),   String(sOrddate[i]), String(sOrdseqno[i]),
                     String(sPatsect[i]), String(sOrdkind[i]), String(sDoseqty[i]),
                     String(sOrdunit[i]), String(sUnittype[i]),String(sTotqty[i]),
                     String(sCount[i]),   String(sUseday[i]),  String(sMethodcd[i]),
                     String(sInstype[i]), String(sOrddesc1[i]),String(sOrddesc2[i]),
                     String(sRemark[i]),  String(sEditid[i]),  String(sEditip[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_MEDOR_U3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdMedort.GetPreMedi(Type1,Type2,Type3,Type4,Type5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[Type1,Type2,Type3,Type4,Type5] );
   if (txGetF('MD_ORDER_LC')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sType1   );
      GetFldVar('S_STRING2',  sOrdDate );
      GetFldVar('S_STRING3',  iOrdSeqNo);
      GetFldVar('S_STRING4',  sRoomNo  );
      GetFldVar('S_STRING5',  sPatNo   );
      GetFldVar('S_STRING6',  sPatnm   );
      GetFldVar('S_STRING7',  sBirtdate );
      GetFldVar('S_STRING8',  sAge     );
      GetFldVar('S_STRING9',  sMedDept );
      GetFldVar('S_STRING10', sOrdName );
      GetFldVar('S_STRING11', iDoseQty );
      GetFldVar('S_STRING12', sOrdUnit );
      GetFldVar('S_STRING13', sMethodcd);
      GetFldVar('S_STRING14', sActInf  );    // 수행시간
//      GetFldVar('S_STRING15', );
//      GetFldVar('S_STRING16', );
      GetFldVar('S_STRING17', sDiscyn);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 추가. 2005.04.19 조일영 퇴원약 Multi 반납
function HmdMedort.ReturnMultiMedi(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   // Pointer를 받아옴.
   txAlloc;

   // FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'+
              'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_EDITID;S_EDITIP;S_CODE16');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sIodate  [i]), String(sDrugcode [i]), String(sHosptype  [i]),
                     String(sIotype1 [i]), String(sIotype2  [i]), String(sIoqty     [i]),
                     String(sIoto    [i]), String(sOrdqty   [i]), String(sConvunit  [i]),
                     String(sSrdate  [i]), String(sSrno1    [i]), String(sSrno2     [i]),
                     String(sPatno   [i]), String(sRtnid    [i]), String(sProcdate  [i]),
                     String(sEditid  [i]), String(sEditip   [i]), String(sRejtOrd   [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_OREJT_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 퇴원약 Multi 반납 조회  2005.04.19 추가 조일영
function HmdExCode.SelectMultiIrejt(sGubun,sPatno,sDschDate,sWardNo:String):Integer; // 구분,환자번호, 퇴원일, 병동번호
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0,[sGubun,sPatno,sDschDate,sWardNo] );

   //Tuxedo Service Call
   if (txGetF('MD_IREJT_L2')) then
   begin
      GetFldVar ('S_CODE1',  sFlag    );     // 구분자
      GetFldVar ('S_CODE2',  sOrdcd   );     // 처방코드
      GetFldVar ('S_CODE3',  sOrdname );     // 처방명
      GetFldVar ('S_CODE4',  sIoqty   );     // 일회수량
      GetFldVar ('S_CODE5',  sIounit  );     // 단위
      GetFldVar ('S_CODE6',  sTotqty  );     // 총량
      GetFldVar ('S_CODE7',  sCount   );     // 회수
      GetFldVar ('S_CODE8',  sOrdseqno);     // 처방순번
      GetFldVar ('S_CODE9',  sOrdqty  );     // 반납량
      GetFldVar ('S_CODE10', sRtnid   );     // 반납자
      GetFldVar ('S_CODE11', sDosno   );     // 투약번호
      GetFldVar ('S_CODE12', sStatus  );     // 상태

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 추가. 2003.05.23 개인별 약품집계
{function HmdMedort.ListMedOrdPatSum(sType1,sType2,sType3,sType4,sType5,sType6,sType7 :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7] );

   if (txGetF('MD_MEDOR_L12')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sOrdCd);
      sGetFldVar('S_STRING2', sOrdName);
      sGetFldVar('S_STRING3', sOrdunit);
      sGetFldVar('S_STRING4', sQty);
      sGetFldVar('S_STRING5', sPatName);
      sGetFldVar('S_STRING6', sSex);
      sGetFldVar('S_STRING7', sBirtDate);
      sGetFldVar('S_STRING8', sMedDept);
      sGetFldVar('S_STRING9', sOrdDate);
      sGetFldVar('S_STRING10', iCount);
      sGetFldVar('S_STRING11', iUseDay);
      sGetFldVar('S_STRING12', sTotQty);

      txFree;
   end;
end;}
// 수정 2005-04-20 조일영 특수약품 집계 추가 (sType8 추가)
function HmdMedort.ListMedOrdPatSum(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8 :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8] );

   if (txGetF('MD_MEDOR_L12')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sOrdCd);
      sGetFldVar('S_STRING2', sOrdName);
      sGetFldVar('S_STRING3', sOrdunit);
      sGetFldVar('S_STRING4', sQty);
      sGetFldVar('S_STRING5', sPatName);
      sGetFldVar('S_STRING6', sSex);
      sGetFldVar('S_STRING7', sBirtDate);
      sGetFldVar('S_STRING8', sMedDept);
      sGetFldVar('S_STRING9', sOrdDate);
      sGetFldVar('S_STRING10', iCount);
      sGetFldVar('S_STRING11', iUseDay);
      sGetFldVar('S_STRING12', sTotQty);

      txFree;
   end;
end;

// 추가 2005-04-21 조일영 응급실용 약품 집계 추가
function HmdMedort.ListMedOrdPatSumER(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8 :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8] );

   if (txGetF('MD_MEDOR_L14')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sOrdCd);
      sGetFldVar('S_STRING2', sOrdName);
      sGetFldVar('S_STRING3', sOrdunit);
      sGetFldVar('S_STRING4', sQty);
      sGetFldVar('S_STRING5', sPatName);
      sGetFldVar('S_STRING6', sSex);
      sGetFldVar('S_STRING7', sBirtDate);
      sGetFldVar('S_STRING8', sMedDept);
      sGetFldVar('S_STRING9', sOrdDate);
      sGetFldVar('S_STRING10', iCount);
      sGetFldVar('S_STRING11', iUseDay);
      sGetFldVar('S_STRING12', sTotQty);

      txFree;
   end;
end;

// 동일성분 중복 체크 2009.01.09
function HmdMedort.HistoryAkDupOrdMainCdToday(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldname('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3]);
   if (txGetF('MD_MEDOR_L17')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sDupDate);
      sGetFldVar('S_STRING2', sOrdDate);
      sGetFldVar('S_STRING3', sOrdcd);
      sGetFldVar('S_STRING4', sMeddept);

      txFree;
   end;

end;

function HmdMedort.HistoryAkDupOrdMainCdNotToday(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldname('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3]);
   if (txGetF('MD_MEDOR_L18')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sDupDate);
      sGetFldVar('S_STRING2', sOrdDate);
      sGetFldVar('S_STRING3', sOrdcd);
      sGetFldVar('S_STRING4', sMeddept);

      txFree;
   end;

end;

// 유사성분 중복 체크 2008.11.13
function HmdMedort.HistoryAkDupOrd(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldname('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3]);
   if (txGetF('MD_MEDOR_L15')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sDupDate);
      sGetFldVar('S_STRING2', sOrdDate);
      sGetFldVar('S_STRING3', sOrdcd);
      sGetFldVar('S_STRING4', sMeddept);

      txFree;
   end;

end;

// 당일 같은과 유사성분 중복 체크 2009.01.08
function HmdMedort.HistoryAkDupOrdToday(sType1,sType2:String):Integer;
var
   sCode1 : String;
begin
   Result := -1;
   txAlloc;
   sCode1 := '0'; // 당일 한 처방내림에서의 유사성분 체크
   SetFldname('S_CODE1;S_TYPE1;S_TYPE2');
   SetFldValue(0,[sCode1,sType1,sType2]);
   if (txGetF('MD_MEDOR_L16')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sDupDate);
      sGetFldVar('S_STRING2', sOrdDate);
      sGetFldVar('S_STRING3', sOrdcd);
      sGetFldVar('S_STRING4', sMeddept);

      txFree;
   end;

end;

// 당일 같은과 유사성분 중복 체크 2009.01.08
function HmdMedort.HistoryAkDupOrdTodayPre(sType1,sType2,sType3:String):Integer;
var
   sCode1 : String;
begin
   Result := -1;
   txAlloc;
   sCode1 := '1'; // 당일 여러 처방내림에서의 유사성분 체크
   SetFldname('S_CODE1;S_CODE2;S_CODE3;S_TYPE1');
   SetFldValue(0,[sCode1,sType1,sType2,sType3]);
   if (txGetF('MD_MEDOR_L16')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sDupDate);
      sGetFldVar('S_STRING2', sOrdDate);
      sGetFldVar('S_STRING3', sOrdcd);
      sGetFldVar('S_STRING4', sMeddept);

      txFree;
   end;
end;

// 입원지시때 진료과별 원외약처방 체크, KimDaeYong 2015-03-06
function HmdMedort.ListMeddeptOdrug(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_MEDOR_L19')) then     //Tuxedo Service Call
   begin
      GetFldVar('S_STRING1', sMeddept);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//복용약제, QPS(이지숙)요청, KimDaeYong 2016-06-21
function HmdMedort.ListDrug(inPatno,inOrddate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inOrddate] );

   if (txGetF('MD_MEDOR_L20')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sPatno);
      GetFldVar('S_STRING2',  sGubun);
      GetFldVar('S_STRING3',  sOrddate);
      GetFldVar('S_STRING4',  sEfccode);
      GetFldVar('S_STRING5',  sEfctext);
      GetFldVar('S_STRING6',  sOrdcd);
      GetFldVar('S_STRING7',  sDrugname);
      GetFldVar('S_STRING8',  sUseday);
      GetFldVar('S_STRING9',  sEmpdate);
      GetFldVar('S_STRING10', sRemday);
      GetFldVar('S_STRING11', sMeddept);
      GetFldVar('S_STRING12', sChadr);
      GetFldVar('S_STRING13', sChaname);
      GetFldVar('S_STRING14', sTotqty);
      GetFldVar('S_STRING15', sAltqty);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdAntort 	약처방 대체처방내역                                            //
////////////////////////////////////////////////////////////////////////////////

// 약처방 대체내역조회
function HmdMedalt.ListAltOrd(PatNo,OrdDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE');
   SetFldValue(0,[PatNo,OrdDate] );

   //Tuxedo Service Call
   if (txGetF('MD_MEDAL_L1')) then
   begin
      GetFldVar('S_STRING1',  sAltOrdCd );   // 변경된 처방코드
      GetFldVar('S_STRING2',  sAltOrdNm );   // 변경된 처방명
      GetFldVar('S_STRING3',  sAltQty   );   // 변경된 용량
      GetFldVar('S_STRING4',  sAltTQty  );   // 변경된 총용량
      GetFldVar('S_STRING5',  sAltUnit  );   // 변경된 단위
      GetFldVar('S_STRING6',  sAltMethd );   // 변경된 용법
      GetFldVar('S_STRING7',  sAltCount );   // 변경된 횟수
      GetFldVar('S_STRING8',  sAltDay   );   // 변경된 일수
      GetFldVar('S_STRING9',  sAltRsn   );   // 변경된 사유
      GetFldVar('S_STRING10', sAltAbbr  );   // 용법코드약어
      GetFldVar('S_STRING11', sOrgOrdCd );   // 원처방코드
      GetFldVar('S_STRING12', sOrgOrdNm );   // 원처방명
      GetFldVar('L_SEQNO1',   iOrdSeqNo );   // 처방순번
      GetFldVar('L_SEQNO2',   iSeqNo    );   // 순번

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdAntort 	항균제처방                                                    //
////////////////////////////////////////////////////////////////////////////////

// 제한항균제 사유 입력
function HmdAntort.InsertAntOrd(PatNo,OrdDate,OrdCd,MedDate,MedDept,ChaDr,OrdDr,
                                PatSect,DiagCd,DiagName,BasisDx,Infsymtm,ChkYn,
                                FungusNm,SensAmc,SensClot,SensCpfx,SensOxa,
                                SensGm,SensEm,SensCtrx,OrdRsncd,OrdRsndt,
                                EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_EDITID;S_EDITIP');
   SetFldValue(0,[PatNo,
                  OrdDate,OrdCd,MedDate,MedDept,ChaDr,OrdDr,
                  PatSect,DiagCd,DiagName,BasisDx,Infsymtm,ChkYn,
                  FungusNm,SensAmc,SensClot,SensCpfx,SensOxa,SensGm,
                  SensEm,SensCtrx,OrdRsncd,OrdRsndt,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_ANTOR_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 제한항균제 승인내역 입력
function HmdAntort.ConfirmAntOrd(PatNo,OrdDate,OrdCd,Enddate,CofmDate,CofmDr,
                                 UcfmexDt,Rejtcomt,Rejtresn,Approvyn,
                                 EditId,EditIp:String; SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_EDITID;S_EDITIP;'+
              'L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate,OrdCd,Enddate,CofmDate,CofmDr,
                  UcfmExDt,Rejtcomt,Rejtresn,Approvyn,EditId,EditIp,
                  SeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_ANTOR_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 제한항균제 의뢰내역 List 조회 ('1'-미확인, '2'-확인일별)
function HmdAntort.ListAntOrd(Type1,ConfDate,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[Type1,ConfDate,Locate]);

   //Tuxedo Service Call
   if (txGetF('MD_ANTOR_L1')) then
   begin
      GetFldVar('S_PATNO',     sPatno   );  // 환자번호
      GetFldVar('S_STRING1',   sOrddate );  // 처방일자
      GetFldVar('S_STRING2',   sOrdcd   );  // 처방코드
      GetFldVar('S_STRING3',   sMeddate );  // 진료일자/입원일자
      GetFldVar('S_STRING4',   sMeddept );  // 진료과/진료부서
      GetFldVar('S_STRING5',   sChadr   );  // 주치의사
      GetFldVar('S_STRING6',   sOrddr   );  // 처방의사
      GetFldVar('S_STRING7',   sPatsect );  // 환자구분
      GetFldVar('S_STRING8',   sEnddate );  // 종료일자
      GetFldVar('S_STRING9',   sBasisdx );  // 기저질환(Default : 진단명)
      GetFldVar('S_STRING10',  sInfsymtm);  // 감염증
      GetFldVar('S_STRING11',  sChkyn   );  // 원인균명 확인여부
      GetFldVar('S_STRING12',  sFungusnm);  // 원인균명
      GetFldVar('S_STRING13',  sSensamc );  // 원인균의감수성AMPICILLIN
      GetFldVar('S_STRING14',  sSensclot);  // 원인균의감수성CEPHALOTHIN
      GetFldVar('S_STRING15',  sSenscpfx);  // 원인균의감수성CIPROFLOXACIN
      GetFldVar('S_STRING16',  sSensoxa );  // 원인균의감수성OXACILLIN
      GetFldVar('S_STRING17',  sSensgm  );  // 원인균의감수성GENTAMICIN
      GetFldVar('S_STRING18',  sSensem  );  // 원인균의감수성ERYTHROMYCIN
      GetFldVar('S_STRING19',  sSensctrx);  // 원인균의감수성Ceftriaxone
      GetFldVar('S_STRING20',  sOrdrsncd);  // 처방사유
      GetFldVar('S_STRING21',  sOrdrsndt);  // 처방사유내용
      GetFldVar('S_STRING22',  sInfchrg );  // 제한감염담당자
      GetFldVar('S_STRING23',  sConfDate);  // 확인/확정일자
      GetFldVar('S_STRING24',  sCofmdr  );  // 확인/보고의사
      GetFldVar('S_STRING25',  sCofmph  );  // 확인약사
      GetFldVar('S_STRING26',  sUcfmexdt);  // 미확인 시행일
      GetFldVar('S_STRING27',  sRejtcomt);  // 승인불가COMMENT
      GetFldVar('S_STRING28',  sRejtresn);  // 승인불가사유코드
      GetFldVar('S_STRING29',  sApprovyn);  // 승인여부(Y,N)
      GetFldVar('S_STRING30',  sOrddrnm );  // 처방의명
      GetFldVar('S_STRING31',  sOrdname );  // 처방명(항균제명)
      GetFldVar('S_STRING32',  sPatname );  // 환자명
      GetFldVar('S_STRING33',  sDeptnm  );  // 진료과명
      GetFldVar('S_STRING34',  sWardNo  );  // 병동
      GetFldVar('S_STRING35',  sRoomNo  );  // 병실
      GetFldVar('L_SEQNO1'  ,  iSeqNo   );  // 순번
      GetFldVar('S_CODE1'   ,  sSex     );
      GetFldVar('S_CODE2'   ,  sBirtdate);
      GetFldVar('S_CODE3'   ,  sOrdunit );

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 제한항균제 의뢰내역 List 조회 ('1'-미확인, '2'-확인일별)
function HmdAntort.ListAntOrd2(Type1,Type2,Type3,Type4,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[Type1,Type2,Type3,Type4,Locate] );

   //Tuxedo Service Call
   if (txGetF('MD_ANTOR_L4')) then
   begin
      GetFldVar('S_PATNO',     sPatno   );  // 환자번호
      GetFldVar('S_STRING1',   sOrddate );  // 처방일자
      GetFldVar('S_STRING2',   sOrdcd   );  // 처방코드
      GetFldVar('S_STRING3',   sMeddate );  // 진료일자/입원일자
      GetFldVar('S_STRING4',   sMeddept );  // 진료과/진료부서
      GetFldVar('S_STRING5',   sChadr   );  // 주치의사
      GetFldVar('S_STRING6',   sOrddr   );  // 처방의사
      GetFldVar('S_STRING7',   sPatsect );  // 환자구분
      GetFldVar('S_STRING8',   sEnddate );  // 종료일자
      GetFldVar('S_STRING9',   sBasisdx );  // 기저질환(Default : 진단명)
      GetFldVar('S_STRING10',  sInfsymtm);  // 감염증
      GetFldVar('S_STRING11',  sChkyn   );  // 원인균명 확인여부
      GetFldVar('S_STRING12',  sFungusnm);  // 원인균명
      GetFldVar('S_STRING13',  sSensamc );  // 원인균의감수성AMPICILLIN
      GetFldVar('S_STRING14',  sSensclot);  // 원인균의감수성CEPHALOTHIN
      GetFldVar('S_STRING15',  sSenscpfx);  // 원인균의감수성CIPROFLOXACIN
      GetFldVar('S_STRING16',  sSensoxa );  // 원인균의감수성OXACILLIN
      GetFldVar('S_STRING17',  sSensgm  );  // 원인균의감수성GENTAMICIN
      GetFldVar('S_STRING18',  sSensem  );  // 원인균의감수성ERYTHROMYCIN
      GetFldVar('S_STRING19',  sSensctrx);  // 원인균의감수성Ceftriaxone
      GetFldVar('S_STRING20',  sOrdrsncd);  // 처방사유
      GetFldVar('S_STRING21',  sOrdrsndt);  // 처방사유내용
      GetFldVar('S_STRING22',  sInfchrg );  // 제한감염담당자
      GetFldVar('S_STRING23',  sConfDate);  // 확인/확정일자
      GetFldVar('S_STRING24',  sCofmdr  );  // 확인/보고의사
      GetFldVar('S_STRING25',  sCofmph  );  // 확인약사
      GetFldVar('S_STRING26',  sUcfmexdt);  // 미확인 시행일
      GetFldVar('S_STRING27',  sRejtcomt);  // 승인불가COMMENT
      GetFldVar('S_STRING28',  sRejtresn);  // 승인불가사유코드
      GetFldVar('S_STRING29',  sApprovyn);  // 승인여부(Y,N)
      GetFldVar('S_STRING30',  sOrddrnm );  // 처방의명
      GetFldVar('S_STRING31',  sOrdname );  // 처방명(항균제명)
      GetFldVar('S_STRING32',  sPatname );  // 환자명
      GetFldVar('S_STRING33',  sDeptnm  );  // 진료과명
      GetFldVar('S_STRING34',  sWardNo  );  // 병동
      GetFldVar('S_STRING35',  sRoomNo  );  // 병실
      GetFldVar('L_SEQNO1'  ,  iSeqNo   );  // 순번
      GetFldVar('S_CODE1'   ,  sSex     );
      GetFldVar('S_CODE2'   ,  sBirtdate);

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;


// 환자 입원기간중 동일항균제 의뢰내역 조회 (환자번호+입원일자+처방코드)
function HmdAntort.HistoryAntOrd(PatNo,AdmDate,OrdCd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3'); //환자번호;입원일자;처방코드
   SetFldValue(0,[PatNo,AdmDate,OrdCd] );

   //Tuxedo Service Call
   if (txGetF('MD_ANTOR_L2')) then
   begin
      GetFldVar('S_STRING1',   sOrdDate );  // 처방일자(의뢰일)
      GetFldVar('S_STRING2',   sEndDate );  // 종료일자(유효일)
      GetFldVar('S_STRING3',   sApprovYn);  // 승인여부(Y,N,Null)
      GetFldVar('S_STRING4',   sBasisdx );  // 기저질환(Default : 진단명)
      GetFldVar('S_STRING5',   sInfsymtm);  // 감염증
      GetFldVar('S_STRING6',   sChkYn   );  // 원인균명 확인여부
      GetFldVar('S_STRING7',   sFungusNm);  // 원인균명
      GetFldVar('S_STRING8',   sSensAmc );  // 원인균의감수성AMPICILLIN
      GetFldVar('S_STRING9',   sSensClot);  // 원인균의감수성CEPHALOTHIN
      GetFldVar('S_STRING10',  sSensCpfx);  // 원인균의감수성CIPROFLOXACIN
      GetFldVar('S_STRING11',  sSensOxa );  // 원인균의감수성OXACILLIN
      GetFldVar('S_STRING12',  sSensGm  );  // 원인균의감수성GENTAMICIN
      GetFldVar('S_STRING13',  sSensEm  );  // 원인균의감수성ERYTHROMYCIN
      GetFldVar('S_STRING14',  sSensCtrx);  // 원인균의감수성Ceftriaxone
      GetFldVar('S_STRING15',  sOrdRsnCd);  // 처방사유
      GetFldVar('S_STRING16',  sOrdRsnDt);  // 처방사유내용

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdExmort 	검사처방                                                      //
////////////////////////////////////////////////////////////////////////////////

function HmdExmort.SelectExmortJoin(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF('MD_ORDER_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE2', sHopeDate);
	   GetFldVar('S_CODE11', sDiagName);
      GetFldVar('S_CODE15', sOrdname);
	   GetFldVar('S_CODE16', sRemark);
      Result := GetRecordCnt('S_CODE2');
      txFree;
   end;
end;

// 검사처방 사용환자 조회
function HmdExmort.ListUseExam(Fromdate,Todate,OrdCode:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[Fromdate,Todate,OrdCode]);
   if (txGetF32('MD_EXMOR_L2')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',  tOrddate);
      GetFldVar32('S_STRING2',  sPatname);
      GetFldVar32('S_STRING3',  sPatno);
      GetFldVar32('S_STRING4',  sSex);
      GetFldVar32('S_STRING5',  sBirtdate);
      GetFldVar32('S_STRING6',  sMeddept);
      GetFldVar32('S_STRING7',  sOrddr);
      GetFldVar32('S_STRING8',  sOrddesc);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


//퇴원예정일자 이후로 예약잡힌 검사조회
function HmdExmort.ListDschExam(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   if (txGetF('MD_EXMOR_L3')) then begin //Tuxedo Service Call

      GetFldVar('S_STRING1',  sSlipnm  );
      GetFldVar('S_STRING2',  sOrddate );
      GetFldVar('S_STRING3',  sOrddr   );
      GetFldVar('S_STRING4',  sOrdname );
      GetFldVar('S_STRING5',  sRsvdate );
      GetFldVar('S_STRING6',  sOrdseqno);
      GetFldVar('S_STRING7',  sProcstat);
      GetFldVar('S_STRING8',  sDiscyn);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
//일자가져오기
function HmdExmort.ListDay(sType1,sPatno,sFromDate,sToDate:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;');
   SetFldValue32(0,[sType1,sPatno,sFromDate,sToDate]);
   if (txGetF32('MD_EXMOR_L4')) then begin //Tuxedo Service Call

      GetFldVar32('S_STRING1',  sOrddate  );


      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;
//환자 검사처방 보험인정기준, 기간별 처방횟수 조회
function HmdExmort.SelExmCntInfo(PatNo,OrdDate,OrdCd,PatSect,OrdKind:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_ORDCODE;S_STRING1;S_STRING2');
   SetFldValue(0,[PatNo,OrdDate,OrdCd,PatSect,OrdKind]);

   //Tuxedo Service Call
   if (txGetF('MD_EXMOR_S1')) then
   begin
      GetFldVar('D_DOUBLE1', iExmCnt   ); //검사횟수Sum
      GetFldVar('S_STRING1', sExmODay  ); //검사기간(외래)
      GetFldVar('S_STRING2', sExmOQty  ); //제한횟수 (외래)
      GetFldVar('S_STRING3', sInsOrdyn ); //보험인정기준초과시 처방가능여부(외래)
      GetFldVar('S_STRING4', sInsInfo  ); //인정기준
      GetFldVar('S_STRING5', sOrdSite2 ); //처방장소(O:외래 I:입원 A:전체)
      GetFldVar('S_STRING6', sExmIDay  ); //검사기간(입원)
      GetFldVar('S_STRING7', sExmIQty  ); //제한횟수(입원)
      GetFldVar('S_STRING8', sInOrdyn2 ); //보험인정기준초과시 처방가능여부(입원)

      //조회건수 return
      Result := GetRecordCnt('D_DOUBLE1');
      txFree;
   end;
end;

//추가. 2002.11.14 감염검사
function HmdExmort.CheckInfrptExam(Patno, Orddate,Ordcd : String):Integer;
begin
   Result := -1;

   txAlloc32;

   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[Patno,Orddate,Ordcd]);

   if (TxGetF32('MD_EXMOR_L5')) then
   begin
      GetFldVar32('S_STRING1',sPatno);
      GetFldVar32('S_STRING2',sPatName);

      Result := GetRecordCnt('S_STRING1');
      TxFree32;
   end;
end;

// 특정 검사 결과 조회.(2002.02.21. - 이용언 - )
function HmdExmort.SpecialTest(Type1, Type2, Type3, Type4, Type5: String; Seqno:Integer):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;L_CNT1');
   SetFldValue(0,[Type1,Type2,Type3,Type4,Type5,Seqno]);

   if (txGetF('MD_EXMOR_L6')) then
   begin
      GetFldVar('S_STRING1',  sPatno);
      GetFldVar('S_STRING2',  sPatname);
      GetFldVar('S_STRING3',  sRoomNo);
      GetFldVar('S_STRING4',  sResult);
      GetFldVar('S_STRING5',  sRsltupp);
      GetFldVar('S_STRING6',  sRsltlow);
      GetFldVar('S_STRING7',  sOrdCd  );
      GetFldVar('S_STRING8',  sOrdName);
      GetFldVar('S_STRING9',  sSlipcd);
      GetFldVar('S_STRING10', sSlipnm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//(추가. 2002.11.21 이용언) 검사물 대장
function HmdExmort.LabExamList(Type1, Type2 : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Type1,Type2]);

   if (txGetF('MD_EXMOR_L7')) then
   begin
      GetFldVar ('S_STRING1' , sRoomno  );   //병실
      GetFldVar ('S_STRING2' , sPatno   );   //환자번호
      GetFldVar ('S_STRING3' , sPatname );   //환자명
      GetFldVar ('S_STRING4' , sMeddept );   //진료과
      GetFldVar ('S_STRING5' , sChadr   );   //주치의
      GetFldVar ('S_STRING6' , sSex     );   //성별
      GetFldVar ('S_STRING7' , sBirtDate);   //생년월일
      GetFldVar ('S_STRING8' , sSpcid1  );   //검체번호1
      GetFldVar ('S_STRING9' , sSpcid2  );   //검체번호2
      GetFldvar ('S_STRING10', sTubenm  );   //검체 Tube 명칭
      GetFldVar ('S_STRING11', sOrddesc );   //처방특기사항
      GetFldVar ('S_STRING12', sSlipnm  );   //Slip 명
      GetFldVar ('S_STRING13', sColldate);   //검체체취시간

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

//(추가. 2003.04.16 이용언) 종합검증결과
function HmdExmort.SearchExamAll(PatNo : String): Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1');
   SetFldValue(0, [PatNo]);

   if (txGetF('MD_EXMOR_L8')) then
   begin
      GetFldVar ('S_STRING1' , sReaddate);   //검증일자
      GetFldVar ('S_STRING2' , sReadDrNm);   //검증의사
      GetFldVar ('S_STRING3' , sRsl     );   //검증내역

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

function HmdExmort.ListExamSlip(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8:String;lseq:Integer):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;L_CNT1');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,lseq]);
   if (txGetF32('MD_EXMOR_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',  sSlipCd);
      GetFldVar32('S_STRING2',  sSlipNm);
      GetFldVar32('S_STRING3',  sOrdDate);
      GetFldVar32('S_STRING4',  sSlip1nm);
      GetFldVar32('S_STRING5',  sExecDate);
      GetFldVar32('S_STRING6',  sOrdName);
      GetFldVar32('S_STRING7',  sRsltType);
      GetFldVar32('S_STRING8',  sRsl);
      GetFldVar32('S_STRING9',  sRsltUpp);
      GetFldVar32('S_STRING10', sRsltLow);
      GetFldVar32('S_STRING11', sRemark);
      GetFldVar32('S_STRING12', sAcptDate);
      GetFldVar32('S_STRING13', sRsltDate);
      GetFldVar32('S_STRING14', sRsvDate);
      GetFldVar32('S_STRING15', sExamCode);
      GetFldVar32('S_STRING16', sReadDrNm);
      GetFldVar32('S_STRING17', sGrossTx);
      GetFldVar32('S_STRING18', sMedDept);
      GetFldVar32('S_STRING19', sRsltunit);
      GetFldVar32('S_STRING20', sPathNo);
     
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;
//(추가. 2003.05.02 이용언) 클라이언트 튜닝

function HmdExmort.ListExamSlip2(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9:String;lseq:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;L_CNT1');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,lseq]);
   if (txGetF('MD_EXMOR_LA')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1',  sSlipCd);
      sGetFldVar('S_STRING2',  sSlipNm);
      sGetFldVar('S_STRING3',  sOrdDate);
      sGetFldVar('S_STRING4',  sSlip1nm);
      sGetFldVar('S_STRING5',  sExecDate);
      sGetFldVar('S_STRING6',  sOrdName);
      sGetFldVar('S_STRING7',  sRsltType);
      sGetFldVar('S_STRING8',  sRsl);
      sGetFldVar('S_STRING9',  sRsltUpp);
      sGetFldVar('S_STRING10', sRsltLow);
      sGetFldVar('S_STRING11', sRemark);
      sGetFldVar('S_STRING12', sAcptDate);
      sGetFldVar('S_STRING13', sRsltDate);
      sGetFldVar('S_STRING14', sRsvDate);
      sGetFldVar('S_STRING15', sExamCode);
      sGetFldVar('S_STRING16', sReadDrNm);  //판독의1(SR=확인의)
      sGetFldVar('S_STRING17', sGrossTx);
      sGetFldVar('S_STRING18', sMedDept);
      sGetFldVar('S_STRING19', sRsltunit);
      sGetFldVar('S_STRING20', sPathNo);
      sGetFldVar('S_STRING21', sSpcname);
      sGetFldVar('S_STRING22', sSpccode);
      sGetFldVar('S_STRING23', sColldate);  //채취일시, KimDaeYong 2016-11-29
      sGetFldVar('S_STRING24', sReaddrnm2); //판독의2(SR=판독의1), KimDaeYong 2019-12-18

      {sGetFldVar('S_STRING21', sOrdseqno);
      sGetFldVar('S_STRING22', sPacsimyn);
      sGetFldVar('S_STRING23', sAccessno);
      sGetFldVar('S_STRING24', sCfmdr);
      sGetFldVar('S_STRING25', sReaddr2);
      sGetFldVar('S_STRING26', sReaddr1);
      sGetFldVar('S_STRING27', sOrdinf);
      sGetFldVar('S_STRING28', sExecid);}
      txFree;
   end;
end;

//(추가. 2003.05.3 이용언) 불안장애 클리닉
function HmdExmort.ListSpExamList(sType1,sType2 :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);

   if (txGetF('MD_EXMOR_L9')) then
   begin
      GetFldVar ('S_STRING1' , sHopedate);
      GetFldVar ('S_STRING2' , sPatno   );
      GetFldVar ('S_STRING3' , sPatname );
      GetFldVar ('S_STRING4' , sBirtdate);
      GetFldVar ('S_STRING5' , sSex     );
      GetFldVar ('S_STRING6' , sOrdname );
      GetFldVar ('S_STRING7' , sOrddate );
      GetFldVar ('S_STRING8' , sPatsect );
      GetFldVar ('S_STRING9' , sOrddr   );
      GetFldVar ('S_STRING10', sRcpstat );
      GetFldVar ('S_STRING11', sSpcId1  );
      GetFldVar ('S_STRING12', sDiagname);
      GetFldVar ('S_STRING13', sRemark  );

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

//(추가. 2003.05.26 이용언) PAP SMEAR
function HmdExmort.ListPapExamList(sType1,sType2, sType3, sType4 :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0, [sType1,sType2,sType3,sType4]);

   if (txGetF('MD_EXMOR_L10')) then
   begin
      Result := GetRecordCnt('S_STRING1');

      sGetFldVar ('S_STRING1' , sMedDate  );
      sGetFldVar ('S_STRING2' , sPatno    );
      sGetFldVar ('S_STRING3' , sPatname  );
      sGetFldVar ('S_STRING4' , sSex      );
      sGetFldVar ('S_STRING5' , sBirtdate );
      sGetFldVar ('S_STRING6' , sZipcd    );
      sGetFldVar ('S_STRING7' , sAddress  );
      sGetFldVar ('S_STRING8' , sZpaddress);
      sGetFldVar ('S_STRING9' , sRemark   );
      sGetFldVar ('S_STRING10', sResult   );
      sGetFldVar ('S_STRING11', sChadr     );
      txFree;
   end;
end;

// 이선규추가 (03.06.05)
function HmdExmort.rsv_exam(sPatno,sAdmdate,sOrddate : String) : integer;
begin
   Result := -1;

   txAlloc;
   SetFldName ('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sPatno,sAdmdate,sOrddate]);

   if (txGetF('MD_EXMOR_L11')) then
   begin
      Result := GetRecordCnt('S_STRING1');
      sGetFldVar ('S_STRING1' , v_Rsvdate );
      sGetFldVar ('S_STRING2' , v_Orddesc1);
      sGetFldVar ('S_STRING3' , v_Meddept );
      sGetFldVar ('S_STRING4' , v_Portyn  );
      txFree;
   end;
end;

//(추가. 2004.04.20 조일영) 검사결과의 진료과별 조회기능 추가
function HmdExmort.ListExamSlipDept(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,sType10:String;lseq:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;L_CNT1');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,sType10,lseq]);
   if (txGetF('MD_EXMOR_LB')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1',  sSlipCd);
      sGetFldVar('S_STRING2',  sSlipNm);
      sGetFldVar('S_STRING3',  sOrdDate);
      sGetFldVar('S_STRING4',  sSlip1nm);
      sGetFldVar('S_STRING5',  sExecDate);
      sGetFldVar('S_STRING6',  sOrdName);
      sGetFldVar('S_STRING7',  sRsltType);
      sGetFldVar('S_STRING8',  sRsl);
      sGetFldVar('S_STRING9',  sRsltUpp);
      sGetFldVar('S_STRING10', sRsltLow);
      sGetFldVar('S_STRING11', sRemark);
      sGetFldVar('S_STRING12', sAcptDate);
      sGetFldVar('S_STRING13', sRsltDate);
      sGetFldVar('S_STRING14', sRsvDate);
      sGetFldVar('S_STRING15', sExamCode);
      sGetFldVar('S_STRING16', sReadDrNm);
      sGetFldVar('S_STRING17', sGrossTx);
      sGetFldVar('S_STRING18', sMedDept);
      sGetFldVar('S_STRING19', sRsltunit);
      sGetFldVar('S_STRING20', sPathNo);
      sGetFldVar('S_STRING21', sSpcname);
      sGetFldVar('S_STRING22', sSpccode);
      {sGetFldVar('S_STRING21', sOrdseqno);
      sGetFldVar('S_STRING22', sPacsimyn);
      sGetFldVar('S_STRING23', sAccessno);
      sGetFldVar('S_STRING24', sCfmdr);
      sGetFldVar('S_STRING25', sReaddr2);
      sGetFldVar('S_STRING26', sReaddr1);
      sGetFldVar('S_STRING27', sOrdinf);
      sGetFldVar('S_STRING28', sExecid);}
      txFree;
   end;
end;

function HmdExmort.SelectGolmildoExecDate(sPatno:String) : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO');
   SetFldValue(0,[sPatno]);
   if (txGetF('MD_EXMOR_S2')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1',  sExecDate);

      txFree;
   end;

end;

////////////////////////////////////////////////////////////////////////////////
//  HmdTrtort 	처치/수술/마취/재료처방                                       //
////////////////////////////////////////////////////////////////////////////////

// 처치/수술/마취/재료처방 조회
function HmdTrtort.ListTrt(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   if (txGetF('MD_TRTOR_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrdCd);
      GetFldVar('S_STRING2', sOrdName);
      GetFldVar('S_STRING3', sOrdunit);
      GetFldVar('S_STRING4', sQty);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수술중 처치/수술/마취/재료처방
function HmdTrtort.ListOpTrt(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sType2,sType3,sType4] );
   if (txGetF32('MD_TRTOR_L2')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', sOpstm);
      GetFldVar32('S_STRING2', sOproom);
      GetFldVar32('S_STRING3', sPatno);
      GetFldVar32('S_STRING4', sPatnm);
      GetFldVar32('S_STRING5', sMeddept);
      GetFldVar32('S_STRING6', sAge);
      GetFldVar32('S_STRING7', sRoomno);
      GetFldVar32('S_STRING8', sOrdunit);
      GetFldVar32('S_STRING9', sQty);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

function HmdTrtort.SelTrtorL4(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_PATNO;S_ORDDATE;S_CODE2');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_TRTOR_L4')) then begin //Tuxedo Service Call
      GetFldVar ('L_CNT1',   iOrdSeqNo);
      GetFldVar ('S_CODE1',  sMeddate);
      GetFldVar ('S_CODE2',  sPatsect);
      GetFldVar ('S_CODE3',  sOrdgrp);
      GetFldVar ('S_CODE4',  sSlipcd);
      GetFldVar ('S_CODE5',  sMeddept);
      GetFldVar ('S_CODE6',  sChadr);
      GetFldVar ('S_CODE7',  sOrdcd);
      GetFldVar ('S_CODE8',  sSpcdryn);
      GetFldVar ('S_CODE9',  sSpcdr);
      GetFldVar ('S_CODE10', sAnethmm);
      GetFldVar ('S_CODE11', sOldpttp);
      GetFldVar ('S_CODE12', sInstype);
      GetFldVar ('S_CODE13', sWardno);
      GetFldVar ('S_CODE14', sRoomno);
      GetFldVar ('S_CODE15', sRcpstat);
      GetFldVar ('S_CODE16', sTeeuplt);
      GetFldVar ('S_CODE17', sTeeuprt);
      GetFldVar ('S_CODE18', sTeedwlt);
      GetFldVar ('S_CODE19', sTeedwrt);
      GetFldVar ('S_CODE20', sMedtime);
      GetFldVar ('S_CODE21', sOrdname);
      GetFldVar ('S_CODE22', sNightyp);
      GetFldVar ('S_CODE23', sRcpdate);
      GetFldVar ('S_CODE24', sBckFlag);
      GetFldVar ('S_CODE25', sInputTyp);
      GetFldVar ('S_CODE26', sOpDate);
      GetFldVar ('S_CODE27', sOpseqNo);
      GetFldVar ('S_CODE28', sEditId);
      GetFldVar ('S_CODE29', sEditCd);
      GetFldVar ('S_CODE30', sOrdSite);
      GetFldVar ('S_STRING1',sOrdTime);
      GetFldVar ('S_STRING2',sDiscyn);
      GetFldVar ('S_STRING3',sRtnSum);
      GetFldVar ('S_STRING4',sRemark);
      GetFldVar ('S_STRING5',sUsesite);
      GetFldVar ('S_STRING6',sOrddr);
      GetFldVar ('S_NUMVAL1',iQty);
      GetFldVar ('S_NUMVAL2',iCount);
      GetFldVar ('S_STRING7',sDrteamyn);
      GetFldVar ('S_STRING8',sProdcode);
      GetFldVar ('S_STRING9',sProdsize);
      GetFldVar ('S_STRING10',sExecdate);
      GetFldVar ('S_STRING11',sKitset); //kit코드 추가.20160615.kya.
      GetFldVar ('S_STRING12',sDlvrnumber); //kit코드 추가.20160617.kya.
      GetFldVar ('S_STRING13',sInstype2);//수가보험구분.20160823.kya.

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdTrtort.InsertTrtorI2(cnt:Integer):Integer;
var
  i : LongInt;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_NUMVAL1;S_NUMVAL2;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'+
              'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;'+
              'S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;' +
              'S_CODE25;S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_DATE1;S_NO1;S_CODE30;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8');

   for i:=0 to cnt -1 do
   begin
      SetFldValue(i,[String(iQty[i]), String(iCount[i]),   String(sType1[i]),   String(sType2[i]),
                  String(sMeddate[i]),String(spatsect[i]), String(sOrdgrp[i]),  String(sSlipcd[i]),
                  String(sMeddept[i]),String(sChadr[i]),   String(sOrdcd[i]),   String(sNightyp[i]),
                  String(sSpcdryn[i]),String(sSpcdr[i]),   String(sAnethmm[i]), String(sOldpttp[i]),
                  String(sInstype[i]),String(sWardno[i]),  String(sRoomno[i]),  String(sRcpdate[i]),
                  String(sRcpstat[i]),String(sOrddesc1[i]),String(sOrddesc2[i]),String(sTeeuplt[i]),
                  String(sTeeuprt[i]),String(sTeedwlt[i]), String(sTeedwrt[i]), String(sMedtime[i]),
                  String(sEditid[i]), String(sEditip[i]),  String(sOrdSite[i]), String(sOpDate[i]),
                  String(sOpseqNo[i]),String(sExecDr[i]),  String(sRemark[i]),  String(sDrteamyn[i]),
                  String(sProdcode1[i]), String(sProdsize[i]), String(sExecdate[i]), String(sKitset[i]), String(sDlvrnumber[i]),
                  String(sAnethDr2[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_TRTOR_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdTrtort.DeleteTrtor(sType1, sType2, sType3, sType4: string;iOrdSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('L_CNT1;S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0,[iOrdSeqno,sType1,sType2,sType3,sType4]);
   if (txPutF('MD_TRTOR_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdTrtort.UpdateTrtor(sSeqNo,sOrdDate,sPatNo,sQty,sCount,sAnethmm,
                               sTeeuplt,sTeeuprt,sTeedwlt,sTeedwrt,sIns,sNight,
                               sOrdDesc1,sRemark,sSpcdrYn,sExecDr,sDrteamYn,sExecdate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ORDDATE;S_STRING1;S_CODE1;S_CODE2;S_CODE3;'+
              'S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;'+
              'S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15');
   SetFldValue(0,[sPatNo,sOrdDate,sSeqNo,sQty,sCount,sIns,
                  sNight,sTeeuplt,sTeeuprt,sTeedwlt,sTeedwrt,sAnethmm,
                  sOrdDesc1,sRemark,sSpcdrYn,sExecDr,sDrteamYn,sExecdate]);
   if (txPutF('MD_TRTOR_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//고압산소치료환자명단. KimDaeYong 2020-03-02
function HmdTrtort.ListTrt8(inOrddate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0,[inOrddate]);
   if (txGetF('MD_TRTOR_L8')) then  //Tuxedo Service Call
   begin
      GetFldVar('S_STRING1', sPatno	  );
      GetFldVar('S_STRING2', sPatName );
      GetFldVar('S_STRING3', sOrddate );
      GetFldVar('S_STRING4', sPatsect );
      GetFldVar('S_STRING5', sMeddept );
      GetFldVar('S_STRING6', sOrdcd	  );
      GetFldVar('S_STRING7', sWardno  );
      GetFldVar('S_STRING8', sRoomno  );
      GetFldVar('S_STRING9', sOrddrnm );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// 수술실 처방수정삭제시.20160609.kya.
function HmdOpreqt.OPORD_U1(sType1,sType2,sType3,sType4,sType5,sType6,sEditid,sEditip:String;iOrdSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('L_CNT1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_TYPE1;S_TYPE2' );
   SetFldValue(0,[iOrdSeqno,sType1,sType2,sType3,sType4,sType5,sType6,sEditid,sEditip]);

   if (txPutF('CAMD_OPORD_U1')) then begin // camd_opord_u1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdTrtort.ListTrtDesc(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2]);
   if (txGetF('MD_TRTOR_L6')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrddesc1);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
////////////////////////////////////////////////////////////////////////////////
//  HmdBldort 	수혈처방                                                      //
////////////////////////////////////////////////////////////////////////////////

// 환자에 대한 수혈처방이력 List 조회
function HmdBldort.ListBloodOrd(PatNo,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1'); //환자번호;사업장;
   SetFldValue(0,[PatNo,Locate] );

   //Tuxedo Service Call
   if (txGetF('MD_BLDOR_L1')) then
   begin
      GetFldVar('S_STRING1',  sOrddate );  // 처방일
      GetFldVar('S_STRING2',  sOrdcd   );  // 처방코드
      GetFldVar('S_STRING3',  sJinjstat);  // 진행status
      GetFldVar('S_STRING4',  sJstatnm );  // 진행status name
      GetFldVar('S_STRING5',  sOrddr   );  // 처방의사
      GetFldVar('S_STRING6',  sOrdsite );  // 처방시행처
      GetFldVar('S_STRING7',  sRemark  );  // 특기사항
      GetFldVar('S_STRING8',  sOrdname );  // 처방명
      GetFldVar('S_STRING9',  sOrddrnm );  // 처방의사 name
      GetFldVar('S_STRING10', sOrdstnm );  // 처방시행처 name
      GetFldVar('S_STRING11', sOrddesc1);  // 처방상세1
      GetFldVar('S_STRING12', sOrddesc2);  // 처방상세2
      GetFldVar('S_STRING13', sMeddate );  // 진료일자.KimDaeYong 2020-09-02

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자에 대한 해당일자 수혈처방이력 List 조회
function HmdBldort.SelectBldOrt(sType1,PatNo,Orddate,Ordseqno:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_STRING1;S_STRING2'); //환자번호;사업장;
   SetFldValue(0,[sType1,PatNo,Orddate,Ordseqno] );

   //Tuxedo Service Call
   if (txGetF('MD_BLDOR_L2')) then
   begin
      GetFldVar('S_STRING1',  iOrdseqno);  // 처방코드
      GetFldVar('S_STRING2',  sOrddesc1);  // 처방상세1
      GetFldVar('S_STRING3',  sOrddesc2);  // 처방상세2
      GetFldVar('S_STRING4',  sWardno);  // 혈액번호
      GetFldVar('S_STRING5',  sIrradYn);
      GetFldVar('S_STRING6',  sFiltYn);
      GetFldVar('S_STRING7',  sUseCode);
      GetFldVar('S_STRING8',  sOrdDr);
      GetFldVar('S_STRING9',  sOrdCd);
      GetFldVar('S_STRING10', sMedDate);
      GetFldVar('S_STRING11', sDelitime);


      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수혈기록지 조회
function HmdBldort.SelectBloodt(PatNo,sType1,sType2: String) :Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2');
   SetFldValue(0,[PatNo,sType1,sType2] );

   //Tuxedo Service Call
   if (txGetF('MD_BLOOD_L2')) then
   begin
 {    GetFldVar('S_CODE1',  sOrdDate);   // 처방일자
     GetFldVar('S_CODE2',  iOrdSeqno);  // 처방순번
     GetFldVar('S_CODE3',  sPatSect);   // 시행순번
     GetFldVar('S_CODE4',  sMedDate);   // 시행일자
     GetFldVar('S_CODE5',  sWardNo);    // 혈액번호
     GetFldVar('S_CODE6',  sUseCode);   // 혈액형
     GetFldVar('S_CODE7',  sOrdDrNm);   // 시작시간
     GetFldVar('S_CODE8',  sJstatNm);   // 종료시간
     GetFldVar('S_CODE9',  sRemark);    // 특기사항
     GetFldVar('S_CODE10', sOrdName);   // 처방명
     GetFldVar('S_CODE11', sBldNrs1);   // 수혈자(시작)
     GetFldVar('S_CODE12', sBldNrs2);   // 수혈자(종료)
     GetFldVar('S_CODE13', sRemark2);   // 특기사항2}

     GetFldVar('S_CODE1',  sOrdDate);   // 처방일자
     GetFldVar('S_CODE2',  iOrdSeqno);  // 처방순번
     GetFldVar('S_CODE3',  sPatSect);   // 시행순번
     GetFldVar('S_CODE4',  sMedDate);   // 시행일자
     GetFldVar('S_CODE5',  sWardNo);    // 혈액번호
     GetFldVar('S_CODE6',  sUseCode);   // 혈액형
     GetFldVar('S_CODE7',  sOrdDrNm);   // 시작시간
     GetFldVar('S_CODE8',  sBldsNrs1);  // 수혈자1(시작)
     GetFldVar('S_CODE9',  sBldsNrs2);  // 수혈자2(시작)
     GetFldVar('S_CODE10', sRemark1);   // 특기사항
     GetFldVar('S_CODE11', sStat1   );  // 병실에서의 환자 및 혈액형 확인여부(시작)
     GetFldVar('S_CODE12', sStat2   );  // 부작용(Chill,uLtricaria.기타) 설명 여부(시작)
     GetFldVar('S_CODE13', sJstatNm );  // 종료시간
     GetFldVar('S_CODE14', sBldeNrs1);  // 수혈자1(종료)
     GetFldVar('S_CODE15', sBldeNrs2);  // 수혈자2(종료)
     GetFldVar('S_CODE16', sRemark2 );  // 특기사항
     GetFldVar('S_CODE17', sStat3   );  // ultricaria 유무(종료)
     GetFldVar('S_CODE18', sStat4   );  // chill 유무(종료)
     GetFldVar('S_CODE19', sOrdName );  // 처방명
     GetFldVar('S_CODE20', sPredrug );  // 수혈 전 투약명
     GetFldVar('S_CODE21', sGttmin  );  // 수혈 점적 속도
     GetFldVar('S_CODE22', sDelitime);  // 불출시각
     GetFldVar('S_CODE23', sRemark3 );  // 수혈후 15분 활력징후

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 수혈기록지 작성
function HmdBldort.InsertBloodt(sType1,sPatNo,sOrdDate,sOrdSeqNo,sSeqno,sOrdDate2,
                                sOrdSeqNo2,sSeqNo2,sActDate,sBldNo,sRhABO,sStartTm,
                                sEndTm,sRemark,sEditId,sEditIp,sBldNrs1,sBldNrs2,
                                sRemark2:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17');

   SetFldValue(0,[sType1,sPatNo,sOrdDate,sOrdSeqNo,sSeqno,sOrdDate2,sOrdSeqNo2,
                  sSeqNo2,sActDate,sBldNo,sRhABO,sStartTm,sEndTm,sRemark,sEditId,
                  sEditIp,sBldNrs1,sBldNrs2,sRemark2]);

   if (txPutF('MD_BLOOD_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//(추가. 2002.11.26 이용언) 수혈기록지 수정
function HmdBldort.InsertBloodt2(sType1,sPatNo,sOrdDate,sOrdSeqNo,sSeqNo,sOrdDate2,
                            sOrdSeqNo2,sSeqNo2,sActDate,sBldNo,sRhABO,
                            sStartTm,sBldSNrs1,sBldSNrs2,sRemark1,sStat1,sStat2,
                            sEndTm,sBldENrs1,sBldENrs2,sRemark2, sStat3,sStat4,
                            sPredrug,sGttmin,sEditId,sEditIp,sDelitime,sRemark3:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;' +
              'S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;S_CODE27');


   SetFldValue(0,[sType1,sPatNo,sOrdDate,sOrdSeqNo,sSeqNo,sOrdDate2,sOrdSeqNo2,
                  sSeqNo2,sActDate,sBldNo,sRhABO,sStartTm,sBldSNrs1,sBldSNrs2,
                  sRemark1,sStat1,sStat2,sEndTm,sBldENrs1,sBldENrs2,sRemark2,
                  sStat3,sStat4,sPredrug,sGttmin,sEditId,sEditIp,sDelitime,sRemark3]);

   if (txPutF('MD_BLOOD_I3')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdBldort.BloodtPrint(WardNo, sType1, sType2: String): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_PATNO;S_TYPE1;S_TYPE2');
   SetFldValue(0,[WardNo, sType1, sType2] );

   if (txGetF('MD_BLOOD_L3')) then begin
      GetFldVar('S_CODE1', sOrdDate);
      GetFldVar('S_CODE2', iOrdSeqno);
      GetFldVar('S_CODE3', sPatSect);
      GetFldVar('S_CODE4', sMedDate);
      GetFldVar('S_CODE5', sWardNo);
      GetFldVar('S_CODE6', sUseCode);
      GetFldVar('S_CODE7', sOrdDrNm);
      GetFldVar('S_CODE8', sBldsNrs1);
      GetFldVar('S_CODE9', sBldsNrs2);   
      GetFldVar('S_CODE10', sRemark1);
      GetFldVar('S_CODE11', sStat1 );
      GetFldVar('S_CODE12', sStat2 );
      GetFldVar('S_CODE13', sJstatNm );
      GetFldVar('S_CODE14', sBldeNrs1);
      GetFldVar('S_CODE15', sBldeNrs2);
      GetFldVar('S_CODE16', sRemark2 );
      GetFldVar('S_CODE17', sStat3 );
      GetFldVar('S_CODE18', sStat4 );
      GetFldVar('S_CODE19', sOrdName );
      GetFldVar('S_CODE20', sPredrug );
      GetFldVar('S_CODE21', sGttmin );
      GetFldVar('S_CODE22', sPatno );
      GetFldVar('S_CODE23', sPatnm );
      GetFldVar('S_CODE24', sRoomno );
      GetFldVar('S_CODE25', sDelitime );
      GetFldVar('S_CODE26', sRemark3);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdRehort 	재활처방                                                      //
////////////////////////////////////////////////////////////////////////////////

function HmdRehort.ListReh(sType1,sType2,sType3:String; iSeqno:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_CNT1');
   SetFldValue(0,[sType1,sType2,sType3,iSeqno]);
   if (txGetF('MD_REHOR_L1')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iOrdSeqno);
      GetFldVar('L_LONG2',iRsvCnt);
      GetFldVar('S_STRING1',sOrdDate);
      GetFldVar('S_STRING2',sPatSect);
      GetFldVar('S_STRING3',sOrdName);
      GetFldVar('S_STRING4',sPartNm);
      GetFldVar('S_STRING5',sGenDrNm);
      GetFldVar('S_STRING6',sOrdCd);

      Result := GetRecordCnt('L_LONG1');
      txFree;
   end;
end;

//재활처방 조회 변경 임시.
function HmdRehort.ListReh2(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   if (txGetF('MD_REHOR_L3')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iOrdSeqno);
      GetFldVar('L_LONG2',iRsvCnt);
      GetFldVar('S_STRING1',sOrdDate);
      GetFldVar('S_STRING2',sPatSect);
      GetFldVar('S_STRING3',sOrdName);
      GetFldVar('S_STRING4',sPartNm);
      GetFldVar('S_STRING5',sGenDrNm);
      GetFldVar('S_STRING6',sOrdCd);

      Result := GetRecordCnt('L_LONG1');
      txFree;
   end;
end;

// 재활처방 D/c처리
function HmdRehort.UpdateDC(sType1, SType2 : String; iLong1 : Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;L_CNT1');

   SetFldValue(0,[sType1,sType2,iLong1]);

   if (txPutF('MD_REHOR_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


//환자 재활치료여부 조회
function HmdRehort.PatRehInfo(PatNo,MedDate,MedDept:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [PatNo,MedDate,MedDept]);

   //Tuxedo Service Call
   if (txGetF('MD_REHOR_L2')) then
   begin
      GetFldVar('S_STRING1', sOrdDate );  // 처방일자
      GetFldVar('S_STRING2', sFromDate);  // From Date
      GetFldVar('S_STRING3', sToDate  );  // To Date

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 재활처방등록 (재활처방기본+상세)
function HmdRehort.InsertRehOrd(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;'+
              'S_EDITID;S_EDITIP');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sMedDate[i]),
                     String(sPatSect[i]),String(sOrdGrp[i]),String(sSlipCd[i]),
                     String(sMedDept[i]),String(sChaDr[i]),String(sDiagCd[i]),
                     String(sDiagName[i]),String(sOrdText[i]),String(sWardNo[i]),
                     String(sRoomNO[i]),String(sRemark[i]),String(sMedTime[i]),
                     String(sOldPttp[i]),String(sOrdCd[i]),String(sSiteCode[i]),
                     String(sTerms[i]),String(sDayCnt[i]),String(sDays[i]),
                     String(sMedYn[i]),String(sOrdDesc1[i]),String(sOrdDesc2[i]),
                     String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_REHOR_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 재활 처방 변경 임시 테이블 등록.(재활처방 테이블)
function HmdRehort.InsertRehOrd2(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;'+
              'S_EDITID;S_EDITIP');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sMedDate[i]),
                     String(sPatSect[i]),String(sOrdGrp[i]),String(sSlipCd[i]),
                     String(sMedDept[i]),String(sChaDr[i]),String(sDiagCd[i]),
                     String(sDiagName[i]),String(sOrdText[i]),String(sWardNo[i]),
                     String(sRoomNO[i]),String(sRemark[i]),String(sMedTime[i]),
                     String(sOldPttp[i]),String(sOrdCd[i]),String(sSiteCode[i]),
                     String(sTerms[i]),String(sDayCnt[i]),String(sDays[i]),
                     String(sMedYn[i]),String(sOrdDesc1[i]),String(sOrdDesc2[i]),
                     String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_REHOR_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdRehrst 	재활치료현황                                                  //
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//  HmdConslt 	컨설트기록                                                    //
////////////////////////////////////////////////////////////////////////////////

//컨설트의뢰내역 Insert (컨설트기록Insert/ 기본처방Insert / Noti Insert)
{function HmdConslt.RequestConsult(sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,SlipCd,
                                  ErYn,MedDept,ChaDr,OrdCd,CallYn,ConsDept,ConsDr,
                                  ConsCtnt,WardNo,RoomNo,NtType,NtTitle,NtAnswer,
                                  DmdietYn,HopeDate,OrdDesc1,MedTime,MedYn,NtText,OrdDesc2,
                                  ConsType,EditId,EditIp:String):Integer;}
{function HmdConslt.RequestConsult(sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,
                                  SlipCd,ErYn,MedDept,ChaDr,OrdCd,CallYn,
                                  ConsDept,ConsDr,ConsCtnt,WardNo,RoomNo,NtType,
                                  NtTitle,NtAnswer,DmdietYn,HopeDate,OrdDesc1,MedTime,
                                  MedYn,NtText,OrdDesc2,ConsType,Socpbl,Ecopbl,
                                  Volcon,Rehpbl,Dschamt,Examamt,Trtamt,EditId,
                                  EditIp:String):Integer;}
function HmdConslt.RequestConsult(sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,
                                  SlipCd,ErYn,MedDept,ChaDr,OrdCd,CallYn,
                                  ConsDept,ConsDr,ConsCtnt,WardNo,RoomNo,NtType,
                                  NtTitle,NtAnswer,DmdietYn,HopeDate,OrdDesc1,MedTime,
                                  MedYn,NtText,OrdDesc2,ConsType,Socpbl,Ecopbl,
                                  Volcon,Rehpbl,Dschamt,Examamt,Trtamt,SSDiag,
                                  SSTrt,HODiag,HOTrt,HOOp,Chemo,Radio,
                                  OtherTrt,PhyPain,EmoProb,SoProb,SpProb,Months,
                                  FuTrt,PhyComm,EditId,EditIp,Orddr,
                                  xSignData,xSerialNo,xSubjectDN:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;'+
              'S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;'+
              'S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;'+
              'S_STRING29;S_STRING30;S_STRING31;S_STRING32;S_STRING33;S_STRING34;'+
              'S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;'+
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;'+
              'S_STRING47;S_STRING48;S_EDITID;S_EDITIP;S_STRING49;'+
              'S_STRING50;S_STRING51;S_STRING52');
{   SetFldName('S_TYPE1;S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;'+
              'S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;'+
              'S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;'+
              'S_STRING29;S_STRING30;S_STRING31;S_STRING32;S_STRING33;S_EDITID;S_EDITIP');}
   SetFldValue(0,[sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,
                  SlipCd,ErYn,MedDept,ChaDr,OrdCd,CallYn,
                  ConsDept,ConsDr,ConsCtnt,WardNo,RoomNo,NtType,
                  NtTitle,NtAnswer,DmdietYn,HopeDate,OrdDesc1,MedTime,
                  MedYn,NtText,OrdDesc2,ConsType,Socpbl,Ecopbl,
                  Volcon,Rehpbl,Dschamt,Examamt,Trtamt,SSDiag,
                  SSTrt,HODiag,HOTrt,HOOp,Chemo,Radio,
                  OtherTrt,PhyPain,EmoProb,SoProb,SpProb,Months,
                  FuTrt,PhyComm,EditId,EditIp,Orddr,
                  xSignData,xSerialNo,xSubjectDN]);
   {SetFldValue(0,[sType1,PatNo,OrdDate,MedDate,PatSect,OrdGrp,
                  SlipCd,ErYn,MedDept,ChaDr,OrdCd,CallYn,
                  ConsDept,ConsDr,ConsCtnt,WardNo,RoomNo,NtType,
                  NtTitle,NtAnswer,DmdietYn,HopeDate,OrdDesc1,MedTime,
                  MedYn,NtText,OrdDesc2,ConsType,Socpbl,Ecopbl,
                  Volcon,Rehpbl,Dschamt,Examamt,Trtamt,EditId,EditIp]);}

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//컨설트회신내역 Update (컨설트기록 Update / Noti Insert)
function HmdConslt.ResponseConsult(PatNo,OrdDate,RespCtnt,RespCtn2,NtRecvId,NtType,
                                   NtTitle,NtErYn,NtAnswer,NtText,
                                   EditId,EditIp:String;OrdSeqNo:Integer;
                                   xSignData,xSerialNo,xSubjectDN:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_EDITID;S_EDITIP;L_SEQNO1;'+
              'S_STRING10;S_STRING11;S_STRING12');
   SetFldValue(0,[PatNo,OrdDate,RespCtnt,NtRecvId,NtType,NtTitle,
                  NtErYn,NtAnswer,NtText,RespCtn2,EditId,EditIp,OrdSeqNo,
                  xSignData,xSerialNo,xSubjectDN]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_U5')) then
   begin
      Result := 1;
      txFree;
   end;
end;


//컨설트의뢰 취소 (컨설트기록 Delete / Noti Insert)
function HmdConslt.CancelConsult(PatNo,OrdDate,NtContent,NtRecvId,NtType,
                                 NtTitle,NtErYn,NtAnswer,NtDeptCd,EditId,EditIp:String;
                                 OrdSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_EDITID;S_EDITIP;L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate,NtContent,NtRecvId,NtType,NtTitle,
                  NtErYn,NtAnswer,NtDeptCd,EditId,EditIp,OrdSeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;


// 환자별 컨설트의뢰/회신내용 조회 (환자번호+의뢰일+순번)
function HmdConslt.SelConsultInfo(PatNo,OrdDate:String;OrdSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;L_SEQNO1');  //환자번호;의뢰일;순번;
   SetFldValue(0, [PatNo,OrdDate,OrdSeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_S2')) then
   begin
      GetFldVar('S_STRING1', sConsCtnt);  // 의뢰내용
      GetFldVar('S_STRING2', sRespCtnt);  // 회신내용1
      GetFldVar('S_STRING3', sRespCtn2);  // 회신내용2
      GetFldVar('S_STRING4', sSocpbl);   // 심리사회적문제
      GetFldVar('S_STRING5', sEcopbl);   // 경제적문제
      GetFldVar('S_STRING6', sVolcon);   // 지역사회자원연결
      GetFldVar('S_STRING7', sRehpbl);   // 재활문제
      GetFldVar('S_STRING8', sDschamt);  // 퇴원비
      GetFldVar('S_STRING9', sExamamt);  // 검사비
      GetFldVar('S_STRING10', sTrtamt);  // 치료비
      GetFldVar('S_STRING11', sSSDiag);
      GetFldVar('S_STRING12', sSSTrt);
      GetFldVar('S_STRING13', sHODiag);
      GetFldVar('S_STRING14', sHOTrt);
      GetFldVar('S_STRING15', sHOOp);
      GetFldVar('S_STRING16', sChemo);
      GetFldVar('S_STRING17', sRadio);
      GetFldVar('S_STRING18', sOthertrt);
      GetFldVar('S_STRING19', sPhypain);
      GetFldVar('S_STRING20', sEmoprob);
      GetFldVar('S_STRING21', sSoprob);
      GetFldVar('S_STRING22', sSpprob);
      GetFldVar('S_STRING23', sMonths);
      GetFldVar('S_STRING24', sFutrt);
      GetFldVar('S_STRING25', sPhycomm);

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// 조건별 컨설트의뢰내역 List 조회
// Type1(의뢰구분): '1'=의사,Drdept=의사Code / '2'=진료과,Drdept=과Code
// Type2(조회조건): '1'=미실시,RespDate=NULL / '2'=일자별,RespDate=회신일(~이후)
function HmdConslt.ListConsult(Type1,Drdept,Type2,RespDate,Locate,Type3,Type4:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue32(0, [Type1,Drdept,Type2,RespDate,Locate,Type3,Type4]);

   //Tuxedo Service Call
   if (txGetF32('MD_CONSL_L1')) then
   begin
      GetFldVar32('S_PATNO'   , sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1' , sOrdDate );  // 의뢰일자
      GetFldVar32('S_STRING2' , sMedDate );  // 진료일/입원일
      GetFldVar32('S_STRING3' , sPatsect );  // 환자구분
      GetFldVar32('S_STRING4' , sMedDept );  // 진료과
      GetFldVar32('S_STRING5' , sChadr   );  // 주치의
      GetFldVar32('S_STRING6' , sOrddr   );  // 처방의(의뢰의)
      GetFldVar32('S_STRING7' , sConsDept);  // 의뢰과
      GetFldVar32('S_STRING8' , sConsDr  );  // 희망의사
      GetFldVar32('S_STRING9' , sRespDate);  // 회신일
      GetFldVar32('S_STRING10', sRespDr  );  // 회신의사
      GetFldVar32('S_STRING11', sCallYn  );  // 왕진여부
      GetFldVar32('S_STRING12', sErYn    );  // 응급여부
      GetFldVar32('S_STRING13', sPatName );  // 환자Name
      GetFldVar32('S_STRING14', sMDeptNm );  // 진료과Name
      GetFldVar32('S_STRING15', sCDeptNm );  // 의뢰과Name
      GetFldVar32('S_STRING16', sOrdDrNm );  // 처방의Name
      GetFldVar32('S_STRING17', sConsDrNm);  // 희망의Name
      GetFldVar32('S_STRING18', sRespDrNm);  // 회신의Name
      GetFldVar32('S_STRING19', sMedTime );  // 진료시간
      GetFldVar32('S_STRING20', sWardNo  );  // 병동번호
      GetFldVar32('S_STRING21', sAge     );  // 나이
      GetFldVar32('S_STRING22', sSex     );  // 성별
      GetFldVar32('S_STRING23', sRoomNo  );  // 병실번호
      GetFldVar32('S_STRING24', sHopeDate);  // 희망일
      GetFldVar32('S_STRING25', sOrdName );  // 처방
      GetFldVar32('S_STRING26', sConsType);  // 컨설트 종류
      GetFldVar32('L_SEQNO1'  , iOrdSeqNo);  // 순번

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

function HmdConslt.ListConsult8(Type1,Drdept,Type2,RespDate,ToDate,Locate,Type3,Type4,Type5:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9');
   SetFldValue(0, [Type1,Drdept,Type2,RespDate,ToDate,Locate,Type3,Type4,Type5]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_L8')) then
   begin
      GetFldVar('S_PATNO'   , sPatNo   );  // 환자번호
      GetFldVar('S_STRING1' , sOrdDate );  // 의뢰일자
      GetFldVar('S_STRING2' , sMedDate );  // 진료일/입원일
      GetFldVar('S_STRING3' , sPatsect );  // 환자구분
      GetFldVar('S_STRING4' , sMedDept );  // 진료과
      GetFldVar('S_STRING5' , sChadr   );  // 주치의
      GetFldVar('S_STRING6' , sOrddr   );  // 처방의(의뢰의)
      GetFldVar('S_STRING7' , sConsDept);  // 의뢰과
      GetFldVar('S_STRING8' , sConsDr  );  // 희망의사
      GetFldVar('S_STRING9' , sRespDate);  // 회신일
      GetFldVar('S_STRING10', sRespDr  );  // 회신의사
      GetFldVar('S_STRING11', sCallYn  );  // 왕진여부
      GetFldVar('S_STRING12', sErYn    );  // 응급여부
      GetFldVar('S_STRING13', sPatName );  // 환자Name
      GetFldVar('S_STRING14', sMDeptNm );  // 진료과Name
      GetFldVar('S_STRING15', sCDeptNm );  // 의뢰과Name
      GetFldVar('S_STRING16', sOrdDrNm );  // 처방의Name
      GetFldVar('S_STRING17', sConsDrNm);  // 희망의Name
      GetFldVar('S_STRING18', sRespDrNm);  // 회신의Name
      GetFldVar('S_STRING19', sMedTime );  // 진료시간
      GetFldVar('S_STRING20', sWardNo  );  // 병동번호
      GetFldVar('S_STRING21', sAge     );  // 나이
      GetFldVar('S_STRING22', sSex     );  // 성별
      GetFldVar('S_STRING23', sRoomNo  );  // 병실번호
      GetFldVar('S_STRING24', sHopeDate);  // 희망일
      GetFldVar('S_STRING25', sOrdName );  // 처방
      GetFldVar('S_STRING26', sConsType);  // 컨설트 종류
      GetFldVar('S_STRING27', sOrdcd   );  // 처방코드
      GetFldVar('S_STRING28', sResptype);  // 회신불가
      GetFldVar('S_STRING29', sChadrnm );  //
      GetFldVar('S_STRING30', sResno1  );  //
      GetFldVar('S_STRING31', sResno2  );  //
      GetFldVar('S_STRING32', sOpenyn  );  // 개봉여부
      GetFldVar('L_SEQNO1'  , iOrdSeqNo);  // 순번
      GetFldVar('S_STRING33' , sReqDate );  // 의뢰일자  시간추가
//      GetFldVar('S_STRING33', sFstmedty);  // 1:초진 2:재진 3:신환 4:재,초진

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;


//환자별 컨설트의뢰내역(협진의뢰중) List 조회
function HmdConslt.PatConsultInfo(PatNo,MedDate,MedDept,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0, [PatNo,MedDate,MedDept,Locate]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_L2')) then
   begin
      GetFldVar('S_STRING1', sOrdDate );  // 의뢰일자
      GetFldVar('S_STRING2', sConsDept);  // 의뢰과
      GetFldVar('S_STRING3', sCDeptNm );  // 의뢰과Name

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자컨설트정보 조회
function HmdConslt.PatConsultInfo1(PatNo,MedDate,MedDept,Locate,Type1,Type2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0, [PatNo,MedDate,MedDept,Locate,Type1,Type2]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_L3')) then
   begin
      GetFldVar('S_STRING1' , sOrdDate );  // 의뢰일자
      GetFldVar('S_STRING2' , sMDeptNm );  // 진료과
      GetFldVar('S_STRING3' , sOrdDrNm );  // 의뢰의
      GetFldVar('S_STRING4' , sCDeptNm );  // 희망과Name
      GetFldVar('S_STRING5' , sConsdrNm);  // 희망의Name
      GetFldVar('S_STRING6' , sCallyn  );  // 왕진여부(유형)
      GetFldVar('S_STRING7' , sRespDate);  // 회신일자
      GetFldVar('S_STRING8' , sPatSect );  // 환자구분
      GetFldVar('S_STRING9' , sConsdr  );  // 희망의
      GetFldVar('S_STRING10', sErYn    );  // 응급여부
      GetFldVar('S_STRING11', sConsDept);  // 희망과
      GetFldVar('S_STRING12', sWardNo  );  // 병동
      GetFldVar('S_STRING13', sRoomNo  );  // 병실번호
      GetFldVar('S_STRING14', sAge     );  // 나이
      GetFldVar('S_STRING15', sSex     );  // 성별
      GetFldVar('S_STRING16', sHopeDate);  // 희망일
      GetFldVar('S_STRING17', sOrdName );  // 처방명
      GetFldVar('S_STRING18', sConsType);  // 종류
      GetFldVar('L_SEQNO1'  , iOrdSeqNo);  // 순번

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자컨설트정보 조회2
function HmdConslt.PatConsultInfo2(PatNo,MedDate,MedDept,Locate,Type1,Type2,sToDate,sFromDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8');
   SetFldValue(0, [PatNo,MedDate,MedDept,Locate,Type1,Type2,sToDate,sFromDate]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_L9')) then
   begin
      GetFldVar('S_STRING1' , sOrdDate );  // 의뢰일자
      GetFldVar('S_STRING2' , sMDeptNm );  // 진료과
      GetFldVar('S_STRING3' , sOrdDrNm );  // 의뢰의
      GetFldVar('S_STRING4' , sCDeptNm );  // 희망과Name
      GetFldVar('S_STRING5' , sConsdrNm);  // 희망의Name
      GetFldVar('S_STRING6' , sCallyn  );  // 왕진여부(유형)
      GetFldVar('S_STRING7' , sRespDate);  // 회신일자
      GetFldVar('S_STRING8' , sPatSect );  // 환자구분
      GetFldVar('S_STRING9' , sConsdr  );  // 희망의
      GetFldVar('S_STRING10', sErYn    );  // 응급여부
      GetFldVar('S_STRING11', sConsDept);  // 희망과
      GetFldVar('S_STRING12', sWardNo  );  // 병동
      GetFldVar('S_STRING13', sRoomNo  );  // 병실번호
      GetFldVar('S_STRING14', sAge     );  // 나이
      GetFldVar('S_STRING15', sSex     );  // 성별
      GetFldVar('S_STRING16', sHopeDate);  // 희망일
      GetFldVar('S_STRING17', sOrdName );  // 처방명
      GetFldVar('S_STRING18', sConsType);  // 종류
      GetFldVar('S_STRING19', sOrdDr   );  // 처방의
      GetFldVar('S_STRING20', sMeddept );  // 처방의
      GetFldVar('S_STRING21', sChadrnm );  // 처방의
      GetFldVar('S_STRING22', sResno1  );  // 처방의
      GetFldVar('S_STRING23', sResno2  );  // 처방의
      GetFldVar('S_STRING24', sRespDrNm);  // 회신의
      GetFldVar('S_STRING25', sReqdate);  // 의뢰시간 추가
            
      GetFldVar('L_SEQNO1'  , iOrdSeqNo);  // 순번

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdConslt.ConsDrChange(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_EDITID;S_EDITIP;L_SEQNO1');

   for i := 0 to cnt-1 do
     SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sConsDr[i]),
                    String(sEditId[i]),String(sEditIp[i]),Integer(iOrdSeqNo[i])]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//컨설트의뢰내역 update (컨설트의뢰내용update/Noti Insert)
function HmdConslt.ConsChange(Patno,OrdDate,ConsDept,ConsCtnt,NtType,ConsDr,NtTitle,Eryn,
                              NtAnswer,NtText,EditId,EditIp:String;OrdSeqNo:Integer;
                              xSignData,xSerialNo,xSubjectDN:string):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_EDITID;S_EDITIP;L_SEQNO1;'+
              'S_STRING10;S_STRING11;S_STRING12');
   SetFldValue(0,[Patno,OrdDate,ConsDept,ConsCtnt,NtType,ConsDr,NtTitle,
                  Eryn,NtAnswer,NtText,EditId,EditIp,OrdSeqNo,
                  xSignData,xSerialNo,xSubjectDN]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_U3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//컨설트의뢰내역 update (영양과 희망일시update/Noti Insert)
function HmdConslt.ConsChange1(Patno,OrdDate,ConsDept,HopeDate,NtType,ConsDr,NtTitle,Eryn,
                               NtAnswer,NtText,EditId,EditIp:String;OrdSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_EDITID;S_EDITIP;L_SEQNO1');
   SetFldValue(0,[Patno,OrdDate,ConsDept,HopeDate,NtType,ConsDr,NtTitle,
                  Eryn,NtAnswer,NtText,EditId,EditIp,OrdSeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_U4')) then
   begin
      Result := 1;
      txFree;
   end;
end;


// 영양과 컨설트 전체
function HmdConslt.SelFndConsl(sType1,sType2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0, [sType1,sType2]);

   //Tuxedo Service Call
   if (txGetF32('MD_CONSL_L7')) then
   begin
      GetFldVar32('S_STRING1' , sPatSect );   // 환자구분
      GetFldVar32('S_STRING2' , sHopeDate );  // 희망시간
      GetFldVar32('S_STRING3' , sPatNo );     // 환자번호
      GetFldVar32('S_STRING4' , sPatName );   // 환자명
      GetFldVar32('S_STRING5' , sWardNo );    // 병동
      GetFldVar32('S_STRING6' , sMedDept );   // 진료과
      GetFldVar32('S_STRING7' , sOrdName );   // 처방명

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//컨설트처방 상세정보 SELECT
function HmdConslt.ConsultDetail(PatNo,OrdDate,Locate:String;SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate,Locate,SeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_S3')) then
   begin
      GetFldVar('S_STRING1',  sOrdGrp  );  // 처방코드
      GetFldVar('S_STRING2',  sSlipCd  );  // 처방분류
      GetFldVar('S_STRING3',  sOrdCd   );  // 지병 환자유형
      GetFldVar('S_STRING4',  sCallYn  );  // 왕진여부
      GetFldVar('S_STRING5',  sConsDept);  // 희망부서
      GetFldVar('S_STRING6',  sConsDr  );  // 희망의사
      GetFldVar('S_STRING7',  sConsCtnt);  // 의뢰내용
      GetFldVar('S_STRING8',  sDmDietYn);  // 당뇨조식여부
      GetFldVar('S_STRING9',  sHopeDate);  // 영양과-희망일시
      GetFldVar('S_STRING10', sConsType);  // 컨설트 구분 (1:일반,2:EMG)
      GetFldVar('S_STRING11', sRespDr  );  // 회신의사
      GetFldVar('S_STRING12', sRespDate);  // 회신일자
      GetFldVar('S_STRING13', sRespctNt);  // 회신내용1
      GetFldVar('S_STRING14', sRespctN2);  // 회신내용2
      GetFldVar('S_STRING15', sCDeptNm );  // 희망부서명
      GetFldVar('S_STRING16', sConsDrNm);  // 희망의사명
      GetFldVar('S_STRING17', sOrdName );  // 처방명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 과별 컨설트 통계
function HmdConslt.DeptConslt(Gubun,Fromdt,Todate,Locate,Patsect,Type1 : String ):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[Gubun,Fromdt,Todate,Locate,Patsect,Type1]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_S4')) then
   begin
      GetFldVar('S_STRING1',  sDeptnm  );  // 과명
      GetFldVar('S_STRING2',  sRspcnt  );  // 실시수
      GetFldVar('S_STRING3',  sNocnt   );  // 미실시수
      GetFldVar('S_STRING4',  sCount   );  // 총계
      GetFldVar('S_STRING5',  sMeddept );  // 진료과
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 과별 컨설트 통계 상세
function HmdConslt.DeptConsltDetail(Gubun,Type1,Fromdt,Todate,Meddept,Patsect,Locate :string ):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue(0,[Gubun,Type1,Fromdt,Todate,Meddept,Patsect,Locate]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_S5')) then
   begin
      GetFldVar('S_STRING1',sOrddate  );  // 의뢰일자
      GetFldVar('S_STRING2',sPatno    );    // 환자번호
      GetFldVar('S_STRING3',sPatname  );  // 환자명
      GetFldVar('S_STRING4',sSex      );      // 성별
      GetFldVar('S_STRING5',sBirtdate ); // 생일
      GetFldVar('S_STRING6',sRespdate ); // 회신일자
      GetFldVar('S_STRING7',sMeddept  ); // 진료과
      GetFldVar('S_STRING8',sMeddept2 );
      GetFldVar('S_STRING9',sConsdr   );
      GetFldVar('S_STRING10',sRespdr   );
      GetFldVar('S_STRING11',sEryn    );
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//컨설트 회신불가 Updae
function HmdConslt.ResptypeChange(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_EDITID;S_EDITIP;L_SEQNO1');

   for i := 0 to cnt-1 do
     SetFldValue(i,[String(sPatNo[i]),String(sOrdDate[i]),String(sResptype[i]),
                    String(sEditId[i]),String(sEditIp[i]),Integer(iOrdSeqNo[i])]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_U6')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdConslt.SelAntConslt(Gubun,Fromdt,Todate,Locate,Type1 : String ):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[Gubun,Fromdt,Todate,Locate,Type1]);

   //Tuxedo Service Call
   if (txGetF('MD_ANTOR_L5')) then
   begin
      GetFldVar('S_STRING1',  sDeptnm  );  // 과명
      GetFldVar('S_STRING2',  sRspcnt  );  // 실시수
      GetFldVar('S_STRING3',  sNocnt   );  // 미실시수
      GetFldVar('S_STRING4',  sCount   );  // 총계
      GetFldVar('S_STRING5',  sMeddept );  // 진료과
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdConslt.AntConsltDetail(Gubun,Type1,Fromdt,Todate,Meddept,Locate :string ):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[Gubun,Type1,Fromdt,Todate,Meddept,Locate]);

   //Tuxedo Service Call
   if (txGetF('MD_ANTOR_L6')) then
   begin
      GetFldVar('S_STRING1',sOrddate  );  // 의뢰일자
      GetFldVar('S_STRING2',sPatno    );  // 환자번호
      GetFldVar('S_STRING3',sPatname  );  // 환자명
      GetFldVar('S_STRING4',sSex      );  // 성별
      GetFldVar('S_STRING5',sBirtdate );  // 생일
      GetFldVar('S_STRING6',sRespdate );  // 회신일자
      GetFldVar('S_STRING7',sMeddept  );  // 진료과
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//감염전문관리료(AH300II) 여부 체크, 보험과(백미라)요청
//KimDaeYong 2014-12-12
function HmdConslt.ListConsult11(inPatno, inMeddate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [inPatno, inMeddate]);

   //Tuxedo Service Call
   if (txGetF('MD_CONSL_L11')) then
   begin
      GetFldVar('S_STRING1' , sPatno );  // 의뢰일자
      GetFldVar('S_STRING2' , sOrddate );  // 진료일/입원일
      GetFldVar('S_STRING3' , sMeddate );  // 환자구분
      GetFldVar('S_STRING4' , sOrdcd );  // 진료과

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdAdmret 	입원예약                                                      //
////////////////////////////////////////////////////////////////////////////////

//기간별(입원예정일:from~to) 입원예약환자 List SELECT
function HmdAdmret.ListAdmReserv(sType1,sType2,FromDate,ToDate,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_TYPE1;S_TYPE2;S_TYPE3');    //입원예정일from;to;사업장
   SetFldValue(0,[sType1,sType2,FromDate,ToDate,Locate] );

   //Tuxedo Service Call
   if (txGetF('MD_ADMRE_L1')) then
   begin
      GetFldVar('S_PATNO',     sPatNo    );  // 환자번호
      GetFldVar('S_STRING1',   sAdmSchdt );  // 입원예정일
      GetFldVar('S_STRING2',   sMedDept  );  // 입원진료과
      GetFldVar('S_STRING3',   sChaDr    );  // 주치의사
      GetFldVar('S_STRING4',   sAdmIcdcd );  // 입원시진단코드
      GetFldVar('S_STRING5',   sAdmDiag  );  // 입원시진단명
      GetFldVar('S_STRING6',   sDietKind );  // 입원시 개시식사종류
      GetFldVar('S_STRING7',   sGenDr    );  // 담당의사
      GetFldVar('S_STRING8',   sIsolatYn );  // 격리병실여부
      GetFldVar('S_STRING9',   sErYn     );  // 응급여부
      GetFldVar('S_STRING10',  sDrgYn    );  // DRG적용여부
      GetFldVar('S_STRING11',  sOpexDate );  // 수술예정일자
      GetFldVar('S_STRING12',  sRcpStat  );  // (원무)원무STATUS-수납
      GetFldVar('S_STRING13',  sAdmDate  );  // (원무)입원일자
      GetFldVar('S_STRING14',  sRemark   );  // 특기사항
      GetFldVar('S_STRING15',  sPatName  );  // 환자명
      GetFldVar('S_STRING16',  sSex      );  // 성별
      GetFldVar('S_STRING17',  sBirtDate );  // 생년월일
      GetFldVar('S_STRING18',  sDeptNm   );  // 진료과명
      GetFldVar('S_STRING19',  sChaDrNm  );  // 주치의명
      GetFldVar('S_STRING20',  sGenDrNm  );  // 담당의명
      GetFldVar('L_LONG1',     iStayDays );  // 예상재원일수

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 퇴원환자의 재입원예약일 SELECT
function HmdAdmret.ListReAdmDate(PatNo,DschExdt:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); //입원예정일from;to;사업장
   SetFldValue(0,[PatNo,DschExdt] );

   //Tuxedo Service Call
   if (txGetF('MD_ADMRE_L2')) then
   begin
      GetFldVar('S_STRING1',   sAdmSchdt );  // 입원예정일

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//입원지시내역 저장 (입원예약 Insert / 기본처방 Insert)
function HmdAdmret.InsertAdmReserv(sType1,sType2,PatNo,AdmschDt,MedDept,ChaDr,AdmIcdCd,AdmDiag,
                                   DietAdm,GenDr,IsolatYn,ErYn,DrgYn,OpexDate,
                                   Remark,MedDate,OrdDept,OrdChaDr,Patsect,WardNo,
                                   RoomNo,OrdGrp,SlipCd,OrdCd,OrdSite,OrdDesc1,MedTime,
                                   MedYn,SpcDr,ChartYn,Editid,Editip,DscYn,AdmOldDate,HopeWard,PatType,UnSpccd,
                                   sNpipcd,sNpipetc,sNpslpyn:String;
                                   iStayDays:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_EDITID;S_EDITIP;'+
              'S_STRING29;S_STRING30;S_CODE1;S_STRING31;S_STRING32;S_STRING33;S_STRING34;'+
              'L_LONG1');
   SetFldValue(0,[sType1,sType2,PatNo,
                  AdmschDt,MedDept,ChaDr,AdmicdCd,AdmDiag,DietAdm,GenDr,IsolatYn,
                  ErYn,DrgYn,OpexDate,Remark,MedDate,OrdDept,OrdChaDr,Patsect,
                  WardNo,RoomNo,OrdGrp,SlipCd,OrdCd,OrdSite,OrdDesc1,MedTime,
                  MedYn,DscYn,SpcDr,ChartYn,Editid,Editip,AdmOldDate,HopeWard,PatType,UnSpccd,
                  sNpipcd,sNpipetc,sNpslpyn,
                  iStayDays]);

   //Tuxedo Service Call
   // if (txPutF('MD_ADMRE_I1')) then
   if (txPutF('MD_ADMRE_I2')) then
   begin
      GetFldVar('S_STRING1',sResult); //처리결과(A=입원처리,R=입원예약,Y=예약처리)
      Result := 1;
      txFree;
   end;
end;

//입원지시내역 조회
function HmdAdmret.AdmschdSelect(Type1,Type2,Type3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[Type1,Type2, Type3] );

   //Tuxedo Service Call
//   if (txGetF('MD_ADMRE_S1')) then
   if (txGetF('MD_ADMRE_S2')) then
   begin
      GetFldVar('L_LONG1'   , iStaydays);     // 예상재원일수
      GetFldVar('S_PATNO'   , sPatNo);        // 환자번호
      GetFldVar('S_STRING1' , sAdmschdt   );  // 입원예정일
      GetFldVar('S_STRING2' , sMeddept );     // 진료과
      GetFldVar('S_STRING3' , sChadr);        // 지정의
      GetFldVar('S_STRING4' , sAdmicdcd  );   // 진단코드
      GetFldVar('S_STRING5' , sAdmdiag   );   // 진단명
      GetFldVar('S_STRING6' , sDietKind  );   // 개시식사종류
      GetFldVar('S_STRING7' , sGendr );       // 주치의
      GetFldVar('S_STRING8' , sIsolatyn );    // 격리병실여부
      GetFldVar('S_STRING9' , sEryn);         // 응급여부
      GetFldVar('S_STRING10', sDrgyn);        // DRG 여부
      GetFldVar('S_STRING11', sOpexdate);     // 수술예정일자
      GetFldVar('S_STRING12', sRemark);       // 특기사항
      GetFldVar('S_STRING13', sAdmDate);      // 특기사항
      GetFldVar('S_STRING14', sOrdDate);      // 특기사항
      GetFldVar('S_STRING15', sOrdDr);        // 특기사항
      GetFldVar('S_STRING16', sDscYn);        // 특기사항
      GetFldVar('S_STRING17', sSpcDr  );      // 지정의
      GetFldVar('S_STRING18', sChartYn);      // 차트대출여부
      GetFldVar('S_STRING19', sRcpStat);
      GetFldVar('S_STRING20', sReqWard);
      GetFldVar('S_STRING21', sPatType);
      GetFldVar('S_STRING22', sUnspccd);
      GetFldVar('S_STRING23', sNpipcd );      // 정신과입원유형코드
      GetFldVar('S_STRING24', sNpipetc);      // 정신과입원유형기타
      GetFldVar('S_STRING25', sNpslpyn);      // 정신과수면다원검사여부

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

//입원지시 취소
function HmdAdmret.AdmschdDelete(PatNo,Admschdt,OrdDate,OrdDr:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4');
   SetFldValue(0,[PatNo,Admschdt,OrdDate,OrdDr]);

   //Tuxedo Service Call
   if (txPutF('MD_ADMRE_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdResult 	통합검사결과                                                  //
////////////////////////////////////////////////////////////////////////////////

//검사결과 List SELECT (환자번호+처방일+순번(+검사코드))
function HmdResult.ListResultInfo(PatNo,OrdDate,ExamCode:String; SeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate,ExamCode,SeqNo] );

   //Tuxedo Service Call
   if (txGetF('MD_RESUL_L2')) then
   begin
      GetFldVar('S_STRING1' , sPatno   );   // 환자번호
      GetFldVar('S_STRING2' , sOrddate );   // 처방일자
      GetFldVar('S_STRING3' , sExamcode);   // 검사항목코드
      GetFldVar('S_STRING4' , sSlipcd  );   // SLIP코드
      GetFldVar('S_STRING5' , sRslt1   );   // 검사결과1(수치)
      GetFldVar('S_STRING6' , sRslt2   );   // 검사결과2(판독)
      GetFldVar('S_STRING7' , sRsltupp );   // 검사결과 상한값
      GetFldVar('S_STRING8' , sRsltlow );   // 검사결과 하한값
      GetFldVar('S_STRING9' , sRsltunit);   // 검사결과 단위
      GetFldVar('S_STRING10', sExamtext);   // 검사특기사항
      GetFldVar('S_STRING11', sExecdate);   // 실시일자
      GetFldVar('S_STRING12', sRsltdate);   // 보고일자
      GetFldVar('S_STRING13', sReptdr  );   // 보고의사
      GetFldVar('S_STRING14', sReptdrnm);   // 보고의사명
      GetFldVar('S_STRING15', sReaddate);   // 판독일자
      GetFldVar('S_STRING16', sReaddr  );   // 판독의사
      GetFldVar('S_STRING17', sReaddrnm);   // 판독의사명
      GetFldVar('S_STRING18', sRsltType);   // 검사결과TYPE:'N'/'T'
      GetFldVar('S_STRING19', sTypeName);   // 검사결과TYPE:'N'=수치,'T'=판독
      GetFldVar('S_STRING20', sExamName);   // 검사명
      GetFldVar('L_SEQNO1'  , iOrdseqno);   // 처방순번

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// 특정 검사 결과조회
function HmdResult.ListEXAResult(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   for i := 0 to Cnt - 1 do
      SetFldValue32(i,[String(sPatNo[i]),String(sStrOrdDate[i]),String(sEndOrdDate[i]),
                       String(sExamCodeI[i]),String(sType1[i])]);
   if (txGetF32('MD_RESUL_L3')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1', sOrdName);
      GetFldVar32('S_STRING2', sExecdate);
      GetFldVar32('S_STRING3', sRslt1);
      GetFldVar32('S_STRING4', sRsltupp);
      GetFldVar32('S_STRING5', sRsltlow);
      GetFldVar32('S_STRING6', sExamCode);
      GetFldVar32('S_STRING7', sRsltUnit);

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


//(추가. 2003.05.02 이용언) Tunning
function HmdResult.ListEXAResult2(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sPatNo[i]),String(sStrOrdDate[i]),String(sEndOrdDate[i]),
                       String(sExamCodeI[i]),String(sType1[i])]);
   if (txGetF('MD_RESUL_LA')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sOrdName);
      sGetFldVar('S_STRING2', sExecdate);
      sGetFldVar('S_STRING3', sRslt1);
      sGetFldVar('S_STRING4', sRsltupp);
      sGetFldVar('S_STRING5', sRsltlow);
      sGetFldVar('S_STRING6', sExamCode);
      sGetFldVar('S_STRING7', sRsltUnit);

      txFree;
   end;
end;

// 특정 검사 결과조회
function HmdResult.ListEXAResult3(PatNo : string):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[PatNo]);
   if (txGetF('MD_RESUL_LB')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sExamCode);
      GetFldVar('S_STRING2', sRslt1);
      GetFldVar('S_STRING3', sRsltdate);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//(추가. 2005.03.18 조일영)
function HmdResult.ListEXAResult4(Cnt:integer):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sPatNo[i]),String(sStrOrdDate[i]),String(sEndOrdDate[i]),
                       String(sExamCodeI[i]),String(sType1[i]),String(sSpccode[i]) ]);
   if (txGetF('MD_RESUL_LC')) then begin //Tuxedo Service Call

      Result := GetRecordCnt('S_STRING1');

      sGetFldVar('S_STRING1', sOrdName);
      sGetFldVar('S_STRING2', sExecdate);
      sGetFldVar('S_STRING3', sRslt1);
      sGetFldVar('S_STRING4', sRsltupp);
      sGetFldVar('S_STRING5', sRsltlow);
      sGetFldVar('S_STRING6', sExamCode);
      sGetFldVar('S_STRING7', sRsltUnit);

      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdRsltht 	통합검사결과 History                                          //
////////////////////////////////////////////////////////////////////////////////

// 검사결과 변경 History 조회
function HmdRsltht.List1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdDchsut 	퇴원요약        퇴원요약조회시 전자인증적용 SONGLIM_THOMA     //
////////////////////////////////////////////////////////////////////////////////

function HmdDchsut.SelectDch(sPatNo,sAdmDate:String):Integer;
{begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatNo,sAdmDate]);
   if (txGetF('MD_DCHSU_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sDschdate);
      GetFldVar('S_STRING2', sCcomplnt);
      GetFldVar('S_STRING3', sDiag);
      GetFldVar('S_STRING4', sOptext);
      GetFldVar('S_STRING5', sDschord);
      GetFldVar('S_STRING6', sExamrslt);
      GetFldVar('S_STRING7', sOpdfu);
      GetFldVar('S_STRING8', sTrtrslt);
      GetFldVar('S_STRING9', sAdmrslt);
      GetFldVar('S_STRING10',sDschtype);
      GetFldVar('S_STRING11',sEditid);
      GetFldVar('S_STRING12',sEditnm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;}
// 2003.03.21
{begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatNo,sAdmDate]);
   if (txGetF('MD_DCHSU_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sDschdate);
      GetFldVar('S_STRING2', sCcomplnt);
      GetFldVar('S_STRING3', sDiag    );
      GetFldVar('S_STRING4', sOptext  );
      GetFldVar('S_STRING5', sCompl   );
      GetFldVar('S_STRING6', sDschord );
      GetFldVar('S_STRING7', sExamrslt);
      GetFldVar('S_STRING8', sOpconf  );
      GetFldVar('S_STRING9', sOpdfu   );
      GetFldVar('S_STRING10',sDschAdu );
      GetFldVar('S_STRING11',sTrtrslt );
      GetFldVar('S_STRING12',sAdmrslt );
      GetFldVar('S_STRING13',sDschtype);
      GetFldVar('S_STRING14',sEditid);
      GetFldVar('S_STRING15',sEditnm);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;}
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatNo,sAdmDate]);
   if (txGetF('MD_DCHSU_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sDschdate);
      GetFldVar('S_STRING2', sCcomplnt);
      GetFldVar('S_STRING3', sDiag    );
      GetFldVar('S_STRING4', sOptext  );
      GetFldVar('S_STRING5', sCompl   );
      GetFldVar('S_STRING6', sDschord );
      GetFldVar('S_STRING7', sExamrslt);
      GetFldVar('S_STRING8', sOpconf  );
      GetFldVar('S_STRING9', sOpdfu   );
      GetFldVar('S_STRING10',sDschAdu );
      GetFldVar('S_STRING11',sTrtrslt );
      GetFldVar('S_STRING12',sAdmrslt );
      GetFldVar('S_STRING13',sDschtype);
      GetFldVar('S_STRING14',sEditid);
      GetFldVar('S_STRING15',sEditnm);
      GetFldVar('S_STRING16',sExamrslt1);
      GetFldVar('S_STRING17',sDiag1);
      
      GetFldVar('S_STRING19', sMove  );
      GetFldVar('S_STRING20', sMDate );
      GetFldVar('S_STRING21', sAdd   );
      GetFldVar('S_STRING22', sJikup );
      GetFldVar('S_STRING23', sTel   );
      GetFldVar('S_STRING24', sParent);
      GetFldVar('S_STRING25', sPTel  );

      GetFldVar('S_STRING26', sMovedpd);
      GetFldVar('S_STRING27', sMovedp );

      GetFldVar('S_STRING28', sSignData );
      GetFldVar('S_STRING29', sSerialNo );
      GetFldVar('S_STRING30', sSubjectDN );

      GetFldVar('S_STRING31', sFirstipdt);
      GetFldVar('S_STRING32', sDeathRsn);
      GetFldVar('S_STRING33', sTrnsPer);
      GetFldVar('S_STRING34', sTrnsrsn);
      GetFldVar('S_STRING35', sTrnswtp);
      GetFldVar('S_STRING36', sTrnscure);
      GetFldVar('S_STRING37', sTrnsdept);
      GetFldVar('S_STRING38', sPasssumm);
      GetFldVar('S_STRING39', sChadrcosign);
      GetFldVar('S_STRING40', sMainmed);
      GetFldVar('S_STRING41', sIninfect);
      //2015인증평가, KimDaeYong 2015-02-02
      GetFldVar('S_STRING42', sOpdyn1);
      GetFldVar('S_STRING43', sOpdyn2);
      GetFldVar('S_STRING44', sOpdyn3);
      GetFldVar('S_STRING45', sAfteredu);
      GetFldVar('S_STRING46', sDrgyn);  //DRGYN, KimDaeYong 2015-04-06
      GetFldVar('S_STRING47', sAdmpath); //입원경로, KimDaeYong 2015-07-27
      //최초기록시 환자인적사항(주소,전화번호,성별나이) 저장. KimDaeYong 2021-05-04
      GetFldVar('S_STRING48', sFstAddr);
      GetFldVar('S_STRING49', sFstTelno);
      GetFldVar('S_STRING50', sFstSexage);
      GetFldVar('S_STRING51', sFstParents);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


//(수정 2003.03.13)
{function HmdDchsut.InsertDch(sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,
                             sRoomNo,sCcomplnt,sDiag,sOpText,sDschOrd,sExamRslt,sOpdFu,
                             sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;' +
              'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20');
   SetFldValue(0,[sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,sRoomNo,sCcomplnt,
                  sDiag,sOpText,sDschOrd,sExamRslt,sOpdFu,sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp]);
   if (txPutF('MD_DCHSU_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;}
// 수정 2003.03.21
{function HmdDchsut.InsertDch(sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,
                             sRoomNo,sCcomplnt,sDiag,sOpText,sDschOrd,sExamRslt,sOpdFu,
                             sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp,
                             sOpconf,sCompl,sDschAdu
                             :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;' +
              'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;' +
              'S_TYPE21;S_TYPE22;S_TYPE23');
   SetFldValue(0,[sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,sRoomNo,sCcomplnt,
                  sDiag,sOpText,sDschOrd,sExamRslt,sOpdFu,sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp,
                  sOpconf,sCompl,sDschAdu]);
   if (txPutF('MD_DCHSU_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;              }

// SONGLIM_THOMA 수정
function HmdDchsut.InsertDch(sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,
                             sRoomNo,sCcomplnt,sDiag,sOpText,sDschOrd,sExamRslt1,sExamRslt2,sOpdFu,
                             sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp,
                             sOpconf,sCompl,sDschAdu,sDiag1,sSignData,sSerialNo,sSubjectDN,
                             sDeathRsn,sTrnsPer,sTrnsRsn,sTrnsWtp,sTrnsCure,sTrnsDept,sPassSumm,sChasign,sMainemd,sIninfect,
                             sOpdyn1,sOpdyn2,sOpdyn3,sAfteredu,sAddress,sTelno,sSexage,sParents
                             :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;' +
              'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;' +
              'S_TYPE21;S_TYPE22;S_TYPE23;S_TYPE24;S_TYPE25;S_TYPE26;S_TYPE27;S_TYPE28;'+
              'S_TYPE29;S_TYPE30;S_TYPE31;S_TYPE32;S_TYPE33;S_TYPE34;S_TYPE35;S_TYPE36;S_TYPE37;S_TYPE38;' +
              'S_TYPE39;S_TYPE40;S_TYPE41;S_TYPE42;S_TYPE43;S_TYPE44;S_TYPE45;S_TYPE46'
              );
   SetFldValue(0,[sType1,sPatNo,sAdmDate,sMedDept,sChaDr,sGenDr,sDschDate,sWardNo,sRoomNo,sCcomplnt,
                  sDiag,sOpText,sDschOrd,sExamRslt1,sOpdFu,sTrtRslt,sAdmRslt,sDschType,sEditId,sEditIp,
                  sOpconf,sCompl,sDschAdu,sExamRslt2,sDiag1,sSignData,sSerialNo,sSubjectDN,
                  sDeathRsn,sTrnsPer,sTrnsRsn,sTrnsWtp,sTrnsCure,sTrnsDept,sPassSumm,sChasign,sMainemd,sIninfect,
                  sOpdyn1,sOpdyn2,sOpdyn3,sAfteredu,sAddress,sTelno,sSexage,sParents
                  ]);
   if (txPutF('MD_DCHSU_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;



////////////////////////////////////////////////////////////////////////////////
//  HmdRschmt	관심환자기본                                                   //
////////////////////////////////////////////////////////////////////////////////

// 관심환자기본조회(진료의별 관심분류조회)
function HmdRschmt.ListRschmt(MedDr:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0, [MedDr]);

   //Tuxedo Service Call
   if (txGetF('MD_RSCHM_L1')) then begin
      GetFldVar('S_STRING1', sSetSeqno);
      GetFldVar('S_STRING2', sSetNm);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 관심환자기본 Insert 
function HmdRschmt.InsertRschmt(MedDr,SetNm,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_EDITID;S_EDITIP');
   SetFldValue(0, [MedDr,SetNm,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_RSCHM_I1')) then 
   begin
      Result := 1;
      txFree;
   end;
end;


// 관심환자기본 Delete
function HmdRschmt.DeleteRschmt(MedDr,SetSeqno:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[MedDr,SetSeqno] );

   //Tuxedo Service Call
   if (txPutF('MD_RSCHM_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdRschdt	관심환자상세                                                //
////////////////////////////////////////////////////////////////////////////////

// 관심환자상세조회(관심분류별 환자조회)
function HmdRschdt.ListRschdt(MedDr,SetSeqno:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [MedDr,SetSeqno]);

   //Tuxedo Service Call
   if (txGetF('MD_RSCHD_L1')) then begin
      GetFldVar('S_PATNO',    sPatNo   );
      GetFldVar('S_EDITDATE', sEditDate);
      GetFldVar('S_PATNAME',  sPatName );
      GetFldVar('S_STRING1',  sSex     );
      GetFldVar('S_STRING2',  sBirtDate);
      GetFldVar('S_STRING3',  sPatSect );
      GetFldVar('S_STRING4',  sRemark  );
      GetFldVar('S_STRING5',  sSetSeqno);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 관심환자상세조회(관심분류별 환자조회)
function HmdRschdt.SelectRschdt(MedDr,SetSeqno,PatNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [MedDr,SetSeqno,PatNo]);

   //Tuxedo Service Call
   if (txGetF('MD_RSCHD_S1')) then begin
      GetFldVar('S_PATNO',    sPatNo   );
      GetFldVar('S_EDITDATE', sEditDate);
      GetFldVar('S_PATNAME',  sPatName );
      GetFldVar('S_STRING1',  sSex     );
      GetFldVar('S_STRING2',  sBirtDate);
      GetFldVar('S_STRING3',  sPatSect );
      GetFldVar('S_STRING4',  sRemark  );
      GetFldVar('S_STRING5',  sSetSeqno);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 관심환자상세 Insert
function HmdRschdt.InsertRschdt(MedDr,SetSeqno,PatNo,PatSect,Remark,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_PATNO;S_TYPE3;S_TYPE4;S_EDITID;S_EDITIP');
   SetFldValue(0, [MedDr,SetSeqno,PatNo,PatSect,Remark,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_RSCHD_I1')) then  begin
      Result := 1;
      txFree;
   end;
end;


// 관심환자상세 Delete
function HmdRschdt.DeleteRschdt(MedDr,SetSeqno,PatNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_PATNO');
   SetFldValue(0,[MedDr,SetSeqno,PatNo] );

   //Tuxedo Service Call
   if (txPutF('MD_RSCHD_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdOpreqt 	수술의뢰내역                                                  //
////////////////////////////////////////////////////////////////////////////////

// 수술이력 조회
function HmdOpreqt.ListOpEq(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String;icnt:Integer):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;L_CNT1');
   SetFldValue(0, [sType1,sType2,sType3,sType4,sType5,sType6,sType7,icnt]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREQ_L1')) then
   begin
      GetFldVar('S_STRING1',  sOpdate);
      GetFldVar('S_STRING2',  sDeptNm);
      GetFldVar('S_STRING3',  sOpdrNm);
      GetFldVar('S_STRING4',  sOpname);
      GetFldVar('S_STRING5',  sCofm);
      GetFldVar('S_STRING6',  sEryn);
      GetFldVar('S_STRING7',  sReopyn);
      GetFldVar('S_STRING8',  sOpstm);
      GetFldVar('S_STRING9',  sEstimttm);
      GetFldVar('S_STRING10', sDiagcd);
      GetFldVar('S_STRING11', sDiagname);
      GetFldVar('S_STRING12', sCombinyn);
      GetFldVar('S_STRING13', sOproom);
      GetFldVar('S_STRING14', sOpcode);
      GetFldVar('S_STRING15', sOpcode2);
      GetFldVar('S_STRING16', sOpcode3);
      GetFldVar('S_STRING17', sOpdr);
      GetFldVar('S_STRING18', sOpdr2);
      GetFldVar('S_STRING19', sOpdr3);
      GetFldVar('S_STRING20', sCon1dr);
      GetFldVar('S_STRING21', sCon1dr2);
      GetFldVar('S_STRING22', sCon1dr3);
      GetFldVar('S_STRING23', sCon2dr);
      GetFldVar('S_STRING24', sCon2dr2);
      GetFldVar('S_STRING25', sCon2dr3);
      GetFldVar('S_STRING26', sAnspcyn);
      GetFldVar('S_STRING27', sAnethcd);
      GetFldVar('S_STRING28', sAnethdr);
      GetFldVar('S_STRING29', sCarmyn);
      GetFldVar('S_STRING30', sGarmyn);
      GetFldVar('S_STRING31', sEndoyn);
      GetFldVar('S_STRING32', sSonoyn);
      GetFldVar('S_STRING33', sLaseryn);
      GetFldVar('S_STRING34', sOpphys);
      GetFldVar('S_STRING35', sRemark);
      GetFldVar('S_STRING36', sCondept1);
      GetFldVar('S_STRING37', sCondept2);
      GetFldVar('S_STRING38', sConopcd1);
      GetFldVar('S_STRING39', sConopcd2);
      GetFldVar('S_STRING40', sCofmyn);
      GetFldVar('S_STRING41', sPatNo);
      GetFldVar('S_STRING42', sPatNm);
      GetFldVar('S_STRING43', sMedDept);
      GetFldVar('S_STRING44', sWardno);
      GetFldVar('S_STRING45', sAge);
      GetFldVar('S_STRING46', sComcdnm3);
      GetFldVar('S_STRING47', sCaution);
      GetFldVar('S_STRING48', sOpStat);
      GetFldVar('S_STRING49', sPatsect);
      GetFldVar('S_STRING50', sRoomno);
      GetFldVar('S_TYPE1'   , sAnethdrNm);
      GetFldVar('S_TYPE2'   , sOpcd2name);
      GetFldVar('S_TYPE3'   , sOpcd3name);
      GetFldVar('S_TYPE4'   , sOpcn1cdnm);
      GetFldVar('S_TYPE5'   , sOpcn2cdnm);
      GetFldVar('S_TYPE6'   , sSex);
      GetFldVar('S_TYPE7'   , sBirtDate);
      GetFldVar('S_TYPE8'   , sRsvYn);
      GetFldVar('S_TYPE9'   , sDscYn);
      GetFldVar('S_TYPE10'  , sOpdr1);
      GetFldVar('S_TYPE11'  , sOpdrNm1);
      GetFldVar('S_TYPE12'  , sCanclRsn);  // 수술 보류사항 추가 2006.07.14 김송주
      GetFldVar('S_TYPE13'  , sOprprecyn); // 수술간호기록지작성여부, KimDaeYong 2015-08-06
      GetFldVar('S_TYPE14'  , sCombdept);  // 협진수술과구분. KimDaeYong 2017-07-26
      GetFldVar('S_TYPE15'  , sOpseqno2);  // 수술순번2. KimDaeYong 2017-07-26
      GetFldVar('S_TYPE16'  , sOpgubun);   // 대/소수술구분. KimDaeYong 2018-07-03
      GetFldVar('S_TYPE17'  , sAcptdept);

      GetFldVar('L_LONG1'  ,  iOpseqno);
      
      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


function HmdOpreqt.UpdateConfirm(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,sType10,sType11,sType12:String;iOpSeqno:integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;L_LONG1');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8,sType9,sType10,sType11,sType12,iOpSeqno]);
   if (txPutF('MD_OPREQ_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//환자 수술의뢰 등록
function HmdOpreqt.InputOpRequest(sType1,sPatNo,sOpDate,PatSect,sMedDept,sErYn,sReOpYn,sOpSTm,sEstimtTm,sDiagCd,sDiagName,
                                  sCombinYn,sOpRoom,sOpName,sOpCode,sOpCode2,sOpCode3,sOpDr,sOpDr2,sOpDr3,sCon1Dr,
                                  sCon1Dr2,sCon1Dr3,sCon2Dr,sCon2Dr2,sCon2Dr3,sAnspcYn,sAnethCd,sAnethDr,sCarmYn,
                                  sGarmYn,sEndoYn,sSonoYn,sLaserYn,sOpPhys,sRemark,sConDept1,sConDept2,sConopCd1,
                                  sConopCd2,sWardNo,sRoomNo,sPatType,sEditId,sEditIp,sRsvYn,
                                  sOpcd2name,sOpcd3name,sOpcn1cdnm,sOpcn2cdnm,sDscYn,sOpDr1,sOpgubun,sAcptDept :String;
                                  iOpseqNo:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;' +
              'S_STRING51;S_STRING52;S_STRING53;' +
              'L_LONG1');
   SetFldValue(0,[sType1,sPatNo,sOpDate,PatSect,sMedDept,sErYn,sReOpYn,sOpSTm,sEstimtTm,sDiagCd,sDiagName,sCombinYn,sOpRoom,
                  sOpName,sOpCode,sOpCode2,sOpCode3,sOpDr,sOpDr2,sOpDr3,sCon1Dr,sCon1Dr2,sCon1Dr3,sCon2Dr,sCon2Dr2,
                  sCon2Dr3,sAnspcYn,sAnethCd,sAnethDr,sCarmYn,sGarmYn,sEndoYn,sSonoYn,sLaserYn,sOpPhys,sRemark,
                  sConDept1,sConDept2,sConopCd1,sConopCd2,sWardNo,sRoomNo,sPatType,sEditId,sEditIp,sRsvYn,
                  sOpcd2name,sOpcd3name,sOpcn1cdnm,sOpcn2cdnm,sDscYn,sOpDr1,sOpgubun,sAcptDept,
                  iOpseqNo]);
   if (txPutF('MD_OPREQ_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


//환자 수술의뢰 삭제
function HmdOpreqt.DeleteOpRequest(sPatNo,sOpDate:String;iOpseqNo:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;L_LONG1');
   SetFldValue(0,[sPatNo,sOpDate,iOpseqNo]);
   if (txPutF('MD_OPREQ_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 기간별수술이력 조회
function HmdOpreqt.OpList(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0, [sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREQ_L2')) then
   begin
      GetFldVar('S_STRING1',  sOpdate);
      GetFldVar('S_STRING2',  sLaseryn);
      GetFldVar('S_STRING3',  sOpname);
      GetFldVar('S_STRING4',  sOpCode);
      GetFldVar('S_STRING5',  sOpseqno2);
      
      GetFldVar('L_LONG1'  ,  iOpseqno);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// Multi Confirm
function HmdOpreqt.MultiConfirm(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP;L_SEQNO1');

   for i := 0 to cnt-1 do
     SetFldValue(i,[String(sPatNo[i]),String(sOpDate[i]),String(sAnethCd[i]),String(sAnethDr[i]),
                    String(sEditId[i]),String(sEditIp[i]),Integer(iOpSeqNo[i])]);

   //Tuxedo Service Call
   if (txPutF('MD_OPREQ_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 수술 예방적 항생제 평가 대상 환자 체크 2009.07.30 김송주
function HmdOpreqt.CheckAntiInfectOp(sType1,sType2,sType3:String):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREQ_L3')) then
   begin
      GetFldVar('S_STRING1',  sPatno);
      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수술 예방적 항생제 평가 대상 환자 체크(처방내림시) 2009.07.31 김송주
function HmdOpreqt.CheckAntiInfectOp2(sType1,sType2,sType3:String):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREQ_L4')) then //md_opreq_l4.pc
   begin
      GetFldVar('S_STRING1',  sSugacode);
      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


//2015인증평가, 기간별수술이력 조회, KimdaeYong 2015-04-27
function HmdOpreqt.TrList(inFlag,inPatno,inFromdate,inTodate:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0, [inFlag,inPatno,inFromdate,inTodate]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREQ_L5')) then
   begin
      GetFldVar('S_STRING1',  sExecdate);
      GetFldVar('S_STRING2',  sOrddesc1);
      GetFldVar('S_STRING3',  sOrdcd);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수술의뢰시 임시처방 저장.20160426.kya.
function HmdOpreqt.OPORD_I1(sType1,sType2,sType3,sEditid,sEditip:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5' );
   SetFldValue(0,[sType1,sType2,sType3,sEditid,sEditip]);

   if (txPutF('CAMD_OPORD_I1')) then begin // camd_opord_i1.pc
      Result := 1;
      txFree;
   end;
end;

// 수술실 확정처방 저장.20160504.kya.
function HmdOpreqt.OPORD_I2(sType1,sType2,sType3,sType4,sType5,sEditid,sEditip:String;iOrdSeqno: integer):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('L_CNT1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_TYPE1;S_TYPE2' );
   SetFldValue(0,[iOrdSeqno,sType1,sType2,sType3,sType4,sType5,sEditid,sEditip]);

   if (txPutF('CAMD_OPORD_I2')) then begin // camd_opord_i2.pc
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdOprptt 	수술/마취간호기록                                             //
////////////////////////////////////////////////////////////////////////////////

//환자 수술이력 조회(Type1 ==> '1'=환자번호, '2'=환자번호+수술일)
function HmdOprptt.ListPatOp(Type1,PatNo,OpDate,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4'); //구분;환자번호;수술일자;사업장;
   SetFldValue32(0,[Type1,PatNo,OpDate,Locate] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPRPT_L1')) then
   begin
      GetFldVar32('S_PATNO',     sPatno   );  // 환자번호
      GetFldVar32('S_STRING1',   sOpdate  );  // 수술(예정)일자
      GetFldVar32('S_STRING2',   sOptm    );  // 수술시간순번
      GetFldVar32('S_STRING3',   sOproom  );  // 수술실
      GetFldVar32('S_STRING4',   sPatsect );  // 환자구분
      GetFldVar32('S_STRING5',   sEryn    );  // 응급여부
      GetFldVar32('S_STRING6',   sMeddept );  // 진료과/진료부서
      GetFldVar32('S_STRING7',   sWardno  );  // 병동번호
      GetFldVar32('S_STRING8',   sRoomno  );  // 병실번호
      GetFldVar32('S_STRING9',   sRecid   );  // 기록자
      GetFldVar32('S_STRING10',  sOpdr    );  // 집도의
      GetFldVar32('S_STRING11',  sOpdr2   );  // 수석의-ASSISTANT
      GetFldVar32('S_STRING12',  sOpdr3   );  // 수석의-ASSISTANT2
      GetFldVar32('S_STRING13',  sAnethdr1);  // 마취의사1
      GetFldVar32('S_STRING14',  sAnethdr2);  // 마취의사2
      GetFldVar32('S_STRING15',  sAnethdr3);  // 마취의사3
      GetFldVar32('S_STRING16',  sPreicdnm);  // 수술전 진단명
      GetFldVar32('S_STRING17',  sPreicdcd);  // 수술전상병 코드
      GetFldVar32('S_STRING18',  sPsticdnm);  // 수술후 진단명
      GetFldVar32('S_STRING19',  sPsticdcd);  // 수술후 진단코드
      GetFldVar32('S_STRING20',  sOpcode  );  // 수술코드
      GetFldVar32('S_STRING21',  sOpname  );  // 수술명
      GetFldVar32('S_STRING22',  sAnethcd1);  // 주마취종류1
      GetFldVar32('S_STRING23',  sAnethcd2);  // 주마취종류2
      GetFldVar32('S_STRING24',  sAnetdrg1);  // 마취약제1
      GetFldVar32('S_STRING25',  sAnetdrg2);  // 마취약제2
      GetFldVar32('S_STRING26',  sOutplace);  // 퇴실장소
      GetFldVar32('S_STRING27',  sWdouttm );  // 병실출발시간
      GetFldVar32('S_STRING28',  sOparvtm );  // 수술장도착시간
      GetFldVar32('S_STRING29',  sAnthstm );  // 마취시작시간
      GetFldVar32('S_STRING30',  sAnthetm );  // 마취종료시간
      GetFldVar32('S_STRING31',  sAnthstm2);  // 마취시작시간2차
      GetFldVar32('S_STRING32',  sAnthetm2);  // 마취종료시간2차
      GetFldVar32('S_STRING33',  sPcatype );  // 통증관리종류
      GetFldVar32('S_STRING34',  sOpstm   );  // 수술시작시간
      GetFldVar32('S_STRING35',  sOpetm   );  // 수술종료시간
      GetFldVar32('S_STRING36',  sOpouttm );  // 수술실나간시간
      GetFldVar32('S_STRING37',  sRrouttm );  // 회복실나간시간
//      GetFldVar('S_STRING38',  sGauzecnt);  // GAUZE COUNT (삭제)
      GetFldVar32('S_STRING39',  sReopyn  );  // 재수술여부
      GetFldVar32('S_STRING40',  sRemark  );  // 특기사항
      GetFldVar32('S_STRING41',  sAnenrrmk);  // 회복실특기사항
      GetFldVar32('S_STRING42',  sAnecdnm1);  // 마취종류1 Name
      GetFldVar32('S_STRING43',  sDeptnm  );  // 진료과 Name
      GetFldVar32('S_STRING44',  sOpDrNm  );  // 집도의 Name
      GetFldVar32('S_STRING45',  sOpDrNm2 );  // 수석의2 Name
      GetFldVar32('S_STRING46',  sOpDrNm3 );  // 수석의3 Name
      GetFldVar32('S_STRING47',  sAneDrNm1);  // 마취의사1 Name
      GetFldVar32('S_STRING48',  sAneDrNm2);  // 마취의사2 Name
      GetFldVar32('S_STRING49',  sAneDrNm3);  // 마취의사3 Name
      GetFldVar32('S_STRING114', sOpDr1   );  // 집도의1
      GetFldVar32('S_STRING115', sOpDrNm1 );  // 집도의1 Name
      GetFldVar32('L_SEQNO1',    iOpSeqNo );  // 수술순번

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

function HmdOprptt.ListPatOp1(Type1,PatNo,OpDate,Locate:String;OpSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;L_CNT1'); //구분;환자번호;수술일자;사업장;수술순번
   SetFldValue32(0,[Type1,PatNo,OpDate,Locate,OpSeqNo] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPRPT_L1')) then
   begin
      GetFldVar32('S_PATNO',     sPatno   );  // 환자번호
      GetFldVar32('S_STRING1',   sOpdate  );  // 수술(예정)일자
      GetFldVar32('S_STRING2',   sOptm    );  // 수술시간순번
      GetFldVar32('S_STRING3',   sOproom  );  // 수술실
      GetFldVar32('S_STRING4',   sPatsect );  // 환자구분
      GetFldVar32('S_STRING5',   sEryn    );  // 응급여부
      GetFldVar32('S_STRING6',   sMeddept );  // 진료과/진료부서
      GetFldVar32('S_STRING7',   sWardno  );  // 병동번호
      GetFldVar32('S_STRING8',   sRoomno  );  // 병실번호
      GetFldVar32('S_STRING9',   sRecid   );  // 기록자
      GetFldVar32('S_STRING10',  sOpdr    );  // 집도의
      GetFldVar32('S_STRING11',  sOpdr2   );  // 수석의-ASSISTANT
      GetFldVar32('S_STRING12',  sOpdr3   );  // 수석의-ASSISTANT2
      GetFldVar32('S_STRING13',  sAnethdr1);  // 마취의사1
      GetFldVar32('S_STRING14',  sAnethdr2);  // 마취의사2
      GetFldVar32('S_STRING15',  sAnethdr3);  // 마취의사3
      GetFldVar32('S_STRING16',  sPreicdnm);  // 수술전 진단명
      GetFldVar32('S_STRING17',  sPreicdcd);  // 수술전상병 코드
      GetFldVar32('S_STRING18',  sPsticdnm);  // 수술후 진단명
      GetFldVar32('S_STRING19',  sPsticdcd);  // 수술후 진단코드
      GetFldVar32('S_STRING20',  sOpcode  );  // 수술코드
      GetFldVar32('S_STRING21',  sOpname  );  // 수술명
      GetFldVar32('S_STRING22',  sAnethcd1);  // 주마취종류1
      GetFldVar32('S_STRING23',  sAnethcd2);  // 주마취종류2
      GetFldVar32('S_STRING24',  sAnetdrg1);  // 마취약제1
      GetFldVar32('S_STRING25',  sAnetdrg2);  // 마취약제2
      GetFldVar32('S_STRING26',  sOutplace);  // 퇴실장소
      GetFldVar32('S_STRING27',  sWdouttm );  // 병실출발시간
      GetFldVar32('S_STRING28',  sOparvtm );  // 수술장도착시간
      GetFldVar32('S_STRING29',  sAnthstm );  // 마취시작시간
      GetFldVar32('S_STRING30',  sAnthetm );  // 마취종료시간
      GetFldVar32('S_STRING31',  sAnthstm2);  // 마취시작시간2차
      GetFldVar32('S_STRING32',  sAnthetm2);  // 마취종료시간2차
      GetFldVar32('S_STRING33',  sPcatype );  // 통증관리종류
      GetFldVar32('S_STRING34',  sOpstm   );  // 수술시작시간
      GetFldVar32('S_STRING35',  sOpetm   );  // 수술종료시간
      GetFldVar32('S_STRING36',  sOpouttm );  // 수술실나간시간
      GetFldVar32('S_STRING37',  sRrouttm );  // 회복실나간시간
      GetFldVar32('S_STRING39',  sReopyn  );  // 재수술여부
      GetFldVar32('S_STRING40',  sRemark  );  // 특기사항
      GetFldVar32('S_STRING41',  sAnenrrmk);  // 회복실특기사항
      GetFldVar32('S_STRING42',  sAnecdnm1);  // 마취종류1 Name
      GetFldVar32('S_STRING43',  sDeptnm  );  // 진료과 Name
      GetFldVar32('S_STRING44',  sOpDrNm  );  // 집도의 Name
      GetFldVar32('S_STRING45',  sOpDrNm2 );  // 수석의2 Name
      GetFldVar32('S_STRING46',  sOpDrNm3 );  // 수석의3 Name
      GetFldVar32('S_STRING47',  sAneDrNm1);  // 마취의사1 Name
      GetFldVar32('S_STRING48',  sAneDrNm2);  // 마취의사2 Name
      GetFldVar32('S_STRING49',  sAneDrNm3);  // 마취의사3 Name
      GetFldVar32('S_NAME1',     sSternur1);  // 소독간호사1
      GetFldVar32('S_NAME2',     sSternur2);  // 소독간호사2
      GetFldVar32('S_NAME3',     sSternur3);  // 소독간호사3
      GetFldVar32('S_NAME4',     sSternur4);  // 소독간호사4
      GetFldVar32('S_NAME5',     sSternur5);  // 소독간호사5
      GetFldVar32('S_NAME6',     sRoudnur1);  // 순회간호사1
      GetFldVar32('S_NAME7',     sRoudnur2);  // 순회간호사2
      GetFldVar32('S_NAME8',     sRoudnur3);  // 순회간호사3
      GetFldVar32('S_NAME9',     sRoudnur4);  // 순회간호사4
      GetFldVar32('S_NAME10',    sRoudnur5);  // 순회간호사5
      GetFldVar32('S_NAME11',    sAnethnr1);  // 마취간호사1
      GetFldVar32('S_NAME12',    sAnethnr2);  // 마취간호사2
      GetFldVar32('S_NAME13',    sAnethnr3);  // 마취간호사3
      GetFldVar32('S_NAME14',    sAnethnr4);  // 마취간호사4
      GetFldVar32('S_NAME15',    sAnethnr5);  // 마취간호사5
      GetFldVar32('S_NAME16',    sPreopcd );  // 예정수술코드
      GetFldVar32('S_NAME17',    sPreopnm );  // 예정수술명
      GetFldVar32('S_NAME18',    sStarvtm );  // 대기실도착시간
      GetFldVar32('S_NAME19',    sRrintm  );  // 회복실 도착시간
      GetFldVar32('S_NAME20',    sRruseyn );  // 회복실사용유무
      GetFldVar32('S_NAME21',    sPatnm  );   // 성명
      GetFldVar32('S_NAME22',    sAge );      // 성별,이름
      GetFldVar32('S_NAME23',    sPatTypeNm); // 환자유형명
      GetFldVar32('S_NAME24',    sOpphys1);   // 수술체위1
      GetFldVar32('S_NAME25',    sOpphys2);   // 수술체위2
      GetFldVar32('S_NAME26',    sOpphys3);   // 수술체위3
      GetFldVar32('S_NAME27',    sOpphys4);   // 수술체위4
      GetFldVar32('S_NAME28',    sOpphys5);   // 수술체위5
      GetFldVar32('S_NAME29',    sOpphys6);   // 수술체위6
      GetFldVar32('S_NAME30',    sOpphys7);   // 수술체위7
      GetFldVar32('S_CODE1' ,    sOpphysnm);  // 기타 수술체위명
      GetFldVar32('S_CODE2' ,    sSkinpre1);  // 피부소독1
      GetFldVar32('S_CODE3' ,    sSkinpre2);  // 피부소독2
      GetFldVar32('S_CODE4' ,    sSkinpre3);  // 피부소독3
      GetFldVar32('S_CODE5' ,    sSkinpre4);  // 피부소독4
      GetFldVar32('S_CODE6' ,    sSkinprem);  // 기타 피부소독명
      GetFldVar32('S_CODE7' ,    sEsuyn);     // ESU 유무
      GetFldVar32('S_CODE8' ,    sEsunm);     // ESU 접지명
      GetFldVar32('S_CODE9' ,    sLocaldrg);  // 국소마취제
      GetFldVar32('S_CODE10',    sLocdrgnm);  // 기타 국소마취제명
      GetFldVar32('S_CODE11',    sCntyn);     // 계수확인
      GetFldVar32('S_CODE12',    sXraygz11);  // 1차확인자1
      GetFldVar32('S_CODE13',    sXraygz12);  // 1차확인자2
      GetFldVar32('S_CODE14',    sXraygz21);  // 2차확인자1
      GetFldVar32('S_CODE15',    sXraygz22);  // 2차확인자2
      GetFldVar32('S_CODE16',    sXraygz31);  // 3차확인자1
      GetFldVar32('S_CODE17',    sXraygz32);  // 3차확인자2
      GetFldVar32('S_CODE18',    sXrgzqty1);  // XRAY거즈수량1
      GetFldVar32('S_CODE19',    sXrgzqty2);  // XRAY거즈수량2
      GetFldVar32('S_CODE20',    sXrgzqty3);  // XRAY거즈수량3
      GetFldVar32('S_CODE21',    sXraygzyn);  // XRAY해당사항
      GetFldVar32('S_CODE22',    sXrayspec);  // XRAY비고
      GetFldVar32('S_CODE23',    sRinggz11);  // 1차확인자1
      GetFldVar32('S_CODE24',    sRinggz12);  // 1차확인자2
      GetFldVar32('S_CODE25',    sRinggz21);  // 2차확인자1
      GetFldVar32('S_CODE26',    sRinggz22);  // 2차확인자2
      GetFldVar32('S_CODE27',    sRinggz31);  // 3차확인자1
      GetFldVar32('S_CODE28',    sRinggz32);  // 3차확인자2
      GetFldVar32('S_CODE29',    sRigzqty1);  // RING거즈수량1
      GetFldVar32('S_CODE30',    sRigzqty2);  // RING거즈수량2
      GetFldVar32('S_TEXT1' ,    sRigzqty3);  // RING거즈수량3
      GetFldVar32('S_TEXT2' ,    sRinggzyn);  // RING해당사항
      GetFldVar32('S_TEXT3' ,    sRingspec);  // RING비고
      GetFldVar32('S_TEXT4' ,    sNedlcon1);  // 봉합침 1차확인
      GetFldVar32('S_TEXT5' ,    sNedlcon2);  // 봉합침 2차확인
      GetFldVar32('S_TEXT6' ,    sNedlcon3);  // 봉합침 3차확인
      GetFldVar32('S_TEXT7' ,    sNedlspec);  // 봉합침 비고
      GetFldVar32('S_TEXT8' ,    sInstcon1);  // 기구 1차확인
      GetFldVar32('S_TEXT9' ,    sInstcon2);  // 기구 2차확인
      GetFldVar32('S_TEXT10',    sInstcon3);  // 기구 3차확인
      GetFldVar32('S_IDNUM1',    sInstspec);  // 기구 비고
      GetFldVar32('S_IDNUM2',    sEtcconnm);  // 기타확인항목
      GetFldVar32('S_IDNUM3',    sEtccon1);   // 기타 1차확인
      GetFldVar32('S_IDNUM4',    sEtccon2);   // 기타 2차확인
      GetFldVar32('S_IDNUM5',    sEtccon3);   // 기타 3차확인
      GetFldVar32('S_IDNUM6',    sEtcspec);   // 기타 비고
      GetFldVar32('S_IDNUM7',    sSpcyn);     // 검체 확인
      GetFldVar32('S_IDNUM8',    sSpcpart1);  // 동결 부위
      GetFldVar32('S_IDNUM9',    sSpcpart2);  // 생검 부위
      GetFldVar32('S_IDNUM10',   sSpcpart3);  // 배양 부위
      GetFldVar32('S_NUMVAL1',   sSpcpart4);  // 세포병리 부위
      GetFldVar32('S_NUMVAL2',   sSpcpart5);  // 기타 부위
      GetFldVar32('S_NUMVAL3',   sSpcqty1);   // 동결 수량
      GetFldVar32('S_NUMVAL4',   sSpcqty2);   // 생검 수량
      GetFldVar32('S_NUMVAL5',   sSpcqty3);   // 배양 수량
      GetFldVar32('S_NUMVAL6',   sSpcqty4);   // 세포병리 수량
      GetFldVar32('S_NUMVAL7',   sSpcqty5);   // 기타 수량
      GetFldVar32('S_NUMVAL8',   sSpcuser1);  // 동결 취급자
      GetFldVar32('S_NUMVAL9',   sSpcuser2);  // 생검 취급자
      GetFldVar32('S_NUMVAL10',  sSpcuser3);  // 배양 취급자
      GetFldVar32('S_NUMVAL11',  sSpcuser4);  // 세포병리 취급자
      GetFldVar32('S_NUMVAL12',  sSpcuser5);  // 기타 취급자
      GetFldVar32('S_NUMVAL13',  sOpinstyn);  // 수술장비유무
      GetFldVar32('S_NUMVAL14',  sOpinst1);   // 수술장비1
      GetFldVar32('S_NUMVAL15',  sOpinst2);   // 수술장비2
      GetFldVar32('S_NUMVAL16',  sOpinst3);   // 수술장비3
      GetFldVar32('S_NUMVAL17',  sOpinst4);   // 수술장비4
      GetFldVar32('S_NUMVAL18',  sOpinst5);   // 수술장비5
      GetFldVar32('S_NUMVAL19',  sCautinf1);  // Caution정보1
      GetFldVar32('S_NUMVAL20',  sCautinf2);  // Caution정보2
      GetFldVar32('S_NUMVAL21',  sCautinf3);  // Caution정보3
      GetFldVar32('S_NUMVAL22',  sCautinf4);  // Caution정보4
      GetFldVar32('S_NUMVAL23',  sCautinf5);  // Caution정보5
      GetFldVar32('S_NUMVAL24',  sCautinf6);  // Caution정보6
      GetFldVar32('S_NUMVAL25',  sCautinf7);  // Caution정보7
      GetFldVar32('S_NUMVAL26',  sCautinf8);  // Caution정보8
      GetFldVar32('S_NUMVAL27',  sCautinf9);  // Caution정보9
      GetFldVar32('S_NUMVAL28',  sCautetc);   // 기타 Caution정보
      GetFldVar32('S_NUMVAL29',  sCombmed1);  // Combine 진료과1
      GetFldVar32('S_NUMVAL30',  sCombmed2);  // Combine 진료과2
      GetFldVar32('S_NO1',       sCombdr1);   // Combine 집도의1
      GetFldVar32('S_NO2',       sCombdr2);   // Combine 집도의2
      GetFldVar32('S_NO3',       sCombas11);  // Combine 1조수1
      GetFldVar32('S_NO4',       sCombas12);  // Combine 1조수2
      GetFldVar32('S_NO5',       sCombas21);  // Combine 2조수1
      GetFldVar32('S_NO6',       sCombas22);  // Combine 2조수2
      GetFldVar32('S_NO7',       sComopcd1);  // Combine 수술코드1
      GetFldVar32('S_NO8',       sComopcd2);  // Combine 수술코드2
      GetFldVar32('S_NO9',       sComopnm1);  // Combine 수술명1
      GetFldVar32('S_NO10',      sComopnm2);  // Combine 수술명2
      GetFldVar32('S_DESC1',     sSterNm);    // 소독 Nurse명
      GetFldVar32('S_DESC2',     sRoundNm);   // 순회 Nurse명
      GetFldVar32('S_DESC3',     sAnetNm);    // 마취 Nurse명
      GetFldVar32('S_DESC4',     sOpCode2);   // 수술코드2
      GetFldVar32('S_DESC5',     sOpname2);   // 수술명2
      GetFldVar32('S_DESC6',     sOpCode3);   // 수술코드3
      GetFldVar32('S_DESC7',     sOpname3);   // 수술명3
      GetFldVar32('S_DESC8',     sOpCode4);   // 수술코드4
      GetFldVar32('S_DESC9',     sOpname4);   // 수술명4
      GetFldVar32('S_CONTENTS1',  sPIcdNm2);  // 진단명2
      GetFldVar32('S_CONTENTS2',	sPIcdCd2);  // 진단코드2
      GetFldVar32('S_CONTENTS3',	sPIcdNm3);  // 진단명3
      GetFldVar32('S_CONTENTS4',	sPIcdCd3);  // 진단코드3
      GetFldVar32('S_CONTENTS5',	sPIcdNm4);  // 진단명4
      GetFldVar32('S_CONTENTS6',	sPIcdCd4);  // 진단코드4
      GetFldVar32('S_CONTENTS7',	sRemark1);  // 비고사항
      GetFldVar32('S_CONTENTS8',	sSex);
      GetFldVar32('S_CONTENTS9',	sBirtdate);
      //(추가. 2003.2.26 이용언) 이후 추가 사항들
      GetFldVar32('S_STRING50',  sSkinpre5);
      GetFldVar32('S_STRING51',  sSkinpre6);
      GetFldVar32('S_STRING52',  sPad     );

      GetFldVar32('S_STRING53',  sImplantYn);
      GetFldVar32('S_STRING54',  sImplantKind1);
      GetFldVar32('S_STRING55',  sImplantKind2);
      GetFldVar32('S_STRING56',  sImplantKind3);
      GetFldVar32('S_STRING57',  sImplantManu1);
      GetFldVar32('S_STRING58',  sImplantManu2);
      GetFldVar32('S_STRING59',  sImplantManu3);
      GetFldVar32('S_STRING60',  sImplantetc1);
      GetFldVar32('S_STRING61',  sImplantetc2);
      GetFldVar32('S_STRING62',  sImplantetc3);

      GetFldVar32('S_STRING63',  sdrainYn);
      GetFldVar32('S_STRING64',  sdrainKind1);
      GetFldVar32('S_STRING65',  sdrainKind2);
      GetFldVar32('S_STRING66',  sdrainKind3);
      GetFldVar32('S_STRING67',  sdrainsize1);
      GetFldVar32('S_STRING68',  sdrainsize2);
      GetFldVar32('S_STRING69',  sdrainsize3);
      GetFldVar32('S_STRING70',  sdraincnt1);
      GetFldVar32('S_STRING71',  sdraincnt2);
      GetFldVar32('S_STRING72',  sdraincnt3);
      GetFldVar32('S_STRING73',  sdrainsite1);
      GetFldVar32('S_STRING74',  sdrainsite2);
      GetFldVar32('S_STRING75',  sdrainsite3);

      GetFldVar32('S_STRING76',  sTournyn);
      GetFldVar32('S_STRING77',  sArmon1);            
      GetFldVar32('S_STRING78',  sArmon2);      
      GetFldVar32('S_STRING79',  sArmon3);      
      GetFldVar32('S_STRING80',  sArmoff1);     
      GetFldVar32('S_STRING81',  sArmoff2);     
      GetFldVar32('S_STRING82',  sArmoff3);     
      GetFldVar32('S_STRING83',  sArmpressure1);
      GetFldVar32('S_STRING84',  sArmpressure2);
      GetFldVar32('S_STRING85',  sArmpressure3);
      GetFldVar32('S_STRING86',  sLegon1);      
      GetFldVar32('S_STRING87',  sLegon2);      
      GetFldVar32('S_STRING88',  sLegon3);
      GetFldVar32('S_STRING89',  sLegoff1);     
      GetFldVar32('S_STRING90',  sLegoff2);     
      GetFldVar32('S_STRING91',  sLegoff3);     
      GetFldVar32('S_STRING92',  sLegpressure1);
      GetFldVar32('S_STRING93',  sLegpressure2);
      GetFldVar32('S_STRING94',  sLegpressure3);

      GetFldVar32('S_STRING95',  sAddyn);
      GetFldVar32('S_STRING96',  sAdd1);
      GetFldVar32('S_STRING97',  sAdd2);
      GetFldVar32('S_STRING98',  sAdd3);
      GetFldVar32('S_STRING99',  sAddContent1);
      GetFldVar32('S_STRING100',  sAddContent2);
      GetFldVar32('S_STRING101',  sAddContent3);
      GetFldVar32('S_STRING102', sAddCnt1);
      GetFldVar32('S_STRING103', sAddCnt2);
      GetFldVar32('S_STRING104', sAddCnt3);
      GetFldVar32('S_STRING105', sAddSite1);
      GetFldVar32('S_STRING106', sAddSite2);
      GetFldVar32('S_STRING107', sAddSite3);

      GetFldVar32('S_STRING108', v_Meddept1);
      GetFldVar32('S_STRING109', v_Chadrnm );
      GetFldVar32('S_STRING110', v_Wardno  );
      GetFldVar32('S_STRING111', v_Roomno  );
      GetFldVar32('S_STRING112', sConfyn   );
      GetFldVar32('S_STRING113', sDropyn   );
      GetFldVar32('S_STRING114',  sOpdr1   );  // 집도의
      GetFldVar32('S_STRING115',  sOpDrNm1 );  // 집도의 Name
      GetFldVar32('S_STRING116',  sReopres );
      GetFldVar32('S_STRING117',  sReopday );
      GetFldVar32('S_STRING118',  sAsaclass);  // ASA CLASS 김송주 추가 2007.06.28

      // 2007.11.22 김송주 추가
      GetFldVar32('S_STRING120',    sBong11);   // 1차확인자1
      GetFldVar32('S_STRING121',    sBong12);   // 1차확인자2
      GetFldVar32('S_STRING122',    sBong21);   // 2차확인자1
      GetFldVar32('S_STRING123',    sBong22);  // 2차확인자2
      GetFldVar32('S_STRING124',    sBong31);   // 3차확인자1
      GetFldVar32('S_STRING125',    sBong32);   // 3차확인자2
      GetFldVar32('S_STRING126',    sBongqty1); // 봉합침수량1
      GetFldVar32('S_STRING127',    sBongqty2); // 봉합침수량2
      GetFldVar32('S_STRING128',    sBongqty3); // 봉합침수량3
      GetFldVar32('S_STRING129',    sBongyn);   // 봉합침해당사항
      GetFldVar32('S_STRING130',    sBongspec); // 봉합침비고
      GetFldVar32('S_STRING131',    sTool11);   // 1차확인자1
      GetFldVar32('S_STRING132',    sTool12);   // 1차확인자2
      GetFldVar32('S_STRING133',    sTool21);   // 2차확인자1
      GetFldVar32('S_STRING134',    sTool22);   // 2차확인자2
      GetFldVar32('S_STRING135',    sTool31);   // 3차확인자1
      GetFldVar32('S_STRING136',    sTool32);   // 3차확인자2
      GetFldVar32('S_STRING137',    sToolqty1); // 도구수량1
      GetFldVar32('S_STRING138',    sToolqty2); // 도구수량2
      GetFldVar32('S_STRING139',    sToolqty3); // 도구수량3
      GetFldVar32('S_STRING140',    sToolyn);   // 도구해당사항
      GetFldVar32('S_STRING141',    sToolspec); // 도구비고

      GetFldVar32('S_STRING143',    sOpPreyn);
      GetFldVar32('S_STRING144',    sOpPostyn);
      GetFldVar32('S_STRING145',    sOpPreTxt);
      GetFldVar32('S_STRING146',    sOpPostTxt);
      GetFldVar32('S_STRING147',    sOutArea);
      GetFldVar32('S_STRING148',    sUltivause); //ULTIVA사용량, KimDaeYong 2013-11-20
      GetFldVar32('S_STRING149',    sUltivarep); //ULTIVA폐기량, KimDaeYong 2013-11-20
      GetFldVar32('S_STRING150',    sDrgyn    ); //DRG환자여부, KimDaeYong 2015-05-29
      //작성일시, 작성자 추가. kya. 20150805.
      GetFldVar32('S_STRING151',    sEdtdate);
      GetFldVar32('S_STRING152',    sEdtnur);
      GetFldVar32('S_STRING153',    sEdtnurnm);
      //계수확인 4차추가.kya.20180511.
      GetFldVar32('S_CODE31',    sXraygz41);
      GetFldVar32('S_CODE32',    sXraygz42);
      GetFldVar32('S_CODE33',    sXrgzqty4);
      GetFldVar32('S_CODE34',    sRinggz41);
      GetFldVar32('S_CODE35',    sRinggz42);
      GetFldVar32('S_CODE36',    sRigzqty4);
      GetFldVar32('S_CODE37',    sBong41);
      GetFldVar32('S_CODE38',    sBong42);
      GetFldVar32('S_CODE39',    sBongqty4);
      GetFldVar32('S_CODE40',    sTool41);
      GetFldVar32('S_CODE41',    sTool42);
      GetFldVar32('S_CODE42',    sToolqty4);
      //마약류사용량/폐기량.20180517.kya.
      GetFldVar32('S_CODE43',    sDruguse);
      GetFldVar32('S_CODE44',    sDrugrep);
      //마취적정성 평가.20180907.kya.
      GetFldVar32('S_STRING154',    sAnetype);
      GetFldVar32('S_STRING155',    sAneplace);
      GetFldVar32('S_STRING156',    sTemper);
      GetFldVar32('S_STRING157',    sLowtemper);
      GetFldVar32('S_STRING158',    sTemmethod);
      GetFldVar32('S_STRING159',    sTemperetc);
      GetFldVar32('S_STRING160',    sVentyn);
      GetFldVar32('S_STRING161',    sVentpart);
      GetFldVar32('S_STRING162',    sVentetc);
      GetFldVar32('S_STRING163',    sSonoyn);
      GetFldVar32('S_STRING164',    sSonotype);
      GetFldVar32('S_STRING165',    sNerrootyn);
      GetFldVar32('S_STRING166',    sTofyn);
      GetFldVar32('S_STRING167',    sAntegoyn);


      GetFldVar32('L_SEQNO1',    iOpSeqNo );  // 수술순번

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

//입퇴원 확인서 수술명 조회
function HmdOprptt.ListPatOp2(PatNo,OpDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[PatNo,OpDate] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPRPT_L5')) then
   begin
      GetFldVar32('S_STRING1',  sOpdate  );  // 수술(예정)일자
      GetFldVar32('S_STRING2',  sOpcode  );  // 수술코드
      GetFldVar32('S_STRING3',  sOpname  );  // 수술명

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

//환자 수술이력 등록
//(수정. 2003.2.26 이용언)
{function HmdOprptt.InputOpRecord(sType1,sPatno,sOpdate,sOproom,sEryn,sRecid,sOpdr,sOpdr2,sOpdr3,sAnethdr1,sAnethdr2,sAnethdr3,sSternur1,
                            sSternur2,sSternur3,sSternur4,sSternur5,sRoudnur1,sRoudnur2,sRoudnur3,sRoudnur4,sRoudnur5,sAnethnr1,sAnethnr2,
	                         sAnethnr3,sAnethnr4,sAnethnr5,sPsticdnm,sPsticdcd,sOpcode,sOpname,sOpphys1,sOpphys2,sOpphys3,sOpphys4,sOpphys5,
	                         sOpphys6,sOpphys7,sOpphysnm,sSkinpre1,sSkinpre2,sSkinpre3,sSkinpre4,sSkinprem,sEsuyn,sEsunm,sAnethcd1,sAnethcd2,
	                         sAnetdrg1,sAnetdrg2,sLocaldrg,sLocdrgnm,sCntyn,sXraygz11,sXraygz12,sXraygz21,sXraygz22,sXraygz31,sXraygz32,
	                         sXrgzqty1,sXrgzqty2,sXrgzqty3,sXraygzyn,sXrayspec,sRinggz11,sRinggz12,sRinggz21,sRinggz22,sRinggz31,sRinggz32,
	                         sRigzqty1,sRigzqty2,sRigzqty3,sRinggzyn,sRingspec,sNedlcon1,sNedlcon2,sNedlcon3,sNedlspec,sInstcon1,sInstcon2,
	                         sInstcon3,sInstspec,sEtcconnm,sEtccon1,sEtccon2,sEtccon3,sEtcspec,sSpcyn,sSpcpart1,sSpcpart2,sSpcpart3,sSpcpart4,
	                         sSpcpart5,sSpcqty1,sSpcqty2,sSpcqty3,sSpcqty4,sSpcqty5,sSpcuser1,sSpcuser2,sSpcuser3,sSpcuser4,sSpcuser5,
	                         sOpinstyn,sOpinst1,sOpinst2,sOpinst3,sOpinst4,sOpinst5,sCautinf1,sCautinf2,sCautinf3,sCautinf4,sCautinf5,
	                         sCautinf6,sCautinf7,sCautinf8,sCautinf9,sCautetc,sCombmed1,sCombmed2,sCombdr1,sCombdr2,sCombas11,sCombas12,sCombas21,sCombas22,
                            sComopcd1,sComopcd2,sComopnm1,sComopnm2,sOutplace,sWdouttm,sStarvtm,sOparvtm,sAnthstm,sAnthetm,sAnthstm2,
	                         sAnthetm2,sPcatype,sOpstm,sOpetm,sOpouttm,sRrintm,sRrouttm,sRruseyn,sRemark,sAnenrrmk,sEditid,sEditip,
	                         sOpstat,sOpCode2,sOpname2,sOpCode3,sOpname3,sOpCode4,sOpname4,
                            sPIcdNm2,sPIcdCd2,sPIcdNm3,sPIcdCd3,sPIcdNm4,sPIcdCd4,sRemark1,sPatSect,sMeddate:String;iOpseqno:integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;' +
	      'S_TYPE13;S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;S_TYPE21;S_TYPE22;S_TYPE23;' +
	      'S_TYPE24;S_TYPE25;S_TYPE26;S_TYPE27;S_TYPE28;S_TYPE29;S_TYPE30;S_STRING1;S_STRING2;S_STRING3;S_STRING4;' +
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;' +
	      'S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;' +
	      'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;' +
	      'S_NAME6;S_NAME7;S_NAME8;S_NAME9;S_NAME10;S_NAME11;S_NAME12;S_NAME13;S_NAME14;S_NAME15;S_NAME16;S_NAME17;' +
	      'S_NAME18;S_NAME19;S_NAME20;S_NAME21;S_NAME22;S_NAME23;S_NAME24;S_NAME25;S_NAME26;S_NAME27;S_NAME28;S_NAME29;' +
	      'S_NAME30;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;' +
	      'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;' +
	      'S_CODE25;S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4;S_NUMVAL5;' +
              'S_NUMVAL6;S_NUMVAL7;S_NUMVAL8;S_NUMVAL9;S_NUMVAL10;S_NUMVAL11;S_NUMVAL12;S_NUMVAL13;S_NUMVAL14;S_NUMVAL15;' +
	      'S_NUMVAL16;S_NUMVAL17;S_NUMVAL18;S_NUMVAL19;S_NUMVAL20;S_NUMVAL21;S_NUMVAL22;S_NUMVAL23;S_NUMVAL24;S_NUMVAL25;' +
	      'S_NUMVAL26;S_NUMVAL27;S_NUMVAL28;S_NUMVAL29;S_NUMVAL30;S_NO1;S_NO2;S_NO3;S_NO4;S_NO5;S_NO6;S_NO7;S_NO8;S_NO9;S_NO10;' +
              'S_DESC1;S_DESC2;S_DESC3;S_DESC4;S_DESC5;S_DESC6;S_DESC7;L_LONG1');
   SetFldValue(0,[sType1,sPatno,sOpdate,sOproom,sEryn,sRecid,sOpdr,sOpdr2,sOpdr3,sAnethdr1,sAnethdr2,sAnethdr3,sSternur1,
	          sSternur2,sSternur3,sSternur4,sSternur5,sRoudnur1,sRoudnur2,sRoudnur3,sRoudnur4,sRoudnur5,sAnethnr1,sAnethnr2,
	          sAnethnr3,sAnethnr4,sAnethnr5,sPsticdnm,sPsticdcd,sOpcode,sOpname,sOpphys1,sOpphys2,sOpphys3,sOpphys4,sOpphys5,
	          sOpphys6,sOpphys7,sOpphysnm,sSkinpre1,sSkinpre2,sSkinpre3,sSkinpre4,sSkinprem,sEsuyn,sEsunm,sAnethcd1,sAnethcd2,
	          sAnetdrg1,sAnetdrg2,sLocaldrg,sLocdrgnm,sCntyn,sXraygz11,sXraygz12,sXraygz21,sXraygz22,sXraygz31,sXraygz32,
	          sXrgzqty1,sXrgzqty2,sXrgzqty3,sXraygzyn,sXrayspec,sRinggz11,sRinggz12,sRinggz21,sRinggz22,sRinggz31,sRinggz32,
	          sRigzqty1,sRigzqty2,sRigzqty3,sRinggzyn,sRingspec,sNedlcon1,sNedlcon2,sNedlcon3,sNedlspec,sInstcon1,sInstcon2,
	          sInstcon3,sInstspec,sEtcconnm,sEtccon1,sEtccon2,sEtccon3,sEtcspec,sSpcyn,sSpcpart1,sSpcpart2,sSpcpart3,sSpcpart4,
	          sSpcpart5,sSpcqty1,sSpcqty2,sSpcqty3,sSpcqty4,sSpcqty5,sSpcuser1,sSpcuser2,sSpcuser3,sSpcuser4,sSpcuser5,
	          sOpinstyn,sOpinst1,sOpinst2,sOpinst3,sOpinst4,sOpinst5,sCautinf1,sCautinf2,sCautinf3,sCautinf4,sCautinf5,
	          sCautinf6,sCautinf7,sCautinf8,sCautinf9,sCautetc,sCombmed1,sCombmed2,sCombdr1,sCombdr2,sCombas11,sCombas12,sCombas21,sCombas22,
                  sComopcd1,sComopcd2,sComopnm1,sComopnm2,sOutplace,sWdouttm,sStarvtm,sOparvtm,sAnthstm,sAnthetm,sAnthstm2,
	          sAnthetm2,sPcatype,sOpstm,sOpetm,sOpouttm,sRrintm,sRrouttm,sRruseyn,sRemark,sAnenrrmk,sEditid,sEditip,
	          sOpstat,sOpCode2,sOpname2,sOpCode3,sOpname3,sOpCode4,sOpname4,
                  sPIcdNm2,sPIcdCd2,sPIcdNm3,sPIcdCd3,sPIcdNm4,sPIcdCd4,sRemark1,sPatSect,sMeddate,iOpseqno]);
   if (txPutF('MD_OPRPT_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;}
function HmdOprptt.InputOpRecord(sType1,sPatno,sOpdate,sOproom,sEryn,sRecid,sOpdr,sOpdr2,sOpdr3,sAnethdr1,
                                 sAnethdr2,sAnethdr3,sSternur1,sSternur2,sSternur3,sSternur4,sSternur5,sRoudnur1,sRoudnur2,sRoudnur3,
                                 sRoudnur4,sRoudnur5,sAnethnr1,sAnethnr2,sAnethnr3,sAnethnr4,sAnethnr5,sPsticdnm,sPsticdcd,sOpcode,
                                 sOpname,sOpphys1,sOpphys2,sOpphys3,sOpphys4,sOpphys5,sOpphys6,sOpphys7,sOpphysnm,sSkinpre1,
                                 sSkinpre2,sSkinpre3,sSkinpre4,sSkinprem,sEsuyn,sEsunm,sAnethcd1,sAnethcd2,sAnetdrg1,sAnetdrg2,
                                 sLocaldrg,sLocdrgnm,sCntyn,sXraygz11,sXraygz12,sXraygz21,sXraygz22,sXraygz31,sXraygz32,sXrgzqty1,
                                 sXrgzqty2,sXrgzqty3,sXraygzyn,sXrayspec,sRinggz11,sRinggz12,sRinggz21,sRinggz22,sRinggz31,sRinggz32,
	                               sRigzqty1,sRigzqty2,sRigzqty3,sRinggzyn,sRingspec,sNedlcon1,sNedlcon2,sNedlcon3,sNedlspec,sInstcon1,
                                 sInstcon2,sInstcon3,sInstspec,sEtcconnm,sEtccon1,sEtccon2,sEtccon3,sEtcspec,sSpcyn,sSpcpart1,
                                 sSpcpart2,sSpcpart3,sSpcpart4,sSpcpart5,sSpcqty1,sSpcqty2,sSpcqty3,sSpcqty4,sSpcqty5,sSpcuser1,
                                 sSpcuser2,sSpcuser3,sSpcuser4,sSpcuser5,sOpinstyn,sOpinst1,sOpinst2,sOpinst3,sOpinst4,sOpinst5,
                                 sCautinf1,sCautinf2,sCautinf3,sCautinf4,sCautinf5,sCautinf6,sCautinf7,sCautinf8,sCautinf9,sCautetc,
                                 sCombmed1,sCombmed2,sCombdr1,sCombdr2,sCombas11,sCombas12,sCombas21,sCombas22,sComopcd1,sComopcd2,
                                 sComopnm1,sComopnm2,sOutplace,sWdouttm,sStarvtm,sOparvtm,sAnthstm,sAnthetm,sAnthstm2,sAnthetm2,
                                 sPcatype,sOpstm,sOpetm,sOpouttm,sRrintm,sRrouttm,sRruseyn,sRemark,sAnenrrmk,sEditid,
                                 sEditip,sOpstat,sOpCode2,sOpname2,sOpCode3,sOpname3,sOpCode4,sOpname4,sPIcdNm2,sPIcdCd2,
                                 sPIcdNm3,sPIcdCd3,sPIcdNm4,sPIcdCd4,sRemark1,sPatSect,sMeddate:String;iOpseqno:integer;
                                 sTemp1, sTemp2, sTemp3, sTemp4, sTemp5, sTemp6, sTemp7,sImplantKind1,sImplantKind2,sImplantKind3,
                                 sImplantManu1,sImplantManu2,sImplantManu3,sImplantetc1,sImplantetc2,sImplantetc3,sdrainKind1,sdrainKind2,sdrainKind3,sdrainsize1,
                                 sdrainsize2,sdrainsize3,sdraincnt1,sdraincnt2,sdraincnt3,sdrainsite1,sdrainsite2,sdrainsite3,sArmon1,sArmon2,
                                 sArmon3,sArmoff1,sArmoff2,sArmoff3,sArmpressure1,sArmpressure2,sArmpressure3,sLegon1,sLegon2,sLegon3,
                                 sLegoff1,sLegoff2,sLegoff3,sLegpressure1,sLegpressure2,sLegpressure3,sAdd1,sAdd2,sAdd3,sAddContent1,
                                 sAddContent2,sAddContent3,sAddCnt1,sAddCnt2,sAddCnt3,sAddSite1,sAddSite2,sAddSite3,sConfyn,sDropyn,
                                 sOpdr1,sReopyn,sReopres,sReopday,sAsaclass,
                                 sBong11,sBong12,sBong21,sBong22,sBong31,sBong32,sBongqty1,sBongqty2,sBongqty3,sBongyn,sBongspec,
                                 sTool11,sTool12,sTool21,sTool22,sTool31,sTool32,sToolqty1,sToolqty2,sToolqty3,sToolyn,sToolspec,
                                 sOpPreyn,sOpPostyn,sOpPreTxt,sOpPostTxt,sOutArea,sUltivause,sUltivarep, sEdtdate, sEdtnur, sEdtnurnm,
                                 sXraygz41,sXraygz42,sXrgzqty4,sRinggz41,sRinggz42,sRigzqty4,sBong41,sBong42,sBongqty4,sTool41,sTool42,sToolqty4,
                                 sDruguse,sDrugrep,
                                 sAnetype,sAneplace,sTemper,sLowtemper,sTemmethod,sTemperetc,sVentyn,sVentpart,sVentetc,sSonoyn,sSonotype,sNerrootyn,sTofyn,sAntegoyn  : String):Integer;

begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;' +
              'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;' +
              'S_TYPE21;S_TYPE22;S_TYPE23;S_TYPE24;S_TYPE25;S_TYPE26;S_TYPE27;S_TYPE28;S_TYPE29;S_TYPE30;' +
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;S_NAME6;S_NAME7;S_NAME8;S_NAME9;S_NAME10;' +
              'S_NAME11;S_NAME12;S_NAME13;S_NAME14;S_NAME15;S_NAME16;S_NAME17;S_NAME18;S_NAME19;S_NAME20;' +
              'S_NAME21;S_NAME22;S_NAME23;S_NAME24;S_NAME25;S_NAME26;S_NAME27;S_NAME28;S_NAME29;S_NAME30;' +
              'S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;' +
              'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;' +
              'S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;' +
              'S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4;S_NUMVAL5;S_NUMVAL6;S_NUMVAL7;S_NUMVAL8;S_NUMVAL9;S_NUMVAL10;' +
              'S_NUMVAL11;S_NUMVAL12;S_NUMVAL13;S_NUMVAL14;S_NUMVAL15;S_NUMVAL16;S_NUMVAL17;S_NUMVAL18;S_NUMVAL19;S_NUMVAL20;' +
              'S_NUMVAL21;S_NUMVAL22;S_NUMVAL23;S_NUMVAL24;S_NUMVAL25;S_NUMVAL26;S_NUMVAL27;S_NUMVAL28;S_NUMVAL29;S_NUMVAL30;' +
              'S_NO1;S_NO2;S_NO3;S_NO4;S_NO5;S_NO6;S_NO7;S_NO8;S_NO9;S_NO10;' +
              'S_DESC1;S_DESC2;S_DESC3;S_DESC4;S_DESC5;S_DESC6;S_DESC7;L_LONG1;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;' +
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;S_STRING56;S_STRING57;S_STRING58;S_STRING59;S_STRING60;' +
              'S_STRING61;S_STRING62;S_STRING63;S_STRING64;S_STRING65;S_STRING66;S_STRING67;S_STRING68;S_STRING69;S_STRING70;' +
              'S_STRING71;S_STRING72;S_STRING73;S_STRING74;S_STRING75;S_STRING76;S_STRING77;S_STRING78;S_STRING79;S_STRING80;' +
              'S_STRING81;S_STRING82;S_STRING83;S_STRING84;S_STRING85;S_STRING86;S_STRING87;S_STRING88;S_STRING89;S_STRING90;' +
              'S_STRING91;S_STRING92;S_STRING93;S_STRING94;S_STRING95;' +
              'S_STRING100;S_STRING101;S_STRING102;S_STRING103;S_STRING104;S_STRING105;S_STRING106;S_STRING107;S_STRING108;S_STRING109;S_STRING110;' +
              'S_STRING111;S_STRING112;S_STRING113;S_STRING114;S_STRING115;S_STRING116;S_STRING117;S_STRING118;S_STRING119;S_STRING120;S_STRING121;' +
              'S_STRING123;S_STRING124;S_STRING125;S_STRING126;S_STRING127;S_STRING128;S_STRING129;S_STRING130;S_STRING131;S_STRING132;'+
              'S_STRING133;S_STRING134;S_STRING135;S_STRING136;S_STRING137;S_STRING138;S_STRING139;S_STRING140;S_STRING141;S_STRING142;S_STRING143;S_STRING144;'+
              'S_STRING145;S_STRING146;' +
              'S_STRING147;S_STRING148;S_STRING149;S_STRING150;S_STRING151;S_STRING152;S_STRING153;S_STRING154;S_STRING155;S_STRING156;'+
              'S_STRING157;S_STRING158;S_STRING159;S_STRING160'
              );
   SetFldValue(0,[sType1,sPatno,sOpdate,sOproom,sEryn,sRecid,sOpdr,sOpdr2,sOpdr3,sAnethdr1,
                  sAnethdr2,sAnethdr3,sSternur1,sSternur2,sSternur3,sSternur4,sSternur5,sRoudnur1,sRoudnur2,sRoudnur3,
                  sRoudnur4,sRoudnur5,sAnethnr1,sAnethnr2,sAnethnr3,sAnethnr4,sAnethnr5,sPsticdnm,sPsticdcd,sOpcode,
                  sOpname,sOpphys1,sOpphys2,sOpphys3,sOpphys4,sOpphys5,sOpphys6,sOpphys7,sOpphysnm,sSkinpre1,
                  sSkinpre2,sSkinpre3,sSkinpre4,sSkinprem,sEsuyn,sEsunm,sAnethcd1,sAnethcd2,sAnetdrg1,sAnetdrg2,
                  sLocaldrg,sLocdrgnm,sCntyn,sXraygz11,sXraygz12,sXraygz21,sXraygz22,sXraygz31,sXraygz32,sXrgzqty1,
                  sXrgzqty2,sXrgzqty3,sXraygzyn,sXrayspec,sRinggz11,sRinggz12,sRinggz21,sRinggz22,sRinggz31,sRinggz32,
                  sRigzqty1,sRigzqty2,sRigzqty3,sRinggzyn,sRingspec,sNedlcon1,sNedlcon2,sNedlcon3,sNedlspec,sInstcon1,
                  sInstcon2,sInstcon3,sInstspec,sEtcconnm,sEtccon1,sEtccon2,sEtccon3,sEtcspec,sSpcyn,sSpcpart1,
                  sSpcpart2,sSpcpart3,sSpcpart4,sSpcpart5,sSpcqty1,sSpcqty2,sSpcqty3,sSpcqty4,sSpcqty5,sSpcuser1,
                  sSpcuser2,sSpcuser3,sSpcuser4,sSpcuser5,sOpinstyn,sOpinst1,sOpinst2,sOpinst3,sOpinst4,sOpinst5,
                  sCautinf1,sCautinf2,sCautinf3,sCautinf4,sCautinf5,sCautinf6,sCautinf7,sCautinf8,sCautinf9,sCautetc,
                  sCombmed1,sCombmed2,sCombdr1,sCombdr2,sCombas11,sCombas12,sCombas21,sCombas22,sComopcd1,sComopcd2,
                  sComopnm1,sComopnm2,sOutplace,sWdouttm,sStarvtm,sOparvtm,sAnthstm,sAnthetm,sAnthstm2,sAnthetm2,
                  sPcatype,sOpstm,sOpetm,sOpouttm,sRrintm,sRrouttm,sRruseyn,sRemark,sAnenrrmk,sEditid,
                  sEditip,sOpstat,sOpCode2,sOpname2,sOpCode3,sOpname3,sOpCode4,sOpname4,sPIcdNm2,sPIcdCd2,
                  sPIcdNm3,sPIcdCd3,sPIcdNm4,sPIcdCd4,sRemark1,sPatSect,sMeddate,iOpseqno,
                  sTemp1,sTemp2,sTemp3,sTemp4,sTemp5,sTemp6,sTemp7,sImplantKind1,sImplantKind2,sImplantKind3,
                  sImplantManu1,sImplantManu2,sImplantManu3,sImplantetc1,sImplantetc2,sImplantetc3,sdrainKind1,sdrainKind2,sdrainKind3,sdrainsize1,
                  sdrainsize2,sdrainsize3,sdraincnt1,sdraincnt2,sdraincnt3,sdrainsite1,sdrainsite2,sdrainsite3,sArmon1,sArmon2,
                  sArmon3,sArmoff1,sArmoff2,sArmoff3,sArmpressure1,sArmpressure2,sArmpressure3,sLegon1,sLegon2,sLegon3,
                  sLegoff1,sLegoff2,sLegoff3,sLegpressure1,sLegpressure2,sLegpressure3,sAdd1,sAdd2,sAdd3,sAddContent1,
                  sAddContent2,sAddContent3,sAddCnt1,sAddCnt2,sAddCnt3,sAddSite1,sAddSite2,sAddSite3,sConfyn,sDropyn,
                  sOpdr1,sReopyn,sReopres,sReopday,sAsaclass,
                  sBong11,sBong12,sBong21,sBong22,sBong31,sBong32,sBongqty1,sBongqty2,sBongqty3,sBongyn,sBongspec,
                  sTool11,sTool12,sTool21,sTool22,sTool31,sTool32,sToolqty1,sToolqty2,sToolqty3,sToolyn,sToolspec,
                  sOpPreyn,sOpPostyn,sOpPreTxt,sOpPostTxt,sOutArea,sUltivause,sUltivarep, sEdtdate, sEdtnur, sEdtnurnm,
                  sXraygz41,sXraygz42,sXrgzqty4,sRinggz41,sRinggz42,sRigzqty4,sBong41,sBong42,sBongqty4,sTool41,sTool42,sToolqty4,
                  sDruguse,sDrugrep,
                  sAnetype,sAneplace,sTemper,sLowtemper,sTemmethod,sTemperetc,sVentyn,sVentpart,sVentetc,sSonoyn,sSonotype,sNerrootyn,sTofyn,sAntegoyn ]);
   if (txPutF('MD_OPRPT_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


// 마취대장 내용삭제
function HmdOprptt.DeleteAneth(Type1,Type2,Type3,Type4,Type5:String;OpSeqNo:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;L_LONG1');
   SetFldValue(0,[Type1,Type2,Type3,Type4,Type5,OpSeqNo]);
   if (txPutF('MD_OPRPT_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 수술 통계
function HmdOprptt.ListOpStat(Type1,Type2,Type3,Type4:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4'); //구분자,년도
   SetFldValue(0,[Type1,Type2,Type3,Type4]);

   //Tuxedo Service Call
   if (txGetF('MD_OPRPT_L3')) then
   begin
      GetFldVar('S_STRING1', sMeddept); // 진료과/진료부서
      GetFldVar('S_STRING2', sSort);    // 구분자
      GetFldVar('S_STRING3', sUsername);// 사용자명
      GetFldVar('S_STRING4', sComcdnm); // 공통구분명

      GetFldVar('L_LONG1',   iCnt01 );  // 결과값01
      GetFldVar('L_LONG2',   iCnt02 );  // 결과값02
      GetFldVar('L_LONG3',   iCnt03 );  // 결과값03
      GetFldVar('L_LONG4',   iCnt04 );  // 결과값04
      GetFldVar('L_LONG5',   iCnt05 );  // 결과값05
      GetFldVar('L_LONG6',   iCnt06 );  // 결과값06
      GetFldVar('L_LONG7',   iCnt07 );  // 결과값07
      GetFldVar('L_LONG8',   iCnt08 );  // 결과값08
      GetFldVar('L_LONG9',   iCnt09 );  // 결과값09
      GetFldVar('L_LONG10',  iCnt10 );  // 결과값10
      GetFldVar('L_LONG11',  iCnt11 );  // 결과값11
      GetFldVar('L_LONG12',  iCnt12 );  // 결과값12
      GetFldVar('L_LONG13',  iCnt13 );  // 결과값13
      GetFldVar('L_LONG14',  iCnt14 );  // 결과값14
      GetFldVar('L_LONG15',  iCnt15 );  // 결과값15
      GetFldVar('L_LONG16',  iCnt16 );  // 결과값16
      GetFldVar('L_LONG17',  iCnt17 );  // 결과값17
      GetFldVar('L_LONG18',  iCnt18 );  // 결과값18
      GetFldVar('L_LONG19',  iCnt19 );  // 결과값19
      GetFldVar('L_LONG20',  iCnt20 );  // 결과값20
      GetFldVar('L_LONG21',  iCnt21 );  // 결과값21
      GetFldVar('L_LONG22',  iCnt22 );  // 결과값22
      GetFldVar('L_LONG23',  iCnt23 );  // 결과값23
      GetFldVar('L_LONG24',  iCnt24 );  // 결과값24
      GetFldVar('L_LONG25',  iCnt25 );  // 결과값25
      GetFldVar('L_LONG26',  iCnt26 );  // 결과값26
      GetFldVar('L_LONG27',  iCnt27 );  // 결과값27
      GetFldVar('L_LONG28',  iCnt28 );  // 결과값28
      GetFldVar('L_LONG29',  iCnt29 );  // 결과값29
      GetFldVar('L_LONG30',  iCnt30 );  // 결과값30
      GetFldVar('L_LONG31',  iCnt31 );  // 결과값31
      GetFldVar('L_LONG32',  iCnt32 );  // 결과값32
      GetFldVar('L_LONG33',  iCnt33 );  // 결과값33
      GetFldVar('L_LONG34',  iCnt34 );  // 결과값34
      GetFldVar('L_LONG35',  iCnt35 );  // 결과값35
      GetFldVar('L_LONG36',  iCnt36 );  // 결과값36
      GetFldVar('L_LONG37',  iCnt37 );  // 결과값37
      GetFldVar('L_LONG38',  iCnt38 );  // 결과값38
      GetFldVar('L_LONG39',  iCnt39 );  // 결과값39
      GetFldVar('L_LONG40',  iCnt40 );  // 결과값40
      GetFldVar('L_LONG41',  iCnt41 );  // 결과값41
      GetFldVar('L_LONG42',  iCnt42 );  // 결과값42
      GetFldVar('L_LONG43',  iCnt43 );  // 결과값43
      GetFldVar('L_LONG44',  iCnt44 );  // 결과값44
      GetFldVar('L_LONG45',  iCnt45 );  // 결과값45
      GetFldVar('L_LONG46',  iCnt46 );  // 결과값46
      GetFldVar('L_LONG47',  iCnt47 );  // 결과값47
      GetFldVar('L_LONG48',  iCnt48 );  // 결과값48
      GetFldVar('L_LONG49',  iCnt49 );  // 결과값49
      GetFldVar('L_LONG50',  iCnt50 );  // 결과값50
      GetFldVar('L_CNT1',    iCnt51 );  // 결과값51
      GetFldVar('L_CNT2',    iCnt52 );  // 결과값52
      GetFldVar('L_CNT3',    iCnt53 );  // 결과값53
      GetFldVar('L_CNT4',    iCnt54 );  // 결과값54
      GetFldVar('L_CNT5',    iCnt55 );  // 결과값55
      GetFldVar('L_CNT6',    iCnt56 );  // 결과값56
      GetFldVar('L_CNT7',    iCnt57 );  // 결과값57
      GetFldVar('L_CNT8',    iCnt58 );  // 결과값58
      GetFldVar('L_CNT9',    iCnt59 );  // 결과값59
      GetFldVar('L_CNT10',   iCnt60 );  // 결과값60
      GetFldVar('L_CNT11',   iCnt61 );  // 결과값61
      GetFldVar('L_CNT12',   iCnt62 );  // 결과값62
      GetFldVar('L_CNT13',   iCnt63 );  // 결과값63
      GetFldVar('L_CNT14',   iCnt64 );  // 결과값64
      GetFldVar('L_CNT15',   iCnt65 );  // 결과값65
      GetFldVar('L_CNT16',   iCnt66 );  // 결과값66
      GetFldVar('L_CNT17',   iCnt67 );  // 결과값67
      GetFldVar('L_CNT18',   iCnt68 );  // 결과값68
      GetFldVar('L_CNT19',   iCnt69 );  // 결과값69
      GetFldVar('L_CNT20',   iCnt70 );  // 결과값70
      GetFldVar('L_CNT21',   iCnt71 );  // 결과값71
      GetFldVar('L_CNT22',   iCnt72 );  // 결과값72
      GetFldVar('L_CNT23',   iCnt73 );  // 결과값73
      GetFldVar('L_CNT24',   iCnt74 );  // 결과값74
      GetFldVar('L_CNT25',   iCnt75 );  // 결과값75
      GetFldVar('L_CNT26',   iCnt76 );  // 결과값76
      GetFldVar('L_CNT27',   iCnt77 );  // 결과값77
      GetFldVar('L_CNT28',   iCnt78 );  // 결과값78
      GetFldVar('L_CNT29',   iCnt79 );  // 결과값79
      GetFldVar('L_CNT30',   iCnt80 );  // 결과값80
      GetFldVar('L_QTY1',    iCnt81 );  // 결과값81
      GetFldVar('L_QTY2',    iCnt82 );  // 결과값82
      GetFldVar('L_QTY3',    iCnt83 );  // 결과값83
      GetFldVar('L_QTY4',    iCnt84 );  // 결과값84
      GetFldVar('L_QTY5',    iCnt85 );  // 결과값85
      GetFldVar('L_QTY6',    iCnt86 );  // 결과값86
      GetFldVar('L_QTY7',    iCnt87 );  // 결과값87
      GetFldVar('L_QTY8',    iCnt88 );  // 결과값88
      GetFldVar('L_QTY9',    iCnt89 );  // 결과값89
      GetFldVar('L_QTY10',   iCnt90 );  // 결과값90
      GetFldVar('L_QTY11',   iCnt91 );  // 결과값91
      GetFldVar('L_QTY12',   iCnt92 );  // 결과값92
      GetFldVar('L_QTY13',   iCnt93 );  // 결과값93
      GetFldVar('L_QTY14',   iCnt94 );  // 결과값94
      GetFldVar('L_QTY15',   iCnt95 );  // 결과값95
      GetFldVar('L_QTY16',   iCnt96 );  // 결과값96

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 마취시간 정보 조회
function Hmdoprptt.SearchAneth(Type1,Type2,Type3:String;OpSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_LONG1');
   SetFldValue(0,[Type1,Type2,Type3,OpSeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_OPRPT_L2')) then
   begin
      GetFldVar('S_STRING13',  sAnthstm );  // 마취시작시간
      GetFldVar('S_STRING14',  sAnthetm );  // 마취종료시간

      //조회건수 return
      Result := GetRecordCnt('S_STRING13');
      txFree;
   end;
end;

//
// 과내 수술 통계
function HmdOprptt.ListOutOpStat(Type1,Type2,Type3,Type4:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4'); //구분자,년도
   SetFldValue(0,[Type1,Type2,Type3,Type4]);

   //Tuxedo Service Call
   if (txGetF('MD_OPRPT_L4')) then
   begin
      GetFldVar('S_STRING1', sMeddept); // 진료과/진료부서
      GetFldVar('S_STRING2', sSort);    // 구분자
      GetFldVar('S_STRING3', sUsername);// 사용자명
      GetFldVar('S_STRING4', sComcdnm); // 공통구분명

      GetFldVar('L_LONG1',   iCnt01 );  // 결과값01
      GetFldVar('L_LONG2',   iCnt02 );  // 결과값02
      GetFldVar('L_LONG3',   iCnt03 );  // 결과값03
      GetFldVar('L_LONG4',   iCnt04 );  // 결과값04
      GetFldVar('L_LONG5',   iCnt05 );  // 결과값05
      GetFldVar('L_LONG6',   iCnt06 );  // 결과값06
      GetFldVar('L_LONG7',   iCnt07 );  // 결과값07
      GetFldVar('L_LONG8',   iCnt08 );  // 결과값08
      GetFldVar('L_LONG9',   iCnt09 );  // 결과값09
      GetFldVar('L_LONG10',  iCnt10 );  // 결과값10
      GetFldVar('L_LONG11',  iCnt11 );  // 결과값11
      GetFldVar('L_LONG12',  iCnt12 );  // 결과값12
      GetFldVar('L_LONG13',  iCnt13 );  // 결과값13
      GetFldVar('L_LONG14',  iCnt14 );  // 결과값14
      GetFldVar('L_LONG15',  iCnt15 );  // 결과값15
      GetFldVar('L_LONG16',  iCnt16 );  // 결과값16
      GetFldVar('L_LONG17',  iCnt17 );  // 결과값17
      GetFldVar('L_LONG18',  iCnt18 );  // 결과값18
      GetFldVar('L_LONG19',  iCnt19 );  // 결과값19
      GetFldVar('L_LONG20',  iCnt20 );  // 결과값20
      GetFldVar('L_LONG21',  iCnt21 );  // 결과값21
      GetFldVar('L_LONG22',  iCnt22 );  // 결과값22
      GetFldVar('L_LONG23',  iCnt23 );  // 결과값23
      GetFldVar('L_LONG24',  iCnt24 );  // 결과값24
      GetFldVar('L_LONG25',  iCnt25 );  // 결과값25
      GetFldVar('L_LONG26',  iCnt26 );  // 결과값26
      GetFldVar('L_LONG27',  iCnt27 );  // 결과값27
      GetFldVar('L_LONG28',  iCnt28 );  // 결과값28
      GetFldVar('L_LONG29',  iCnt29 );  // 결과값29
      GetFldVar('L_LONG30',  iCnt30 );  // 결과값30
      GetFldVar('L_LONG31',  iCnt31 );  // 결과값31
      GetFldVar('L_LONG32',  iCnt32 );  // 결과값32
      GetFldVar('L_LONG33',  iCnt33 );  // 결과값33
      GetFldVar('L_LONG34',  iCnt34 );  // 결과값34
      GetFldVar('L_LONG35',  iCnt35 );  // 결과값35
      GetFldVar('L_LONG36',  iCnt36 );  // 결과값36
      GetFldVar('L_LONG37',  iCnt37 );  // 결과값37
      GetFldVar('L_LONG38',  iCnt38 );  // 결과값38
      GetFldVar('L_LONG39',  iCnt39 );  // 결과값39
      GetFldVar('L_LONG40',  iCnt40 );  // 결과값40
      GetFldVar('L_LONG41',  iCnt41 );  // 결과값41
      GetFldVar('L_LONG42',  iCnt42 );  // 결과값42
      GetFldVar('L_LONG43',  iCnt43 );  // 결과값43
      GetFldVar('L_LONG44',  iCnt44 );  // 결과값44
      GetFldVar('L_LONG45',  iCnt45 );  // 결과값45
      GetFldVar('L_LONG46',  iCnt46 );  // 결과값46
      GetFldVar('L_LONG47',  iCnt47 );  // 결과값47
      GetFldVar('L_LONG48',  iCnt48 );  // 결과값48
      GetFldVar('L_LONG49',  iCnt49 );  // 결과값49
      GetFldVar('L_LONG50',  iCnt50 );  // 결과값50
      GetFldVar('L_CNT1',    iCnt51 );  // 결과값51
      GetFldVar('L_CNT2',    iCnt52 );  // 결과값52
      GetFldVar('L_CNT3',    iCnt53 );  // 결과값53
      GetFldVar('L_CNT4',    iCnt54 );  // 결과값54
      GetFldVar('L_CNT5',    iCnt55 );  // 결과값55
      GetFldVar('L_CNT6',    iCnt56 );  // 결과값56
      GetFldVar('L_CNT7',    iCnt57 );  // 결과값57
      GetFldVar('L_CNT8',    iCnt58 );  // 결과값58
      GetFldVar('L_CNT9',    iCnt59 );  // 결과값59
      GetFldVar('L_CNT10',   iCnt60 );  // 결과값60
      GetFldVar('L_CNT11',   iCnt61 );  // 결과값61
      GetFldVar('L_CNT12',   iCnt62 );  // 결과값62
      GetFldVar('L_CNT13',   iCnt63 );  // 결과값63
      GetFldVar('L_CNT14',   iCnt64 );  // 결과값64
      GetFldVar('L_CNT15',   iCnt65 );  // 결과값65
      GetFldVar('L_CNT16',   iCnt66 );  // 결과값66
      GetFldVar('L_CNT17',   iCnt67 );  // 결과값67
      GetFldVar('L_CNT18',   iCnt68 );  // 결과값68
      GetFldVar('L_CNT19',   iCnt69 );  // 결과값69
      GetFldVar('L_CNT20',   iCnt70 );  // 결과값70
      GetFldVar('L_CNT21',   iCnt71 );  // 결과값71
      GetFldVar('L_CNT22',   iCnt72 );  // 결과값72
      GetFldVar('L_CNT23',   iCnt73 );  // 결과값73
      GetFldVar('L_CNT24',   iCnt74 );  // 결과값74
      GetFldVar('L_CNT25',   iCnt75 );  // 결과값75
      GetFldVar('L_CNT26',   iCnt76 );  // 결과값76
      GetFldVar('L_CNT27',   iCnt77 );  // 결과값77
      GetFldVar('L_CNT28',   iCnt78 );  // 결과값78
      GetFldVar('L_CNT29',   iCnt79 );  // 결과값79
      GetFldVar('L_CNT30',   iCnt80 );  // 결과값80
      GetFldVar('L_QTY1',    iCnt81 );  // 결과값81
      GetFldVar('L_QTY2',    iCnt82 );  // 결과값82
      GetFldVar('L_QTY3',    iCnt83 );  // 결과값83
      GetFldVar('L_QTY4',    iCnt84 );  // 결과값84
      GetFldVar('L_QTY5',    iCnt85 );  // 결과값85
      GetFldVar('L_QTY6',    iCnt86 );  // 결과값86
      GetFldVar('L_QTY7',    iCnt87 );  // 결과값87
      GetFldVar('L_QTY8',    iCnt88 );  // 결과값88
      GetFldVar('L_QTY9',    iCnt89 );  // 결과값89
      GetFldVar('L_QTY10',   iCnt90 );  // 결과값90
      GetFldVar('L_QTY11',   iCnt91 );  // 결과값91
      GetFldVar('L_QTY12',   iCnt92 );  // 결과값92
      GetFldVar('L_QTY13',   iCnt93 );  // 결과값93
      GetFldVar('L_QTY14',   iCnt94 );  // 결과값94
      GetFldVar('L_QTY15',   iCnt95 );  // 결과값95
      GetFldVar('L_QTY16',   iCnt96 );  // 결과값96

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//(추가. 2003.04.13 이용언)
function HmdOprptt.CheckOpDate(Patno, Admdate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); //구분자,년도
   SetFldValue(0,[PatNo,Admdate]);

   //Tuxedo Service Call
   if (txGetF('MD_OPRPT_S1')) then
   begin
      GetFldVar('S_STRING1', sOpDate  );  
      GetFldVar('S_STRING2', iOpseqno );
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//2015인증평가, 수술기록지 시한성체크, KimDaeYong 2015-09-17
function HmdOprptt.ListOprecord(inPatno, inAdmdate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmdate]);

   //Tuxedo Service Call
   if (txGetF('MD_OPRPT_L6')) then
   begin
      GetFldVar('S_STRING1',  sPatno    );
      GetFldVar('S_STRING2',  sPatname  );
      GetFldVar('S_STRING3',  sOpdate   );
      GetFldVar('S_STRING4',  sOpcode   );
      GetFldVar('S_STRING5',  sOpname   );
      GetFldVar('S_STRING6',  sMeddept  );
      GetFldVar('S_STRING7',  sOpdr     );
      GetFldVar('S_STRING8',  sOpdrnm   );
      GetFldVar('S_STRING9',  sOpetm    );
      GetFldVar('S_STRING10', sChkhour  );
      GetFldVar('S_STRING11', sOprecyn  );

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdOprect 	수술기록지                           전자인증적용 SONGLIM_THOMA //
////////////////////////////////////////////////////////////////////////////////

// 기록지에 저장되어있는경우 화면에 Display
function HmdOprect.SelectRecord(sType1,sType2,sOpSeqno,sOpSeqno2:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0, [sType1,sType2,sOpSeqNo,sOpSeqno2]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREC_S1')) then
   begin
      GetFldVar('S_STRING1',  sPatSect );
      GetFldVar('S_STRING2',  sMedDept );
      GetFldVar('S_STRING3',  sRecid   );
      GetFldVar('S_STRING4',  sOpDr    );
      GetFldVar('S_STRING5',  sOpDr2   );
      GetFldVar('S_STRING6',  sOpDr3   );
      GetFldVar('S_STRING7',  sPreIcdNm);
      GetFldVar('S_STRING8',  sPreIcdCd);
      GetFldVar('S_STRING9',  sPstIcdNm);
      GetFldVar('S_STRING10', sPstIcdCd);
      GetFldVar('S_STRING11', sOpCode  );
      GetFldVar('S_STRING12', sOpName	);
      GetFldVar('S_STRING13', sAnethCd	);
      GetFldVar('S_STRING14', sTissueYn);
      GetFldVar('S_STRING15', sDrainYn );
      GetFldVar('S_STRING16', sProcFind);
      GetFldVar('S_STRING17', sKeyWord1);
      GetFldVar('S_STRING18', sKeyWord2);
      GetFldVar('S_STRING19', sKeyWord3);
      GetFldVar('S_STRING20', sPreOpCd);
      GetFldVar('S_STRING21', sPreOpNm);
      GetFldVar('S_STRING22', sPIcdCd2);
      GetFldVar('S_STRING23', sPIcdNm2);
      GetFldVar('S_STRING24', sPIcdCd3);
      GetFldVar('S_STRING25', sPIcdNm3);
      GetFldVar('S_STRING26', sPIcdCd4);
      GetFldVar('S_STRING27', sPIcdNm4);
      GetFldVar('S_STRING28', sOpCode2);
      GetFldVar('S_STRING29', sOpName2);
      GetFldVar('S_STRING30', sOpCode3);
      GetFldVar('S_STRING31', sOpName3);
      GetFldVar('S_STRING32', sOpCode4);
      GetFldVar('S_STRING33', sOpName4);
      GetFldVar('S_STRING34', sComBMed1);
      GetFldVar('S_STRING35', sComBDr1);
      GetFldVar('S_STRING36', sComBAs11);
      GetFldVar('S_STRING37', sComBAs12);
      GetFldVar('S_STRING38', sComOPCd1);
      GetFldVar('S_STRING39', sComOPNm1);
      GetFldVar('S_STRING40', sComBMed2);
      GetFldVar('S_STRING41', sComBDr2);
      GetFldVar('S_STRING42', sComBAs21);
      GetFldVar('S_STRING43', sComBAs22);
      GetFldVar('S_STRING44', sComOPCd2);
      GetFldVar('S_STRING45', sComOPNm2);
      GetFldVar('S_STRING46', sProcFind2);
      GetFldVar('S_STRING47', sProcFind3);
      GetFldVar('S_STRING48', sBloodrj  );
      GetFldVar('S_STRING49', sBlood    );
      GetFldVar('S_STRING50', sSpon     );
      GetFldVar('S_STRING51', sMeddept1 );
      GetFldVar('S_STRING52', sChadrnm  );
      GetFldVar('S_STRING53', sWardno   );
      GetFldVar('S_STRING54', sRoomno   );
      GetFldVar('S_STRING55', sObserv   );
      GetFldVar('S_STRING56', sOpDr1   );

      GetFldVar('S_STRING57', sSignData );
      GetFldVar('S_STRING58', sSerialNo );
      GetFldVar('S_STRING59', sSubjectDN );

      GetFldVar('S_STRING60', sFrecdate );
      GetFldVar('S_STRING61', sLaparoYn );
      GetFldVar('S_STRING62', sObgyamtYn);  //산부인과가산금여부, KimDaeYong 2015-01-09
      //2015인증평가, KimDaeYong 2015-02-06
      GetFldVar('S_STRING63', sOpstm );     //수술시작일시
      GetFldVar('S_STRING64', sOpetm );     //수술종료일시
      GetFldVar('S_STRING65', sRecdate);    //기록일시, KimDaeYong 2015-03-17
      GetFldVar('S_STRING66', sSavestat);    //저장상태, KimDaeYong 2016-04-27


      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdOPrect.SelectOpdate(sType1,sType2:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);

   //Tuxedo Service Call
   if (txGetF('MD_OPREC_S2')) then begin
      GetFldVar('S_STRING1',  sOpDate );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수술기록지 저장 or 수정                   // SONGLIM_THOMA 수정
function HmdOprect.InsertRecord(iOpSeqNo:Integer;sType1,sPatNo,sOpDate,sPatSect,
                                 sMedDept,sRecid,sOpDr,sOpDr2,sOpDr3,
                                 sPreIcdNm,sPreIcdCd,sPstIcdNm,sPstIcdCd,sOpCode,
                                 sOpName,sAnethCd,sTissueYn,sDrainYn,sProcFind,
                                 sKeyWord1,sKeyWord2,sKeyWord3,sEditId,sEditIp,
                                 sPIcdCd2,sPIcdNm2,sPIcdCd3,sPIcdNm3,sPIcdCd4,
                                 sPIcdNm4,sOpCode2,sOpName2,sOpCode3,sOpName3,
                                 sOpCode4,sOpName4,sProcFind2,sProcFind3,sPreOpCd,
                                 sPreOpNm,sPon,sBloodrj,sBlood,sObserv,sOpDr1,
                                 sSignData,sSerialNo,sSubjectDN,sLaparoYn,ObgyamtYn,
                                 sRecdate,sSavestat,sOpSeqNo2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;'+
              'S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;'+
              'S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;'+
              'S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;'+
              'S_STRING30;S_STRING31;S_STRING32;S_STRING33;S_STRING34;'+
              'S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;'+
              'L_LONG1;S_STRING40;S_STRING41;S_STRING42;S_STRING43;S_STRING44;'+
              'S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;'+
              'S_TYPE2;S_TYPE3;');

   SetFldValue(0,[sType1,sPatNo,sOpDate,sPatSect,sMedDept,
                 sRecid,sOpdr,sOpdr2,sOpdr3,sPreIcdNm,
                 sPreIcdCd,sPstIcdNm,sPstIcdCd,sOpCode,sOpName,
                 sAnethCd,sTissueYn,sDrainYn,sProcFind,sKeyWord1,
                 sKeyWord2,sKeyWord3,sEditId,sEditIp,sPIcdCd2,
                 sPIcdNm2,sPIcdCd3,sPIcdNm3,sPIcdCd4,sPIcdNm4,
                 sOpCode2,sOpName2,sOpCode3,sOpName3,sOpCode4,
                 sOpName4,sProcFind2,sProcFind3,sPreOpCd,sPreOpNm,
                 iOpSeqNo,sPon,sBloodrj,sBlood,sObserv,sOpDr1,
                 sSignData,sSerialNo,sSubjectDN,sLaparoYn,ObgyamtYn,
                 sRecdate,sSavestat,sOpseqno2]);

   if (txPutF('MD_OPREC_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPdiett 	환자식이관리                                                   //
////////////////////////////////////////////////////////////////////////////////

// 식이이력 조회
function HmdPdiett.ListDiet(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sType1,sType2,sType3]);
   //Tuxedo Service Call
   if (txGetF('MD_PDIET_L1')) then begin
      GetFldVar('S_STRING1',  sDietdate);
      GetFldVar('S_STRING2',  sDiettime);
      GetFldVar('S_STRING3',  sDietendt);
      GetFldVar('S_STRING4',  sDietentm);
      GetFldVar('S_STRING5',  sOrdname );
      GetFldVar('S_STRING6',  sRemark  );
      GetFldVar('S_STRING7',  sOption  );
      GetFldVar('S_STRING8',  sDisinfYn);
      GetFldVar('S_STRING9',  sOutYn   );
      GetFldVar('S_STRING10', sOrdDr   );
      GetFldVar('S_STRING11', sEditDate);
      GetFldVar('S_STRING12', sOrdCd   );
      GetFldVar('S_STRING13', sSlipCd  );
      GetFldVar('S_STRING14', sDietQty );
      GetFldVar('S_STRING15', sKcal    );
      GetFldVar('S_STRING16', sSalt    );
      GetFldVar('S_STRING17', sProtein );
      GetFldVar('S_STRING18', sIsolyn  );
      GetFldVar('S_STRING19', sDietrmk );
      GetFldVar('S_STRING20', sBegdiet );
      GetFldVar('S_STRING21', sEnddiet );
      GetFldVar('S_STRING22', sRiceqty );
      GetFldVar('S_STRING23', sDiettypeNm);  // 2005.10.17 김송주 추가

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 식이항목 조회
function HmdPdiett.ListDietItem(sType1,sType2:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0, [sType1,sType2]);
   //Tuxedo Service Call
   if (txGetF('SQ_CATCD_S')) then begin
      GetFldVar('S_CODE3',  sDietCd);
      GetFldVar('S_CODE4',  sDietNm);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_CODE3');
      txFree;
   end;
end;

// 영양과 식이확인 여부 및 식이 마감여부 조회
function HmdPdiett.CheckDietClose(sType1,sType2:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);
   //Tuxedo Service Call
   if (txGetF('MD_PDIET_S1')) then begin
      GetFldVar('S_CODE1',  sDiet1Clos);
      GetFldVar('S_CODE2',  sDiet2Clos);
      GetFldVar('S_CODE3',  sDiet3Clos);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 식이발행 입력
function HmdPdiett.InputDiet(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                             sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                             sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                             sEditId,sEditIp:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;' +
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              'S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_EDITID;S_EDITIP');
   SetFldValue(0 ,[sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                   sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                   sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                   sEditId,sEditIp]);

   if (txPutF('MD_PDIET_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 식이발행 입력2
{function HmdPdiett.InputDiet2(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                             sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                             sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                             sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;' +
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              'S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_EDITID;S_EDITIP;'+
              'S_CODE20;S_CODE21;S_CODE22;S_CODE23');
   SetFldValue(0 ,[sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                   sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                   sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                   sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn]);

   if (txPutF('MD_PDIET_I3')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;}
function HmdPdiett.InputDiet2(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                             sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                             sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                             sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn,sRiceqty:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;' +
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              'S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_EDITID;S_EDITIP;'+
              'S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24');
   SetFldValue(0 ,[sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                   sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                   sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                   sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn,sRiceqty]);

   if (txPutF('MD_PDIET_I3')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 퇴식(취소), 식이삭제
function HmdPdiett.OutDietDel(sType,sPatNo,sDietDate,sDietTime,sDietType,sMedDate,
                              sDietEndt,sDietEntm,sEditId,sEditIp:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;' +
              'S_CODE6;S_EDITID;S_EDITIP');
   SetFldValue(0 ,[sType,sPatNo,sDietDate,sDietTime,sDietType,sMedDate,
                   sDietEndt,sDietEntm,sEditId,sEditIp]);

   if (txPutF('MD_PDIET_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//(추가. 2003.2.23 이용언) 체크 diet
function Hmdpdiett.CheckDiet(patno,dietdate,diettime : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0 ,[Patno, Dietdate, Diettime]);

   if (txGetF('MD_PDIET_S2')) then
   begin
      GetFldVar('S_STRING1', sDiettype);
      GetFldVar('S_STRING2', sSlipCd);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//(추가. 2003.4.08 이용언) 체크 diet Opton
function HmdPdiett.CheckDietOption(patno,Admdate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0 ,[Patno, Admdate]);

   if (txGetF('MD_PDIET_S3')) then
   begin
      GetFldVar('S_STRING1', sKcal);
      GetFldVar('S_STRING2', sSalt);
      GetFldVar('S_STRING3', sProtein);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//(추가. 2003.5.9 이용언) 환자식+보충식 변경을 위한 임시 서비스.
function HmdPdiett.InputDiet3(sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                             sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                             sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                             sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;' +
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              'S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_EDITID;S_EDITIP;'+
              'S_CODE20;S_CODE21;S_CODE22;S_CODE23');
   SetFldValue(0 ,[sPatNo,sDietDate,sDietTime,sDietType,sMedDate,sMedDept,
                   sChaDr,sOrdDr,sSlipCd,sOrdCd,sOption,sDisinfYn,sRemark,
                   sDietEndt,sDietEntm,sWardNo,sRoomNo,sOutYn,sDietQty,
                   sType1,sEditId,sEditIp,sKcal,sSalt,sProtein,sIsolyn]);

   if (txPutF('MD_PDIET_I4')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdPdiett.OutDietDel2(sType,sPatNo,sDietDate,sDietTime,sDietType,sMedDate,
                              sDietEndt,sDietEntm,sEditId,sEditIp:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_PATNO;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;' +
              'S_CODE6;S_EDITID;S_EDITIP');
   SetFldValue(0 ,[sType,sPatNo,sDietDate,sDietTime,sDietType,sMedDate,
                   sDietEndt,sDietEntm,sEditId,sEditIp]);

   if (txPutF('MD_PDIET_I5')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdPdiett.ListDiet2(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sType1,sType2,sType3]);
   //Tuxedo Service Call
   if (txGetF('MD_PDIET_L3')) then begin
      GetFldVar('S_STRING1',  sDietdate);
      GetFldVar('S_STRING2',  sDiettime);
      GetFldVar('S_STRING3',  sDietendt);
      GetFldVar('S_STRING4',  sDietentm);
      GetFldVar('S_STRING5',  sOrdname);
      GetFldVar('S_STRING6',  sRemark);
      GetFldVar('S_STRING7',  sOption);
      GetFldVar('S_STRING8',  sDisinfYn);
      GetFldVar('S_STRING9',  sOutYn);
      GetFldVar('S_STRING10', sOrdDr);
      GetFldVar('S_STRING11', sEditDate);
      GetFldVar('S_STRING12', sOrdCd);
      GetFldVar('S_STRING13', sSlipCd);
      GetFldVar('S_STRING14', sDietQty);
      GetFldVar('S_STRING15', sKcal);
      GetFldVar('S_STRING16', sSalt);
      GetFldVar('S_STRING17', sProtein);
      GetFldVar('S_STRING18', sIsolyn);
      GetFldVar('S_STRING19', sDietrmk);
      GetFldVar('S_STRING20', sDiettype);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 추가 2003.11.30 이선규 보충식 퇴식처리
function HmdPdiett.AddEndDeit(sType1,sPatno,sEditid,sEditip : String;iRc : integer) : integer;
var
   i1 : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE7;S_TYPE8');
   SetFldValue(0 ,[sType1,sPatno,sEditid,sEditip]);
   SetFldName('S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   for i1 := 0 to iRc -1 do
   begin
      SetFldValue( i1 ,[sDietdate[i1],sDiettime[i1],sDietendt[i1],sDietentm[i1]]);
   end;
   if (txPutF('MD_PDIET_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdNractt 	병동간호Acting                                                //
////////////////////////////////////////////////////////////////////////////////

// 간호Acting기록 조회
function HmdNractt.ListActingChk(PatNo,ActDate,PreActDate,sType1:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_PATNO;S_DATE1;S_DATE2;S_DATE3');
   SetFldValue32(0,[PatNo,ActDate,PreActDate,sType1]);

//   if (txGetF('MD_NRACT_L1')) then begin                  // Tuxedo Service Call
   if (txGetF32('MD_NRACT_L5')) then begin                  // Tuxedo Service Call
      GetFldVar32('L_SEQNO1',  iOrdSeqno);
      GetFldVar32('L_CNT1',    iDosQty);
      GetFldVar32('S_ORDDATE', sOrdDate);
      GetFldVar32('S_DATE1',   sActDate);
      GetFldVar32('S_CODE1',   sActtime);
      GetFldVar32('S_CODE2',   sOrdgrp);
      GetFldVar32('S_CODE3',   sActtype);
      GetFldVar32('S_CODE4',   sExecid);
      GetFldVar32('S_NAME1',   sExecNrs);
      GetFldVar32('S_CODE5',   sRemark);
      GetFldVar32('S_CODE6',   sEditid);
      GetFldVar32('S_CODE7',   sOrdTime);
      GetFldVar32('S_CODE8',   sOrddesc1);
      GetFldVar32('S_CODE9',   sOrddesc2);
      GetFldVar32('S_CODE10',  sOrdGrpNm);
      GetFldVar32('S_CODE11',  sOrddrNm);
      GetFldVar32('S_CODE12',  sRemain);
      GetFldVar32('S_CODE13',  sBundleNo);

      Result := GetRecordCnt32('S_ORDDATE');
      txFree32;
   end;
end;

// 간호Acting기록 입력
function HmdNractt.InputActingChk(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_PATNO;S_ORDDATE;S_DATE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;' +
              'S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_EDITID;S_EDITIP;L_SEQNO1;L_CNT1');

   for i := 0 to Cnt -1 do
   begin
      SetFldValue( i ,[String(sPatNo[i]),   String(sOrdDate[i]), String(sActDate[i]),
                       String(sActTime[i]), String(sOrdgrp[i]),  String(sActtype[i]),
                       String(sActInf[i]),  String(sActInf2[i]), String(sExecid[i]),
                       String(sRemark[i]),  String(sRemain[i]),  String(sEditid[i]),
                       String(sEditip[i]),  Integer(iOrdseqno[i]),Integer(iDosqty[i])]);
   end;

   if (txPutF('MD_NRACT_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 일괄투약 대상환자 조회
function HmdNractt.ListAllActChk(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7]);
   if (txGetF32('MD_NRACT_L3')) then begin //Tuxedo Service Call
      GetFldVar32('S_PATNO',   sPatNo);
      GetFldVar32('S_PATNAME', sPatName);
      GetFldVar32('S_ROOMNO',  sRoomNo);
      GetFldVar32('L_SEQNO1',  iOrdSeqno);
      GetFldVar32('L_CNT1',    iDosQty);
      GetFldVar32('S_ORDDATE', sOrdDate);
      GetFldVar32('S_DATE1',   sActDate);
      GetFldVar32('S_CODE1',   sActtime);
      GetFldVar32('S_CODE2',   sOrdgrp);
      GetFldVar32('S_CODE3',   sActtype);
      GetFldVar32('S_CODE4',   sExecid);
      GetFldVar32('S_NAME1',   sExecNrs);
      GetFldVar32('S_CODE5',   sRemark);
      GetFldVar32('S_CODE6',   sEditid);
      GetFldVar32('S_CODE7',   sOrdTime);
      GetFldVar32('S_CODE8',   sOrddesc1);
      GetFldVar32('S_CODE9',   sOrddesc2);
      GetFldVar32('S_CODE10',  sExecid2);
      GetFldVar32('S_CODE11',  sExecNrs2);
      GetFldVar32('S_CODE12',  sRemain);
      GetFldVar32('S_CODE13',  sStartTm);
      GetFldVar32('S_CODE14',  sFinishTm);
      GetFldVar32('S_CODE15',  sBundleNo);
      GetFldVar32('S_CODE16',  sSex);
      GetFldVar32('S_CODE17',  sBirtDate);
      GetFldVar32('S_CODE18',  sQtyUnit);
      GetFldVar32('S_CODE19',  sAbbr);
      GetFldVar32('S_CODE20',  sOrdname);
      GetFldVar32('S_CODE21',  sOrdcd);
      GetFldVar32('S_CODE22',  sCount);
      // 이선규추가 03.04.17
      GetFldVar32('S_CODE23',  sMgpcc);
      GetFldVar32('S_CODE24',  sTotqty);
      GetFldVar32('S_CODE25',  sMeddept);
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 일괄투약 입력
function HmdNractt.InputAllActChk(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_PATNO;S_ORDDATE;S_DATE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;' +
              'S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_EDITID;S_EDITIP;L_SEQNO1;L_CNT1');

    for i := 0 to Cnt -1 do
    begin
       SetFldValue32( i ,[String(sPatNo[i]),   String(sOrdDate[i]), String(sActDate[i]),
                        String(sActTime[i]), String(sOrdgrp[i]),  String(sActtype[i]),
                        String(sActInf[i]),  String(sActInf2[i]), String(sExecid[i]),
                        String(sRemark[i]),  String(sRemain[i]),  String(sEditid[i]),
                        String(sEditip[i]),  Integer(iOrdseqno[i]),Integer(iDosqty[i])]);
   end;

   if (txPutF32('MD_NRACT_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree32;
   end;
end;

// 수행이력조회
function HmdNractt.MedHistory(sType1,sType2, sSeqNo:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_DATE1;S_CODE1');
   SetFldValue(0,[sType1,sType2,sSeqNo]);
   if (txGetF('MD_NRACT_L4')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1',   sActdate);
      GetFldVar('S_CODE2',   sActtime);
      GetFldVar('S_CODE3',   sActtype);
      GetFldVar('S_CODE4',   sExecNrs);
      GetFldVar('S_CODE5',   sRemain);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// NurStat = 'C'
function HmdNractt.UpNurStat(sType1,sType2,sSeqNo:String):Integer;
var
   i:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

      SetFldName('S_PATNO;S_DATE1;S_CODE1');
      SetFldValue(0,[sType1,sType2,sSeqNo]);

   if (txPutF('MD_NRACT_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdWrkLst  	병동현황조회                                                //
////////////////////////////////////////////////////////////////////////////////
function HmdWrkLst.SelWrkLst(sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_L4')) then
   begin
      GetFldVar32 ('S_PATNO',  sPatno);
      GetFldVar32 ('S_PATNAME',sPatname);
      GetFldVar32 ('S_NAME1',  sPatsex);
      GetFldVar32 ('S_NAME2',  sPatbirt);

      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);
      GetFldVar32 ('S_CODE13', sCode13);
      GetFldVar32 ('S_CODE14', sCode14);
      GetFldVar32 ('S_CODE15', sCode15);

      GetFldVar32 ('S_STRING1',  sMemo1);
      GetFldVar32 ('S_STRING2',  sMemo2);
      GetFldVar32 ('S_STRING3',  sMemo3);
      GetFldVar32 ('S_STRING4',  sMemo4);
      GetFldVar32 ('S_STRING5',  sMemo5);
      GetFldVar32 ('S_STRING6',  sMemo6);
      // 이선규 추가 (03.04.21)
      GetFldVar32 ('S_STRING7',  sMgpcc );
      GetFldVar32 ('S_STRING8',  sTotqty);
      //GetFldVar32 ('S_STRING9',  v_Method);
      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

function HmdWrkLst.SelWrkLst2(sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8:string):Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7,sType8]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_L9')) then
   begin
      GetFldVar32 ('S_PATNO',  sPatno);
      GetFldVar32 ('S_PATNAME',sPatname);
      GetFldVar32 ('S_NAME1', sPatsex);
      GetFldVar32 ('S_NAME2',sPatbirt);

      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);
      GetFldVar32 ('S_CODE13', sCode13);
      GetFldVar32 ('S_CODE14', sCode14);
      GetFldVar32 ('S_CODE15', sCode15);

      GetFldVar32 ('S_STRING1',  sMemo1);
      GetFldVar32 ('S_STRING2',  sMemo2);
      GetFldVar32 ('S_STRING3',  sMemo3);
      GetFldVar32 ('S_STRING4',  sMemo4);
      GetFldVar32 ('S_STRING5',  sMemo5);
      GetFldVar32 ('S_STRING6',  sMemo6);

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

function HmdWrkLst.CheckList(sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_CHECK_L1')) then
   begin
      GetFldVar32 ('S_PATNO',  sPatno);
      GetFldVar32 ('S_PATNAME',sPatname);
      GetFldVar32 ('S_NAME1',  sPatsex);
      GetFldVar32 ('S_NAME2',  sPatbirt);

      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);
      GetFldVar32 ('S_CODE13', sCode13);
      GetFldVar32 ('S_CODE14', sCode14);
      GetFldVar32 ('S_CODE15', sCode15);

      GetFldVar32 ('S_STRING1',  sMemo1);
      GetFldVar32 ('S_STRING2',  sMemo2);
      GetFldVar32 ('S_STRING3',  sMemo3);
      GetFldVar32 ('S_STRING4',  sMemo4);
      GetFldVar32 ('S_STRING5',  sMemo5);
      GetFldVar32 ('S_STRING6',  sMemo6);

      //조회건수 return
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdWrkLst.CheckList2(sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_CHECK_L2')) then
   begin
      GetFldVar32 ('S_PATNO',  sPatno);
      GetFldVar32 ('S_PATNAME',sPatname);
      GetFldVar32 ('S_NAME1',  sPatsex);
      GetFldVar32 ('S_NAME2',  sPatbirt);

      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);
      GetFldVar32 ('S_CODE13', sCode13);
      GetFldVar32 ('S_CODE14', sCode14);
      GetFldVar32 ('S_CODE15', sCode15);

      GetFldVar32 ('S_STRING1',  sMemo1);
      GetFldVar32 ('S_STRING2',  sMemo2);
      GetFldVar32 ('S_STRING3',  sMemo3);
      GetFldVar32 ('S_STRING4',  sMemo4);
      GetFldVar32 ('S_STRING5',  sMemo5);
      GetFldVar32 ('S_STRING6',  sMemo6);

      //조회건수 return
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 간호활동 셋 삭제
function HmdWrkLst.DelActSet(Cnt:integer):Integer;
var
   i : Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7');
   for i := 0 to Cnt - 1 do
      SetFldValue(i,[String(sCode1[i]),String(sCode2[i]),String(sCode3[i]),String(sCode4[i]),
                     String(sCode5[i]),String(sCode6[i]),String(sCode7[i])]);
   
   if (txPutF('MD_CHECK_U2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdWrkLst.GetWrkLst(sFlag,sType1,sType2,sType3,sType4,sType5,sType6:string):Integer;
var
   sService : String;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6]);

   //Tuxedo Service Call
   if sFlag = '1' then       // WorkList Type1
      sService := 'MD_WRKLST_L1'
   else if sFlag = '2' then  // WorkList Type2
      sService := 'MD_WRKLST_L2';

   if (txGetF32(sService)) then
   begin
      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);

      GetFldVar32 ('S_STRING1',  sMemo1);
      GetFldVar32 ('S_STRING2',  sMemo2);

      //조회건수 return
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 보험심사구분(BCKSTAT : '0'-의사 퇴원지시, '1'-간호사퇴원확인, 2이상 : 퇴원심사) 조회
function HmdWrkLst.SelBckStat(sType1,sType2,sType3,sType4:string):Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);

   //Tuxedo Service Call
   if (txGetF('MD_IPDLS_S1')) then
   begin
      GetFldVar ('S_CODE1',  sCode1);    // 보험심사 구분
      GetFldVar ('S_CODE2',  sCode2);    // 퇴원예정일자
      GetFldVar ('S_CODE3',  sCode3);
      GetFldVar ('S_CODE4',  sCode4);
      GetFldVar ('S_CODE5',  sCode5);
      GetFldVar ('S_CODE6',  sCode6);
      GetFldVar ('S_CODE7',  sCode7);
      GetFldVar ('S_CODE8',  sCode8);
      GetFldVar ('S_CODE9',  sCode9);

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 환자 위치변경
function HmdWrkLst.ChangePatPos(sCode1,sType1,sType2,sType3,sType4,sType5,sOutHospitalType,sOutHospitalCd:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_PATNO;S_ADMDATE;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5');

   SetFldValue(0 ,[sCode1,sType1,sType2,sType3,sType4,sType5,sOutHospitalType,sOutHospitalCd]);

   if (txPutF('MD_IPDLS_U4')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdWrkLst.SelPrnLst(sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_ORDER_L5')) then
   begin
      GetFldVar32 ('S_PATNO',  sPatno);
      GetFldVar32 ('S_PATNAME',sPatname);
      GetFldVar32 ('S_NAME1', sPatsex);
      GetFldVar32 ('S_NAME2',sPatbirt);
      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);
      GetFldVar32 ('S_CODE13', sCode13); //처방종류
      GetFldVar32 ('S_CODE14', sCode14); //처방형태
      GetFldVar32 ('S_STRING1',sMemo1);
      GetFldVar32 ('S_STRING2',sMemo2);
      GetFldVar32 ('S_STRING3',sMemo3);  //처방명
      GetFldVar32 ('S_STRING4',sAdmDate);  //입원일


      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

//(추가.2003.1.16 이용언)
//Oxymetry,Gupcopat 명단
function HmdWrklst.Actlist(sType1,sType2,sType3,sType4 : String) : Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1, sType2, sType3, sType4]);

   if (txGetF('MD_WRKLST_L3')) then
   begin
      GetFldVar('S_CODE1' , sCode1);
      GetFldVar('S_CODE2' , sCode2);
      GetFldVar('S_CODE3' , sCode3);
      GetFldVar('S_CODE4' , sCode4);
      GetFldVar('S_CODE5' , sCode5);
      GetFldVar('S_CODE6' , sCode6);
      GetFldVar('S_CODE7' , sCode7);
      GetFldVar('S_STRING1' , sMemo1);
      GetFldVar('S_STRING2' , sMemo2);

      Result := GetRecordCnt('S_CODE1');

      txFree;
   end;
end;

//(추가. 2003.04.08 이용언) 의사 Progress Note 예문 내용 조회
function HmdWrkLst.ProgTemplt(sType1,sType2,sType3,sType4 : String) : Integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);

   //Tuxedo Service Call
   if (txGetF('MD_TEMPL_L3')) then
   begin
      GetFldVar ('S_CODE1',   sCode1);
      GetFldVar ('S_CODE2',   sCode2);
      GetFldVar ('S_CODE3',   sCode3);
      GetFldVar ('S_CODE4',   sCode4);
      GetFldVar ('S_STRING1', sMemo1);
      GetFldVar ('S_STRING2', sMemo6);

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;
function HmdWrkLst.Mgpcc_gigan(sType    ,   //1: 조회일자별 약품건수 ,2: 조회일자별 약품별 사용환자조회
                               sFromdate,   // 조회 시작일자
                               sTodate  ,   // 조회 종료일자
                               sOrdcd       // 처방코드
                               : String) : integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType    ,sFromdate,sTodate  ,sOrdcd]);
   //Tuxedo Service Call
   if (txGetF32('MD_MGPCC_L1')) then
   begin
      GetFldVar32 ('S_STRING1', v_Ordcd  );
      GetFldVar32 ('S_STRING2', v_Ordname);
      GetFldVar32 ('S_STRING3', v_Totqty );
      GetFldVar32 ('S_STRING4', v_Ordate );
      GetFldVar32 ('S_STRING5', v_Patno  );
      GetFldVar32 ('S_STRING6', v_Patname);
      GetFldVar32 ('S_STRING7', v_Meddept);
      GetFldVar32 ('S_STRING8', v_Meddr  );
      GetFldVar32 ('S_STRING9', v_Wardno );
      GetFldVar32 ('S_STRING10', v_Qty    );
      GetFldVar32 ('S_STRING11', v_Cnt    );
      GetFldVar32 ('S_STRING12', v_Method );
      GetFldVar32 ('S_STRING13', v_Mgpcc  );
      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//추가 2007.11.27 김송주 복약안내 대상자 조회
function HmdWrkLst.SelWrkLst3(sType1,
                              sType2,
                              sType3 : String) : integer;
begin
   Result := -1;
   // Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType1,sType2,sType3]);
   //Tuxedo Service Call
   if (txGetF32('SD_SCONS_L1')) then
   begin
      GetFldVar32 ('S_PATNO',   v_Patno  );
      GetFldVar32 ('S_PATNAME', v_Patname);
      GetFldVar32 ('S_CODE1',   v_Code1  );
      GetFldVar32 ('S_CODE2',   v_Code2  );
      GetFldVar32 ('S_CODE3',   v_Code3  );

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdAdinft 	간호정보조사지(일반성인)                                      //
////////////////////////////////////////////////////////////////////////////////

// 간호정보조사지 기록 이력 조회
function HmdAdinft.SelAdinfHistory(sPatNo, sType1 :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer 를 받아옴.
   SetFldName('S_PATNO;S_TYPE1');
   SetFldValue(0,[sPatNo, sType1]);
   if (txGetF('MD_ADINF_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_ADMDATE',     sAdmDate);
   	GetFldVar('S_MEDDEPT',     sMedDept);
   	GetFldVar('S_CODE1' ,      sChadr);
   	GetFldVar('S_CODE2' ,      sGendr);
   	GetFldVar('S_CODE3' ,      sWardno);
   	GetFldVar('S_CODE4' ,      sRoomno);
   	GetFldVar('S_CODE5' ,      sRecnrs);
   	GetFldVar('S_CODE6' ,      sRecType);
   	GetFldVar('S_CODE7' ,      sDeptNm);
      Result := GetRecordCnt('S_ADMDATE'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 간호정보조사지 내용 조회(성인용)
function HmdAdinft.SelAdinf(sType1, sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer 를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE');
   SetFldValue(0,[sType1, sType2]);
   if (txGetF('MD_ADINF_S1')) then begin //Tuxedo Service Call
   	GetFldVar('S_MEDDEPT',     sMeddept);
   	GetFldVar('S_CODE1' ,      sChadr);
   	GetFldVar('S_CODE2' ,      sGendr);
   	GetFldVar('S_CODE3' ,      sWardno);
   	GetFldVar('S_CODE4' ,      sRoomno);
   	GetFldVar('S_CODE5' ,      sDiagcd);
   	GetFldVar('S_CODE6' ,      sDschdate);
   	GetFldVar('S_CODE7' ,      sInfdnr);
   	GetFldVar('S_CODE8' ,      sTelno);
   	GetFldVar('S_CODE9' ,      sAddress);
   	GetFldVar('S_CODE10',      sBldabo);
   	GetFldVar('S_CODE11',      sBldrh);
   	GetFldVar('S_CODE12',      sEdudgr);
   	GetFldVar('S_CODE13',      sReligion);
   	GetFldVar('S_CODE14',      sJob);
   	GetFldVar('S_CODE15',      sHabdrkyn);
   	GetFldVar('S_CODE16',      sHabdrksp);
   	GetFldVar('S_CODE17',      sHabdrkdg);
   	GetFldVar('S_CODE18',      sHabdrkct);
   	GetFldVar('S_CODE19',      sHabdrkpd);
   	GetFldVar('S_CODE20',      sHabsmkyn);
   	GetFldVar('S_CODE21',      sHabsmkdg);
   	GetFldVar('S_CODE22',      sHabsmkpd);
   	GetFldVar('S_CODE23',      sAdmpath);
   	GetFldVar('S_CODE25',      sInmthd);
   	GetFldVar('S_CODE27',      sSymptoms);
   	GetFldVar('S_CODE28',      sIndzfdt);
   	GetFldVar('S_CODE29',      sIndzldt);
   	GetFldVar('S_CODE30',      sAdmovDet);
   	GetFldVar('S_NAME1' ,      sHxdzyn);
   	GetFldVar('S_NAME2' ,      sHxdzdt);
   	GetFldVar('S_NAME3' ,      sHxopyn);
   	GetFldVar('S_NAME4' ,      sHxopdt);
   	GetFldVar('S_NAME5' ,      sAlgyn);
   	GetFldVar('S_NAME6' ,      sAlgfd);
   	GetFldVar('S_NAME7' ,      sAlgdg);
   	GetFldVar('S_NAME8' ,      sLstdrgst);
   	GetFldVar('S_NAME9' ,      sAckyn);
   	GetFldVar('S_NAME10',      sAckdt);
   	GetFldVar('S_NAME19',      sFhxfcd);
   	GetFldVar('S_NAME20',      sFhxfdet);
   	GetFldVar('S_NAME21',      sFhxmcd);
   	GetFldVar('S_NAME22',      sFhxmdet);
   	GetFldVar('S_NAME23',      sFhxbcd);
   	GetFldVar('S_NAME24',      sFhxbdet);
   	GetFldVar('S_NAME27',      sFhxetc);
   	GetFldVar('S_NAME28',      sDfrmyn);
   	GetFldVar('S_NAME29',      sDfrmdt);
   	GetFldVar('S_NAME30',      sPainyn);
   	GetFldVar('S_DATE1' ,      sPainprt);
   	GetFldVar('S_DATE2' ,      sPaindt);
   	GetFldVar('S_DATE3' ,      sAppdt);
   	GetFldVar('S_DATE4' ,      sWtyn);
   	GetFldVar('S_DATE5' ,      sWtdt);
   	GetFldVar('S_DATE6' ,      sSlptm);
   	GetFldVar('S_DATE7' ,      sSlpdso);
   	GetFldVar('S_DATE8' ,      sSlpad);
   	GetFldVar('S_DATE9' ,      sFeccnt);
   	GetFldVar('S_DATE10',      sFeccol);
   	GetFldVar('S_DATE11',      sFecchr);
   	GetFldVar('S_DATE12',      sFecchrdt);
   	GetFldVar('S_DATE13',      sUrcnt);
   	GetFldVar('S_DATE14',      sUrqnt);
   	GetFldVar('S_DATE15',      sUrcol);
   	GetFldVar('S_DATE16',      sUrflv);
   	GetFldVar('S_DATE17',      sUrchr);
   	GetFldVar('S_DATE18',      sSknunyn);
   	GetFldVar('S_DATE19',      sSknunpt);
   	GetFldVar('S_DATE20',      sSknundg);
   	GetFldVar('S_DATE21',      sSkncunyn);
   	GetFldVar('S_DATE22',      sSkncunpr);
   	GetFldVar('S_DATE23',      sSkncundg);
   	GetFldVar('S_DATE24',      sDietyn);
   	GetFldVar('S_DATE25',      sDietst);
   	GetFldVar('S_DATE26',      sCircyn);
   	GetFldVar('S_DATE27',      sCircst);
   	GetFldVar('S_DATE28',      sNeoyn);
   	GetFldVar('S_DATE29',      sNeoprt);
   	GetFldVar('S_DATE30',      sNeotrcyn);
   	GetFldVar('S_TIME1' ,      sRespyn);
   	GetFldVar('S_TIME2' ,      sRespst);
   	GetFldVar('S_TIME3' ,      sPupilsz);
   	GetFldVar('S_TIME4' ,      sPupilszl);
   	GetFldVar('S_TIME5' ,      sPupilszr);
   	GetFldVar('S_TIME6' ,      sPuprefl);
   	GetFldVar('S_TIME7' ,      sPuprefr);
   	GetFldVar('S_TIME8' ,      sEyeyn);
   	GetFldVar('S_TIME9' ,      sEyel);
   	GetFldVar('S_TIME10',      sEyer);
   	GetFldVar('S_TIME11',      sEaryn);
   	GetFldVar('S_TIME12',      sEarl);
   	GetFldVar('S_TIME13',      sEarr);
   	GetFldVar('S_TIME14',      sEarld);
   	GetFldVar('S_TIME15',      sEarrd);
   	GetFldVar('S_TIME16',      sNemust);
   	GetFldVar('S_TIME17',      sNemupt);
   	GetFldVar('S_TIME18',      sParyn);
   	GetFldVar('S_TIME19',      sPardnd);
   	GetFldVar('S_TIME20',      sParupd);
   	GetFldVar('S_TIME21',      sMan);
   	GetFldVar('S_TIME22',      sDtime);
   	GetFldVar('S_TIME23',      sPlc);
   	GetFldVar('S_TIME24',      sConsstat);
   	GetFldVar('S_TIME25',      sAchrxn);
   	GetFldVar('S_TIME26',      sComm);
   	GetFldVar('S_TIME27',      sFeelstat);
   	GetFldVar('S_TIME28',      sEmostsd);
   	GetFldVar('S_TIME29',      sActfr);
   	GetFldVar('S_TIME30',      sAuxyn);
   	GetFldVar('S_DATETIME1' ,  sAuxst);
   	GetFldVar('S_DATETIME2' ,  sAuxdt);
   	GetFldVar('S_DATETIME3' ,  sInedu1);
   	GetFldVar('S_DATETIME4' ,  sInedu2);
   	GetFldVar('S_DATETIME5' ,  sInedu3);
   	GetFldVar('S_DATETIME6' ,  sInedu4);
   	GetFldVar('S_DATETIME7' ,  sInedu5);
   	GetFldVar('S_DATETIME8' ,  sInedu6);
   	GetFldVar('S_DATETIME9' ,  sInedu7);
   	GetFldVar('S_DATETIME10',  sInedu8);
   	GetFldVar('S_DATETIME11',  sInedu9);
   	GetFldVar('S_DATETIME12',  sNreduetc);
   	GetFldVar('S_DATETIME22',  sEditid);
   	GetFldVar('S_DATETIME23',  sEditip);
     	GetFldVar('S_DATETIME19',  sTelno1);
   	GetFldVar('S_DATETIME20',  sTelno2);
	   GetFldVar('S_DATETIME21',  sRecnrs);
      GetFldVar('S_DATETIME22',  sFecday);
	   GetFldVar('S_DATETIME23',  sUrday);
      GetFldVar('S_DATETIME24',  sHeight);       // 키
      GetFldVar('S_DATETIME25',  sWeight);       // 몸무게

      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 간호정보조사지 내용 입력(성인용)
function HmdAdinft.InsertAdinf(sPatno      ,tAdmdate     ,sMeddept     ,sChadr       ,sGendr       ,
                              sWardno      ,sRoomno      ,sDiagcd      ,tDschdate    ,sInfdnr      ,
                              sTelno       ,sAddress     ,sBldabo      ,sBldrh       ,sEdudgr      ,
                              sReligion    ,sJob         ,sHabdrkyn    ,sHabdrksp    ,sHabdrkdg    ,
                              sHabdrkct    ,sHabdrkpd    ,sHabsmkyn    ,sHabsmkdg    ,sHabsmkpd    ,
                              sAdmpath     ,sInmthd      ,sSymptoms    ,sIndzfdt     ,sIndzldt     ,
                              sAdmreson    ,sHxdzyn      ,sHxdzdt      ,sHxopyn      ,sHxopdt      ,
                              sAlgyn       ,sAlgfd       ,sAlgdg       ,sLstdrgst    ,sAckyn       ,
                              sAckdt       ,sFhxfcd      ,sFhxfdet     ,sFhxmcd      ,sFhxmdet     ,
                              sFhxbcd      ,sFhxbdet     ,sFhxetc      ,sDfrmyn      ,sDfrmdt      ,
                              sPainyn      ,sPainprt     ,sPaindt      ,sAppdt       ,sWtyn        ,
                              sWtdt        ,sSlptm       ,sSlpdso      ,sSlpad       ,sFeccnt      ,
                              sFeccol      ,sFecchr      ,sFecchrdt    ,sUrcnt       ,sUrqnt       ,
                              sUrcol       ,sUrflv       ,sUrchr       ,sActfr       ,sSknunyn     ,
                              sSknunpt     ,sSknundg     ,sSkncunyn    ,sSkncunpr    ,sSkncundg    ,
                              sDietyn      ,sDietst      ,sCircyn      ,sCircst      ,sNeoyn       ,
                              sNeoprt      ,sNeotrcyn    ,sRespyn      ,sRespst      ,sPupilsz     ,
                              sPupilszl    ,sPupilszr    ,sPuprefl     ,sPuprefr     ,sEyeyn       ,
                              sEyel        ,sEyer        ,sEaryn       ,sEarl        ,sEarr        ,
                              sEarld       ,sEarrd       ,sNemust      ,sNemupt      ,sParyn       ,
                              sPardnd      ,sParupd      ,sMan         ,sDtime       ,sPlc         ,
                              sConsstat    ,sAchrxn      ,sComm        ,sFeelstat    ,sEmostsd     ,
                              sAuxyn       ,sAuxst       ,sAuxdt       ,sInedu1      ,sInedu2      ,
                              sInedu3      ,sInedu4      ,sInedu5      ,sInedu6      ,sInedu7      ,
                              sInedu8      ,sInedu9      ,sNreduetc    ,sEditid      ,sEditip      ,
                              sTelno1      ,sTelno2      ,sRecnrs      ,sFecday      ,sUrday       ,
                              sHeight      ,sWeight:String):Integer;

begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName( 'S_PATNO;S_ADMDATE;S_MEDDEPT;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
               'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;'+
               'S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;'+
               'S_CODE21;S_CODE22;S_CODE23;S_CODE25;S_CODE27;S_CODE28;S_CODE29;'+
               'S_CODE30;S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;S_NAME6;S_NAME7;'+
               'S_NAME8;S_NAME9;S_NAME10;S_NAME19;S_NAME20;S_NAME21;S_NAME22;'+
               'S_NAME23;S_NAME24;S_NAME27;S_NAME28;S_NAME29;S_NAME30;S_DATE1;'+
               'S_DATE2;S_DATE3;S_DATE4;S_DATE5;S_DATE6;S_DATE7;S_DATE8;S_DATE9;'+
               'S_DATE10;S_DATE11;S_DATE12;S_DATE13;S_DATE14;S_DATE15;S_DATE16;'+
               'S_DATE17;S_TIME29;S_DATE18;S_DATE19;S_DATE20;S_DATE21;S_DATE22;S_DATE23;'+
               'S_DATE24;S_DATE25;S_DATE26;S_DATE27;S_DATE28;S_DATE29;S_DATE30;'+
               'S_TIME1;S_TIME2;S_TIME3;S_TIME4;S_TIME5;S_TIME6;S_TIME7;S_TIME8;'+
               'S_TIME9;S_TIME10;S_TIME11;S_TIME12;S_TIME13;S_TIME14;S_TIME15;'+
               'S_TIME16;S_TIME17;S_TIME18;S_TIME19;S_TIME20;S_TIME21;S_TIME22;'+
               'S_TIME23;S_TIME24;S_TIME25;S_TIME26;S_TIME27;S_TIME28;'+
               'S_TIME30;S_DATETIME1;S_DATETIME2;S_DATETIME3;S_DATETIME4;S_DATETIME5;'+
               'S_DATETIME6;S_DATETIME7;S_DATETIME8;S_DATETIME9;S_DATETIME10;S_DATETIME11;'+
               'S_DATETIME12;S_DATETIME13;S_DATETIME14;S_DATETIME15;S_DATETIME16;'+
               'S_DATETIME17;S_DATETIME18;S_DATETIME19;S_DATETIME20;S_DATETIME21');
   SetFldValue(0,   [sPatno       ,tAdmdate     ,sMeddept     ,sChadr       ,sGendr       ,sWardno      ,
                     sRoomno      ,sDiagcd      ,tDschdate    ,sInfdnr      ,sTelno       ,sAddress     ,
                     sBldabo      ,sBldrh       ,sEdudgr      ,sReligion    ,sJob         ,sHabdrkyn    ,
                     sHabdrksp    ,sHabdrkdg    ,sHabdrkct    ,sHabdrkpd    ,sHabsmkyn    ,sHabsmkdg    ,
                     sHabsmkpd    ,sAdmpath     ,sInmthd      ,sSymptoms    ,sIndzfdt     ,sIndzldt     ,
                     sAdmreson    ,sHxdzyn      ,sHxdzdt      ,sHxopyn      ,sHxopdt      ,sAlgyn       ,
                     sAlgfd       ,sAlgdg       ,sLstdrgst    ,sAckyn       ,sAckdt       ,sFhxfcd      ,
                     sFhxfdet     ,sFhxmcd      ,sFhxmdet     ,sFhxbcd      ,sFhxbdet     ,sFhxetc      ,
                     sDfrmyn      ,sDfrmdt      ,sPainyn      ,sPainprt     ,sPaindt      ,sAppdt       ,
                     sWtyn        ,sWtdt        ,sSlptm       ,sSlpdso      ,sSlpad       ,sFeccnt      ,
                     sFeccol      ,sFecchr      ,sFecchrdt    ,sUrcnt       ,sUrqnt       ,sUrcol       ,
                     sUrflv       ,sUrchr       ,sActfr       ,sSknunyn     ,sSknunpt     ,sSknundg     ,
                     sSkncunyn    ,sSkncunpr    ,sSkncundg    ,sDietyn      ,sDietst      ,sCircyn      ,
                     sCircst      ,sNeoyn       ,sNeoprt      ,sNeotrcyn    ,sRespyn      ,sRespst      ,
                     sPupilsz     ,sPupilszl    ,sPupilszr    ,sPuprefl     ,sPuprefr     ,sEyeyn       ,
                     sEyel        ,sEyer        ,sEaryn       ,sEarl        ,sEarr        ,sEarld       ,
                     sEarrd       ,sNemust      ,sNemupt      ,sParyn       ,sPardnd      ,sParupd      ,
                     sMan         ,sDtime       ,sPlc         ,sConsstat    ,sAchrxn      ,sComm        ,
                     sFeelstat    ,sEmostsd     ,sAuxyn       ,sAuxst       ,sAuxdt       ,sInedu1      ,
                     sInedu2      ,sInedu3      ,sInedu4      ,sInedu5      ,sInedu6      ,sInedu7      ,
                     sInedu8      ,sInedu9      ,sNreduetc    ,sEditid      ,sEditip      ,sTelno1      ,
                     sTelno2      ,sRecnrs      ,sFecday      ,sUrday       ,sHeight      ,sWeight]);
   if (txPutF('MD_ADINF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 신생아 간호정보조사지
function HmdAdinft.SelMdnbinft(sPatNo, sAdmDate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer 를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE');
   SetFldValue(0,[sPatNo, sAdmDate]);
   if (txGetF('MD_NBINF_S1')) then begin //Tuxedo Service Call
		GetFldVar ('S_CODE1',    sMedDept);  // sMedDept);
		GetFldVar ('S_CODE2',    sChaDr);    // sChaDr);
		GetFldVar ('S_CODE3',    sGenDr);    // sGenDr);
		GetFldVar ('S_CODE4',    sWardNo);   // sWardNo);
		GetFldVar ('S_CODE5',    sRoomNo);   // sRoomNo);
		GetFldVar ('S_CODE6',    sDiagCd);   // sDiagCd);
		GetFldVar ('S_CODE7',    sDschDate); // sBorndate);
		GetFldVar ('S_CODE8',    sInfDnr);   // sDgpwks);
		GetFldVar ('S_CODE9',    sTelNo);    // sDgpday);
		GetFldVar ('S_CODE10',   sAddress);  // sWeight);
		GetFldVar ('S_CODE11',   sBldAbo);   // sSex);
		GetFldVar ('S_CODE12',   sBldRh);    // sDeltype);
		GetFldVar ('S_CODE13',   sEdudGr);   // sApgahr1);
		GetFldVar ('S_CODE14',   sReligion); // sApgahr5);
		GetFldVar ('S_CODE15',   sJob);      // sParity);
		GetFldVar ('S_CODE16',   sHabdrkYn); // sDelmark);
		GetFldVar ('S_CODE17',   sHabdrkSp); // sDelmark1);
		GetFldVar ('S_CODE18',   sHabdrkDg); // sDelmark2);
		GetFldVar ('S_CODE19',   sHabdrkCt); // sDelmark3);
		GetFldVar ('S_CODE20',   sHabdrkPd); // sDelmark4);
		GetFldVar ('S_CODE21',   sHabsmkYn); // sDelmark5);
		GetFldVar ('S_CODE22',   sHabsmkDg); // sRemark);
		GetFldVar ('S_CODE23',   sHabsmkPd); // sHyn);
		GetFldVar ('S_CODE24',   sAdmPath);  // sStlcnt);
		GetFldVar ('S_CODE25',   sInMthd);   // sStlcol);
		GetFldVar ('S_CODE26',   sSymptoms); // sOxygenyn);
		GetFldVar ('S_CODE27',   sIndzfDt);  // sOxygen);
		GetFldVar ('S_CODE28',   sIndzlDt);  // sTempkind);
		GetFldVar ('S_CODE29',   sAdmovDet); // sBodytemp);
		GetFldVar ('S_CODE30',   sHxdzYn);   // sHrtbt);
		GetFldVar ('S_STRING1',  sHxdzDt);   // sResp);
		GetFldVar ('S_STRING2',  sHxopYn);   // sHeight);
		GetFldVar ('S_STRING3',  sHxopDt);   // sHeadsize);
		GetFldVar ('S_STRING4',  sAlgYn);    // sChstsize);
		GetFldVar ('S_STRING5',  sAlgFd);    // sBodysize);
		GetFldVar ('S_STRING6',  sAlgDg);    // sNabelyn);
		GetFldVar ('S_STRING7',  sLstdrGst); // sEyeyn);
		GetFldVar ('S_STRING8',  sAckYn);    // sVitamin);
		GetFldVar ('S_STRING9',  sAckDt);    // sVaccine);
		GetFldVar ('S_STRING10', sFhxfCd);   // sHbct);
		GetFldVar ('S_STRING11', sFhxfDet);  // sCryrate);
		GetFldVar ('S_STRING12', sFhxmCd);   // sRespyn);
		GetFldVar ('S_STRING13', sFhxmDet);  // sRespetc);
		GetFldVar ('S_STRING14', sFhxbCd);   // sCircyn);
		GetFldVar ('S_STRING15', sFhxbDet);  // sCircetc);
		GetFldVar ('S_STRING16', sFhxEtc);   // sSknunyn);
		GetFldVar ('S_STRING17', sDfrmYn);   // sSknunst);
		GetFldVar ('S_STRING18', sDfrmDt);   // sHeadfr);
		GetFldVar ('S_STRING19', sPainYn);   // sHeadair);
		GetFldVar ('S_STRING20', sPainPrt);  // sHeadetc);
		GetFldVar ('S_STRING21', sPainDt);   // sFaceyn);
		GetFldVar ('S_STRING22', sAppDt);    // sFaceetc);
		GetFldVar ('S_STRING23', sWtYn);     // sNabelvs1);
		GetFldVar ('S_STRING24', sWtDt);     // sNabelvs2);
		GetFldVar ('S_STRING25', sSlpTm);    // sBloodyn);
		GetFldVar ('S_STRING26', sSlpDso);   // sUriyn);
		GetFldVar ('S_STRING27', sSlpAd);    // sUrietc);
		GetFldVar ('S_STRING28', sFecCnt);   // sLimyn);
		GetFldVar ('S_STRING29', sFecCol);   // sLimst1);
		GetFldVar ('S_STRING30', sFecChr);   // sLimst2);
		GetFldVar ('S_NAME1',    sFecChrdt); // sLimstlr);
		GetFldVar ('S_NAME2',    sUrCnt);    // sDiaref);
		GetFldVar ('S_NAME3',    sUrQnt);    // sDiarefas);
		GetFldVar ('S_NAME4',    sUrCol);    // sCatref);
		GetFldVar ('S_NAME5',    sUrFlv);    // sCatrefas);
		GetFldVar ('S_NAME6',    sUrChr);    // sPumref);
		GetFldVar ('S_NAME7',    sSknunYn);  // sLactref);
		GetFldVar ('S_NAME8',    sSknunPt);  // sDfrmetc);
		GetFldVar ('S_NAME9',    sSknunDg);  // sNurse);
      GetFldVar ('S_NAME10',   sSkncunYn); // sAdmTime);

      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

   // 간호정보조사지 내용 입력(신생아)
function HmdAdinft.InsMdNbinft(sPatNo,    sAdmDate,  sMedDept,  sAdmTime,
                               sChaDr,    sGenDr,    sWardNo,   sRoomNo,
                               sDiagCd,   sBornDate, sDgpWks,   sDgpDay,
                               sWeight,   sSex,      sDelType,  sApgahr1,
                               sApgahr5,  sParity,   sDelMark,  sDelMark1,
                               sDelMark2, sDelMark3, sDelMark4, sDelMark5,
                               sRemark,   sHyn,      sStlCnt,   sStlCol,
                               sOxygenYN, sOxygen,   sTempKind, sBodyTemp,
                               sHrtbt,    sResp,     sHeight,   sHeadSize,
                               sChstSize, sBodySize, sNabelYn,  sEyeYn,
                               sVitamin,  sVaccine,  sHbct,     sCryRate,
                               sRespYn,   sRespEtc,  sCircYn,   sCircEtc,
                               sSknunYn,  sSknunSt,  sHeadFr,   sHeadAir,
                               sHeadEtc,  sFaceYn,   sFaceEtc,  sNabelVs1,
                               sNabelVs2, sBloodYn,  sUriyn,    sUriEtc,
                               sLimYn,    sLimSt1,   sLimSt2,   sLimStLR,
                               sDiaref,   sDiarefAs, sCatref,   sCatrefAs,
                               sPumref,   sLactref,  sDfrmetc,  sNurse,
                               sEditid,   sEditip:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName( 'S_PATNO;S_ADMDATE;S_MEDDEPT;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
               'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;'+
               'S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;'+
               'S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;S_CODE27;S_CODE28;S_CODE29;'+
               'S_CODE30;S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;S_NAME6;S_NAME7;'+
               'S_NAME8;S_NAME9;S_NAME10;S_NAME11;S_NAME12;S_NAME13;S_NAME14;S_NAME15;'+
               'S_NAME16;S_NAME17;S_NAME18;S_NAME19;S_NAME20;S_NAME21;S_NAME22;'+
               'S_NAME23;S_NAME24;S_NAME25;S_NAME26;S_NAME27;S_NAME28;S_NAME29;S_NAME30;'+
               'S_DATE1;S_DATE2;S_DATE3;S_DATE4;S_DATE5;S_DATE6;S_DATE7;S_DATE8;S_DATE9;'+
               'S_DATE10;S_DATE11');
   SetFldValue(0,   [sPatNo,    sAdmDate,  sMedDept,  sAdmTime,  sChaDr,
                     sGenDr,    sWardNo,   sRoomNo,   sDiagCd,   sBornDate,
                     sDgpWks,   sDgpDay,   sWeight,   sSex,      sDelType,
                     sApgahr1,  sApgahr5,  sParity,   sDelMark,  sDelMark1,
                     sDelMark2, sDelMark3, sDelMark4, sDelMark5, sRemark,
                     sHyn,      sStlCnt,   sStlCol,   sOxygenYN, sOxygen,
                     sTempKind, sBodyTemp, sHrtbt,    sResp,     sHeight,
                     sHeadSize, sChstSize, sBodySize, sNabelYn,  sEyeYn,
                     sVitamin,  sVaccine,  sHbct,     sCryRate,  sRespYn,
                     sRespEtc,  sCircYn,   sCircEtc,  sSknunYn,  sSknunSt,
                     sHeadFr,   sHeadAir,  sHeadEtc,  sFaceYn,   sFaceEtc,
                     sNabelVs1, sNabelVs2, sBloodYn,  sUriyn,    sUriEtc,
                     sLimYn,    sLimSt1,   sLimSt2,   sLimStLR,  sDiaref,
                     sDiarefAs, sCatref,   sCatrefAs, sPumref,   sLactref,
                     sDfrmetc,  sNurse,    sEditid,   sEditip]);
   if (txPutF('MD_NBINF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPdinft 	간호정보조사지(소아)                                          //
////////////////////////////////////////////////////////////////////////////////

// 간호정보조사지 내용 조회(소아용)
function HmdPdinft.SelPdinf(sType1,sType2:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_PDINF_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_MEDDEPT',sMeddept);
		GetFldVar('S_STRING1', sChadr);
      GetFldVar('S_CODE1' , sGendr);
		GetFldVar('S_CODE2' , sWardno);
		GetFldVar('S_CODE3' , sRoomno);
		GetFldVar('S_CODE4' , sInfdnr);
		GetFldVar('S_CODE5' , sRecnrs);
		GetFldVar('S_CODE6' , sDiagname);
		GetFldVar('S_CODE7' , sAddress);
		GetFldVar('S_CODE8' , sTelno1);
		GetFldVar('S_CODE9' , sTelno2);
		GetFldVar('S_CODE10', sReligion);
		GetFldVar('S_CODE11', sDelvtype);
		GetFldVar('S_CODE12', sborndc);
		GetFldVar('S_CODE13', sBornw);
		GetFldVar('S_CODE14', sNoww);
		GetFldVar('S_CODE15', sHeight);
		GetFldVar('S_CODE16', sAdmpath);
		GetFldVar('S_CODE17', sSymptom);
		GetFldVar('S_CODE18', sIndzfdt);
		GetFldVar('S_CODE19', sAdmreson);
		GetFldVar('S_CODE20', sLstdrgst);
		GetFldVar('S_CODE21', sHxdzyn);
		GetFldVar('S_CODE22', sAlgyn);
		GetFldVar('S_CODE23', sFhxf);
      GetFldVar('S_DATE15', sFhxetc);
		GetFldVar('S_CODE25', sBodytemp);
		GetFldVar('S_CODE27', sHrtbt);
		GetFldVar('S_CODE28', sResp);
		GetFldVar('S_CODE29', sBldpre);
		GetFldVar('S_CODE30', sRespyn);
		GetFldVar('S_NAME1' , sRespst);
		GetFldVar('S_NAME2' , sDietyn);
		GetFldVar('S_NAME3' , sDietst);
		GetFldVar('S_NAME4' , sCircyn);
		GetFldVar('S_NAME5' , sCircst);
		GetFldVar('S_NAME6' , sPainyn);
      GetFldVar('S_DATE16', sPain);
		GetFldVar('S_NAME7' , sPaindt);
		GetFldVar('S_NAME8' , sNeoyn);
		GetFldVar('S_NAME9' , sNeoprt);
		GetFldVar('S_NAME10', sNeotrc);
      GetFldVar('S_DATE17', sSkinyn);
		GetFldVar('S_NAME19', sSknunpt);
		GetFldVar('S_NAME20', sTeeth);
		GetFldVar('S_NAME21', sTeethetc);
		GetFldVar('S_NAME22', sGlsyn);
		GetFldVar('S_NAME23', sGls);
		GetFldVar('S_NAME24', sGlsetc);
		GetFldVar('S_NAME27', sEaryn);
		GetFldVar('S_NAME28', sEarAid);
		GetFldVar('S_NAME29', sEaretc);
		GetFldVar('S_NAME30', sFeccnt);
      GetFldVar('S_DATE18', sFecday);
		GetFldVar('S_DATE1' , sFecchr);
		GetFldVar('S_DATE2' , sUrcnt);
      GetFldVar('S_DATE19', sUrday);
		GetFldVar('S_DATE3' , sUrchr);
		GetFldVar('S_DATE4' , sDiet);
		GetFldVar('S_DATE5' , sConsstat);
		GetFldVar('S_DATE6' , sComm);
		GetFldVar('S_DATE7' , sFeelstat);
		GetFldVar('S_DATE8' , sActfr);
      GetFldVar('S_DATE20', sPre);
      GetFldVar('S_DATE21', sPrecnt);
		GetFldVar('S_DATE9' , sPreetc);
		GetFldVar('S_DATE10', sGrtyn);
		GetFldVar('S_DATE11', sGrtabnl);
		GetFldVar('S_DATE12', sDvpstyn);
		GetFldVar('S_DATE13', sDvpabnl);
		GetFldVar('S_DATE14', sEdu);
      GetFldVar('S_DATE15', sPrecnt2);
		GetFldVar('S_DATE16', sPrecnt3);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;

end;
{
// 간호정보조사지 내용 입력(소아용)
function HmdPdinft.InsPdinfdll(sPatno,       sAdmdate   ,      sMeddept   ,      sChadr     ,  sGendr,
                            sWardno,      sRoomno    ,      sInfdnr    ,      sRecnrs    ,
                            sDiagname,    sAddress   ,      sTelno1    ,      sTelno2    ,
                            sReligion,    sDelvtype  ,      sborndc    ,      sBornw     ,
                            sNoww  ,      sHeight    ,      sAdmpath   ,      sSymptom   ,
                            sIndzfdt,     sAdmreson  ,      sLstdrgst  ,      sHxdzyn    ,
                            sAlgyn,       sFhxf      ,      sFhxetc    ,      sBodytemp  ,
                            sHrtbt ,      sResp      ,      sBldpre    ,      sRespyn    ,
                            sRespst,      sDietyn    ,      sDietst    ,      sCircyn    ,
                            sCircst,      sPainyn    ,      sPain      ,      sPaindt    ,
                            sNeoyn ,      sNeoprt    ,      sNeotrc    ,      sSkinyn    ,
                            sSknunpt,     sTeeth     ,      sTeethetc  ,      sGlsyn     ,
                            sGls   ,      sGlsetc    ,      sEaryn     ,      sEarAid    ,
                            sEaretc,      sFeccnt    ,      sFecday    ,      sFecchr    ,
                            sUrcnt ,      sUrday     ,      sUrchr     ,      sDiet      ,
                            sConsstat,    sComm      ,      sFeelstat  ,      sActfr     ,
                            sPre   ,      sPrecnt    ,      sPreetc    ,      sGrtyn     ,
                            sGrtabnl,     sDvpstyn   ,      sDvpabnl   ,      sEdu       ,
                            sEditid,      sEditip    ,      sPrecnt2   ,      sPrecnt3:String):Integer;

begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName( 'S_PATNO;S_ADMDATE;S_MEDDEPT;S_STRING1;S_CODE1;S_CODE2;S_CODE3;'+
               'S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;'+
               'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;'+
               'S_CODE17;S_CODE18;S_CODE19;S_CODE20;S_CODE21;S_CODE22;'+
               'S_CODE23;S_CODE25;S_CODE27;S_CODE28;S_CODE29;S_CODE30;'+
               'S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;S_NAME6;S_NAME7;'+
               'S_NAME8;S_NAME9;S_NAME10;S_NAME19;S_NAME20;S_NAME21;S_NAME22;'+
               'S_NAME23;S_NAME24;S_NAME27;S_NAME28;S_NAME29;S_NAME30;S_DATE1;'+
               'S_DATE2;S_DATE3;S_DATE4;S_DATE5;S_DATE6;S_DATE7;S_DATE8;'+
               'S_DATE9;S_DATE10;S_DATE11;S_DATE12;S_DATE13;S_DATE14;S_DATE15;'+
               'S_DATE16;S_DATE17;S_TIME29;S_DATE18;S_DATE19;S_DATE20;S_DATE21;'+
               'S_DATE22;S_DATE23;S_DATE24;');
   SetFldValue(0,   [sPatno,       sAdmdate   ,      sMeddept   ,      sChadr     ,  sGendr,
                     sWardno,      sRoomno    ,      sInfdnr    ,      sRecnrs    ,
                     sDiagname,    sAddress   ,      sTelno1    ,      sTelno2    ,
                     sReligion,    sDelvtype  ,      sborndc    ,      sBornw     ,
                     sNoww  ,      sHeight    ,      sAdmpath   ,      sSymptom   ,
                     sIndzfdt,     sAdmreson  ,      sLstdrgst  ,      sHxdzyn    ,
                     sAlgyn,       sFhxf      ,      sFhxetc    ,      sBodytemp  ,
                     sHrtbt ,      sResp      ,      sBldpre    ,      sRespyn    ,
                     sRespst,      sDietyn    ,      sDietst    ,      sCircyn    ,
                     sCircst,      sPainyn    ,      sPain      ,      sPaindt    ,
                     sNeoyn ,      sNeoprt    ,      sNeotrc    ,      sSkinyn    ,
                     sSknunpt,     sTeeth     ,      sTeethetc  ,      sGlsyn     ,
                     sGls   ,      sGlsetc    ,      sEaryn     ,      sEarAid    ,
                     sEaretc,      sFeccnt    ,      sFecday    ,      sFecchr    ,
                     sUrcnt ,      sUrday     ,      sUrchr     ,      sDiet      ,
                     sConsstat,    sComm      ,      sFeelstat  ,      sActfr     ,
                     sPre   ,      sPrecnt    ,      sPreetc    ,      sGrtyn     ,
                     sGrtabnl,     sDvpstyn   ,      sDvpabnl   ,      sEdu       ,
                     sEditid,      sEditip    ,      sPrecnt2   ,      sPrecnt3]);
   if (txPutF('MD_PDINF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;
}

////////////////////////////////////////////////////////////////////////////////
//  HmdBdinft 	신생아 분만기록지
////////////////////////////////////////////////////////////////////////////////

// 분반대장 내용조회
function HmdBdinft.MultiSelBdinf(sSaveFlag,sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sSaveFlag,sType1,sType2,sType3] );
   if (txGetF('MD_BDINF_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1',  sInstype);
      GetFldVar('S_CODE2',  sBorndate);
      GetFldVar('S_CODE3',  sAge);
      GetFldVar('S_CODE4',  sPatno);
      GetFldVar('S_CODE5',  sBphigh);
      GetFldVar('S_CODE6',  sBplow);
      GetFldVar('S_CODE7',  sLmp);
      GetFldVar('S_CODE8',  sEdc);
      GetFldVar('S_CODE9',  sDgpwks);
      GetFldVar('S_CODE10', sDgpday);
      GetFldVar('S_CODE11', sParityF);
      GetFldVar('S_CODE12', sParityP);
      GetFldVar('S_CODE13', sParityA);
      GetFldVar('S_CODE14', sParityL);
      GetFldVar('S_CODE15', sBorntime);
      GetFldVar('S_CODE16', sPlatime);
      GetFldVar('S_CODE17', sDeltype);
      GetFldVar('S_CODE18', sPosition);
      GetFldVar('S_CODE19', sBabysex);
      GetFldVar('S_CODE20', sLiveyn);
      GetFldVar('S_CODE21', sBabywgt);
      GetFldVar('S_CODE22', sAddress);
      GetFldVar('S_CODE23', sDelvnur);
      GetFldVar('S_CODE24', sDelvdr);
      GetFldVar('S_CODE25', sPatname);
      GetFldVar('S_CODE26', sAdmDate);
      GetFldVar('S_CODE27', sLmpNo);
      GetFldVar('S_CODE28', sEdcNo);
      GetFldVar('S_CODE29', sMaturity);
      GetFldVar('S_CODE30', sMeddept);

      GetFldVar('S_STRING1', sSex);
      GetFldVar('S_STRING2', sGendr);
      GetFldVar('S_STRING3', sWardNo);
      GetFldVar('S_STRING4', sRoomNo);
      GetFldVar('S_STRING5', sReason);
      GetFldVar('S_STRING6', sPr);
      GetFldVar('S_STRING7', sHusname);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 신생아 분만기록 조회                                //    SONGLIM_THOMA 수정
function Hmdbdinft.SelectBdinf(sType1,sType2:String) : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_BDINF_S1')) then begin //Tuxedo Service Call

      GetFldVar('S_MEDDEPT',  sMeddept);
      GetFldVar('S_CODE1',    sRoomno);
      GetFldVar('S_CODE2',    sAge);
      GetFldVar('S_CODE3',    sSex);
      GetFldVar('S_CODE4',    sTwinseq);
      GetFldVar('S_CODE5',    sAddress);
      GetFldVar('S_CODE6',    sTelno1);
      GetFldVar('S_CODE7',    sTelno2);
      GetFldVar('S_CODE8',    sMarryyn);
      GetFldVar('S_CODE9',    sBphigh);
      GetFldVar('S_CODE10',   sBplow);
      GetFldVar('S_CODE11',   sPulse);
      GetFldVar('S_CODE12',   sBodytemp);
      GetFldVar('S_CODE13',   sFht);
      GetFldVar('S_CODE14',   sReligion);
      GetFldVar('S_CODE15',   sHusrel);
      GetFldVar('S_CODE16',   sHxdz);
      GetFldVar('S_CODE17',   sPrewgt);
      GetFldVar('S_CODE18',   sAfterwgt);
      GetFldVar('S_CODE19',   sHeight);
      GetFldVar('S_CODE20',   sBldabo);
      GetFldVar('S_CODE21',   sBldrh);
      GetFldVar('S_CODE22',   sHusbldabo);
      GetFldVar('S_CODE23',   sHusbldrh);
      GetFldVar('S_CODE24',   sLmp);
      GetFldVar('S_CODE25',   sEdc);
      GetFldVar('S_CODE26',   sDgpwks);
      GetFldVar('S_CODE27',   sDgpday);
      GetFldVar('S_CODE28',   sParityf);
      GetFldVar('S_CODE29',   sParityp);
      GetFldVar('S_CODE30',   sParitya);
      GetFldVar('S_NAME1',    sParityl);
      GetFldVar('S_NAME2',    sPrgsick);
      GetFldVar('S_NAME3',    sAmnioyn);
      GetFldVar('S_NAME4',    sXrayyn);
      GetFldVar('S_NAME5',    sXrayst);
      GetFldVar('S_NAME6',    sPrgdrgyn);
      GetFldVar('S_NAME7',    sPrgdrgst);
      GetFldVar('S_NAME8',    sPrgsmkyn);
      GetFldVar('S_NAME9',    sPrgsmkdg);
      GetFldVar('S_NAME10',   sPrgdrkyn);
      GetFldVar('S_NAME11',   sPrgdrkdg);
      GetFldVar('S_NAME12',   sAlgyn);
      GetFldVar('S_NAME13',   sAlginfo);
      GetFldVar('S_NAME14',   sDimthdyn);
      GetFldVar('S_NAME15',   sDimthd);
      GetFldVar('S_NAME16',   sOrsvtm);
      GetFldVar('S_NAME17',   sDewyn);
      GetFldVar('S_NAME18',   sRomyn);
      GetFldVar('S_NAME19',   sPainyn);
      GetFldVar('S_NAME20',   sPainper);
      GetFldVar('S_NAME21',   sInbornyn);
      GetFldVar('S_NAME22',   sInbornct);
      GetFldVar('S_NAME23',   sBorntime);
      GetFldVar('S_NAME24',   sBabysex);
      GetFldVar('S_NAME25',   sBabywgt);
      GetFldVar('S_NAME26',   sNeckyn);
      GetFldVar('S_NAME27',   sNecktype);
      GetFldVar('S_NAME28',   sStlcolyn);
      GetFldVar('S_NAME29',   sStlcol);
      GetFldVar('S_NAME30',   sBabypls);
      GetFldVar('S_DATE1',    sBabyresp);
      GetFldVar('S_DATE2',    sBabymse);
      GetFldVar('S_DATE3',    sBabyact);
      GetFldVar('S_DATE4',    sBabycol);
      GetFldVar('S_DATE5',    sReviveyn);
      GetFldVar('S_DATE6',    sOxigenyn);
      GetFldVar('S_DATE7',    sIntuyn);
      GetFldVar('S_DATE8',    sBodychk);
      GetFldVar('S_DATE9',    sAdmarea);
      GetFldVar('S_DATE10',   sInstype);
      GetFldVar('S_DATE11',   sPlatime);
      GetFldVar('S_DATE12',   sDeltype);
      GetFldVar('S_DATE13',   sPosition);
      GetFldVar('S_DATE14',   sLiveyn);
      GetFldVar('S_DATE15',   sDelvnur);
      GetFldVar('S_DATE16',   sDelvdr);
      GetFldVar('S_DATE17',   sTwinchk);
      GetFldVar('S_DATE18',   sPrgsketc);
      GetFldVar('S_STRING1',  sLmpno);
      GetFldVar('S_STRING2',  sEdcno);

      GetFldVar('S_STRING3',  sBabypls5);
      GetFldVar('S_STRING4',  sBabyresp5);
      GetFldVar('S_STRING5',  sBabymse5);
      GetFldVar('S_STRING6',  sBabyact5);
      GetFldVar('S_STRING7',  sBabycol5);
      GetFldVar('S_STRING8',  sMaturity);
      //GetFldVar('S_STRING9',  sDeltype2);
      GetFldVar('S_STRING9',  sHusname);

      GetFldVar('S_STRING10',  sSignData);
      GetFldVar('S_STRING11',  sSerialNo);
      GetFldVar('S_STRING12',  sSubjectDN);

      Result := GetRecordCnt('S_MEDDEPT');
      txFree;
   end;

end;

//신생아 분만기록지 저장                           //    SONGLIM_THOMA 수정
function HmdBdinft.InsertBdinf(sType1,sAddYN:String;Cnt:Integer):Integer;
var i: integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName( 'S_CODE1;S_CODE2;S_PATNO;S_ADMDATE;S_MEDDEPT;'+
               'S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
               'S_STRING5;S_STRING6;S_STRING7;S_STRING8;'+
               'S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
               'S_STRING13;S_STRING14;S_STRING15;S_STRING16;'+
               'S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
               'S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
               'S_STRING25;S_STRING26;S_STRING27;S_STRING28;'+
               'S_STRING29;S_STRING30;S_STRING31;S_STRING32;'+
               'S_STRING33;S_STRING34;S_STRING35;S_STRING36;'+
               'S_STRING37;S_STRING38;S_STRING39;S_STRING40;'+
               'S_STRING41;S_STRING42;S_STRING43;S_STRING44;'+
               'S_STRING45;S_STRING46;S_STRING47;S_STRING48;'+
               'S_STRING49;S_STRING50;S_TYPE1;S_TYPE2;'+
               'S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;'+
               'S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;'+
               'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;'+
               'S_TYPE15;S_TYPE16;S_TYPE17;S_TYPE18;'+
               'S_TYPE19;S_TYPE20;S_TYPE21;S_TYPE22;'+
               'S_TYPE23;S_TYPE24;S_TYPE25;S_TYPE26;'+
               'S_TYPE27;S_TYPE28;S_TYPE29;S_TYPE30;'+
               'S_NAME2;S_NAME3;S_NAME4;S_NAME5;' +
               'S_NAME6;S_NAME7;S_NAME8;S_NAME9;'+
               'S_NAME10;S_NAME11;S_NAME12;S_NAME13;S_STRING51;S_STRING52;S_STRING53');


    for i := 0 to Cnt-1 do
    begin
       SetFldValue(i, [sType1,  sAddYN, String(sPatNo[i]), String(sAdmDate[i]), String(sMedDept[i]),
               String(sGenDr[i]),   String(sWardNo[i]),   String(sRoomNo[i]),    String(sAge[i]),
               String(sSex[i]),     String(sTwinSeq[i]),  String(sAddress[i]),   String(sTelNo1[i]),
               String(sTelNo2[i]),  String(sMarryyn[i]),  String(sBphigh[i]),    String(sBplow[i]),
               String(sPulse[i]),   String(sBodytemp[i]), String(sFht[i]),       String(sReligion[i]),
               String(sHusrel[i]),  String(sHxdz[i]),     String(sPrewgt[i]),    String(sAfterwgt[i]),
               String(sHeight[i]),  String(sBldabo[i]),   String(sBldrh[i]),     String(sHusbldabo[i]),
               String(sHusbldrh[i]),String(sLmp[i]),      String(sEdc[i]),       String(sDgpwks[i]),
               String(sDgpday[i]),  String(sParityF[i]),  String(sParityP[i]),   String(sParityA[i]),
               String(sParityL[i]), String(sPrgsick[i]),  String(sAmnioyn[i]),   String(sXrayyn[i]),
               String(sXrayst[i]),  String(sPrgdrgyn[i]), String(sPrgdrgst[i]),  String(sPrgsmkyn[i]),
               String(sPrgsmkdg[i]),String(sPrgdrkyn[i]), String(sPrgdrkdg[i]),  String(sAlgyn[i]),
               String(sAlginfo[i]), String(sDimthdyn[i]), String(sDimthd[i]),    String(sOrsvtm[i]),
               String(sDewyn[i]),   String(sRomyn[i]),    String(sPainyn[i]),    String(sPainper[i]),
               String(sInbornyn[i]),String(sInbornct[i]), String(sBorntime[i]),  String(sBabysex[i]),
               String(sBabywgt[i]), String(sNeckyn[i]),   String(sNecktype[i]),  String(sStlcolyn[i]),
               String(sStlcol[i]),  String(sBabypls[i]),  String(sBabyresp[i]),  String(sBabymse[i]),
               String(sBabyact[i]), String(sBabycol[i]),  String(sReviveyn[i]),  String(sOxigenyn[i]),
               String(sIntuyn[i]),  String(sBodychk[i]),  String(sAdmarea[i]),   String(sInstype[i]),
               String(sPlatime[i]), String(sDeltype[i]),  String(sPosition[i]),  String(sLiveyn[i]),
               String(sDelvnur[i]), String(sDelvdr[i]),   String(sEditid[i]),    String(sEditip[i]),
               String(sTwinchk[i]), String(sPrgsketc[i]), String(sLmpno[i]),     String(sEdcno[i]),
               String(sBabypls5[i]),String(sBabyresp5[i]),String(sBabymse5[i]),  String(sBabyact5[i]),
               String(sBabycol5[i]),String(sMaturity[i]), String(sDeltype2[i]),  String(sHusname[i]),
               String(sSignData[i]),String(sSerialNo[i]), String(sSubjectDN[i])]);

    end;

    if (txPutF('MD_BDINF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//신생아실 월별통계
function HmdBdinft.TotalNbaby(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_NBABY_L3')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1',   sAddress  );    // sBORNDATE[iy]);
  	   GetFldVar('S_CODE2',   sTelNo1   );    // sTOTAL[iy]);
  	   GetFldVar('S_CODE3',   sTelNo2   );    // sM[iy]);
  	   GetFldVar('S_CODE4',   sMarryyn  );    // sF[iy]);
  	   GetFldVar('S_CODE5',   sBphigh   );    // sND[iy]);
	   GetFldVar('S_CODE6',   sBplow    );    // sVD[iy]);
  	   GetFldVar('S_CODE7',   sPulse    );    // sBD[iy]);
  	   GetFldVar('S_CODE8',   sBodytemp );    // sTD[iy]);
  	   GetFldVar('S_CODE9',   sFht      );    // sPD[iy]);
	   GetFldVar('S_CODE10',  sReligion );    // sID[iy]);
      GetFldVar('S_CODE11',  sHusrel   );    // sCS[iy]);
  	   GetFldVar('S_CODE12',  sHxdz     );    // sINOUT[iy]);
  	   GetFldVar('S_CODE13',  sStlcol   );    // sONEM[iy]);
  	   GetFldVar('S_CODE14',  sBabypls  );    // sONEF[iy]);
  	   GetFldVar('S_CODE15',  sPrewgt   );    // sTWINM[iy]);
  	   GetFldVar('S_CODE16',  sAfterwgt );    // sTWINF[iy]);
  	   GetFldVar('S_CODE17',  sBabyact  );    // sTHREEM[iy]);
  	   GetFldVar('S_CODE18',  sBabycol  );    // sTHREEF[iy]);
  	   GetFldVar('S_CODE19',  sHeight   );    // sLOWWGTM[iy]);
	   GetFldVar('S_CODE20',  sBldabo   );    // sLOWWGTF[iy]);
  	   GetFldVar('S_CODE21',  sBldrh    );    // sNORWGTM[iy]);
  	   GetFldVar('S_CODE22',  sHusbldabo);    // sNORWGTM[iy]);
  	   GetFldVar('S_CODE23',  sHusbldrh );    // sHIGHWGTM[iy]);
	   GetFldVar('S_CODE24',  sLmp      );    // sHIGHWGTF[iy]);
	   GetFldVar('S_CODE25',  sEdc      );    // sLOWDGPM[iy]);
  	   GetFldVar('S_CODE26',  sDgpwks   );    // sLOWDGPF[iy]);
  	   GetFldVar('S_CODE27',  sDgpday   );    // sNORDGPM[iy]);
  	   GetFldVar('S_CODE28',  sParityF  );    // sNORDGPF[iy]);
  	   GetFldVar('S_CODE29',  sParityP  );    // sHIGHDGPM[iy]);
	   GetFldVar('S_CODE30',  sParityA  );    // sHIGHDGPF[iy]);
  	   GetFldVar('S_NAME1' ,  sParityL  );    // sDDATE[iy]);
  	   GetFldVar('S_NAME2' ,  sPrgsick  );    // sDEAD[iy]);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

//
function HmdBdinft.UpdateBdinft(sType1, PatNo, Admdate, TwinSeq, Memo:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1, PatNo, Admdate, TwinSeq, Memo] );
   if (txPutF('MD_BDINF_U1')) then begin //Tuxedo Service Call

      Result := 1;
      txFree;
   end;
end;
//

//츨생아정보조회
function HmdBdinft.ListBaby(PatNo:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO');
   SetFldValue(0,[Patno] );
   if (txGetF('MD_BDINF_L3')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1',  sAdmdate);
	  	GetFldVar('S_CODE2',  sTwinseq);
	  	GetFldVar('S_CODE3',  sBorntime);
	  	GetFldVar('S_CODE4',  sBabysex);
	  	GetFldVar('S_CODE5',  sDgpwks);
      GetFldVar('S_CODE6',  sDgpday);
      GetFldVar('S_CODE7',  sBabywgt);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;


//분만산모 정보조회
function HmdBdinft.selectBdinf_List(sFromdate,sTodate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sFromdate,sTodate] );

   if (txGetF('MD_BDINF_L4')) then begin //Tuxedo Service Call
       GetFldVar('S_CODE1',  sPatno);
       GetFldVar('S_CODE2',  sPatname);
       GetFldVar('S_CODE3',  sBorndate);
       GetFldVar('S_CODE4',  sAdmdate);
       GetFldVar('S_CODE5',  sMeddept);
       GetFldVar('S_CODE6',  sWardno);
       GetFldVar('S_CODE7',  sAddress);
       GetFldVar('S_CODE8',  sTelno1);
       GetFldVar('S_CODE9',  sTelno2);
       GetFldVar('S_CODE10', sTwinchk);

       Result := GetRecordCnt('S_CODE1');
       txFree;
   end;
end;




{
////////////////////////////////////////////////////////////////////////////////
//  HmdKdinft 	분만외 시술대장
////////////////////////////////////////////////////////////////////////////////

// 분반외시술대장 조회
function HmdKdinft.MultiSelKdinf(sType1:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_KDINF_L1')) then begin //Tuxedo Service Call

   	GetFldVar('S_CODE1',  sDate);
	  	GetFldVar('S_CODE2',  sDs);
	  	GetFldVar('S_CODE3',  sDc);
	  	GetFldVar('S_CODE4',  sDe);
	  	GetFldVar('S_CODE5',  sSono);
      GetFldVar('S_CODE6',  sNst);
	  	GetFldVar('S_CODE7',  sUbt);
	  	GetFldVar('S_CODE8',  sHyster);
	  	GetFldVar('S_CODE9',  sChemo);
      GetFldVar('S_CODE10', sEtc);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;

end;

function HmdKdinft.InsKdinf(cnt:Integer):Integer;
var
  i : LongInt;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'+
              'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13');

   for i:=0 to cnt -1 do
   begin
      SetFldValue(i,[String(sType1[i]), String(sDate[i]),
                  String(sDs[i]),String(sDc[i]), String(sDe[i]),  String(sSono[i]),
                  String(sNst[i]),String(sUbt[i]),   String(sHyster[i]),   String(sChemo[i]),
                  String(sEtc[i]),String(sEditid[i]),  String(sEditip[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_KDINF_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;
}

////////////////////////////////////////////////////////////////////////////////
//  HmdDbabyt 	사망아대장
////////////////////////////////////////////////////////////////////////////////

// 사망아대장조회
function HmdDbabyt.MultiSelDbaby(sType1,sType2:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_DBABY_L1')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1',  sTDate);
	  	GetFldVar('S_CODE2',  sBabyName);
	  	GetFldVar('S_CODE3',  sBabyNo);
	  	GetFldVar('S_CODE4',  sBabySex);
	  	GetFldVar('S_CODE5',  sDrgWks);
	  	GetFldVar('S_CODE6',  sBabyWgt);
	  	GetFldVar('S_CODE7',  sDelType);
      GetFldVar('S_CODE8',  sBornDate);
	  	GetFldVar('S_CODE9', sAdmDate);
      GetFldVar('S_CODE10', sDDate);
	  	GetFldVar('S_CODE11', sReson);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdDbabyt.InsDbaby(sTdate,sPatname,sPatno,sPatsex,sDrgwks,sPatwgt,
                            sDelType,sBornDate,sAdmdate,sDDate,sReson,sEditid,sEditip,
                            sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17');

   SetFldValue(0,[sTdate,sPatname,sPatno,sPatsex,sDrgwks,sPatwgt,
                  sDelType,sBornDate,sAdmdate,sDDate,sReson,sEditid,sEditip,
                  sType1,sType2,sType3,sType4]);

   if (txPutF('MD_DBABY_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 사망아 통계
function HmdDbabyt.SumSelDbaby(sType1:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_DBABY_L2')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1',  sTDate);
	  	GetFldVar('S_CODE2',  sBabySex);
	  	GetFldVar('S_CODE3',  sBabyWgt);
      GetFldVar('S_CODE4',  sBornDate);
      GetFldVar('S_CODE5',  sDDate);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdNbabyt 	신생아대장
////////////////////////////////////////////////////////////////////////////////

// 신생아대장조회
function HmdNbabyt.MultiSelNbaby(sType1,sType2:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2] );

   if (txGetF('MD_NBABY_L4')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1',  sBornDate);
      GetFldVar('S_CODE2',  sPatName);
      GetFldVar('S_CODE3',  spatNo);
      GetFldVar('S_CODE4',  sSex);
      GetFldVar('S_CODE5',  sAge);
      GetFldVar('S_CODE6',  sDeltype);
      GetFldVar('S_CODE7',  sWgt);
      GetFldVar('S_CODE8',  sParity);
      GetFldVar('S_CODE9',  sAge2);
      GetFldVar('S_CODE10', sAddress);  ///////////////Add by 송원철
      GetFldVar('S_CODE11', sTelno);
      GetFldVar('S_CODE12', sRemark);
      GetFldVar('S_CODE13', sDschdate);
      GetFldVar('S_CODE14', sAdmdate );
      GetFldVar('S_CODE15', sConcure );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 개별 신생아대장조회
function HmdNbabyt.SingleSelNbaby(sType1:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO');
   SetFldValue(0,[sType1] );

   if (txGetF('MD_NBABY_S1')) then begin //Tuxedo Service Call
   	  GetFldVar('S_CODE1',  sBornDate);
	  	GetFldVar('S_CODE2',  sPatName);
	  	GetFldVar('S_CODE3',  sSex);
	  	GetFldVar('S_CODE4',  sAge);
	  	GetFldVar('S_CODE5',  sDeltype);
	  	GetFldVar('S_CODE6',  sWgt);
      GetFldVar('S_CODE7',  sParity);
      GetFldVar('S_CODE8',  sAge2);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdNbabyt.SingleSelNbabyInj(sType1:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO');
   SetFldValue(0,[sType1] );

   if (txGetF('MD_NBABY_S3')) then begin //Tuxedo Service Call
   	  GetFldVar('S_CODE1',  sBornDate);
	  	GetFldVar('S_CODE2',  sPatName);
	  	GetFldVar('S_CODE3',  sSex);
	  	GetFldVar('S_CODE4',  sAge);
	  	GetFldVar('S_CODE5',  sDeltype);
	  	GetFldVar('S_CODE6',  sWgt);
      GetFldVar('S_CODE7',  sParity);
      GetFldVar('S_CODE8',  sAge2);
      GetFldVar('S_CODE10', sTwinFlag);
      GetFldVar('S_CODE11', sWomResno1);
      GetFldVar('S_CODE12', sWomResno2);
      GetFldVar('S_CODE13', sWomPatnm);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 기존의 동일 아기찾기
function HmdNbabyt.IsNbaby(sType1,sType2,sType3,sType4:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );

   if (txGetF('MD_NBABY_L2')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1',  sPatNo);
      GetFldVar('S_CODE2',  sBornDate);      // 입원일.

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 신생아 대장등록(신생아 입원등록)
function HmdNbabyt.InsNbaby(sBorndate,sPatname,sPatno,   sSex,   sAge,     sDelType, sWgt,
                            sParity,  sMomno,  sMomadm,  sPatSeq,sSickbaby,sWardcd,  sRoomno,
                            sDeptCd,  sDiagcd, sDiagname,sChadr, sGendr,   sEditid,  sEditip,
                            sType1,   sType2,  sType3,   sFlag,  sAge2,    sTwinFlag,sRemark,
                            sSpcDr,   sAdmDate,sInOutFlag,sLocate,sConcure:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;'+
              'S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;' +
              'S_CODE27;S_CODE28;S_CODE29;S_CODE30;S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0,[sBorndate,sPatname,sPatno,sSex,sAge,sDelType,sWgt,
                  sParity,sMomno,sMomadm,sPatSeq,sSickbaby,sWardcd,sRoomno,
                  sDeptCd,sDiagcd,sDiagname,sChadr,sGendr,sEditid,sEditip,
                  sType1,sType2,sType3,sFlag,sAge2,sTwinFlag,sRemark,sSpcDr,
                  sAdmDate,sInOutFlag,sLocate,sConcure]);

   if (txPutF('MD_NBABY_I1')) then
   begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdTbabyt 	신생아일일현황
////////////////////////////////////////////////////////////////////////////////

// 신생아일일현황조회
function HmdTbabyt.MultiSelTbaby(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_TBABY_L1')) then
   begin //Tuxedo Service Call
      {GetFldVar('S_STRING1', v_Date    );
      GetFldVar('S_STRING2', v_Allbaby );
      GetFldVar('S_STRING3', v_Born    );
      GetFldVar('S_STRING4', v_Out     );
      GetFldVar('S_STRING5', v_Adm     );
      GetFldVar('S_STRING6', v_Die     );
      GetFldVar('S_STRING7', v_Opt     );
      GetFldVar('S_STRING8', v_Nicu    );
      GetFldVar('S_STRING9', v_Incu    );
      GetFldVar('S_STRING10',v_Sickbaby);
      GetFldVar('S_STRING11',v_Normal  );
      GetFldVar('S_STRING12',v_Etc     );
      GetFldVar('S_STRING13',v_Trin    );
      GetFldVar('S_STRING14',v_Trout   );

      Result := GetRecordCnt('S_STRING1');}

      GetFldVar('S_CODE1', v_Allbaby );
      GetFldVar('S_CODE2', v_Born );
      GetFldVar('S_CODE3', v_Out );
      GetFldVar('S_CODE4', v_Adm );
      GetFldVar('S_CODE5', v_Die );
      GetFldVar('S_CODE6', v_Nicu );
      GetFldVar('S_CODE7', v_Incu );
      GetFldVar('S_CODE8', v_Sickbaby);
      GetFldVar('S_CODE9', v_Normal );
      GetFldVar('S_CODE10', v_Etc );
      GetFldVar('S_CODE11', v_Opt );
      // GetFldVar('S_CODE12', v_Date );
      GetFldVar('S_CODE13', v_Trin );
      GetFldVar('S_CODE14', v_Trout );
      GetFldVar('S_CODE15', v_Date );

      Result := GetRecordCnt('S_CODE1');

      txFree;
   end;
end;



// 신생아일일 통계
function HmdTbabyt.SumSelTbaby(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_TBABY_L2')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1',  sTdate);
	  	GetFldVar('S_CODE2',  sDuty);
      GetFldVar('S_CODE3',  sAllbaby);
	  	GetFldVar('S_CODE4',  sNicu);
	  	GetFldVar('S_CODE5',  sIncu);
	  	GetFldVar('S_CODE6',  sSickBaby);
      GetFldVar('S_CODE7',  sNormal);
	  	GetFldVar('S_CODE8',  sBorn);
      GetFldVar('S_CODE9',  sOut);
      GetFldVar('S_CODE10',  sAdm);
      GetFldVar('S_CODE11',  sDie);
      GetFldVar('S_CODE12',  sOpt);
      GetFldVar('S_CODE13',  sEtc);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;


function HmdTbabyt.InsTbaby(Cnt:Integer):Integer;
var
  i : LongInt;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'+
              'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18');

   for i:=0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sTDate[i]),  String(sDuty[i]),
                     String(sAllbaby[i]),String(sBorn[i]),
                     String(sOut[i]),    String(sAdm[i]),
                     String(sDie[i]),    String(sNicu[i]),
                     String(sIncu[i]),   String(sSickbaby[i]),
                     String(sNormal[i]), String(sEtc[i]),
                     String(sEditid[i]), String(sEditip[i]),
                     String(sType1[i]),  String(sOpt[i]),
                     String(sTrIn[i]),   String(sTrOut[i])]);
   end;
   //Tuxedo Service Call
   if (txPutF('MD_TBABY_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdSbabyt 	분만실통계
////////////////////////////////////////////////////////////////////////////////

// 분만실통계
function HmdSbabyt.MultiSelSbaby(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_BDINF_L2')) then begin //Tuxedo Service Call
 		GetFldVar('S_CODE1',   sDeltype);
	  	GetFldVar('S_CODE2',   sInstype);
	  	GetFldVar('S_CODE3',   sSex);
      GetFldVar('S_CODE4',   sTwinseq);
      GetFldVar('S_CODE5',   sMaturity);
	  	GetFldVar('S_TYPE1',   sT1);
	  	GetFldVar('S_TYPE2',   sT2);
	  	GetFldVar('S_TYPE3',   sT3);
	  	GetFldVar('S_TYPE4',   sT4);
	  	GetFldVar('S_TYPE5',   sT5);
	  	GetFldVar('S_TYPE6',   sT6);
	  	GetFldVar('S_TYPE7',   sT7);
	  	GetFldVar('S_TYPE8',   sT8);
	  	GetFldVar('S_TYPE9',   sT9);
	  	GetFldVar('S_TYPE10',  sT10);
	  	GetFldVar('S_TYPE11',  sT11);
	  	GetFldVar('S_TYPE12',  sT12);
	  	GetFldVar('S_TYPE13',  sT13);
	  	GetFldVar('S_TYPE14',  sT14);
	  	GetFldVar('S_TYPE15',  sT15);
	  	GetFldVar('S_TYPE16',  sT16);
	  	GetFldVar('S_TYPE17',  sT17);
	  	GetFldVar('S_TYPE18',  sT18);
	  	GetFldVar('S_TYPE19',  sT19);
	  	GetFldVar('S_TYPE20',  sT20);
	  	GetFldVar('S_TYPE21',  sT21);
	  	GetFldVar('S_TYPE22',  sT22);
	  	GetFldVar('S_TYPE23',  sT23);
	  	GetFldVar('S_TYPE24',  sT24);
	  	GetFldVar('S_TYPE25',  sT25);
	  	GetFldVar('S_TYPE26',  sT26);
	  	GetFldVar('S_TYPE27',  sT27);
	  	GetFldVar('S_TYPE28',  sT28);
	  	GetFldVar('S_TYPE29',  sT29);
	  	GetFldVar('S_TYPE30',  sT30);
	  	GetFldVar('S_TYPE31',  sT31);

  	  	GetFldVar('S_STRING1',  sL1);
	  	GetFldVar('S_STRING2',  sL2);
	  	GetFldVar('S_STRING3',  sL3);
	  	GetFldVar('S_STRING4',  sL4);
	  	GetFldVar('S_STRING5',  sL5);
	  	GetFldVar('S_STRING6',  sL6);
	  	GetFldVar('S_STRING7',  sL7);
	  	GetFldVar('S_STRING8',  sL8);
	  	GetFldVar('S_STRING9',  sL9);
	  	GetFldVar('S_STRING10',  sL10);
	  	GetFldVar('S_STRING11',  sL11);
	  	GetFldVar('S_STRING12',  sL12);
	  	GetFldVar('S_STRING13',  sL13);
	  	GetFldVar('S_STRING14',  sL14);
	  	GetFldVar('S_STRING15',  sL15);
	  	GetFldVar('S_STRING16',  sL16);
	  	GetFldVar('S_STRING17',  sL17);
	  	GetFldVar('S_STRING18',  sL18);
	  	GetFldVar('S_STRING19',  sL19);
	  	GetFldVar('S_STRING20',  sL20);
	  	GetFldVar('S_STRING21',  sL21);
	  	GetFldVar('S_STRING22',  sL22);
	  	GetFldVar('S_STRING23',  sL23);
	  	GetFldVar('S_STRING24',  sL24);
	  	GetFldVar('S_STRING25',  sL25);
	  	GetFldVar('S_STRING26',  sL26);
	  	GetFldVar('S_STRING27',  sL27);
	  	GetFldVar('S_STRING28',  sL28);
	  	GetFldVar('S_STRING29',  sL29);
	  	GetFldVar('S_STRING30',  sL30);
	  	GetFldVar('S_STRING31',  sL31);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;



////////////////////////////////////////////////////////////////////////////////
//  HmdOginft 	간호정보조사지(산부인과)                                      //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//  HmdNbinft 	간호정보조사지(신생아)                                        //
////////////////////////////////////////////////////////////////////////////////

// 간호정보조사지 내용 조회(신생아용)
//function HmdNbinft.Select1(Cnt:Integer):Integer;
//begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
//end;

// 간호정보조사지 작성일자 조회(신생아용)
//function HmdNbinft.List1(Cnt:Integer):Integer;
//begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
//end;

// 간호정보조사지 내용 입력(신생아용)
//function HmdNbinft.Input1(Cnt:Integer):Integer;
//begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
//end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPyinft 	간호정보조사지(정신과)                                        //
////////////////////////////////////////////////////////////////////////////////

function HmdPyinft.SelectPyinft(sKey1, sKey2:string):Integer;
begin
   Result  := -1;
   txAlloc;
   SetFldName('S_PATNO;S_ADMDATE');
   SetFldValue(0,[sKey1, sKey2]);
   if (txGetF('MD_PYINF_S1')) then
   begin
      GetFldVar('S_MEDDEPT',sMedDept);
      GetFldVar('S_CODE1', sInfDnr);
      GetFldVar('S_CODE2', sRecNrs);
      GetFldVar('S_CODE3', sAdmPath);
      GetFldVar('S_CODE4', sAdmWith);
      GetFldVar('S_CODE5', sWed);
      GetFldVar('S_CODE6', sFamily);
      GetFldVar('S_CODE7', sBirth);
      GetFldVar('S_CODE8', sReligion);
      GetFldVar('S_CODE9', sEduDgr);
      GetFldVar('S_CODE10', sJob);
      GetFldVar('S_CODE11', sRich);
      GetFldVar('S_CODE12', sSleep);
      GetFldVar('S_CODE13', sDiet);
      GetFldVar('S_CODE14', sFec);
      GetFldVar('S_CODE15', sAllergy);
      GetFldVar('S_CODE16', sFav);
      GetFldVar('S_CODE17', sHobby);
      GetFldVar('S_CODE18', sEtc);
      GetFldVar('S_CODE19', sSymptoms);
      GetFldVar('S_CODE20', sLaPsy);
      GetFldVar('S_CODE21', sLaInOut);
      GetFldVar('S_CODE22', sFamHis);
      GetFldVar('S_CODE23', sBeChar);
      GetFldVar('S_CODE24', sFace);
      GetFldVar('S_CODE25', sSpirit);
      GetFldVar('S_CODE26', sSpiEtc);
      GetFldVar('S_CODE27', sAtti);
      GetFldVar('S_CODE28', sEmo);
      GetFldVar('S_CODE29', sLang);
      GetFldVar('S_CODE30', sSens);
      GetFldVar('S_NAME1', sAcci);
      GetFldVar('S_NAME2', sCons);
      GetFldVar('S_NAME3', sGn);
      GetFldVar('S_NAME4', sRem);
      GetFldVar('S_NAME5', sJud);
      GetFldVar('S_NAME6', sHeight);
      GetFldVar('S_NAME7', sWeight);

      Result := GetRecordCnt('S_MEDDEPT'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

{
function HmdPyinft.InsertPyinftdll(sPatNo ,   sAdmDate,  sMedDept,  sInfDnr,   sHeight,   sWeight,
                                sRecNrs,   sAdmPath,  sAdmWith,  sWed,      sFamily,   sBirth,
                                sReligion, sEduDgr,   sJob,      sRich,     sSleep,    sDiet,
                                sFec,      sAllergy,  sFav,      sHobby,    sEtc,      sSymptoms,
                                sLaPsy,    sLaInOut,  sFamHis,   sBeChar,   sFace,     sSpirit,
                                sSpiEtc,   sAtti,     sEmo,      sLang,     sSens,     sAcci,
                                sCons,     sGn,       sRem,      sJud,      sEditId,   sEditIp,
                                sChadr ,   sGendr  ,  sWardno  , sRoomno : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE;S_MEDDEPT;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;'+
              'S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;S_CODE21;'+
              'S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;S_CODE27;S_CODE28;S_CODE29;'+
              'S_CODE30;S_NAME1;S_NAME2;S_NAME3;S_NAME4;S_NAME5;S_NAME6;S_NAME7;'+
              'S_NAME8;S_NAME9;S_NAME10;S_NAME11;S_NAME12;S_NAME13');
   SetFldValue(0,   [sPatNo,    sAdmDate,  sMedDept,  sInfDnr,   sRecNrs,   sAdmPath,
                     sAdmWith,  sWed,      sFamily,   sBirth,    sReligion, sEduDgr,
                     sJob,      sRich,     sSleep,    sDiet,     sFec,      sAllergy,
                     sFav,      sHobby,    sEtc,      sSymptoms, sLaPsy,    sLaInOut,
                     sFamHis,   sBeChar,   sFace,     sSpirit,   sSpiEtc,   sAtti,
                     sEmo,      sLang,     sSens,     sAcci,     sCons,     sGn,
                     sRem,      sJud,      sEditId,   sEditIp,   sChadr ,   sGendr,
                     sWardno,   sRoomno,   sHeight,   sWeight]);
   if (txPutF('MD_PYINF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;
}


////////////////////////////////////////////////////////////////////////////////
//  HmdPtclmt 	간호환자분류기본                                              //
////////////////////////////////////////////////////////////////////////////////

// 환자분류 List 조회
function HmdPtclmt.List1(sType1,sType2,sType3,sType4:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );

   if (txGetF('MD_PICLM_L1')) then begin //Tuxedo Service Call


      GetFldVar('S_REGIP' ,  sPatNo);
      GetFldVar('S_STRING2' ,  sPatName);
      GetFldVar('S_STRING3' ,  sOpdate);
      GetFldVar('S_STRING4' ,  sLstgrpdate);
      GetFldVar('S_STRING5' ,  sBfpatgrp);
      GetFldVar('S_STRING6' ,  sCurpatgrp);
      GetFldVar('S_STRING7' ,  sAdmDate);
      GetFldVar('S_STRING8' ,  sGrpDate);
      GetFldVar('S_STRING9',  sWardNo);
      GetFldVar('S_STRING10',  sBfgrpdate);
      GetFldVar('S_STRING11',  sMedDept);
      GetFldVar('S_STRING12',  sCurtotalpnt);
      GetFldVar('S_STRING13',  sBftotalpnt);
      GetFldVar('S_STRING14',  sRoomno);
      Result := GetRecordCnt('S_REGIP');
      txFree;
   end;
end;

// 전분류 복사
function HmdPtclmt.Input1(sDate : String ;Cnt:Integer):Integer;
var
    i : integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;S_EDITID;S_EDITIP');

    for i := 0 to Cnt -1 do
    begin
       SetFldValue( i ,[sDate,String(sPatNo[i]),   String(sAdmDate[i]), String(sGrpDate[i]),
                              String(sWardNo[i]),  String(sEditId[i]),  String(sEditIp[i])]);
   end;

   if (txPutF('MD_PTCLM_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;

end;

// 환자분류 내용 입력
function HmdPtclmt.Input2(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

// 환자분류 취소
function HmdPtclmt.Delete1(sType1,sType2,sType3,sType4:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE;S_STRING1;S_STRING2');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );

   if (txPutF('MD_PTCLM_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;

end;

{function HmdPtclmt.ward_patgrp_select(sWard,sDate :String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sWard,sDate] );
   if (txGetF('MD_WDGRP_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,  sPatNo);
      GetFldVar('S_STRING2' ,  sPatName);
      GetFldVar('S_STRING3' ,  sCurpatgrp);
      GetFldVar('S_STRING4' ,  sRoomno);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;}

function HmdPtclmt.ward_patgrp_select(sWard,sDate,sGrp :String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sWard,sDate,sGrp] );

   if (txGetF('MD_WDGRP_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' , sPatNo );
      GetFldVar('S_STRING2' , sPatName );
      GetFldVar('S_STRING3' , sRoomno );
      GetFldVar('S_STRING4' , sSex );
      GetFldVar('S_STRING5' , sBirtdate);
      GetFldVar('S_STRING6' , iTotalpnt);
      GetFldVar('S_STRING7' , sAdmdate );
      GetFldVar('S_STRING8' , sMeddept );
      GetFldVar('S_STRING9' , sNumber1 );
      GetFldVar('S_STRING10', sNumber2 );
      GetFldVar('S_STRING11', sNumber3 );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdPtclmt.GetPatGrpCount(sWard, sDate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sWard, sDate]);

   if txGetF('MD_GRPCT_L1') then begin
      GetFldVar('S_STRING1', sPatGrp);
      GetFldVar('S_STRING2', iTotalPnt);

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPtcldt 	간호환자분류상세                                              //
////////////////////////////////////////////////////////////////////////////////
// 환자분류상세 List 조회
function HmdPtcldt.List1(sCode1,sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sCode1,sType1,sType2,sType3,sType4,sType5] );

   if (txGetF('MD_PGRPM_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,  sPatGrpnm   );
      GetFldVar('S_STRING2' ,  sStdPts     );
      GetFldVar('S_STRING3' ,  sIcutype    );
      GetFldVar('S_STRING4' ,  sCount       );
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자분류상세 List 입력
function HmdPtcldt.Input1(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_CODE1;S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;S_STRING3;S_STRING4;' +
              'S_STRING5;S_STRING6;S_EDITID;S_EDITIP;S_STRING7;S_STRING8');

    for i := 0 to Cnt -1 do
    begin
       SetFldValue( i ,[String(sOther[i])  ,String(sPatNo[i]) ,String(sAdmDate[i]) ,
                        String(sGrpDate[i]),String(sWardNo[i]),String(sPatCls[i])  ,String(sPatgrpCd[i]),
                        String(sStdPts[i]) ,String(sCount[i]) ,String(sEditId[i])  ,String(sEditIp[i])  ,
                        String(sTotalTs[i]),String(sMedDept[i])]);
   end;

   if (txPutF('MD_PTCLM_I2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmnPgrpdt 	환자분류코드상세                                              //
////////////////////////////////////////////////////////////////////////////////
// 환자분류코드상세 조회 ( created by mms (2001.06.11)) 새로 추가됨
function HmnPgrpdt.List1(s_code,s_patno,s_admdate,s_grpdate,s_wardno: string):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[s_code,s_patno,s_admdate,s_grpdate,s_wardno] );

   if (txGetF('MD_PGRPM_L1')) then begin //Tuxedo Service Call

      GetFldVar('S_STRING1' ,v_Icutype   );
      GetFldVar('S_STRING2' ,v_Patcls    );
      GetFldVar('S_STRING3' ,v_Patclsnm  );
      GetFldVar('S_STRING4' ,v_Patgrpcd  );
      GetFldVar('S_STRING5' ,v_Patgrpnm  );
      GetFldVar('S_STRING6' ,v_Detegude  );
      GetFldVar('S_STRING7' ,v_Stdpts    );
      GetFldVar('S_STRING8' ,v_Patgrp    );
      GetFldVar('S_STRING9' ,v_Factyn    );
      GetFldVar('S_STRING10',v_Factman   );
      GetFldVar('S_STRING11',v_Count     );
      GetFldVar('S_STRING12',v_Ckyn      );
      GetFldVar('S_STRING13',v_Timeyn    );
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdVitalt 	V/S기록                                                       //
////////////////////////////////////////////////////////////////////////////////

// V/S 측정환자 List 조회
function HmdVitalt.SelectVsPat(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6] );
   if (txGetF('MD_VITAL_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_PATNO',   sPatno);
      GetFldVar('S_PATNAME', sPatname);
      GetFldVar('S_ADMDATE', sAdmdate);
      GetFldVar('S_STRING1', sExecdate);
      GetFldVar('S_STRING2', sExectime);
      GetFldVar('S_STRING3', sBodytemp);
      GetFldVar('S_STRING4', sPulse);
      GetFldVar('S_STRING5', sRespcnt);
      GetFldVar('S_STRING6', sBldprehi);
      GetFldVar('S_STRING7', sBldprelo);
      GetFldVar('S_STRING8', sUrcnt);
      GetFldVar('S_STRING9', sStoolcnt);
      GetFldVar('S_STRING10',sStolstat);
      GetFldVar('S_STRING11',sChkpart);
      GetFldVar('S_STRING12',sRoomNo);
      GetFldVar('S_STRING13',sChkpass);
      GetFldVar('S_STRING14',sNrname);
      GetFldVar('S_STRING15',sSat);
      GetFldVar('S_STRING16',sConsyn);
      GetFldVar('S_STRING17',sConstate);

      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// V/S 측정환자 조회
function HmdVitalt.SelectVsPat1(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_VITAL_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sExecdate);
      GetFldVar('S_STRING2', sBodytemp);
      GetFldVar('S_STRING3', sPulse);
      GetFldVar('S_STRING4', sRespcnt);
      GetFldVar('S_STRING5', sBldprehi);
      GetFldVar('S_STRING6', sBldprelo);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// V/S 측정내용 입력
function HmdVitalt.InputVsValue(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;S_STRING3;S_STRING4;' +
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_EDITID;S_EDITIP');

    for i := 0 to Cnt -1 do
    begin
       SetFldValue( i ,[String(sPatNo[i]),    String(sAdmDate[i]),  String(sExecDate[i]),
                        String(sExecTime[i]), String(sBodyTemp[i]), String(sPulse[i]),
                        String(sRespCnt[i]),  String(sBldpreHi[i]), String(sBldpreLo[i]),
                        String(sUrCnt[i]),    String(sStoolCnt[i]), String(sStolStat[i]),
                        String(sChkPart[i]),  String(sChkPass[i]),  String(sEditId[i]),
                        String(sEditIp[i])]);
   end;

   if (txPutF('MD_VITAL_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// Vital Sign 측정치 삭제
function HmdVitalt.DeleteVS(PatNo,AdmDate,ExecDate,ExecTime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[PatNo,AdmDate,ExecDate,ExecTime] );

   //Tuxedo Service Call
   if (txPutF('MD_VITAL_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdIochkt 	I/O & Check                                                   //
////////////////////////////////////////////////////////////////////////////////

// 일자별 I/O, Weight
function HmdIochkt.ListIOWeight(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);
   if (txGetF32('MD_IOCHK_L1')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1',  iSeqNo);
      GetFldVar32('S_STRING1', sExecdate);
      GetFldVar32('S_STRING2', sExecTime);
      GetFldVar32('S_STRING3', sChkGrp);
      GetFldVar32('S_STRING4', sChkItem);
      GetFldVar32('S_STRING5', sPhase);
      GetFldVar32('S_STRING6', sInsuline);
      GetFldVar32('S_STRING7', sAdmDate);
      GetFldVar32('S_NUMVAL1', iVolume1);
      GetFldVar32('S_NUMVAL2', iVolume2);
      GetFldVar32('S_NUMVAL3', iWeight);
      GetFldVar32('S_NUMVAL4', sCount );
      GetFldVar32('S_NUMVAL5', sHeight);
      GetFldVar32('S_NUMVAL6', sChkItem1);
      GetFldVar32('S_NUMVAL7', sChkItem2);
      GetFldVar32('S_NUMVAL8', sChkItem3);
      GetFldVar32('S_NUMVAL9', iVolume3);
      GetFldVar32('S_NUMVAL10',iVolume4);
      GetFldVar32('S_NUMVAL11',iVolume5);
      GetFldVar32('S_NUMVAL12',iVolume6);
      GetFldVar32('S_NUMVAL13',sChkCnt);

      // 이선규 추가
      GetFldVar32('S_STRING8' ,v_WardNo );
      GetFldVar32('S_STRING9' ,v_Roomno );
      GetFldVar32('S_STRING10',v_Chadrnm);
      GetFldVar32('S_STRING11',v_Deptnm );
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


// I/O 측정내용 입력
function HmdIochkt.InputIOValue(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.


   SetFldName('S_TYPE1;S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;S_STRING3;' +
              'S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;' +
              'S_EDITID;S_EDITIP;L_SEQNO1;S_NUMVAL1;S_NUMVAL2;S_NUMVAL3;S_NUMVAL4');

    for i := 0 to Cnt -1 do
    begin
       SetFldValue( i ,[String(sType[i]),     String(sPatNo[i]),    String(sAdmDate[i]),
                        String(sChkType[i]),  String(sExecDate[i]), String(sExecTime[i]),
                        String(sChkGrp[i]),   String(sChkItem[i]),  String(sPhase[i]),
                        String(sInsuline[i]), String(sInjtPart[i]), String(sRoomNo[i]),
                        String(sEditId[i]),   String(sEditIp[i]),   Integer(iSeqNo[i]),
                        String(iVolume[i]),   String(iWeight[i]),   String(sCount[i]),
                        String(sChkCnt[i])]);
   end;

   if (txPutF('MD_IOCHK_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// Check 기록 Insert or Delete
function HmdIochkt.DelInsChkItem(sType,sSlipCd,sPatno,sAdmdate,sChktype,
                                 sExecdate,sExectime,sChkgrp,sChkname,sPhase,
                                 sInsuline,sInjtpart,sRoomno,sHeight,sChkItem1,
                                 sChkItem2,sChkItem3,sEditid,sEditip,
                                 lVolume,lWeight:String;lSeqno:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;'+
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_EDITID;'+
              'S_EDITIP;S_NUMVAL1;S_NUMVAL2;L_SEQNO1');

   SetFldValue(0,[sType,sSlipCd,sPatno,sAdmdate,sChktype,sExecdate,sExectime,
                  sChkgrp,sChkname,sPhase,sInsuline,sInjtpart,sRoomno,sHeight,
                  sChkItem1,sChkItem2,sChkItem3,sEditid,sEditip,lVolume,lWeight,lSeqno]);

   //Tuxedo Service Call
   if (txPutF('MD_IOCHK_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdIochkt.MultiDelInsChkItem(Cnt:Integer):Integer;
var
   i:Integer;
begin

   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;'+
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_EDITID;'+
              'S_EDITIP;S_NUMVAL1;S_NUMVAL2;L_SEQNO1');

   for i:=0 to Cnt -1 do
   begin
      SetFldValue(i,[String(sType[i]),String(iVolume2[i]),String(sPatno[i]),String(sAdmdate[i]),
                     String(sChktype[i]),String(sExecdate[i]),String(sExectime[i]),
                     String(sChkgrp[i]),String(sChkItem[i]),String(sPhase[i]),String(sInsuline[i]),
                     String(sInjtpart[i]),String(sRoomno[i]),String(sHeight[i]),String(sChkItem1[i]),
                     String(sChkItem2[i]),String(sChkItem3[i]),String(sEditid[i]),String(sEditip[i]),
                     String(iVolume1[i]),String(iWeight[i]),Integer(iSeqno[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_IOCHK_I3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//(추가. 2003.1.4 이용언)
// 일자별 I/O, Weight
function HmdIochkt.ListIOWeight2(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);
   if (txGetF32('MD_IOCHK_L2')) then begin //Tuxedo Service Call
      GetFldVar32('L_SEQNO1',  iSeqNo);
      GetFldVar32('S_STRING1', sExecdate);
      GetFldVar32('S_STRING2', sExecTime);
      GetFldVar32('S_STRING3', sChkGrp);
      GetFldVar32('S_STRING4', sChkItem);
      GetFldVar32('S_STRING5', sPhase);
      GetFldVar32('S_STRING6', sInsuline);
      GetFldVar32('S_STRING7', sAdmDate);
      GetFldVar32('S_NUMVAL1', iVolume1);
      GetFldVar32('S_NUMVAL2', iVolume2);
      GetFldVar32('S_NUMVAL3', iWeight);
      GetFldVar32('S_NUMVAL4', sCount );
      GetFldVar32('S_NUMVAL5', sHeight);
      GetFldVar32('S_NUMVAL6', sChkItem1);
      GetFldVar32('S_NUMVAL7', sChkItem2);
      GetFldVar32('S_NUMVAL8', sChkItem3);
      GetFldVar32('S_NUMVAL9', iVolume3);
      GetFldVar32('S_NUMVAL10',iVolume4);
      GetFldVar32('S_NUMVAL11',iVolume5);
      GetFldVar32('S_NUMVAL12',iVolume6);
      GetFldVar32('S_NUMVAL13',sChkCnt);

      GetFldVar32('S_STRING10',v_Deptnm );
      GetFldVar32('S_STRING11',v_Wardno );
      GetFldVar32('S_STRING12',v_Chadrnm);
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

function HmdIochkt.MultiDelInsChkItem2(Cnt:Integer):Integer;
var
   i:Integer;
begin

   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;'+
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_EDITID;'+
              'S_EDITIP;S_NUMVAL1;S_NUMVAL2;L_SEQNO1;S_STRING14');

   for i:=0 to Cnt -1 do
   begin
      SetFldValue(i,[String(sType[i]),String(iVolume2[i]),String(sPatno[i]),String(sAdmdate[i]),
                     String(sChktype[i]),String(sExecdate[i]),String(sExectime[i]),
                     String(sChkgrp[i]),String(sChkItem[i]),String(sPhase[i]),String(sInsuline[i]),
                     String(sInjtpart[i]),String(sRoomno[i]),String(sHeight[i]),String(sChkItem1[i]),
                     String(sChkItem2[i]),String(sChkItem3[i]),String(sEditid[i]),String(sEditip[i]),
                     String(iVolume1[i]),String(iWeight[i]),Integer(iSeqno[i]),String(sChkCnt[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_IOCHK_I4')) then
   begin
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdIoqtct 	I/O기준량                                                     //
////////////////////////////////////////////////////////////////////////////////

// I/O 기준항목 조회
function HmdIoqtct.ListIoItem(sType1,sType2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); // I/O type
   SetFldValue(0,[sType1,sType2] );

   //Tuxedo Service Call
   if (txGetF('MD_IOQTC_L1')) then
   begin
      GetFldVar('L_SEQNO1',   iSeqNo  );  // 순번
      GetFldVar('S_NUMVAL1',  iVolume );  // 용량
      GetFldVar('S_STRING1',  sChkItem);  // 품명
      GetFldVar('S_STRING2',  sPhase  );  // 양상(대변)

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// I/O 기준항목 Insert or Delete
function HmdIoqtct.DelInsIoItem(sType,sIotype,sChkitem,sPhase,sWardno,sEditid,
                                sEditip,lVolume:String;lSeqno:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_EDITID;S_EDITIP;'+
              'S_NUMVAL1;L_SEQNO1');
   SetFldValue(0,[sType,sIotype,sChkitem,sPhase,sWardno,sEditid,sEditip,lVolume,lSeqno]);

   //Tuxedo Service Call
   if (txPutF('MD_IOQTC_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdOpdlst 	외래예약(원무)                                                 //
////////////////////////////////////////////////////////////////////////////////

// 조건에 따른 외래예약 List SELECT (진료일+진료과+진료의+진료여부+진료시간)
function HmdOpdlst.ListOpReserv(MedDate,MedDept,MedDr,MedYn,MedTime,Flu:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6'); //진료일;진료과;진료의;진료여부;진료시간
   SetFldValue32(0,[MedDate,MedDept,MedDr,MedYn,MedTime,Flu] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_L1')) then
   begin
      GetFldVar32('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1',  sMedDate );  // 진료일
      GetFldVar32('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar32('S_STRING3',  sMedDept );  // 진료과
      GetFldVar32('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar32('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar32('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar32('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar32('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar32('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar32('S_STRING10', sRemark  );  // 특기사항
      GetFldVar32('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar32('S_STRING12', sPatName );  // 환자명
      GetFldVar32('S_STRING13', sSex     );  // 성별
      GetFldVar32('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar32('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar32('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar32('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar32('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar32('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar32('S_STRING20', sRsvType );  // 예약구분
      GetFldVar32('S_STRING21', sDiagname);  // 진단명
      GetFldVar32('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar32('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar32('S_STRING24', sFollow );   // Follow up
      GetFldVar32('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar32('S_STRING26', sPattypeCd); // 환자유형코드  */
      GetFldVar32('S_STRING27', sTypecd   ); // 보조유형코드   */
      GetFldVar32('S_STRING28', sSpcdryn  ); // 지정진료여부   */
      GetFldVar32('S_STRING29', sFstmedtyR); // 초재진여부   */
      GetFldVar32('S_STRING30', sFstinpid ); //  접수자  */
      GetFldVar32('S_STRING31', sFsttime  ); //  접수일시 */
      GetFldVar32('S_STRING32', sCustcd   ); //    */
      GetFldVar32('S_STRING33', sDccode   ); // 감면코드   */
      GetFldVar32('S_STRING34', sHdsflag  );
      GetFldVar32('S_STRING35', sResno1  );
      GetFldVar32('S_STRING36', sResno2  );
      GetFldVar32('S_STRING37', sCurrloc  ); //차트위치
      GetFldVar32('S_STRING38', sDschDate  );
      GetFldVar32('S_STRING39', sFuture  );
      GetFldVar32('S_STRING40', sNochcd  );
      GetFldVar32('S_STRING41', sReferyn  );
      GetFldVar32('S_STRING42', sArvyn   );
      GetFldVar32('S_STRING43', sDenpatno);
      GetFldVar32('S_STRING44', sAddress );
      //GetFldVar32('S_STRING45', sZipcd   );
      //GetFldVar32('S_STRING46', sLastdate);
      GetFldVar32('S_STRING47', sScanYn  );
      GetFldVar32('S_STRING48', sSpgubun  );  //특정환자구분(메르스관련), KimDaeYong 2015-06-17
      //외래환자이송사유, KimDaeYong 20106-11-08
      GetFldVar32('S_STRING49', sTransrsn );
      GetFldVar32('S_STRING50', sTransetc );
      GetFldVar32('S_STRING51', sTranshosnm);
      GetFldVar32('S_STRING52', sRmkyn    );
      GetFldVar32('S_STRING53', sRmketc   );
      //임신부관리, KimDaeYong 2016-12-28
      GetFldVar32('S_STRING54', sPregyn   );
      GetFldVar32('S_STRING55', sTranshosgbn);
      GetFldVar32('S_STRING56', sOpinyn    );
      //산부인과,난임시술여부.KimDaeYong 2017-09-25
      GetFldVar32('S_STRING57', sDiffpregyn);
      //주진단코드. KimDaeYong 2018-01-22
      GetFldVar32('S_STRING58', sDiagcd);
      //실비보험가입여부. KimDaeYong 2020-11-25
      GetFldVar32('S_STRING59', sSilinsyn);
      //진단유형코드. KimDaeYong 2021-03-16
      GetFldVar32('S_STRING60', sDiagTypeCd);
      //메시지/기본정보 수신여부. KimDaeYong 2021-12-16
      GetFldVar32('S_STRING61', sSmsyn);
      GetFldVar32('S_STRING62', sInfuseyna);

      GetFldVar32('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar32('L_LONG2',    iUnCollect);  // 미수금

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 조건에 따른 외래예약 List SELECT (진료일+진료과+진료의+진료여부+진료시간)
function HmdOpdlst.ListOpReserv3(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5'); //진료일;진료과;진료의;진료여부;진료시간
   SetFldValue(0,[MedDate,MedDept,MedDr,MedYn,MedTime] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_LB')) then
   begin
      GetFldVar('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar('S_STRING1',  sMedDate );  // 진료일
      GetFldVar('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar('S_STRING3',  sMedDept );  // 진료과
      GetFldVar('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar('S_STRING10', sRemark  );  // 특기사항
      GetFldVar('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar('S_STRING12', sPatName );  // 환자명
      GetFldVar('S_STRING13', sSex     );  // 성별
      GetFldVar('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar('S_STRING20', sRsvType );  // 예약구분
      GetFldVar('S_STRING21', sDiagname);  // 진단명
      GetFldVar('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar('S_STRING24', sFollow );   // Follow up
      GetFldVar('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar('S_STRING26', sPattypeCd  ); // 환자유형코드  */
      GetFldVar('S_STRING27', sTypecd   ); // 보조유형코드   */
      GetFldVar('S_STRING28', sSpcdryn  ); // 지정진료여부   */
      GetFldVar('S_STRING29', sFstmedtyR); // 초재진여부   */
      GetFldVar('S_STRING30', sFstinpid ); //  접수자  */
      GetFldVar('S_STRING31', sFsttime  ); //  접수일시 */
      GetFldVar('S_STRING32', sCustcd   ); //    */
      GetFldVar('S_STRING33', sDccode   ); // 감면코드   */
      GetFldVar('S_STRING34', sHdsflag  );
      GetFldVar('S_STRING35', sResno1   );
      GetFldVar('S_STRING36', sResno1   );
      GetFldVar('S_STRING37', sCurrloc  );
      GetFldVar('S_STRING38', sNochcd);
      GetFldVar('S_STRING39', sSmsyn    ); // 메시지수신여부. KimDaeYong 2021-12-16
      GetFldVar('S_STRING40', sInfuseyna); // 기본정부수신여부. KimDaeYong 2021-12-16   
      GetFldVar('L_LONG1',    iStayNo  );  // 진료대기순서

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;


// ▶ 1:당일접수 뒤로Sorting, 2:시간순, 3:성명순
function HmdOpdlst.ListOpReserv2(sType1,MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5'); //진료일;진료과;진료의;진료여부;진료시간
   SetFldValue32(0,[sType1,MedDate,MedDept,MedDr,MedYn,MedTime] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_L8')) then
   begin
      GetFldVar32('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1',  sMedDate );  // 진료일
      GetFldVar32('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar32('S_STRING3',  sMedDept );  // 진료과
      GetFldVar32('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar32('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar32('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar32('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar32('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar32('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar32('S_STRING10', sRemark  );  // 특기사항
      GetFldVar32('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar32('S_STRING12', sPatName );  // 환자명
      GetFldVar32('S_STRING13', sSex     );  // 성별
      GetFldVar32('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar32('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar32('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar32('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar32('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar32('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar32('S_STRING20', sRsvType );  // 예약구분
      GetFldVar32('S_STRING21', sDiagname);  // 진단명
      GetFldVar32('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar32('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar32('S_STRING24', sFollow );   // Follow up
      GetFldVar32('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar32('S_STRING26', sHdsflag);   // 보조환자유형
      GetFldVar32('S_STRING27', sReferYn);   // 보조환자유형
      GetFldVar32('S_STRING28', sArvyn   );  // 환자도착여부
      GetFldVar32('S_STRING29', sDenpatno);
      GetFldVar32('S_STRING30', sResno1  );
      GetFldVar32('S_STRING31', sResno2  );
      GetFldVar32('S_STRING32', sAddress );
      GetFldVar32('S_STRING33', sSpcdryn );  // 선택진료여부
      GetFldVar32('S_STRING34', sScanYn  );
      GetFldVar32('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar32('L_LONG2',    iUnCollect); // 미수금

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 내과 일반진료 외래예약 List SELECT (구분+진료일+진료여부)
function HmdOpdlst.IMListOpReserv(Type1,MedDate,MedYn:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[Type1,MedDate,MedYn] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_L7')) then
   begin
      GetFldVar32('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1',  sMedDate );  // 진료일
      GetFldVar32('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar32('S_STRING3',  sMedDept );  // 진료과
      GetFldVar32('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar32('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar32('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar32('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar32('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar32('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar32('S_STRING10', sRemark  );  // 특기사항
      GetFldVar32('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar32('S_STRING12', sPatName );  // 환자명
      GetFldVar32('S_STRING13', sSex     );  // 성별
      GetFldVar32('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar32('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar32('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar32('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar32('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar32('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar32('S_STRING20', sRsvType );  // 예약구분
      GetFldVar32('S_STRING21', sDiagname);  // 진단명
      GetFldVar32('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar32('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar32('S_STRING24', sFollow );   // Follow up
      GetFldVar32('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar32('S_STRING26', sHdsflag);
      GetFldVar32('S_STRING27', sPattypecd); //* <----추가항목   환자유형코드  */
      GetFldVar32('S_STRING28', sTypecd   ); //* 보조유형코드   */
      GetFldVar32('S_STRING29', sSpcdryn  ); //* 지정진료여부   */
      GetFldVar32('S_STRING30', sFstmedtyR); //* 초재진여부   */
      GetFldVar32('S_STRING31', sFstinpid ); //*  접수자  */
      GetFldVar32('S_STRING32', sFsttime  ); //*  접수일시 */
      GetFldVar32('S_STRING33', sCustcd   ); //*    */
      GetFldVar32('S_STRING34', sDccode   ); //* 감면코드   */
      GetFldVar32('S_STRING35', sResno1   );
      GetFldVar32('S_STRING36', sResno2   );
      GetFldVar32('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar32('L_LONG2',    iUnCollect);  // 미수금
      GetFldVar32('S_STRING37', sCurrloc  );
      GetFldVar32('S_STRING38', sDschDate  );
      GetFldVar32('S_STRING39', sFuture  );
      GetFldVar32('S_STRING40', sNochcd  );
      GetFldVar32('S_STRING41', sReferyn );
      GetFldVar32('S_STRING42', sArvyn   );
      GetFldVar32('S_STRING43', sDenpatno);
      GetFldVar32('S_STRING44', sAddress );
      //GetFldVar32('S_STRING45', sZipcd   );
      //GetFldVar32('S_STRING46', sLastdate);
      GetFldVar32('S_STRING47', sSpgubun  );  //특정환자구분(메르스관련), KimDaeYong 2015-06-17
      //외래환자이송사유, KimDaeYong 20106-11-08
      GetFldVar32('S_STRING48', sTransrsn );
      GetFldVar32('S_STRING49', sTransetc );
      GetFldVar32('S_STRING50', sTranshosnm);
      GetFldVar32('S_STRING51', sRmkyn    );
      GetFldVar32('S_STRING52', sRmketc   );
      //임신부관리, KimDaeYong 2016-12-28
      GetFldVar32('S_STRING53', sPregyn   );
      GetFldVar32('S_STRING54', sTranshosgbn);
      GetFldVar32('S_STRING55', sOpinyn    );
      GetFldVar32('S_STRING56', sDiagcd    );
      //메시지/기본정보 수신여부. KimDaeYong 2021-12-16
      GetFldVar32('S_STRING57', sSmsyn);
      GetFldVar32('S_STRING58', sInfuseyna);

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 내과 일반진료 외래예약 List SELECT (구분+진료일+진료여부 ▶ 당일접수 뒤로Sorting)
function HmdOpdlst.IMListOpReserv2(Type1,MedDate,MedYn:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[Type1,MedDate,MedYn] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_L9')) then
   begin
      GetFldVar32('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1',  sMedDate );  // 진료일
      GetFldVar32('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar32('S_STRING3',  sMedDept );  // 진료과
      GetFldVar32('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar32('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar32('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar32('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar32('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar32('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar32('S_STRING10', sRemark  );  // 특기사항
      GetFldVar32('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar32('S_STRING12', sPatName );  // 환자명
      GetFldVar32('S_STRING13', sSex     );  // 성별
      GetFldVar32('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar32('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar32('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar32('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar32('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar32('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar32('S_STRING20', sRsvType );  // 예약구분
      GetFldVar32('S_STRING21', sDiagname);  // 진단명
      GetFldVar32('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar32('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar32('S_STRING24', sFollow );   // Follow up
      GetFldVar32('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar32('S_STRING26', sHdsFlag);   // 보조환자유형
      GetFldVar32('S_STRING27', sReferYn);   // Refer
      GetFldVar32('S_STRING28', sArvyn   );   //환자도착여부
      GetFldVar32('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar32('L_LONG2',    iUnCollect);  // 진료대기순서
      GetFldVar32('S_STRING29', sDenpatno);
      GetFldVar32('S_STRING30', sResno1  );
      GetFldVar32('S_STRING31', sResno2  );
      GetFldVar32('S_STRING32', sAddress );
      GetFldVar32('S_STRING33', sSpcdryn );   // 선택진료여부

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;


// 외래재진예약 내역 Insert
function HmdOpdlst.InsertOpReserv(Patno,Meddate,Meddept,Meddr,Medtime,Remark,
                                  Chartyn,Filmyn,TelNo1,TelNo2,TelNo3,Follow,
                                  Editid,Editip,sRsvGubun, sRsvdept, sSpgubun:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_EDITID;S_EDITIP;S_STRING16;S_STRING17;S_STRING18');
   SetFldValue(0,[Patno,Meddate,Meddept,Meddr,Medtime,Remark,Chartyn,
                  Filmyn,TelNo1,TelNo2,TelNo3,Follow,Editid,Editip,sRsvGubun,sRsvdept,sSpgubun]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;


// 외래재진예약 취소 (취소일시 Udpate)
function HmdOpdlst.CancelOpReserv(Patno,Meddate,Meddept,Meddr,Medtime,
                                  Editid,Editip:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[Patno,Meddate,Meddept,Meddr,Medtime,
                  Editid,Editip]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 타진료과 외래예약 현황 조회
function HmdOpdlst.SelectOtherDept(PatNo,MedDate,MedDept,Location:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4'); //환자번호;진료일;진료과
   SetFldValue(0,[PatNo,MedDate,MedDept,Location] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_L2')) then
   begin
      GetFldVar('S_STRING1',  sMedTime );  // 진료예약시간
      GetFldVar('S_STRING2',  sMedDept );  // 진료과
      GetFldVar('S_STRING3',  sMedYn   );  // 진료여부
      GetFldVar('S_STRING4',  sRcpYn   );  // 수납여부
      GetFldVar('S_STRING5',  sRemark  );  // 특기사항
      GetFldVar('S_STRING6',  sMedDrNm );  // 진료의Name
      GetFldVar('S_STRING7',  sRsvType );  // 예약구분
      GetFldVar('S_STRING8',  sFstmedTy);  // 초/재진여부
      GetFldVar('S_STRING9',  sDeptNm  );   // 진료과명
      GetFldVar('S_STRING10', sMedrcpYn); // 진찰료 수납여부
      GetFldVar('S_STRING11', sOrdDate );  // 진찰예약일자
      GetFldVar('S_STRING12', sRejtDate);  // 진찰예약일자

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 퇴원간호계획(왜래예약정보)
function HmdOpdlst.SelectDsnrpJoin(PatNo,AdmDate,MedDept,Location:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4'); //환자번호;퇴원예정일일;진료과
   SetFldValue(0,[PatNo,AdmDate,MedDept,Location] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_L2')) then
   begin
      GetFldVar('S_STRING1',  sMedTime );  // 진료예약시간
      GetFldVar('S_STRING2',  sMedDept );  // 진료과
      GetFldVar('S_STRING3',  sMedYn   );  // 진료여부
      GetFldVar('S_STRING4',  sRcpYn   );  // 수납여부
      GetFldVar('S_STRING5',  sRemark  );  // 특기사항
      GetFldVar('S_STRING6',  sMedDrNm );  // 진료의Name
      GetFldVar('S_STRING7',  sRsvType );  // 예약구분
      GetFldVar('S_STRING8',  sFstmedTy);  // 초/재진여부
      GetFldVar('S_STRING9',  sDeptNm );   // 진료과명
      GetFldVar('S_STRING10', sMedrcpyn );
      GetFldVar('S_STRING11', sRcpdate );
      GetFldVar('S_STRING12', sRejtdate );
      GetFldVar('S_STRING13', sMedDr );   // 진료과명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 외래예약 진료여부 Update
function HmdOpdlst.UpdateMedYn(PatNo,MedDate,MedDept,MedDr,MedTime,
                               EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[PatNo,MedDate,MedDept,MedDr,MedTime,
                  Editid,Editip]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdOpdlst.PatOpReserv(sType1,sType2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[sType1,sType2] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_L3')) then
   begin
      GetFldVar32('S_STRING1',  sMedTime );              // 진료예약시간
      GetFldVar32('S_STRING2',  sFstMedTy );             // 초/재진
      GetFldVar32('S_STRING3',  sPatTypeNm );            // 보험유형
      GetFldVar32('S_STRING4',  sMedDept   );            // 진료과
      GetFldVar32('S_STRING5',  sDeptNm  );              // 진료과명
      GetFldVar32('S_STRING6',  sMedDr );                // 진료의
      GetFldVar32('S_STRING7',  sMedDrNm );              // 진료의명
      GetFldVar32('S_STRING8',  sRsvType );              // 예약구분
      GetFldVar32('S_STRING9',  sMedYn );                // 진료여부
      GetFldVar32('S_STRING10', sMedrcpYn );             // 수납여부
      GetFldVar32('S_STRING11', sChartYn );              // 입원차트대출
      GetFldVar32('S_STRING12', sFilmYn);                // 필름대출
      GetFldVar32('S_STRING13', sRemark );               // 특기사항

      GetFldVar32('S_STRING14',  sRsvTypeCd); // 예약구분코드  */
      GetFldVar32('S_STRING15',  sPattype  ); // 환자유형코드  */
      GetFldVar32('S_STRING16',  sTypecd   ); // 보조유형코드   */
      GetFldVar32('S_STRING17',  sSpcdryn  ); // 지정진료여부   */
      GetFldVar32('S_STRING18',  sFstmedtyR); // 초재진여부   */
      GetFldVar32('S_STRING19',  sFstinpid ); //  접수자  */
      GetFldVar32('S_STRING20',  sFsttime  ); //  접수일시 */
      GetFldVar32('S_STRING21',  sCustcd   ); //    */
      GetFldVar32('S_STRING22',  sDccode   ); // 감면코드   */
      GetFldVar32('S_STRING23',  sOrddate  ); // 예약입력일자  */
      GetFldVar32('S_STRING24',  sFollow   );
      GetFldVar32('S_STRING25',  sNochcd   );
      GetFldVar32('S_STRING26',  sSmsyn    ); // 메시지수신여부. KimDaeYong 2021-12-16
      GetFldVar32('S_STRING27',  sInfuseyna); // 기본정보수신여부. KimDaeYong 2021-12-16

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


function HmdOpdlst.ChaDrListOpReserv(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5'); //진료일;진료과;전공의;진료여부;진료시간
   SetFldValue(0,[MedDate,MedDept,MedDr,MedYn,MedTime] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_L4')) then
   begin
      GetFldVar('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar('S_STRING1',  sMedDate );  // 진료일
      GetFldVar('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar('S_STRING3',  sMedDept );  // 진료과
      GetFldVar('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar('S_STRING10', sRemark  );  // 특기사항
      GetFldVar('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar('S_STRING12', sPatName );  // 환자명
      GetFldVar('S_STRING13', sSex     );  // 성별
      GetFldVar('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar('S_STRING20', sRsvType );  // 예약구분
      GetFldVar('S_STRING21', sDiagname);  // 진단명
      GetFldVar('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar('S_STRING24', sFollow );   // 진찰예약일자
      GetFldVar('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar('S_STRING26', sPattypeCd); // 환자유형코드
      GetFldVar('S_STRING27', sTypecd   ); // 보조유형코드
      GetFldVar('S_STRING28', sSpcdryn  ); // 지정진료여부
      GetFldVar('S_STRING29', sFstmedtyR); // 초재진여부
      GetFldVar('S_STRING30', sFstinpid ); // 접수자
      GetFldVar('S_STRING31', sFsttime  ); // 접수일시
      GetFldVar('S_STRING32', sCustcd   ); //
      GetFldVar('S_STRING33', sDccode   ); // 감면코드
      GetFldVar('S_STRING34', sHdsflag  ); // 보조환자유형
      GetFldVar('S_STRING35', sResNo1  );  // 주민번호1
      GetFldVar('S_STRING36', sResNo2  );  // 주민번호2
      GetFldVar('S_STRING37', sCurrloc  );  // 주민번호2
      GetFldVar('S_STRING38', sDschDate ); // 최종퇴원일
      GetFldVar('S_STRING39', sFuture  );
      GetFldVar('S_STRING40', sNochcd  );
      GetFldVar('S_STRING41', sReferyn );
      GetFldVar('S_STRING42', sArvyn   );
      GetFldVar('S_STRING43', sDenpatno);
      GetFldVar('S_STRING44', sAddress );
      GetFldVar('S_STRING45', sZipcd   );
      //GetFldVar('S_STRING46', sLastdate);
      GetFldVar('S_STRING47', sScanYn  );
      GetFldVar('S_STRING48', sSpgubun ); //특정환자구분(메르스관련), KimDaeYong 2015-06-17
      //외래환자이송사유, KimDaeYong 20106-11-08
      GetFldVar('S_STRING49', sTransrsn );
      GetFldVar('S_STRING50', sTransetc );
      GetFldVar('S_STRING51', sTranshosnm);
      GetFldVar('S_STRING52', sRmkyn    );
      GetFldVar('S_STRING53', sRmketc   );
      //임신부관리, KimDaeYong 2016-12-28
      GetFldVar('S_STRING54', sPregyn   );
      GetFldVar('S_STRING55', sTranshosgbn);
      GetFldVar('S_STRING56', sOpinyn   );
      GetFldVar('S_STRING57', sDiagcd   );  //주진단코드. KimDaeYong 2018-01-22
      GetFldVar('S_STRING58', sSilinsyn );  //실비보험가입여부. KimDaeYong 2020-11-25
      GetFldVar('S_STRING59', sDiagTypeCd );  //진단유형코드. KimDaeYong 2021-03-16

      GetFldVar('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar('L_LONG2',    iUnCollect);  // 미수금

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;


// 치과 외래재진예약 내역 Insert
function HmdOpdlst.DtInsertOpReserv(Patno,Meddate,Meddept,Meddr,Medtime,Remark,GenDr,
                                  Chartyn,Filmyn,TelNo1,TelNo2,TelNo3,Follow,
                                  Editid,Editip,RsvType:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_EDITID;S_EDITIP;S_STRING17');
   SetFldValue(0,[Patno,
                  Meddate,Meddept,Meddr,Medtime,Remark,GenDr,Chartyn,
                  Filmyn,TelNo1,TelNo2,TelNo3,Follow,Editid,Editip,RsvType]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_I2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// clinic예약 내역 Insert
function HmdOpdlst.InsertClinicReserv(Patno,Meddate,Meddept,Meddr,Medtime,Remark,
                                  Chartyn,Filmyn,TelNo1,TelNo2,TelNo3,Follow,
                                  Editid,Editip,sRsvGubun:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_EDITID;S_EDITIP;S_STRING16');
   SetFldValue(0,[Patno,
                  Meddate,Meddept,Meddr,Medtime,Remark,Chartyn,
                  Filmyn,TelNo1,TelNo2,TelNo3,Follow,Editid,Editip,sRsvGubun]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_I3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 클리닉예약 취소 (취소일시 Udpate)
function HmdOpdlst.CancelClinicReserv(Patno,Meddate,Meddept,Meddr,Medtime,
                                  Editid,Editip:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[Patno,Meddate,Meddept,Meddr,Medtime,
                  Editid,Editip]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 환자유형(PATTYPE) 일반(51)으로 변경
function HmdOpdlst.ChangePatType(Patno,Meddate,Meddept,Meddr,Medtime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5');
   SetFldValue(0,[Patno,Meddate,Meddept,Meddr,Medtime]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U4')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 수술의뢰시 외래 환자 선택을 위한 자료 검색
function HmdOpdlst.SelectOpPat(Patno1,MedDept1:String):Integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); //환자번호;진료과
   SetFldValue(0,[Patno1,MedDept1]);

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_L5')) then
   begin
      GetFldVar('S_STRING1',  sMedDate );  // 진료일
      GetFldVar('S_STRING2',  sMedDr   );  // 진료의
      GetFldVar('S_STRING3',  sMedTime );  // 진료예약시간

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//메인화면 환자번호 직접입력
function HmdOpdlst.SelectPat(PatNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1'); //환자번호;진료일;진료과
   SetFldValue(0,[PatNo ] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_L6')) then
   begin
      GetFldVar('S_STRING1',  sPatcls );
      GetFldVar('S_STRING2',  sAdmdate);
      GetFldVar('S_STRING3',  sMeddept);
      GetFldVar('S_STRING4',  sMeddr  );
      GetFldVar('S_STRING5',  sMedtime);
      GetFldVar('S_STRING6',  sMeddrnm);
      GetFldVar('S_STRING7',  sPatname);
      GetFldVar('S_STRING8',  sGubn   );
      GetFldVar('S_STRING9',  sPattype);
      GetFldVar('S_STRING10', sWardno );
      GetFldVar('S_STRING11', sRoomno );  


      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 소아과 환자 체중 및 체온 입력
function HmdOpdlst.UpdateWeight(Patno,Meddate,Meddept,Meddr,Medtime,
                                Bodytemp,Weight,Height,Patsect,RefPaper,PacsCd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11');
   SetFldValue(0,[Patno,Meddate,Meddept,Meddr,Medtime,
                  Bodytemp,Weight,Height,Patsect,RefPaper,PacsCd]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U5')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 해당일자 동일과 진료예약 여부 Check  2001/11/23
function HmdOpdlst.CheckReserv(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_LA')) then
   begin
      GetFldVar('S_STRING1',  sCount );     //예약건수

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 추가. 2002.11.13 환자도착여부 변경
function HmdOpdlst.ChangeArvyn(Patno,Meddate,Meddept,Meddr,Medtime,
                                  Editid,Editip,sGubun:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_EDITID;S_EDITIP;S_STRING5');
   SetFldValue(0,[Patno,Meddate,Meddept,Meddr,Medtime,
                  Editid,Editip,sGubun]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U6')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//(추가. 2003.03.25 이용언)
function HmdOpdlst.ListScopy(MedDate : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1'); //진료일;진료과;진료의;진료여부;진료시간
   SetFldValue32(0,[MedDate] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_LD')) then
   begin
      GetFldVar32('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1',  sMedDate );  // 진료일
      GetFldVar32('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar32('S_STRING3',  sMedDept );  // 진료과
      GetFldVar32('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar32('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar32('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar32('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar32('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar32('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar32('S_STRING10', sRemark  );  // 특기사항
      GetFldVar32('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar32('S_STRING12', sPatName );  // 환자명
      GetFldVar32('S_STRING13', sSex     );  // 성별
      GetFldVar32('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar32('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar32('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar32('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar32('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar32('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar32('S_STRING20', sRsvType );  // 예약구분
      GetFldVar32('S_STRING21', sDiagname);  // 진단명
      GetFldVar32('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar32('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar32('S_STRING24', sFollow );   // Follow up
      GetFldVar32('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar32('S_STRING26', sPattypeCd  ); // 환자유형코드  */
      GetFldVar32('S_STRING27', sTypecd   ); // 보조유형코드   */
      GetFldVar32('S_STRING28', sSpcdryn  ); // 지정진료여부   */
      GetFldVar32('S_STRING29', sFstmedtyR); // 초재진여부   */
      GetFldVar32('S_STRING30', sFstinpid ); //  접수자  */
      GetFldVar32('S_STRING31', sFsttime  ); //  접수일시 */
      GetFldVar32('S_STRING32', sCustcd   ); //    */
      GetFldVar32('S_STRING33', sDccode   ); // 감면코드   */
      GetFldVar32('S_STRING34', sHdsflag  );
      GetFldVar32('S_STRING35', sResno1  );
      GetFldVar32('S_STRING36', sResno2  );
      GetFldVar32('S_STRING37', sCurrloc  ); //차트위치
      GetFldVar32('S_STRING38', sDschDate  );
      GetFldVar32('S_STRING39', sFuture  );
      GetFldVar32('S_STRING40', sNochcd  );
      GetFldVar32('S_STRING41', sReferyn  );
      GetFldVar32('S_STRING42', sArvyn   );
      GetFldVar32('S_STRING43', sDenpatno);
      GetFldVar32('S_STRING44', sAddress );

      GetFldVar32('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar32('L_LONG2',    iUnCollect);  // 미수금

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;



// 특기사항을 입력하는 부분이다.  2004.01.05 이선규추가
function HmdOpdlst.update_remark(sPatno   ,  //* 환자번호   */
                                 sMeddate ,  //* 진료일자   */
                                 sMeddept ,  //* 진료과     */
                                 sMeddr   ,  //* 진료의사   */
                                 sMedtime ,  //* 진료예약시간(
                                 sRemark  ,  //* REMARK     */
                                 sEditid  ,  //* 수정자ID   */
                                 sEditip     //* 수정단말IP */
                                 : String) : Integer;  // opdls_u7
begin
	Result := -1;
	txAlloc;

  	setFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8');
  	setFldValue(0,[sPatno   ,  //* 환자번호   */
                  sMeddate ,  //* 진료일자   */
                  sMeddept ,  //* 진료과     */
                  sMeddr   ,  //* 진료의사   */
                  sMedtime ,  //* 진료예약시간(
                  sRemark  ,  //* REMARK     */
                  sEditid  ,  //* 수정자ID   */
                  sEditip     //* 수정단말IP */
                 ]);

	if txPutF('MD_OPDLS_U7') then
	begin
  		Result	:=	1;
    	txFree;
	end;
end;

function HmdOpdlst.ChaDrListNPDHReserv(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5'); //진료일;진료과;전공의;진료여부;진료시간
   SetFldValue(0,[MedDate,MedDept,MedDr,MedYn,MedTime] );

   //Tuxedo Service Call
   if (txGetF('MD_OPDLS_LE')) then
   begin
      GetFldVar('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar('S_STRING1',  sMedDate );  // 진료일
      GetFldVar('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar('S_STRING3',  sMedDept );  // 진료과
      GetFldVar('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar('S_STRING10', sRemark  );  // 특기사항
      GetFldVar('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar('S_STRING12', sPatName );  // 환자명
      GetFldVar('S_STRING13', sSex     );  // 성별
      GetFldVar('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar('S_STRING20', sRsvType );  // 예약구분
      GetFldVar('S_STRING21', sDiagname);  // 진단명
      GetFldVar('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar('S_STRING24', sFollow );   // 진찰예약일자
      GetFldVar('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar('S_STRING26', sPattypeCd); // 환자유형코드
      GetFldVar('S_STRING27', sTypecd   ); // 보조유형코드
      GetFldVar('S_STRING28', sSpcdryn  ); // 지정진료여부
      GetFldVar('S_STRING29', sFstmedtyR); // 초재진여부
      GetFldVar('S_STRING30', sFstinpid ); // 접수자
      GetFldVar('S_STRING31', sFsttime  ); // 접수일시
      GetFldVar('S_STRING32', sCustcd   ); //
      GetFldVar('S_STRING33', sDccode   ); // 감면코드
      GetFldVar('S_STRING34', sHdsflag  ); // 보조환자유형
      GetFldVar('S_STRING35', sResNo1  );  // 주민번호1
      GetFldVar('S_STRING36', sResNo2  );  // 주민번호2
      GetFldVar('S_STRING37', sCurrloc  );  // 주민번호2
      GetFldVar('S_STRING38', sDschDate  ); // 최종퇴원일
      GetFldVar('S_STRING39', sFuture  );
      GetFldVar('S_STRING40', sNochcd  );
      GetFldVar('S_STRING41', sReferyn );
      GetFldVar('S_STRING42', sArvyn   );
      GetFldVar('S_STRING43', sDenpatno);
      GetFldVar('S_STRING44', sAddress );
      GetFldVar('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar('L_LONG2',    iUnCollect);  // 미수금

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

function HmdOpdlst.ListNPDHReserv(MedDate,MedDept,MedDr,MedYn,MedTime:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5'); //진료일;진료과;진료의;진료여부;진료시간
   SetFldValue32(0,[MedDate,MedDept,MedDr,MedYn,MedTime] );

   //Tuxedo Service Call
   if (txGetF32('MD_OPDLS_LF')) then
   begin
      GetFldVar32('S_PATNO',    sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1',  sMedDate );  // 진료일
      GetFldVar32('S_STRING2',  sMedTime );  // 진료예약시간
      GetFldVar32('S_STRING3',  sMedDept );  // 진료과
      GetFldVar32('S_STRING4',  sFstmedTy);  // 초/재진여부
      GetFldVar32('S_STRING5',  sMedDr   );  // 진료의
      GetFldVar32('S_STRING6',  sMedYn   );  // 진료여부
      GetFldVar32('S_STRING7',  sRcpYn   );  // 수납여부
      GetFldVar32('S_STRING8',  sChartYn );  // 입원차트대출여부
      GetFldVar32('S_STRING9',  sFilmYn  );  // 필름대출희망여부
      GetFldVar32('S_STRING10', sRemark  );  // 특기사항
      GetFldVar32('S_STRING11', sPatType );  // 환자유형(보험구분)
      GetFldVar32('S_STRING12', sPatName );  // 환자명
      GetFldVar32('S_STRING13', sSex     );  // 성별
      GetFldVar32('S_STRING14', sBirtDate);  // 생년월일
      GetFldVar32('S_STRING15', sTelNo1  );  // 환자전화번호1
      GetFldVar32('S_STRING16', sTelNo2  );  // 환자전화번호2
      GetFldVar32('S_STRING17', sTelNo3  );  // 환자전화번호3
      GetFldVar32('S_STRING18', sMedDrNm );  // 진료의Name
      GetFldVar32('S_STRING19', sOtherYn );  // 타과예약여부
      GetFldVar32('S_STRING20', sRsvType );  // 예약구분
      GetFldVar32('S_STRING21', sDiagname);  // 진단명
      GetFldVar32('S_STRING22', sMedrcpYn);  // 진찰료 수납여부
      GetFldVar32('S_STRING23', sOrdDate );  // 진찰예약일자
      GetFldVar32('S_STRING24', sFollow );   // Follow up
      GetFldVar32('S_STRING25', sRsvTypeCd); // 예약구분코드
      GetFldVar32('S_STRING26', sPattypeCd); // 환자유형코드  */
      GetFldVar32('S_STRING27', sTypecd   ); // 보조유형코드   */
      GetFldVar32('S_STRING28', sSpcdryn  ); // 지정진료여부   */
      GetFldVar32('S_STRING29', sFstmedtyR); // 초재진여부   */
      GetFldVar32('S_STRING30', sFstinpid ); //  접수자  */
      GetFldVar32('S_STRING31', sFsttime  ); //  접수일시 */
      GetFldVar32('S_STRING32', sCustcd   ); //    */
      GetFldVar32('S_STRING33', sDccode   ); // 감면코드   */
      GetFldVar32('S_STRING34', sHdsflag  );
      GetFldVar32('S_STRING35', sResno1  );
      GetFldVar32('S_STRING36', sResno2  );
      GetFldVar32('S_STRING37', sCurrloc  ); //차트위치
      GetFldVar32('S_STRING38', sDschDate  );
      GetFldVar32('S_STRING39', sFuture  );
      GetFldVar32('S_STRING40', sNochcd  );
      GetFldVar32('S_STRING41', sReferyn  );
      GetFldVar32('S_STRING42', sArvyn   );
      GetFldVar32('S_STRING43', sDenpatno);
      GetFldVar32('S_STRING44', sAddress );
      //GetFldVar32('S_STRING45', sZipcd   );

      GetFldVar32('L_LONG1',    iStayNo  );  // 진료대기순서
      GetFldVar32('L_LONG2',    iUnCollect);  // 미수금

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 특별환자구분(메르스관련)변경, KimDaeYong 2015-06-17
function HmdOpdlst.UpdateSpgubun(inPatno, inMeddate, inMeddept, inMeddr, inMedtime, inPatsect, inSpgubun, inEditid, inEditip:string):integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9');
   SetFldValue(0,[inPatno, inMeddate, inMeddept, inMeddr,
                  inMedtime, inPatsect, inSpgubun, inEditid, inEditip]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U7')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//산부인과,난임시술여부. KimDaeYong 2017-09-25
function HmdOpdlst.UpdateDiffpreg(inPatno,inMeddate,inMeddept,inMeddr,inMedtime,inDiffpregyn,inEditid,inEditip:string):integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8');
   SetFldValue(0,[inPatno, inMeddate, inMeddept, inMeddr,
                  inMedtime, inDiffpregyn, inEditid, inEditip]);

   //Tuxedo Service Call
   if (txPutF('MD_OPDLS_U8')) then
   begin
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdPlanct 	간호계획코드                                                  //
////////////////////////////////////////////////////////////////////////////////

// 간호계획코드 조회
function HmdPlanct.List1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPplant 	환자별간호계획                                                //
////////////////////////////////////////////////////////////////////////////////

// 환자별 간호계획 조회
function HmdPplant.List1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

// 환자별 간호계획 수정
function HmdPplant.Update1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

// 환자별 간호계획 삭제
function HmdPplant.Delete1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

// 환자별 간호계획 저장
function HmdPplant.Input1(Cnt:Integer):Integer;
begin
{
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('PATNO;ORDDATE;ORDSEQNO');
   SetFldValue(0,[PatNo,OrdDate,OrdSeqno] );
   if (txGetF('MD_R_EXAMNT')) then begin //Tuxedo Service Call
      GetFldVar('SPCCODE1',sSpcCode1);
      Result := 1;
      txFree;
   end;
}
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdDsnrpt 	퇴원시간호계획                                                 //
////////////////////////////////////////////////////////////////////////////////

function HmdDsnrpt.SelectDsnrp(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sType1,sType2]);
   if (txGetF('MD_DSNRP_S1')) then begin //Tuxedo Service Call
      GetFldVar ('S_CODE1',  sRsvtime1);
      GetFldVar ('S_CODE2',  sRsvtime2);
      GetFldVar ('S_CODE3',  sRsvtime3);
      GetFldVar ('S_CODE4',  sRsvtime4);
      GetFldVar ('S_CODE5',  sRsvtime5);
      GetFldVar ('S_CODE6',  sRsvtime6);
      GetFldVar ('S_CODE7',  sMeddept1);
      GetFldVar ('S_CODE8',  sMeddept2);
      GetFldVar ('S_CODE9',  sMeddept3);
      GetFldVar ('S_CODE10', sMeddept4);
      GetFldVar ('S_CODE11', sMeddept5);
      GetFldVar ('S_CODE12', sMeddept6);
      GetFldVar ('S_CODE13', sMeddr1);
      GetFldVar ('S_CODE14', sMeddr2);
      GetFldVar ('S_CODE15', sMeddr3);
      GetFldVar ('S_CODE16', sMeddr4);
      GetFldVar ('S_CODE17', sMeddr5);
      GetFldVar ('S_CODE18', sMeddr6);
      GetFldVar ('S_CODE19', sOexmrsv);
      GetFldVar ('S_CODE20', sOdrg);
      GetFldVar ('S_CODE21', sMvmthd);
      GetFldVar ('S_CODE22', sConsstat);
      GetFldVar ('S_CODE23', sAftsrv);
      GetFldVar ('S_CODE24', sAftsrvd);
      GetFldVar ('S_CODE25', sDietkind);
      GetFldVar ('S_CODE26', sDietname1);
      GetFldVar ('S_CODE27', sDietname2);
      GetFldVar ('S_CODE28', sPrvinfc);
      GetFldVar ('S_CODE29', sDmctrl);
      GetFldVar ('S_CODE30', sFtcare);
      GetFldVar ('S_NAME1',  sBpctrl);
      GetFldVar ('S_NAME2',  sFmctrl);
      GetFldVar ('S_NAME3',  sWtctrl);
      GetFldVar ('S_NAME4',  sOrcare);
      GetFldVar ('S_NAME5',  sTbctrl);
      GetFldVar ('S_NAME6',  sStctrl);
      GetFldVar ('S_NAME7',  sDsetc);
      GetFldVar ('S_NAME8',  sAskpn);
      GetFldVar ('S_NAME9',  sEduwho);
      GetFldVar ('S_NAME10', sOutsmtm);
      GetFldVar ('S_NAME11', sActarea);
      GetFldVar ('S_NAME12', sBath);
      GetFldVar ('S_NAME13', sBathetc);
      GetFldVar ('S_NAME14', sGohome);
      GetFldVar ('S_NAME15', sGohomed);
      GetFldvar ('S_NAME16', sDschDate);
      GetFldvar ('S_NAME17', sAdmSchdt);
      GetFldVar ('S_NAME18', sAftsrvinf);

      Result := GetRecordCnt('S_NAME1');
      txFree;
   end;
end;

function HmdDsnrpt.InsertDsnrpt(sPatNo,      sAdmDate,    sDschDate,   sAdmSchdt, sRsvTime1,
                                sRsvTime2,   sRsvTime3,   sRsvTime4,   sRsvTime5,
                                sRsvTime6,   sMedDept1,   sMedDept2,   sMedDept3,
                                sMedDept4,   sMedDept5,   sMedDept6,   sMedDr1,
                                sMedDr2,     sMedDr3,     sMedDr4,     sMedDr5,
                                sMedDr6,     sOexMrsv,    sOdrg,       sMvMthd,
                                sConsStat,   sAftSrv,     sAftSrvd,    sDietKind,
                                sDietName1,  sDietName2,  sPrvinfc,    sDmCtrl,
                                sFtCare,     sBpCtrl,     sFmCtrl,     sWtCtrl,
                                sOrCare,     sTbCtrl,     sStCtrl,     sDsEtc,
                                sAskPn,      sEduWho,     sOutSmtm,    sActArea,
                                sBath,       sBathEtc,    sGoHome,     sGoHomed,
                                sEditId,     sEditIp,     sAftsrvinf : String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_DATE1;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;'+
              'S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;'+
              'S_CODE18;S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;'+
              'S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;S_NAME1;S_NAME2;S_NAME3;'+
              'S_NAME4;S_NAME5;S_NAME6;S_NAME7;S_NAME8;S_NAME9;S_NAME10;S_NAME11;'+
              'S_NAME12;S_NAME13;S_NAME14;S_NAME15;S_NAME16;S_NAME17;S_NAME18;S_NAME19;S_NAME20;S_NAME21');
   SetFldValue(0, [sPatNo,      sAdmDate,    sDschDate,   sAdmSchdt, sRsvTime1,
                   sRsvTime2,   sRsvTime3,   sRsvTime4,   sRsvTime5,
                   sRsvTime6,   sMedDept1,   sMedDept2,   sMedDept3,
                   sMedDept4,   sMedDept5,   sMedDept6,   sMedDr1,
                   sMedDr2,     sMedDr3,     sMedDr4,     sMedDr5,
                   sMedDr6,     sOexMrsv,    sOdrg,       sMvMthd,
                   sConsStat,   sAftSrv,     sAftSrvd,    sDietKind,
                   sDietName1,  sDietName2,  sPrvinfc,    sDmCtrl,
                   sFtCare,     sBpCtrl,     sFmCtrl,     sWtCtrl,
                   sOrCare,     sTbCtrl,     sStCtrl,     sDsEtc,
                   sAskPn,      sEduWho,     sOutSmtm,    sActArea,
                   sBath,       sBathEtc,    sGoHome,     sGoHomed,
                   sEditId,     sEditIp,     sAftsrvinf]);
   if (txPutF('MD_DSNRP_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;
////////////////////////////////////////////////////////////////////////////////
//  HmdErinft 	응급간호정보조사지                                            //
////////////////////////////////////////////////////////////////////////////////

// 응급환자 List 조회
function HmdErinft.SelAllErinf(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
//   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7');
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,''] );
   if (txGetF32('MD_ERINF_L1')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1',  sPatno);
      GetFldVar32 ('S_CODE2',  sMeddate);
      GetFldVar32 ('S_CODE3',  sMedtime);
      GetFldVar32 ('S_CODE4',  sLocation);
      GetFldVar32 ('S_CODE5',  sRecNrs);
      GetFldVar32 ('S_CODE6',  sGendr);
      GetFldVar32 ('S_CODE7',  sAppear);
      GetFldVar32 ('S_CODE8',  sOutdate);
      GetFldVar32 ('S_CODE9',  sErrslt);
      GetFldVar32 ('S_CODE10', sIndate);
      GetFldVar32 ('S_CODE11', sPatname);
      GetFldVar32 ('S_CODE12', sSex);
      GetFldVar32 ('S_CODE13', sBirtdate);
      GetFldVar32 ('S_CODE14', sDeptnm);
      GetFldVar32 ('S_CODE15', sMedDept);  // 진료과
      GetFldVar32 ('S_CODE16', sGenDrCd);  // 담당의
      GetFldVar32 ('S_CODE17', sDiagName); // 진단명
      GetFldVar32 ('S_CODE18', sLstOrdDt); // 최종처방시각
      GetFldVar32 ('S_CODE19', sRsltRmk2); // 입원진료과
      GetFldVar32 ('S_CODE20', sRsltRmk1); // 입원병동
      GetFldVar32 ('S_CODE21', sDiagKind); // 질환분류
      GetFldVar32 ('S_CODE22', sEmtype);   //
      GetFldVar32 ('S_CODE23', sOutyn   ); //퇴실,퇴원지시 여부
      GetFldVar32 ('S_CODE24', sRemarks ); //remark
      GetFldVar32 ('S_CODE25', sPathRmk ); //입원상세경로
      GetFldVar32 ('S_CODE26', sDiagcd );  //주진단코드 KimDaeYong 2008-06-17
      GetFldVar32 ('S_CODE27', sAdmdr  );  //입원진료의 KimDaeYong 2008-09-02
      GetFldVar32 ('S_CODE28', sScanYn );
      GetFldVar32 ('S_CODE29', sFcdr   );
      GetFldVar32 ('S_CODE30', sFcdrnm );
      GetFldVar32 ('S_CODE31', sGendrnm1 );
      GetFldVar32 ('S_CODE32', sSpgubun );
      GetFldVar32 ('S_CODE33', sKtascd );
      GetFldVar32 ('S_CODE34', sCaretime );
      GetFldVar32 ('S_CODE36', sResno1 );   //임상기록출력물 때문에 추가.20171205.kya.
      GetFldVar32 ('S_CODE37', sResno2 );
      GetFldVar32 ('S_CODE38', sZpaddress );
      GetFldVar32 ('S_CODE39', sAddress );
      GetFldVar32 ('S_CODE40', sTelno1 );
      GetFldVar32 ('S_CODE44', sSilinsyn );
      GetFldVar32 ('S_CODE45', sSelfyn );

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 이선규 추가 03-03-31
function HmdErinft.SelAllErinf1(sMeddate :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sMeddate]);
   if (txGetF('MD_ERLST_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  v_Arvtime  );
      GetFldVar('S_STRING2',  v_Patno    );
      GetFldVar('S_STRING3',  v_Patname  );
      GetFldVar('S_STRING4',  v_Sex      );
      GetFldVar('S_STRING5',  v_Age      );
      GetFldVar('S_STRING6',  v_Meddept  );
      GetFldVar('S_STRING7',  v_Diagnm   );
      GetFldVar('S_STRING8',  v_Conndate );
      GetFldVar('S_STRING9',  v_Arvdate  );
      GetFldVar('S_STRING10', v_Gendr    );
      GetFldVar('S_STRING11', v_Outdate  );
      GetFldVar('S_STRING12', v_Rslrmk   );
      GetFldVar('S_STRING13', v_Diagcd   );
      GetFldVar('S_STRING14', v_Meddate  );
      GetFldVar('S_STRING15', v_Medtime  );
      GetFldVar('S_STRING16', v_Emdiagcd  ); 

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdErinft.SelAllErinf2(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF32('MD_ERINF_L1')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1',  sPatno);
      GetFldVar32 ('S_CODE2',  sMeddate);
      GetFldVar32 ('S_CODE3',  sMedtime);
      GetFldVar32 ('S_CODE4',  sLocation);
      GetFldVar32 ('S_CODE5',  sRecNrs);
      GetFldVar32 ('S_CODE6',  sGendr);
      GetFldVar32 ('S_CODE7',  sAppear);
      GetFldVar32 ('S_CODE8',  sOutdate);
      GetFldVar32 ('S_CODE9',  sErrslt);
      GetFldVar32 ('S_CODE10', sIndate);
      GetFldVar32 ('S_CODE11', sPatname);
      GetFldVar32 ('S_CODE12', sSex);
      GetFldVar32 ('S_CODE13', sBirtdate);
      GetFldVar32 ('S_CODE14', sDeptnm);
      GetFldVar32 ('S_CODE15', sMedDept);
      GetFldVar32 ('S_CODE16', sGendrCd);
      GetFldVar32 ('S_CODE17', sDiagName);
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdErinft.SelAllErinf3(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_ERINF_LD')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_CODE1', sIndate);
      GetFldVar ('S_CODE2', sOutdate);
      GetFldVar ('S_CODE3', sDeptnm);
      GetFldVar ('S_CODE4', sGendr);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdErinft.SelOneErinf(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_CODE1;S_CODE2');
   SetFldValue(0,[sType1,sType2,sType3] );
   if (txGetF('MD_ERINF_S2')) then
   begin //Tuxedo Service Call
      GetFldVar('S_CODE1',  sCaretime);
      GetFldVar('S_CODE2',  sLocation);
      GetFldVar('S_CODE3',  sStepcd);
      GetFldVar('S_CODE4',  sSteprmk);
      GetFldVar('S_CODE5',  sPathcd);
      GetFldVar('S_CODE6',  sPathrmk);
      GetFldVar('S_CODE7',  sAccitype);
      GetFldVar('S_CODE8',  sAccidetl);
      GetFldVar('S_CODE9',  sAccidate);
      GetFldVar('S_CODE10', sAccisite);
      GetFldVar('S_CODE11', sInfdnr);
      GetFldVar('S_CODE12', sAppear);
      GetFldVar('S_CODE13', sConsstat);
      GetFldVar('S_CODE14', sConsrmk);
      GetFldVar('S_CODE15', sOutdate);
      GetFldVar('S_CODE16', sRecnrs);
      GetFldVar('S_CODE17', sBodytemp);
      GetFldVar('S_CODE18', sPulse);
      GetFldVar('S_CODE19', sRespcnt);
      GetFldVar('S_CODE20', sBldpress);
      GetFldVar('S_CODE21', sWeight);
      GetFldVar('S_CODE22', sTelno1);
      GetFldVar('S_CODE23', sTelno2);
      GetFldVar('S_CODE24', sTelno3);
      GetFldVar('S_CODE25', sOutyn);
      GetFldVar('S_CODE26', sDiesecd);
      GetFldVar('S_CODE27', sDiesermk);
      GetFldVar('S_CODE28', sEdustat);
      GetFldVar('S_CODE29', sMedrslt1);
      GetFldVar('S_CODE30', sMedrslt2);
      GetFldVar('S_NAME1',  sMedrslt3);
      GetFldVar('S_NAME2',  sRsltrmk1);
      GetFldVar('S_NAME3',  sRsltrmk2);
      GetFldVar('S_NAME4',  sRsltrmk3);
      GetFldVar('S_NAME5',  sErrslt);
      GetFldVar('S_NAME6',  sIndate);
      GetFldVar('S_NAME7',  sErfeeYn);
      GetFldVar('S_NAME8',  sCprYn);
      GetFldVar('S_NAME9',  sStatDept);
      GetFldVar('S_NAME10',  sDiagKind);
      GetFldVar('S_NAME11',  sDisease);
      GetFldVar('S_NAME12',  sEmopyn);
      GetFldVar('S_NAME13',  sAddInfo);
      GetFldVar('S_NAME14',  sMedrslt4);
      GetFldVar('S_NAME15',  sMedrslt5);
      GetFldVar('S_NAME16',  sMedrslt6);
      GetFldVar('S_NAME17',  sMedrslt7);
      GetFldVar('S_STRING1', sDecDate );
      GetFldVar('S_STRING2', sERDept  );
      GetFldVar('S_STRING3', sHomeYN  );
      GetFldVar('S_STRING4', sLeavYN  );
      GetFldVar('S_STRING5', sETCMemo );
      GetFldVar('S_STRING6', sHomeDate);
      GetFldVar('S_STRING7', sSelfdsch);
      GetFldVar('S_STRING8',  sCommon);
      GetFldVar('S_STRING9',  sWorkdate);
      GetFldVar('S_STRING10', sSymtom1);
      GetFldVar('S_STRING11', sSymtom2);
      GetFldVar('S_STRING12', sSymtom3);
      GetFldVar('S_STRING13', sSymseq1); 
      GetFldVar('S_STRING14', sSymseq2); 
      GetFldVar('S_STRING15', sSymseq3); 
      GetFldVar('S_STRING16', sInten);   
      GetFldVar('S_STRING17', sInjury);  
      GetFldVar('S_STRING18', sDangsa);  
      GetFldVar('S_STRING19', sBoho1);   
      GetFldVar('S_STRING20', sBoho2);   
      GetFldVar('S_STRING21', sBoho3);   
      GetFldVar('S_STRING22', sBoho4);   
      GetFldVar('S_STRING23', sBoho5);   
      GetFldVar('S_STRING24', sBoho6);   
      GetFldVar('S_STRING25', sBoho7);
      GetFldVar('S_STRING26', sBoho8);
      GetFldVar('S_STRING27', sBoho9);
      GetFldVar('S_STRING28', sSymnm1);
      GetFldVar('S_STRING29', sSymnm2);
      GetFldVar('S_STRING30', sSymnm3);
      GetFldVar('S_STRING31', sEtcRslt); // 2007.05.28 추가 송주
      GetFldVar('S_STRING32', sInHosp);
      GetFldVar('S_STRING33', sOutHosp);
      GetFldVar('S_STRING34', sInHospcd);
      GetFldVar('S_STRING35', sOutHospcd);
      GetFldVar('S_STRING36', sPtmidsid);  //재난번호추가. 20150630. kya.
      GetFldVar('S_STRING37', sPtmireid);  //구급활동일자번호추가. 20150630. kya.
      GetFldVar('S_STRING38', sOxygen);   // 산소포화도.20151208.kya.
      GetFldVar('S_STRING39', sApath);    //입원경로.20151208.kya.
      GetFldVar('S_STRING40', sWatchyn);   //관찰료 추가.20151229.kya.
      GetFldVar('S_STRING41', sRcpyn);    //수납여부 추가.20160107.kya.
      GetFldVar('S_STRING42', sAdmtime);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING43', sRoomnumber);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING44', sKtascd);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING45', sIsolate);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING46', sSound);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING47', sSelectYn);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING48', sSigndata);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING49', sSerialno);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING50', sSubjectdn);  //입원일자 추가.20160107.kya.
      GetFldVar('S_STRING51', sCprshare);  //입원일자 추가.20160107.kya.

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;


function HmdErinft.InsertErinf(sType1,sType2,sType3,sCaretime,sLocation,
                               sStepcd,sSteprmk,sPathcd,sPathrmk,sAccitype,
                               sAccidetl,sAccidate,sAccisite,sInfdnr,sAppear,
                               sConsstat,sConsrmk,sOutdate,sRecnrs,sBodytemp,
                               sPulse,sRespcnt,sBldpress,sWeight,sTelno1,
                               sTelno2,sTelno3,sOutyn,sDiesecd,sDiesermk,
                               sEdustat,sMedrslt1,sMedrslt2,sMedrslt3,
                               sMedrslt4,sMedrslt5,sMedrslt6,sMedrslt7,sRsltrmk1,
                               sRsltrmk2,sRsltrmk3,sErrslt,sEditid,sEditip,
                               sIndate,sErfeeyn,sCpryn,sStatDept,sDiagKind,
                               sDisease,sEmopyn,sAddInfo,sDecDate,sERDept,
                               sHomeYN,sLeavYN,sETCMemo,sHomeDate,sSelfdsch,sCommon,
                               sWorkdate,sSymtom1,sSymtom2,sSymtom3,sSymseq1,sSymseq2,sSymseq3,
                               sInten,sInjury,sDangsa,sBoho1,sBoho2,sBoho3,sBoho4,sBoho5,
                               sBoho6,sBoho7,sBoho8,sBoho9,sSymnm1,sSymnm2,sSymnm3,sEtcRslt,
                               sBldpressHi,sBldpressLo,sInHosp,sOutHosp,sInHospCd,sOutHospCd,
                               sPtmidsid,sPtmireid,sOxygen,sApath,sWatchyn:String;
                               sCnt:integer):Integer;

begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;'+
              'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;'+
              'S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;'+
              'S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;'+
              'S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;'+
              'S_NAME1;S_NAME2;S_NAME3;S_NAME4;'+
              'S_NAME19;S_NAME20;S_NAME21;S_NAME22;S_NAME5;'+
              'S_NAME6;S_NAME7;S_NAME8;S_NAME9;S_NAME10;'+
              'S_NAME11;S_NAME12;S_NAME13;S_NAME14;S_NAME15;'+
              'S_NAME16;S_NAME17;S_NAME18;S_STRING1;S_STRING2;'+
              'S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;'+
              'S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;'+
              'S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;'+
              'S_STRING28;S_STRING29;S_STRING30;S_STRING31;S_STRING34;S_STRING35;'+
              'S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;S_STRING41;'+
              'S_STRING42;S_STRING43;S_STRING44;L_LONG1');
   SetFldValue(0,[sType1,sType2,sType3,sCaretime,sLocation,
                  sStepcd,sSteprmk,sPathcd,sPathrmk,sAccitype,
                  sAccidetl,sAccidate,sAccisite,sInfdnr,sAppear,
                  sConsstat,sConsrmk,sOutdate,sRecnrs,sBodytemp,
                  sPulse,sRespcnt,sBldpress,sWeight,sTelno1,
                  sTelno2,sTelno3,sOutyn,sDiesecd,sDiesermk,
                  sEdustat,sMedrslt1,sMedrslt2,sMedrslt3,
                  sMedrslt4,sMedrslt5,sMedrslt6,sMedrslt7,sRsltrmk1,
                  sRsltrmk2,sRsltrmk3,sErrslt,sEditid,sEditip,
                  sIndate,sErfeeyn,sCpryn,sStatDept,sDiagKind,
                  sDisease,sEmopyn,sAddInfo,sDecDate,sERDept,
                  sHomeYN,sLeavYN,sETCMemo,sHomeDate,sSelfdsch,
                  sCommon,sWorkdate,sSymtom1,sSymtom2,sSymtom3,
                  sSymseq1,sSymseq2,sSymseq3,sInten,sInjury,
                  sDangsa,sBoho1,sBoho2,sBoho3,sBoho4,
                  sBoho5,sBoho6,sBoho7,sBoho8,sBoho9,
                  sSymnm1,sSymnm2,sSymnm3,sEtcRslt,sBldpressHi,sBldpressLo,
                  sInHosp,sOutHosp,sInHospCd,sOutHospCd,sPtmidsid,sPtmireid,
                  sOxygen,sApath,sWatchyn,sCnt]);
   //Tuxedo Service Call
   if (txPutF('MD_ERINF_I3')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 응급환자 통계1
function HmdErinft.SelErStat(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue32(0,[sType1,sType2,sType3,sType4] );
   if (txGetF32('MD_ERINF_L2')) then
   begin //Tuxedo Service Call
 		GetFldVar32 ('S_CODE1', sPatno);
		GetFldVar32 ('S_CODE2', sPatname);
		GetFldVar32 ('S_CODE3', sSex);
		GetFldVar32 ('S_CODE4', sBirtdate);
		GetFldVar32 ('S_CODE5', sDiagname);
		GetFldVar32 ('S_CODE6', sWardno);
		GetFldVar32 ('S_CODE7', sRoomno);
		GetFldVar32 ('S_CODE8', sDeptnm);
		GetFldVar32 ('S_CODE9', sRsltrmk1);
		GetFldVar32 ('S_CODE10',sMedrslt1);
      //
		GetFldVar32 ('S_CODE11',sMeddate);
		GetFldVar32 ('S_CODE12',sMedtime);
		GetFldVar32 ('S_CODE13',sRsltrmk3);
		GetFldVar32 ('S_CODE14',sCpryn);
      //
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 응급환자 통계1
function HmdErinft.SelErStat2(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sType1,sType2,sType3] );
   if (txGetF('MD_ERINF_L3')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_CODE1', sType4 );
      GetFldVar ('S_CODE2', sType5 );
      GetFldVar ('S_CODE3', sType6 );
      GetFldVar ('S_CODE4', sType7 );
      GetFldVar ('S_CODE5', sType8 );
      GetFldVar ('S_CODE6', sType9 );
      GetFldVar ('S_CODE7', sType10);
      GetFldVar ('S_CODE8', sType11);
      GetFldVar ('S_CODE9', sType12);
      GetFldVar ('S_CODE10',sType13);
      GetFldVar ('S_CODE11',sType14);
      GetFldVar ('S_CODE12',sType15);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 응급환자 통계
// 응급환자 통계1
function HmdErinft.SelErStat3(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue32(0,[sType1,sType2,sType3] );
   if (txGetF32('MD_ERINF_L4')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1'  , sType6 );
      GetFldVar32 ('S_CODE2'  , sType7 );
      GetFldVar32 ('S_CODE3'  , sType8 );
      GetFldVar32 ('S_CODE4'  , sType9 );
      GetFldVar32 ('S_CODE5'  , sType10);
      GetFldVar32 ('S_CODE6'  , sType11);
      GetFldVar32 ('S_CODE7'  , sType12);
      GetFldVar32 ('S_CODE8'  , sType13);
      GetFldVar32 ('S_CODE9'  , sType14);
      GetFldVar32 ('S_CODE10' , sType15);
      GetFldVar32 ('S_CODE11' , sType16);
      GetFldVar32 ('S_CODE12' , sType17);
      GetFldVar32 ('S_CODE13' , sType18);
      GetFldVar32 ('S_CODE14' , sType19);
      GetFldVar32 ('S_CODE15' , sType20);
      GetFldVar32 ('S_CODE16' , sType21);
      GetFldVar32 ('S_CODE17' , sType22);
      GetFldVar32 ('S_CODE18' , sType23);
      GetFldVar32 ('S_CODE19' , sType24);
      GetFldVar32 ('S_CODE20' , sType25);

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

//추가...
// 응급센터 환자현황1의 환자리스트 - 진료과별
function HmdErinft.SelErStat4(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF32('MD_ERINF_L5')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1', sMeddate);
      GetFldVar32 ('S_CODE2', sPatno);
      GetFldVar32 ('S_CODE3', sPatname);
      GetFldVar32 ('S_CODE4', sSex);
      GetFldVar32 ('S_CODE5', sBirtdate);
      GetFldVar32 ('S_CODE6', sDiagname);
      GetFldVar32 ('S_CODE7', sStatdept);
      GetFldVar32 ('S_CODE8', sMedtime);
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 응급환자 통계1
function HmdErinft.SelErStat5(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sType1,sType2,sType3] );
   if (txGetF('MD_ERINF_L6')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_CODE1', sType4 );
      GetFldVar ('S_CODE2', sType5 );
      GetFldVar ('S_CODE3', sType6 );
      GetFldVar ('S_CODE4', sType7 );
      GetFldVar ('S_CODE5', sType8 );
      GetFldVar ('S_CODE6', sType9 );
      GetFldVar ('S_CODE7', sType10);
      GetFldVar ('S_CODE8', sType11);
      GetFldVar ('S_CODE9', sType12);
      GetFldVar ('S_CODE10',sType13);
      GetFldVar ('S_CODE11',sType14);
      GetFldVar ('S_CODE12',sType15);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 응급센터 환자현황1의 환자리스트 - 질환분류별
function HmdErinft.SelErStat6(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF32('MD_ERINF_L7')) then
   begin //Tuxedo Service Call
 		GetFldVar32 ('S_CODE1', sMeddate);
		GetFldVar32 ('S_CODE2', sPatno);
		GetFldVar32 ('S_CODE3', sPatname);
		GetFldVar32 ('S_CODE4', sSex);
		GetFldVar32 ('S_CODE5', sBirtdate);
		GetFldVar32 ('S_CODE6', sDiagname);
      GetFldVar32 ('S_CODE7', sStatdept);
      GetFldVar32 ('S_CODE8', sMedtime);
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 질환분류별 중증도 통계
function HmdErinft.SelErStat7(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sType1,sType2,sType3] );
   if (txGetF('MD_ERINF_L8')) then
   begin //Tuxedo Service Call
 		GetFldVar ('S_CODE1', sType4 );
		GetFldVar ('S_CODE2', sType5 );
		GetFldVar ('S_CODE3', sType6 );
		GetFldVar ('S_CODE4', sType7 );
		GetFldVar ('S_CODE5', sType8 );
      GetFldVar ('S_CODE6', sType9 );
      GetFldVar ('S_CODE7', sType10 );
      GetFldVar ('S_CODE8', sType11 );
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 응급센터 환자현황1의 환자리스트 - 중증도 - 질환분류별
function HmdErinft.SelErStat8(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF32('MD_ERINF_L9')) then
   begin //Tuxedo Service Call
 		GetFldVar32 ('S_CODE1', sMeddate);
		GetFldVar32 ('S_CODE2', sPatno);
		GetFldVar32 ('S_CODE3', sPatname);
		GetFldVar32 ('S_CODE4', sSex);
		GetFldVar32 ('S_CODE5', sBirtdate);
		GetFldVar32 ('S_CODE6', sDiagname);
      GetFldVar32 ('S_CODE7', sStatdept);
      GetFldVar32 ('S_CODE8', sMedtime);
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 응급센터 응급이송서비스 통계 모듈 조회
function HmdErinft.SelErStat9(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue32(0,[sType1,sType2,sType3] );
   if (txGetF32('MD_ERINF_LF')) then       // md_erinf_lf.pc
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1'  , sType6 );
      GetFldVar32 ('S_CODE2'  , sType7 );
      GetFldVar32 ('S_CODE3'  , sType8 );
      GetFldVar32 ('S_CODE4'  , sType9 );
      GetFldVar32 ('S_CODE5'  , sType10);
      GetFldVar32 ('S_CODE6'  , sType11);
      GetFldVar32 ('S_CODE7'  , sType12);
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;


// 응급환자 월통계1
function HmdErinft.MonErStat(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_ERINF_S3')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1'  , sType7 );
		GetFldVar ('S_CODE2'  , sType8 );
		GetFldVar ('S_CODE3'  , sType9 );
		GetFldVar ('S_CODE4'  , sType10);
		GetFldVar ('S_CODE5'  , sType11);
		GetFldVar ('S_CODE6'  , sType12);
		GetFldVar ('S_CODE7'  , sType13);
		GetFldVar ('S_CODE8'  , sType14);
		GetFldVar ('S_CODE9'  , sType15);
		GetFldVar ('S_CODE10' , sType16);
		GetFldVar ('S_CODE11' , sType17);
		GetFldVar ('S_CODE12' , sType18);
		GetFldVar ('S_CODE13' , sType19);
      GetFldVar ('S_CODE14' , sType20);
      GetFldVar ('S_CODE15' , sType21);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;
// 응급환자 월통계2
function HmdErinft.MonErStat2(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_ERINF_LA')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1'  , sType4 );
		GetFldVar ('S_CODE2'  , sType5 );
      GetFldVar ('S_CODE3'  , sType6 );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

//

// 응급실내원경로등록
function HmdErinft.UpdateErinf(sPatno,sMeddate,sMedtime,sEmtype,sEditid,sEditip:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6');
   SetFldValue(0,[sPatno,sMeddate,sMedtime,sEmtype,sEditid,sEditip]);
   //Tuxedo Service Call
   if (txPutF('MD_ERINF_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//추가. 응급실 환자 의사 퇴원지시 2002.11.15 이용언
function HmdErinft.UpdateErinf2(sPatno,sMeddate,sMedtime,sEditid,sEditip, Gubun :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_EDITID;S_EDITIP;S_TYPE4');
   SetFldValue(0,[sPatno,sMeddate,sMedtime,sEditid,sEditip,Gubun]);

   if (txPutF('MD_ERINF_U2')) then
   begin
      Result := 1;

      txfree;
   end;
end;

//(추가. 203.04.28 이용언) 응급실 추가 통계 사항들
// 응급환자 월통계1
function HmdErinft.MonErStat3(Type1,Type2,Type3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[Type1,Type2,Type3] );
   if (txGetF('MD_ERINF_S4')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_STRING1'  , sType1 );
		GetFldVar ('S_STRING2'  , sType2 );
		GetFldVar ('S_STRING3'  , sType3 );
		GetFldVar ('S_STRING4'  , sType4 );
		GetFldVar ('S_STRING5'  , sType5 );
		GetFldVar ('S_STRING6'  , sType6 );
		GetFldVar ('S_STRING7'  , sType7 );
		GetFldVar ('S_STRING8'  , sType8 );
		GetFldVar ('S_STRING9'  , sType9 );
		GetFldVar ('S_STRING10' , sType10);
		GetFldVar ('S_STRING11' , sType11);
		GetFldVar ('S_STRING12' , sType12);
		GetFldVar ('S_STRING13' , sType13);
      GetFldVar ('S_STRING14' , sType14);
      GetFldVar ('S_STRING15' , sType15);
		GetFldVar ('S_STRING16' , sType16);
		GetFldVar ('S_STRING17' , sType17 );
		GetFldVar ('S_STRING18' , sType18);
		GetFldVar ('S_STRING19' , sType19);
		GetFldVar ('S_STRING20' , sType20);
		GetFldVar ('S_STRING21' , sType21);
		GetFldVar ('S_STRING22' , sType22);
		GetFldVar ('S_STRING23' , sType23);
		GetFldVar ('S_STRING24' , sType24);
		GetFldVar ('S_STRING25' , sType25);
		GetFldVar ('S_STRING26' , sType26);
		GetFldVar ('S_STRING27' , sType27);
		GetFldVar ('S_STRING28' , sType28);
		GetFldVar ('S_STRING29' , sType29);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//급성심근경색증(도착 아스피린) 불러오기
//KimDaeYong 2008-06-13
function HmdErinft.SelectErinft6(Type1,Type2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[Type1,Type2] );
   if (txGetF('MD_ERINF_S6')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_STRING1'  , sAspunord  );
		GetFldVar ('S_STRING2'  , sAspunord7 );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//추가. 응급실 환자 의사 퇴실취소 2003.05.13 이용언
function HmdErinft.UpdateErinf3(sPatno,sMedtime,sEditid,sEditip :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sMedtime,sEditid,sEditip]);

   if (txPutF('MD_ERINF_U3')) then
   begin
      Result := 1;

      txfree;
   end;
end;

//Remark 수정
function HmdErinft.UpdateErinf4(sPatno,sMedtime,sRemarks,sFcdrno :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sPatno,sMedtime,sRemarks,sFcdrno]);

   if (txPutF('MD_ERINF_U4')) then
   begin
      Result := 1;

      txfree;
   end;
end;

//급성심근경색증(도착아스피린 정보 입력) KimDaeYong 2008-06-13
function HmdErinft.UpdateErinf5(sPatno,sMeddate,sMainDiagCd,sAspunord,sAspunord7,sEditid,sEditip :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sMeddate,sMainDiagCd,sAspunord,sAspunord7,sEditid,sEditip]);

   if (txPutF('MD_ERINF_U5')) then  //md_erinf_u5.pc
   begin
      Result := 1;

      txfree;
   end;
end;

// 2005.04.15 김명종 추가 (응급실 재원환자수 및 재원시간 분석)
function HmdErinft.SelErStatB(sFrMonth,sToMonth,sFlag : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sFrMonth,sToMonth,sFlag] );
   if (txGetF('MD_ERINF_LB')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1'  , sMedDept);
		GetFldVar ('S_CODE2'  , sDeptnm );
		GetFldVar ('S_CODE3'  , sType1  );
		GetFldVar ('S_CODE4'  , sType2  );
		GetFldVar ('S_CODE5'  , sType3  );
		GetFldVar ('S_CODE6'  , sType4  );
		GetFldVar ('S_CODE7'  , sType5  );
		GetFldVar ('S_CODE8'  , sType6  );
		GetFldVar ('S_CODE9'  , sType7  );
		GetFldVar ('S_CODE10' , sType8  );
		GetFldVar ('S_CODE11' , sType9  );
		GetFldVar ('S_CODE12' , sType10 );
		GetFldVar ('S_CODE13' , sType11 );
		GetFldVar ('S_CODE14' , sType12 );
		GetFldVar ('S_CODE15' , sType13 );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 2005.04.15 김명종 추가 (응급실 재원환자수 및 재원시간 분석)
function HmdErinft.SelErStatC(sFrMonth,sToMonth,sFlag : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sFrMonth,sToMonth,sFlag] );
   if (txGetF('MD_ERINF_LC')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1'  , sMedDept);
		GetFldVar ('S_CODE2'  , sDeptnm );
		GetFldVar ('S_CODE3'  , sType1  );
		GetFldVar ('S_CODE4'  , sType2  );
		GetFldVar ('S_CODE5'  , sType3  );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 환자별 응급실 이력조회  2005-04-21 조일영 추가
function HmdErinft.PatERHis(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0, [sType1]);

   //Tuxedo Service Call
   if (txGetF('MD_ERINF_LE')) then
   begin
      GetFldVar('S_CODE1',  sPatName);
      GetFldVar('S_CODE2',  sSex);
      GetFldVar('S_CODE3',  sBirtdate);
      GetFldVar('S_CODE4',  sIndate);
      GetFldVar('S_CODE5',  sOutdate);
      GetFldVar('S_CODE6',  sDeptnm);
      GetFldVar('S_CODE7',  sGendr);
      GetFldVar('S_CODE8',  sMedDept);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 응급실경유입원환자정보 2015.8.29(by 김송주)
function HmdErinft.SelAllErinf4(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1]);

   if (txGetF('MD_ERLST_L2')) then
   begin //Tuxedo Service Call

      GetFldVar('S_STRING1',  sPatno     );
      GetFldVar('S_STRING2',  sPatname   );
      GetFldVar('S_STRING3',  sSex       );
      GetFldVar('S_STRING4',  sBirtdate  );
      GetFldVar('S_STRING5',  sMeddept   );
      GetFldVar('S_STRING6',  sWardno    );
      GetFldVar('S_STRING7',  sRoomno    );
      GetFldVar('S_STRING8',  sDschtime  );
      GetFldVar('S_STRING9',  sDschrslt  );
      GetFldVar('S_STRING10', sOutHosp   );
      GetFldVar('S_STRING11', sOutHospCd );
      GetFldVar('S_STRING12', sNedisStat );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//월별의사별응급진료통계. KimDaeYong 2018-03-21
function HmdErinft.MonDrErStat(inDate,inMeddept,inUserid:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[inDate,inMeddept,inUserid]);

   if (txGetF('MD_ERINF_LK')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_STRING1'  , sMedtime  );
		GetFldVar ('S_STRING2'  , sCaretime );  //sRecdate인데 변수 만들기 싫어서 sCaretime 사용함.
		GetFldVar ('S_STRING3'  , sPatno    );
		GetFldVar ('S_STRING4'  , sPatname  );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;   

////////////////////////////////////////////////////////////////////////////////
//  HmdDrcont 	응급담당의                                                    //
////////////////////////////////////////////////////////////////////////////////

// 응급담당의 List 조회
function HmdDrcont.Selmddrcont(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_DRCON_L1')) then begin //Tuxedo Service Call
      GetFldVar('L_CNT1', iConnSeq);
  		GetFldVar('S_CODE1', sPatno);
		  GetFldVar('S_CODE2', sMeddate);
		  GetFldVar('S_CODE3', sMedtime);
		GetFldVar('S_CODE4', sMeddept);
		GetFldVar('S_CODE5', sChadr);
		GetFldVar('S_CODE6', sConndate);
		GetFldVar('S_CODE7', sLinkdate);
		GetFldVar('S_CODE8', sArvdate);
		GetFldVar('S_CODE9', sMainyn);
      GetFldVar('S_CODE10',sDisease);
      GetFldVar('S_CODE11',sErfeeyn);
      GetFldVar('S_CODE12',sMeddeptCd);
      GetFldVar('S_CODE13',sChadrCd);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 응급담당의 입력
function HmdDrcont.InputIOValue(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_PATNO;S_MEDDATE;S_CODE2;L_SEQNO1;S_CODE3;' +
              'S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_EDITID;' +
              'S_EDITIP;S_CODE9;S_CODE10;S_CODE11;S_CODE12');

   for i := 0 to Cnt -1 do
   begin
      SetFldValue( i ,[String(sType[i]),      String(sPatNo[i]),     String(sMedDate[i]),
                       String(sMedTime[i]),   Integer(iConnSeq[i]),  String(sMeddept[i]),
                       String(sChaDr[i]),     String(sConnDate[i]),  String(sLinkDate[i]),
                       String(sArvDate[i]),   String(sMainYn[i]),    String(sEditId[i]),
                       String(sEditIp[i]),    String(sDisease[i]),   String(sErfeeyn[i]),
                       String(sMeddeptCd[i]), String(sChadrCd[i])]);
   end;

   if (txPutF('MD_DRCON_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdIjdayt 	주사일정                                                      //
////////////////////////////////////////////////////////////////////////////////

// 주사실시 대상환자 조회
function HmdIjdayt.ListInjectPat(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType1,sType2,sType3] );

   //Tuxedo Service Call
   if (txGetF32('MD_IJDAY_L1')) then
   begin
      GetFldVar32('S_PATNO',   sPatNo   );  // 환자번호
      GetFldVar32('S_PATNAME', sPatName );  // 환자명
      GetFldVar32('S_CODE1',   sSex     );  // 성별
      GetFldVar32('S_CODE2',   sBirtdate);  // 생일
      GetFldVar32('S_CODE3',   sMedDept );  // 진료과
      GetFldVar32('S_CODE4',   sTOrdCnt );  // 총처방수
      GetFldVar32('S_CODE5',   sAOrdCnt );  // 실시한 처방수
      GetFldVar32('S_CODE6',   sOrdDr   );  // 처방의사
      GetFldVar32('S_CODE7',   sOrdDrnm );  // 처방의사명
      GetFldVar32('S_CODE8',   sOrdDesc1);  // 처방편집1
      GetFldVar32('S_CODE9',   sErYn    );  // 응급여부
      GetFldVar32('S_CODE10',  sFiltYn  );  // 필터여부
      GetFldVar32('S_CODE11',  sROrdCnt );  // 반납수량
      GetFldVar32('S_CODE12',  sNurStat );  // 수행여부
      GetFldVar32('S_CODE13',  sMedTime );  // 진료예약시간
      GetFldVar32('S_CODE14',  sMedDr   );  // 진료의
      GetFldVar32('S_CODE15',  sOrddate );
      GetFldVar32('S_CODE16',  iOrdSeqno);
      GetFldVar32('S_CODE17',  sOpexDate);

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 장소별 주사 + 처치환자
function HmdIjdayt.ListInjectPat2(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType1,sType2,sType3] );

   //Tuxedo Service Call
   if (txGetF32('MD_IJDAY_L6')) then
   begin
      GetFldVar32('S_PATNO',   sPatNo   );  // 환자번호
      GetFldVar32('S_PATNAME', sPatName );  // 환자명
      GetFldVar32('S_CODE1',   sSex     );  // 성별
      GetFldVar32('S_CODE2',   sBirtdate);  // 생일
      GetFldVar32('S_CODE3',   sMedDept );  // 진료과
      GetFldVar32('S_CODE4',   sTOrdCnt );  // 총처방수
      GetFldVar32('S_CODE5',   sAOrdCnt );  // 실시한 처방수
      GetFldVar32('S_CODE6',   sOrdDr   );  // 처방의사
      GetFldVar32('S_CODE7',   sOrdDrnm );  // 처방의사명
      GetFldVar32('S_CODE8',   sOrdDesc1);  // 처방편집1
      GetFldVar32('S_CODE9',   sErYn    );  // 응급여부
      GetFldVar32('S_CODE10',  sFiltYn  );  // 필터여부
      GetFldVar32('S_CODE11',  sROrdCnt );  // 반납수량
      GetFldVar32('S_CODE12',  sNurStat );  // 수행여부
      GetFldVar32('S_CODE13',  sMedTime );  // 진료예약시간
      GetFldVar32('S_CODE14',  sMedDr   );  // 진료의
      GetFldVar32('S_CODE15',  sOrddate );
      GetFldVar32('S_CODE16',  iOrdSeqno);
      GetFldVar32('S_CODE17',  sOpexDate);
      GetFldVar32('S_CODE18',  sTrnsfLoc);  // 수혈장소
      GetFldVar32('S_CODE19',  sResno1  );  // 수혈장소
      GetFldVar32('S_CODE20',  sResno2  );  // 수혈장소
      GetFldVar32('S_CODE21',  sChadrnm );  // 수혈장소

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 주사실시 처방내역 조회
function HmdIjdayt.ListInjectOrd(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3] );

   //Tuxedo Service Call
   if (txGetF('MD_IJDAY_L2')) then
   begin
      GetFldVar('S_ORDDATE', sOrdDate);   // 처방일자
      GetFldVar('S_CODE1',   sHopeDate);  // 예정일자
      GetFldVar('S_CODE2',   sExecDate);  // 실시일자
      GetFldVar('S_CODE3',   sOrdTime);   // 처방시간
      GetFldVar('S_CODE4',   sOrdDr);     // 처방의사
      GetFldVar('S_CODE5',   sRemark);    // 특기사항
      GetFldVar('S_CODE6',   sOrdDesc1);  // 처방편집1
      GetFldVar('S_CODE7',   sOrdDesc2);  // 처방편집1
      GetFldVar('S_CODE8',   sExecId);    // 실시자
      GetFldVar('S_CODE9',   sRcpStat);   // 원무Status(Y:수납,N:미수납,R:환불)
      GetFldVar('S_CODE10',  sOrdDrCd);   // 처방의사코드
      GetFldVar('S_CODE11',  sMedDept);   // 진료과코드
      GetFldVar('S_CODE12',  sMedDr);     // 진료의
      GetFldVar('S_CODE13',  sFlag);
      GetFldVar('S_CODE14',  sDiscyn);
      GetFldVar('S_CODE15',  sTrtcls);
      GetFldVar('S_CODE16',  sOrdsite);
      GetFldVar('L_CNT1',    iOrdSeqno);  // 처방순번
      GetFldVar('L_CNT2',    iBundleNo);  // 묶음번호

      //조회건수 return
      Result := GetRecordCnt('S_ORDDATE');
      txFree;
   end;
end;


// 주사실시 내역 입력 및 예정일 변경
function HmdIjdayt.UpdateInjectYN(Cnt:Integer):Integer;
var
   i : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_PATNO;S_ORDDATE;S_DATE1;S_DATE2;S_CODE1;S_CODE2;' +
              'S_CODE3;S_EDITID;S_EDITIP;L_SEQNO1');

    for i := 0 to Cnt -1 do
    begin
       SetFldValue( i ,[String(sType[i]),     String(sPatNo[i]),    String(sOrdDate[i]),
                        String(sHopeDate[i]), String(sExecDate[i]), String(sImmncl[i]),
                        String(sRemark[i]),   String(sExecId[i]),   String(sEditId[i]),
                        String(sEditIp[i]),   Integer(iOrdSeqno[i])]);
   end;

   if (txPutF('MD_IJDAY_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 주사실시 환자 List 조회
function HmdIjdayt.SelAllIjday(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_PATNO;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF('MD_IJDAY_L3')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1', sPatno);
		GetFldVar ('S_CODE2', sPatname);
		GetFldVar ('S_CODE3', sOrddate);
		GetFldVar ('S_CODE4', sExecdate);
		GetFldVar ('S_CODE5', sTrtcls);
		GetFldVar ('S_CODE6', sImmncl);
		GetFldVar ('S_CODE7', sRemark);
      GetFldVar ('S_CODE8', sOrddesc1);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 주사실 통계
function HmdIjdayt.TotInjectOrd(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2] );
   if (txGetF('MD_IJDAY_L4')) then
   begin //Tuxedo Service Call
		GetFldVar ('L_CNT1', iIVcnt);
		GetFldVar ('L_CNT2', iSCcnt);
		GetFldVar ('L_CNT3', iIMcnt);
		GetFldVar ('L_CNT4', iChemocnt);
		GetFldVar ('L_CNT5', iTotcnt);
		GetFldVar ('L_CNT6', iBldcnt);
      GetFldVar ('L_CNT7', iTrtcnt);

      Result := GetRecordCnt('L_CNT1');
      txFree;
   end;
end;

// 주사실 통계2
function HmdIjdayt.SelectTotal(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_IJDAY_L5')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_CODE1',  sExecDate);   // YYYYMM
      GetFldVar ('S_CODE2',  sMedDept );   // 부서별
      GetFldVar ('S_CODE3',  sTOrdCnt );   // SUM

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 주사실 일일현황 저장
function HmdIjdayt.InsIrstat(sType1, sInjtLoc, sStatDate, sIvCnt,
                             sImCnt, sScCnt, sChemoCnt, sEtcCnt, sBloodCnt,
                             sTxCnt, sEtcCnt1, sEtcCnt2,  sEditId, sEditIp : String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'
            + 'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_EDITID;S_EDITIP');

   SetFldValue( 0 ,[sType1,sInjtLoc,sStatDate,sIvCnt,sImCnt,sScCnt,sChemoCnt,
                    sEtcCnt,sBloodCnt,sTxCnt,sEtcCnt1,sEtcCnt2,sEditId,sEditIp]);

   if (txPutF('MD_IRSTA_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdIjdayt.DailyInfo(sType1, sType2, sType3, sType4, sType5 : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );

   //Tuxedo Service Call
   if (txGetF('MD_IJDAY_L8')) then
   begin
      GetFldVar('S_STRING1',   sPatNo);
      GetFldVar('S_STRING2',   sPatName);
      GetFldVar('S_STRING3',   sSex);
      GetFldVar('S_STRING4',   sMeddept);
      GetFldVar('S_STRING5',   sOrddr);
      GetFldVar('S_STRING6',   sOrdDesc1);
      GetFldVar('S_STRING7',   sOrdDesc2);
      GetFldVar('S_STRING8',   sHopedate);
      GetFldVar('S_STRING9',   sExecdate);
      GetFldVar('S_STRING10',  sExecId);
      GetFldVar('S_STRING11',  sImmncl);
      GetFldVar('S_STRING12',  sMeddr);
      GetFldVar('S_STRING13',  sRcpstat);
      GetFldVar('S_STRING14',  sRemark);
      GetFldVar('S_STRING15',  sDiscyn);
      GetFldVar('S_STRING16',  sBirtdate);

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdIcupat 	중환자실환자정보                                               //
////////////////////////////////////////////////////////////////////////////////

// 중환자실 환자정보 조회
function HmdIcupat.SelIcuPatInf(sType1  ,  // 조건1    */
                                sPatno  ,  // 환자번호 */
                                sAdmdate,  // 입원일자 */
                                sType2
                                : String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0,[sType1,sPatno,sAdmdate,sType2] );
   if (txGetF('MD_ICUPA_L1')) then
   begin //Tuxedo Service Call
      GetFldVar ('L_SEQNO1',   lSeqno   );
		GetFldVar ('S_STRING1',  v_Patno   );
		GetFldVar ('S_STRING2',  v_Meddate );
		GetFldVar ('S_STRING3',  v_Fromdate);
      GetFldVar ('S_STRING4',  v_Todate  );
		GetFldVar ('S_STRING5',  v_Inpath  );
		GetFldVar ('S_STRING6',  v_Outpath );
		GetFldVar ('S_STRING7',  v_Outcont );
      GetFldVar ('S_STRING8',  v_Infectyn);
      GetFldVar ('S_STRING9',  v_Infekind);
      GetFldVar ('S_STRING10', v_Constat );
      GetFldVar ('S_STRING11', v_Ventilyn);
      GetFldVar ('S_STRING12', v_Feedkind);
		GetFldVar ('S_STRING13', v_Meddept );
		GetFldVar ('S_STRING14', v_Chadr   );
		GetFldVar ('S_STRING15', v_Gendr   );
		GetFldVar ('S_STRING16', v_Wardno  );
      GetFldVar ('S_STRING17', v_Address );
		GetFldVar ('S_STRING18', v_Telno   );
		GetFldVar ('S_STRING19', v_Remark  );
		GetFldVar ('S_STRING20', v_Sex     );
		GetFldVar ('S_STRING21', v_Birtdate);
      GetFldVar ('S_STRING22', v_Diagname);
      GetFldVar ('S_STRING23', v_Opname  );
      GetFldVar ('S_STRING24', v_Opdate  );
		GetFldVar ('S_STRING25', v_Patname );
      GetFldVar ('S_STRING26', v_Reinyn  );
      GetFldVar ('S_STRING27', v_Hdcnt   );
      GetFldVar ('S_STRING28', v_todate2 );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// 중환자실 월통계
function HmdIcupat.SelIcuStatisc(sDate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sDate] );
   if (txGetF('MD_ICUPA_S1')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_STRING1',  v_Meddept );
		GetFldVar ('S_STRING2',  v_Totadmdt);
		GetFldVar ('S_STRING3',  v_Inpath1 );
		GetFldVar ('S_STRING4',  v_Inpath2 );
		GetFldVar ('S_STRING5',  v_Inpath3 );
		GetFldVar ('S_STRING6',  v_Outpath1);
		GetFldVar ('S_STRING7',  v_Outpath2);
		GetFldVar ('S_STRING8',  v_Outpath3);
		GetFldVar ('S_STRING9',  v_Outpath4);
		GetFldVar ('S_STRING10',  v_Outpath5);
		GetFldVar ('S_STRING11',  v_Outpath6);
		GetFldVar ('S_STRING12',  v_Avgadmdt);
		GetFldVar ('S_STRING13',  v_Monavg  );
		GetFldVar ('S_STRING14',  v_Dayadm  );
		GetFldVar ('S_STRING15',  v_Staycnt );
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 중환자실 환자정보 Insert/Update/Delete (Type1 : 1-삭제,2-입력,3-수정)
function HmdIcupat.InsUpDelIcuPat(sType1   ,    // 조건(1:삭제,2:입력,3:수정) */
                                  sPatno   ,    // 환자번호     */
                                  sMeddate ,    // 입원일자     */
                                  sSeqno   ,    // 순번         */
                                  sFromdate,    // ICU 도착일시 */
                                  sTodate  ,    // ICU 퇴실일시 */
                                  sInpath  ,    // 입실경로(1:ER,2:병동)          */
                                  sOutpath ,    // 퇴실결과(1:병실,2:사망,3:퇴원) */
                                  sOutcont ,    // 퇴실내용(병실 or 퇴원방법)     */
                                  sMeddept ,    // 진료과       */
                                  sChadr   ,    // 주치의사     */
                                  sGendr   ,    // 담당의사     */
                                  sWardno  ,    // 병동         */
                                  sAddress ,    // 주소         */
                                  sTelno   ,    // 전화번호     */
                                  sRemark  ,    // 특기사항     */
                                  sReinyn  ,    // 재입원여부   */
                                  sEditid  ,    // 수정자       */
                                  sEditip  ,     // 수정자IP     */
                                  sHdcnt
                                  : String) : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   //SetFldName('S_TYPE1;S_CODE1;S_CODE2;L_SEQNO1;S_CODE3;S_CODE4;'+
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;'+
              'S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;'+
              'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;'+
              'S_CODE17;S_CODE18;S_CODE19');
   //SetFldValue(0, [sType1   ,sPatno   ,sMeddate ,sSeqno   ,sFromdate,sTodate  ,
   SetFldValue(0, [sType1   ,sPatno   ,sMeddate ,sFromdate,sTodate  ,
                   sInpath  ,sOutpath ,sOutcont ,sMeddept ,sChadr   ,sGendr   ,
                   sWardno  ,sAddress ,sTelno   ,sRemark  ,sReinyn  ,sEditid  ,
                   sEditip  ,sHdcnt,sSeqno ]);
   //Tuxedo Service Call
   if (txPutF('MD_ICUPA_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdHpdort 	투석지시                                                       //
////////////////////////////////////////////////////////////////////////////////

//투석지시내역 저장 (투석지시 Insert / 기본처방 Insert)
function HmdHpdort.InsertHdOrder(PatNo,OrdDate,HdType,MedDate,PatSect,OrdGrp,
                                 ErYn,MedDept,ChaDr,OrdText,WardNo,RoomNo,SlipCd,
                                 OrdCd,OrdSite,OrdDesc1,MedTime,MedYn,RsnDiss,
                                 OrdDesc2,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_EDITID;S_EDITIP');
   SetFldValue(0,[PatNo,
                  OrdDate,HdType,MedDate,PatSect,OrdGrp,ErYn,
                  MedDept,ChaDr,OrdText,WardNo,RoomNo,SlipCd,
                  OrdCd,OrdSite,OrdDesc1,MedTime,MedYn,RsnDiss,
                  OrdDesc2,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_HPDOR_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//환자 투석지시내역 조회 (환자번호+처방일(+처방순번))
function HmdHpdort.ListHdOrder(PatNo,OrdDate,SeqNo:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[PatNo,OrdDate,SeqNo]);

   //Tuxedo Service Call
   if (txGetF('MD_HPDOR_L1')) then
   begin
      GetFldVar('S_STRING1', sPatNo   );  //환자번호
      GetFldVar('S_STRING2', sOrdDate );  //처방일자
      GetFldVar('S_STRING3', sHdType  );  //투석구분
      GetFldVar('S_STRING4', sMedDate );  //진료일
      GetFldVar('S_STRING5', sPatSect );  //환자구분
      GetFldVar('S_STRING6', sMedDept );  //진료과
      GetFldVar('S_STRING7', sChaDr   );  //주치의
      GetFldVar('S_STRING8', sOrdDr   );  //처방의
      GetFldVar('S_STRING9', sOrdText );  //지시내용
      GetFldVar('S_STRING10',sOrdCd   );  //처방코드
      GetFldVar('S_STRING11',sOrdName );  //처방명
      GetFldVar('S_STRING12',sRsnDiss );  //원인질환
      GetFldVar('S_STRING13',sDiscYn  );  //D/C여부
      GetFldVar('L_SEQNO1' , iOrdSeqNo);  //처방순번

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// 투석지시내역 조회
function HmdHpdort.SelectText(PatNO,HDType:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_TYPE1');
   SetFldValue(0,[PatNO,HDType] );
   if (txGetF('MH_HPDOR_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_PATNO',sPatNO);     // 환자번호
      GetFldVar('S_STRING1',sOrdDate); // 최근오더일
      GetFldVar('S_STRING2',sOrdText); // 지시내역
      GetFldVar('S_STRING3',sOrdcd);   // 처방코드
      GetFldVar('S_STRING4',sOrdName); // 처방명
      
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

//투석지시내역 D/C
function HmdHpdort.UpdateHdOrder(PatNo,OrdDate,EditId,EditIp:String;OrdSeqNo:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ORDDATE;S_EDITID;S_EDITIP;L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate,EditId,EditIp,OrdSeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_HPDOR_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//투석지시내역 저장(투석지시 Insert / 기본처방 Insert) --> 간호사
function HmdHpdort.AddHdOrder(PatNo,OrdDate,HdType,MedDate,PatSect,OrdGrp,
                              ErYn,MedDept,ChaDr,OrdText,WardNo,RoomNo,SlipCd,
                              OrdCd,OrdSite,OrdDesc1,MedTime,MedYn,RsnDiss,
                              OrdDesc2,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_EDITID;S_EDITIP');
   SetFldValue(0,[PatNo,
                  OrdDate,HdType,MedDate,PatSect,OrdGrp,ErYn,
                  MedDept,ChaDr,OrdText,WardNo,RoomNo,SlipCd,
                  OrdCd,OrdSite,OrdDesc1,MedTime,MedYn,RsnDiss,
                  OrdDesc2,EditId,EditIp]);

   //Tuxedo Service Call ==> 'txTpCall' 사용
   if (txTpCall('MD_HPDOR_I1')) then
   begin
      GetFldVar('S_NUMVAL1', sOrdseqno);

      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPatInf	환자정보                                                       //
////////////////////////////////////////////////////////////////////////////////

// 재원환자 조회(1:진료과별 2:담당교수별 3:주치의별 4:병동별 5:현위치별
//               6:병동+주치의별 7:진료과+주치의별 8:진료과+담당교수별
//               9:현위치+주치의별)
function HmdPatInf.StayWard(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue32(0, [sType1,sType2,sType3,sType4,sType5,sType6,sType7]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_L1')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatNo);
      GetFldVar32('S_CODE2'  ,sPatName);
      GetFldVar32('S_CODE3'  ,sAdmDate);
      GetFldVar32('S_CODE4'  ,sSex);
      GetFldVar32('S_CODE5'  ,sBirtDate);
      GetFldVar32('S_CODE6'  ,sMedDept);
      GetFldVar32('S_CODE7'  ,sDeptNm);
      GetFldVar32('S_CODE8'  ,sWardNo);
      GetFldVar32('S_CODE9'  ,sRoomNo);
      GetFldVar32('S_CODE10' ,sChaDr);
      GetFldVar32('S_CODE11' ,sChaDrNm);
      GetFldVar32('S_CODE12' ,sGenDr);
      GetFldVar32('S_CODE13' ,sGenDrNm);
      GetFldVar32('S_CODE14' ,sDiagName);
      GetFldVar32('S_CODE15' ,sOpName);
      GetFldVar32('S_CODE16' ,sLstopDt);
      GetFldVar32('S_CODE17' ,sPatSect);   // D:DRG R:REFER S:지병
      GetFldVar32('S_CODE18' ,sVschktRm);
      GetFldVar32('S_CODE19' ,sVschkYn);
      GetFldVar32('S_CODE20' ,sDschexdt);
      GetFldVar32('S_CODE21' ,sDschdate);
      GetFldVar32('S_CODE22' ,sWardNo1);
      GetFldVar32('S_CODE23' ,sRoomNo1);
      GetFldVar32('S_CODE24' ,sLstordDt); // 최근처방일자
      GetFldVar32('S_CODE25' ,sWeight);
      GetFldVar32('S_CODE26' ,sTransDt);
      GetFldVar32('S_CODE27' ,sAdmtime);
      GetFldVar32('S_CODE28' ,sDiagcd);   // AMI관련 주진단코드, KimDaeYong 2008-07-10
      GetFldVar32('S_CODE29' ,sAdmpath);  // AMI관련 입원경로, KimDaeYong 2008-07-10
      GetFldVar32('S_CODE30' ,sAnOpYn);
      GetFldVar32('S_CODE31' ,sScanYn);      // 차트 스캔여부, 김송주, 2010.11.2
      GetFldVar32('S_CODE32' ,sAdmNoteYn);   // Admission Note 작성여부 2011.07.18 김송주
      GetFldVar32('S_CODE33' ,sRegdate);
      GetFldVar32('S_CODE34' ,sPattype);     // DRG 등록가능 여부체크를 위해 추가 2013.7.2 김송주
      GetFldVar32('S_CODE35' ,sMedplan);     // MedPlan, KimDaeYong 2014-08-21
      GetFldVar32('S_CODE36' ,sIcuevalYn);   // 중환자적정성평가대상, 2014.10.13 김송주
      GetFldVar32('S_CODE37' ,sSpgubun);     // 특정환자구분(메르스관련), KimDaeYong 2015-06-17
      GetFldVar32('S_CODE38' ,sOpcode);      // 수술예방항생제 등록을 위한 수술코드, KimDaeYong 2015-12-08
      GetFldVar32('S_CODE39' ,sSilinsyn);    // 실비보험가입여부, KimDaeYong 2020-11-25
      GetFldVar32('S_CODE40' ,sDiagTypeCd);  // 진단유형코드, KimDaeYong 2021-03-16

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

// 재원환자 조회(1:진료과별 2:담당교수별 3:주치의별 4:병동별 5:현위치별
//               6:병동+주치의별 7:진료과+주치의별 8:진료과+담당교수별
//               9:현위치+주치의별) =====> 간호화면용(ORDER BY 조정 : 09.23)
function HmdPatInf.StayWard2(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0, [sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_L5')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatNo);
      GetFldVar32('S_CODE2'  ,sPatName);
      GetFldVar32('S_CODE3'  ,sAdmDate);
      GetFldVar32('S_CODE4'  ,sSex);
      GetFldVar32('S_CODE5'  ,sBirtDate);
      GetFldVar32('S_CODE6'  ,sMedDept);
      GetFldVar32('S_CODE7'  ,sDeptNm);
      GetFldVar32('S_CODE8'  ,sWardNo);
      GetFldVar32('S_CODE9'  ,sRoomNo);
      GetFldVar32('S_CODE10' ,sChaDr);
      GetFldVar32('S_CODE11' ,sChaDrNm);
      GetFldVar32('S_CODE12' ,sGenDr);
      GetFldVar32('S_CODE13' ,sGenDrNm);
      GetFldVar32('S_CODE14' ,sDiagName);
      GetFldVar32('S_CODE15' ,sOpName);
//      GetFldVar32('S_CODE16' ,sLstopDt);
      GetFldVar32('S_CODE16' ,sOpdate);
      GetFldVar32('S_CODE17' ,sPatSect);   // D:DRG R:REFER S:지병
      GetFldVar32('S_CODE18' ,sVschktRm);
      GetFldVar32('S_CODE19' ,sVschkYn);
      GetFldVar32('S_CODE20' ,sDschexdt);
      GetFldVar32('S_CODE21' ,sDschdate);
      GetFldVar32('S_CODE22' ,sWardNo1);
      GetFldVar32('S_CODE23' ,sRoomNo1);
      GetFldVar32('S_CODE24' ,sLstordDt); // 최근처방일자
      GetFldVar32('S_CODE25' ,sWeight);
      GetFldVar32('S_CODE26' ,sTransDt);
      GetFldVar32('S_CODE27' ,sSysdate);
      GetFldVar32('S_CODE28' ,sNurstat);
      GetFldVar32('S_CODE29' ,sBckStat);
      GetFldVar32('S_CODE30' ,sResNo1);
      GetFldVar32('S_STRING1',sResNo2);
      GetFldVar32('S_STRING2',sAddress);
      GetFldVar32('S_STRING3',sZpAddress);
      GetFldVar32('S_STRING4',sPattype);
      GetFldVar32('S_STRING5',sTelno1);
      GetFldVar32('S_STRING6',sTypecd);
      GetFldVar32('S_STRING7',sPattypenm);
      GetFldVar32('S_STRING8',sTypecdnm);
      GetFldVar32('S_STRING9',sDiagcd);   // AMI관련 주진단코드, KimDaeYong 2008-06-25
      GetFldVar32('S_STRING10',sAnOpYn);
      GetFldVar32('S_STRING11',sScanYn); // 스캔 여부
      GetFldVar32('S_STRING12',sRejtdate); // 입원취소일시, KimDaeYong 2014-09-03
      GetFldVar32('S_STRING16',sTelno3); // 휴대폰번호, KimDaeYong 2017-02-02

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdPatInf.StayWard3(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0, [sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_LB')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatNo);
      GetFldVar32('S_CODE2'  ,sPatName);
      GetFldVar32('S_CODE3'  ,sAdmDate);
      GetFldVar32('S_CODE4'  ,sSex);
      GetFldVar32('S_CODE5'  ,sBirtDate);
      GetFldVar32('S_CODE6'  ,sMedDept);
      GetFldVar32('S_CODE7'  ,sDeptNm);
      GetFldVar32('S_CODE8'  ,sWardNo);
      GetFldVar32('S_CODE9'  ,sRoomNo);
      GetFldVar32('S_CODE10' ,sChaDr);
      GetFldVar32('S_CODE11' ,sChaDrNm);
      GetFldVar32('S_CODE12' ,sGenDr);
      GetFldVar32('S_CODE13' ,sGenDrNm);
      GetFldVar32('S_CODE14' ,sDiagName);
      GetFldVar32('S_CODE15' ,sOpName);
//      GetFldVar32('S_CODE16' ,sLstopDt);
      GetFldVar32('S_CODE16' ,sOpdate);
      GetFldVar32('S_CODE17' ,sPatSect);   // D:DRG R:REFER S:지병
      GetFldVar32('S_CODE18' ,sVschktRm);
      GetFldVar32('S_CODE19' ,sVschkYn);
      GetFldVar32('S_CODE20' ,sDschexdt);
      GetFldVar32('S_CODE21' ,sDschdate);
      GetFldVar32('S_CODE22' ,sWardNo1);
      GetFldVar32('S_CODE23' ,sRoomNo1);
      GetFldVar32('S_CODE24' ,sLstordDt); // 최근처방일자
      GetFldVar32('S_CODE25' ,sWeight);
      GetFldVar32('S_CODE26' ,sTransDt);
      GetFldVar32('S_CODE27' ,sSysdate);
      GetFldVar32('S_CODE28' ,sNurstat);
      GetFldVar32('S_CODE29' ,sBckStat);
      GetFldVar32('S_CODE30' ,sResNo1);
      GetFldVar32('S_STRING1',sResNo2);
      GetFldVar32('S_STRING2',sAddress);
      GetFldVar32('S_STRING3',sZpAddress);
      GetFldVar32('S_STRING4',sPattype);
      GetFldVar32('S_STRING5',sTelno1);
      GetFldVar32('S_STRING6',sTypecd);
      GetFldVar32('S_STRING7',sPattypenm);
      GetFldVar32('S_STRING8',sTypecdnm);
      GetFldVar32('S_STRING9',sAppldate);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdPatInf.StayWard4(inFromdate,inTodate:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0, [inFromdate,inTodate]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_LC')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatNo);
      GetFldVar32('S_CODE2'  ,sPatName);
      GetFldVar32('S_CODE3'  ,sAdmDate);
      GetFldVar32('S_CODE4'  ,sSex);
      GetFldVar32('S_CODE5'  ,sBirtDate);
      GetFldVar32('S_CODE6'  ,sMedDept);
      GetFldVar32('S_CODE7'  ,sDeptNm);
      GetFldVar32('S_CODE8'  ,sWardNo);
      GetFldVar32('S_CODE9'  ,sRoomNo);
      GetFldVar32('S_CODE10' ,sChaDr);
      GetFldVar32('S_CODE11' ,sChaDrNm);
      GetFldVar32('S_CODE12' ,sGenDr);
      GetFldVar32('S_CODE13' ,sGenDrNm);
      GetFldVar32('S_CODE14' ,sDiagName);
      GetFldVar32('S_CODE15' ,sOpName);
      GetFldVar32('S_CODE16' ,sLstopDt);
      GetFldVar32('S_CODE17' ,sPatSect);   // D:DRG R:REFER S:지병
      GetFldVar32('S_CODE18' ,sVschktRm);
      GetFldVar32('S_CODE19' ,sVschkYn);
      GetFldVar32('S_CODE20' ,sDschexdt);
      GetFldVar32('S_CODE21' ,sDschdate);
      GetFldVar32('S_CODE22' ,sWardNo1);
      GetFldVar32('S_CODE23' ,sRoomNo1);
      GetFldVar32('S_CODE24' ,sLstordDt); // 최근처방일자
      GetFldVar32('S_CODE25' ,sWeight);
      GetFldVar32('S_CODE26' ,sTransDt);
      GetFldVar32('S_CODE27' ,sAdmtime);
      GetFldVar32('S_CODE28' ,sDiagcd);   // AMI관련 주진단코드, KimDaeYong 2008-07-10
      GetFldVar32('S_CODE29' ,sAdmpath);  // AMI관련 입원경로, KimDaeYong 2008-07-10
      GetFldVar32('S_CODE30' ,sScanYn);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdPatInf.StayWard5:Integer;
begin
   Result := -1;

   txAlloc32; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_LD')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatno	    );
      GetFldVar32('S_CODE2'  ,sPatname	    );
      GetFldVar32('S_CODE3'  ,sSex		    );
      GetFldVar32('S_CODE4'  ,sBirtdate	    );
      GetFldVar32('S_CODE5'  ,sMeddate	    );
      GetFldVar32('S_CODE6'  ,sWardno	    );
      GetFldVar32('S_CODE7'  ,sRoomno	    );
      GetFldVar32('S_CODE8'  ,sMeddept	    );
      GetFldVar32('S_CODE9'  ,sChadr	    );
      GetFldVar32('S_CODE10' ,sChadrnm	    );
      GetFldVar32('S_CODE11' ,sPatsect	    );
      GetFldVar32('S_CODE12' ,sCantype	    );
      GetFldVar32('S_CODE13' ,sCantypenm    );
      GetFldVar32('S_CODE14' ,sDiagcd	    );
      GetFldVar32('S_CODE15' ,sDiagname     );
      GetFldVar32('S_CODE16' ,sRegyn        );
   end;

   //Service를 수행하고 FML Buffer에 PUT된 Record수
   Result :=GetRecordCnt32('S_CODE1');
   txFree32;
end;

// 환자 상세정보 조회(I:입원환자 O:외래환자 E:응급환자)
function HmdPatInf.PatInfo(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue(0, [sType1,sType2,sType3,sType4,sType5,sType6,sType7]);
   if (txGetF('MD_PATBA_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sPatName );
      GetFldVar('S_STRING2'  ,sResNo1  );
      GetFldVar('S_STRING3'  ,sResNo2  );
      GetFldVar('S_STRING4'  ,sBirtDate);
      GetFldVar('S_STRING5'  ,sSex     );
      GetFldVar('S_STRING6'  ,sTelNo1  );
      GetFldVar('S_STRING7'  ,sTelNo2  );
      GetFldVar('S_STRING8'  ,sTelNo3  );
      GetFldVar('S_STRING9'  ,sEmail   );
      GetFldVar('S_STRING10' ,sZipCd   );
      GetFldVar('S_STRING11' ,sAddress );
      GetFldVar('S_STRING12' ,sExceptCd);
      GetFldVar('S_STRING13' ,sReferYn );
      GetFldVar('S_STRING14' ,sAdmDate );
      GetFldVar('S_STRING15' ,sPatType );
      GetFldVar('S_STRING16' ,sMedDept );
      GetFldVar('S_STRING17' ,sDeptNm  );
      GetFldVar('S_STRING18' ,sWardNo  );
      GetFldVar('S_STRING19' ,sRoomNo  );
      GetFldVar('S_STRING20' ,sBedNo   );
      GetFldVar('S_STRING21' ,sChaDr   );
      GetFldVar('S_STRING22' ,sChadrNm );
      GetFldVar('S_STRING23' ,sGenDr   );
      GetFldVar('S_STRING24' ,sGendrNm );
      GetFldVar('S_STRING25' ,sDrgYn   );
      GetFldVar('S_STRING26' ,sSubInsut);
      GetFldVar('S_STRING27' ,sDiagCd  );
      GetFldVar('S_STRING28' ,sDiagName);
      GetFldVar('S_STRING29' ,sLstopDt );
      GetFldVar('S_STRING30' ,sOpCode  );
      GetFldVar('S_STRING31' ,sOpName  );
      GetFldVar('S_STRING32' ,sFstmedty);
      GetFldVar('S_STRING33' ,sDschexdt);
      GetFldVar('S_STRING34' ,sBckstat ); //퇴원심사여부
      GetFldVar('S_STRING35' ,sErOutyn ); //응급환자퇴실여부
      GetFldVar('S_STRING36' ,sErAdmyn ); //응급환자입원여부
      GetFldVar('S_STRING37' ,sPattpNm ); //응급환자입원여부
      GetFldVar('S_STRING38' ,sMedYn   ); //진료여부
      GetFldVar('S_STRING39' ,sWardNo1 ); //병동(현위치)
      GetFldVar('S_STRING40' ,sRoomNo1 ); //병실(현위치)
      GetFldVar('S_STRING41' ,sHeight);
      GetFldVar('S_STRING42' ,sWeight);
      GetFldVar('S_STRING43' ,sFollow  ); //FollowUp여부
      GetFldVar('S_STRING44' ,sBodytemp); //체온  <<--이게추가
      GetFldVar('S_STRING45' ,sRsvType ); //외래예약구분
      GetFldVar('S_STRING46' ,sHdsflag );
      GetFldVar('S_STRING47' ,sMsDate  ); //검진일자
      GetFldVar('S_STRING48' ,sCdChrtYn); //CD Chart 유무
      GetFldVar('S_STRING49', sMedtime );
      GetFldVar('S_STRING50', sIntrdt  ); //직원소개 환자 직원명칭.
      GetFldVar('S_STRING51', sSpcdr   );
      GetFldVar('S_STRING52', sSpopyn  );
      GetFldVar('S_STRING53', sSpexyn  );
      GetFldVar('S_STRING54', sSprayn  );
      GetFldVar('S_STRING55', sSpcryn  );
      GetFldVar('S_STRING56', sSpanyn  );
      GetFldVar('S_STRING57', sSppsyn  );
      GetFldVar('S_STRING58', sTypecd  );
      GetFldVar('S_STRING59', sTypecdnm);
      GetFldVar('S_STRING60', sDccode  );
      GetFldVar('S_STRING61', sCustcd  );
      GetFldVar('S_STRING62', sAdmbetwn);
      GetFldVar('S_STRING63', sRefpaper);
      GetFldVar('S_STRING64', sPacscd  );
      GetFldVar('S_STRING65', sNakYn   );
      GetFldVar('S_STRING66', sZpAddress);
      GetFldVar('S_STRING67', sSpcdryn );   //선택진료여부, KimDaeYong 2013-12-27
      GetFldVar('S_STRING68', sFcdr    );   // 응급간호 담당의/초진의 추가 KYA. 20140515
      GetFldVar('S_STRING69', sRsvsmsyn);   //다음접종알림.20181219.kya
      GetFldVar('S_STRING70', sAlrgsmsyn);  //이상발생알림.20181219.kya
      GetFldVar('S_STRING71', sKtascd   );  //KTASCD
      GetFldVar('S_STRING72', sDiedate  );  //사망일시
      GetFldVar('S_STRING73', sPassptno );  //여권번호.KimDaeYong 2020-02-03
      GetFldVar('S_STRING74', sSpdept   );  //진료과목코드(청구용). KimDaeYong 2020-07-17
      GetFldVar('S_STRING75', sSilinsyn );  //실비보험가입여부. KimDaeYong 2020-11-25

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 호스피스환자 상세정보 조회
function HmdPatInf.HPPatInfo(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0, [sType1]);
   if (txGetF('MD_PATBA_L3')) then begin //Tmax Service Call
      GetFldVar('S_STRING1'  ,sPatName );
      GetFldVar('S_STRING2'  ,sHpNo    );
      GetFldVar('S_STRING3'  ,sHpJoinDt);
      GetFldVar('S_STRING4'  ,sDschDate);
      GetFldVar('S_STRING5'  ,sDschType);
      GetFldVar('S_STRING6'  ,sDiagKind);
      GetFldVar('S_STRING7'  ,sReligion);
      GetFldVar('S_STRING8'  ,sSrvType );
      GetFldVar('S_STRING9'  ,sBirtDate);
      GetFldVar('S_STRING10' ,sSex     );
      GetFldVar('S_STRING11' ,sTelNo1  );
      GetFldVar('S_STRING12' ,sTelNo2  );
      GetFldVar('S_STRING13' ,sTelNo3  );
      GetFldVar('S_STRING14' ,sAddress );
      GetFldVar('S_STRING15' ,sAdmDate );
      GetFldVar('S_STRING16' ,sMedDept );
      GetFldVar('S_STRING17' ,sDeptNm  );
      GetFldVar('S_STRING18' ,sWardNo  );
      GetFldVar('S_STRING19' ,sRoomNo  );
      GetFldVar('S_STRING20' ,sChaDr   );
      GetFldVar('S_STRING21' ,sChadrNm );
      GetFldVar('S_STRING22' ,sGenDr   );
      GetFldVar('S_STRING23' ,sGendrNm );
      GetFldVar('S_STRING24' ,sDiagCd  );
      GetFldVar('S_STRING25' ,sDiagName);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;


// 입원환자 주치의/담당의 변경처리 (Multi Input)
function HmdPatInf.ChangeChaDr(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ADMDATE;'+
              'S_MEDDEPT;S_STRING1;S_STRING2;'+
              'S_EDITID;S_EDITIP');
   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sPatNo[i]),String(sAdmDate[i]),
                    String(sMedDept[i]),String(sChaDr[i]),String(sGenDr[i]),
                    String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_IPDLS_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 입원환자 V/S 측정주기(여부) 및 기타정보 변경처리 (Multi Update)
function HmdPatInf.ChangePatInfo(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_PATNO;S_ADMDATE;S_CODE1;S_CODE2;S_EDITID;S_EDITIP');
   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sType1[i]),String(sPatNo[i]),String(sAdmDate[i]),
                    String(sType2[i]),String(sType3[i]),String(sEditId[i]),
                    String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_IPDLS_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 기간별 입원환자 List 조회 (1=입원처리 2=퇴원예정 3=퇴원처리) ===> (09.24 ORDER BY/일자 조건추가.두승엽)
function HmdPatinf.ListAdmPat2(sType1,sType2,SelType,FromDate,ToDate,Locate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_CODE1;S_CODE2;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4'); //조회구분,조회기준일from;to;사업장
   SetFldValue32(0,[sType1,sType2,SelType,FromDate,ToDate,Locate] );

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_L6')) then
   begin
      GetFldVar32('S_PATNO',     sPatno   );  // 환자번호
      GetFldVar32('S_STRING1',   sAdmdate );  // 환자명
      GetFldVar32('S_STRING2',   sDschexdt);  // 퇴원예정일
      GetFldVar32('S_STRING3',   sDschdate);  // 퇴원일
      GetFldVar32('S_STRING4',   sMeddept );  // 입원진료과
      GetFldVar32('S_STRING5',   sChadr   );  // 주치의사
      GetFldVar32('S_STRING6',   sGendr   );  // 담당의사
      GetFldVar32('S_STRING7',   sRoomno  );  // 병실
      GetFldVar32('S_STRING8',   sDiagname);  // 진단명
      GetFldVar32('S_STRING9',   sPatname );  // 성별
      GetFldVar32('S_STRING10',  sSex     );  // 생년월일
      GetFldVar32('S_STRING11',  sBirtdate);  // 입원일
      GetFldVar32('S_STRING12',  sDeptnm  );  // 진료과명
      GetFldVar32('S_STRING13',  sChadrnm );  // 주치의명
      GetFldVar32('S_STRING14',  sGendrnm );  // 담당의명
      GetFldVar32('S_STRING15',  sBckStat );  // 심사진행여부
      GetFldVar32('S_STRING16',  sRemark  );  // 특기사항
      GetFldVar32('S_STRING17',  sMeddate );  // 진료일
      GetFldVar32('S_STRING18',  sTelno1  );  // 전화번호
      GetFldVar32('S_STRING19',  sDschtype);  // 퇴원형태
      GetFldVar32('S_STRING20',  sDschortm);  // 퇴원지시 시간
      GetFldVar32('S_STRING21',  sDschtime);  // 퇴원시간
      GetFldVar32('S_STRING22',  sAdmPath );
      GetFldVar32('S_STRING23',  sLstOpdt );
      GetFldVar32('S_STRING24',  sDschRslt);  // 퇴원결과 상세
      GetFldVar32('S_STRING25',  sOutdate );  // 2013.9.24 김송주


      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;

// 추가처방 환자 조회 (1:1개병동,2:2개병동,3:3개병동,4:처방일별 조회)
function HmdPatinf.ListAddOrdPat(Type1,Code1,Code2,Code3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[Type1,Code1,Code2,Code3] );

   //Tuxedo Service Call
   if (txGetF('MD_IPDLS_L3')) then
   begin
      GetFldVar('S_CODE1',   sPatNo    );  // 환자번호
      GetFldVar('S_CODE2',   sPatName  );  // 환자명
      GetFldVar('S_CODE3',   sMedDept  );  // 입원진료과
      GetFldVar('S_CODE4',   sWardNo   );  // 병동
      GetFldVar('S_CODE5',   sRoomNo   );  // 병실
      GetFldVar('S_CODE6',   sGenDrNm  );  // 담당의명
      GetFldVar('S_CODE7',   sAdmDate  );  // 입원일자
      GetFldVar('S_CODE8',   sSex      );  // 성별
      GetFldVar('S_CODE9',   sBirtDate );  // 생년월일

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 추가처방 환자 조회 (1:1개병동,2:2개병동,3:3개병동,4:처방일별 조회)
function HmdPatinf.ListAddOrdPat2(Type1,Code1,Code2,Code3,Code4,Code5,Code6:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6');
   SetFldValue(0,[Type1,Code1,Code2,Code3,Code4,Code5,Code6] );

   //Tuxedo Service Call
   if (txGetF('MD_IPDLS_L7')) then
   begin
      GetFldVar('S_CODE1',   sPatNo    );  // 환자번호
      GetFldVar('S_CODE2',   sPatName  );  // 환자명
      GetFldVar('S_CODE3',   sMedDept  );  // 입원진료과
      GetFldVar('S_CODE4',   sWardNo   );  // 병동
      GetFldVar('S_CODE5',   sRoomNo   );  // 병실
      GetFldVar('S_CODE6',   sGenDrNm  );  // 담당의명
      GetFldVar('S_CODE7',   sAdmDate  );  // 입원일자
      GetFldVar('S_CODE8',   sSex      );  // 성별
      GetFldVar('S_CODE9',   sBirtDate );  // 생년월일
      GetFldVar('S_CODE10',  sType1    );  //
      GetFldVar('S_CODE11',  sType2    );  //
      GetFldVar('S_CODE12',  sType3    );  //
      GetFldVar('S_CODE13',  sEditDate );  //
      GetFldVar('S_CODE14',  sNurStat  );  //


      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 조건(환자명,환자번호,주민등록번호)에 해당하는 환자 List 조회
function HmdPatinf.ListPatInfo(PatName,PatNo,PatId1,PatId2,DentNo,ResPatName:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6'); //환자명;환자번호;주민번호1;2
   SetFldValue32(0, [PatName,PatNo,PatId1,PatId2,Dentno,ResPatName]);

   //Tuxedo Service Call
   if (txGetF32('MD_PATBA_L1')) then
   begin
      GetFldVar32('S_PATNO'   , sPatNo   );  // 환자번호
      GetFldVar32('S_STRING1' , sPatName );  // 환자명
      GetFldVar32('S_STRING2' , sResNo1  );  // 주민번호1
      GetFldVar32('S_STRING3' , sResNo2  );  // 주민번호2
      GetFldVar32('S_STRING4' , sBirtDate);  // 생년월일
      GetFldVar32('S_STRING5' , sSex     );  // 성별
      GetFldVar32('S_STRING6' , sTelNo1  );  // 집전화번호
      GetFldVar32('S_STRING7' , sTelNo2  );  // 직장전화번호
      GetFldVar32('S_STRING8' , sTelNo3  );  // 핸드폰
      GetFldVar32('S_STRING9' , sEmail   );  // E-MAIL
      GetFldVar32('S_STRING10', sZipCd   );  // 우편번호
      GetFldVar32('S_STRING11', sAddress );  // 주소
      GetFldVar32('S_STRING12', sExceptcd);  // 의약분업예외코드
      GetFldVar32('S_STRING13', sReferyn );  // REFER여부
      GetFldVar32('S_STRING14', sAge     );  // 나이
      GetFldVar32('S_STRING15', sDentno  );  //치과번호
      GetFldVar32('S_STRING16', sMedDept );
      GetFldVar32('S_STRING17', sDeptNm  );

      //조회건수 return
      Result := GetRecordCnt32('S_PATNO');
      txFree32;
   end;
end;


// 조건(환자명,환자번호)에 해당하는 환자 List 조회 => MDC100U1에서 사용
function HmdPatinf.ListPatbat(Cond,PatNo,PatName:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3'); //구분자;환자명;환자번호
   SetFldValue(0, [Cond,PatNo,PatName]);

   //Tuxedo Service Call
   if (txGetF('MD_PATBA_L2')) then
   begin
      GetFldVar('S_PATNO'   , sPatNo   );  // 환자번호
      GetFldVar('S_STRING1' , sPatName );  // 환자명
      GetFldVar('S_STRING2' , sResNo1  );  // 주민번호1
      GetFldVar('S_STRING3' , sResNo2  );  // 주민번호2
      GetFldVar('S_STRING4' , sBirtDate);  // 생년월일
      GetFldVar('S_STRING5' , sSex     );  // 성별
      GetFldVar('S_STRING6' , sTelNo1  );  // 집전화번호
      GetFldVar('S_STRING7' , sTelNo2  );  // 직장전화번호
      GetFldVar('S_STRING8' , sTelNo3  );  // 핸드폰
      GetFldVar('S_STRING9' , sEmail   );  // E-MAIL
      GetFldVar('S_STRING10', sZipCd   );  // 우편번호
      GetFldVar('S_STRING11', sAddress );  // 주소
      GetFldVar('S_STRING12', sAdmDate );
      GetFldVar('S_STRING13', sMedDept );
      GetFldVar('S_STRING14', sDentno  );
      GetFldVar('S_STRING15', sPassptno);  // 여권번호. KimDaeYong 2020-02-03
      GetFldVar('S_STRING16', sSmsyn   );  // 메시지수신여부. KimDaeYong 2021-12-16
      GetFldVar('S_STRING17', sInfuseyna); // 기본정부수신여부. KimDaeYong 2021-12-16

      //조회건수 return
      Result := GetRecordCnt('S_PATNO');
      txFree;
   end;
end;

// 입원환자 퇴원지시내역 변경처리 (입원환자내역 Update / 기본처방 Insert))
function HmdPatInf.OrderDischarge(Patno,AdmDate,DschExDt,MedDate,MedDept,ChaDr,
                                  PatSect,ErYn,WardNo,RoomNo,OrdGrp,SlipCd,
                                  OrdCd,OrdSite,OrdDesc1,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;'+
              'S_STRING13;S_STRING14;S_EDITID;S_EDITIP');
   SetFldValue(0,[Patno,
                  AdmDate,DschExDt,MedDate,MedDept,ChaDr,PatSect,ErYn,WardNo,
                  RoomNo,OrdGrp,SlipCd,OrdCd,OrdSite,OrdDesc1,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_IPDLS_U3')) then
   begin
      Result := 1;
      txFree;
   end
   else
   begin
      //퇴원지시여부체크.KimDaeYong 2018-12-03
      Result := GetTxUrcode;
      txFree;
   end;
end;

// 입원환자 퇴원지시내역 취소처리 (입원환자내역 Update / 기본처방 Delete))
function HmdPatInf.CancelOrderDischarge(Patno,AdmDate,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_EDITID;S_EDITIP');
   SetFldValue(0,[Patno,AdmDate,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_IPDLS_U5')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//Medical Plan, KimDaeYong 2014-08-21
//내과(박종필)요청
function HmdPatInf.PutMedPlan(sPatno, sAdmdate, sMedplan, sEditid, sEditip:string):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_ADMDATE;S_STRING1;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatNo,sAdmDate,sMedplan,sEditId,sEditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_IPDLS_U6')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 수술환자 상세정보 조회
function HmdPatInf.OpPatInfo(PatNo,MedDept,Locate,sFlag:String):Integer;
begin
//sFlag 추가(인공신장환자선택때문에..), KimDaeYong 2016-05-02
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0, [PatNo,MedDept,Locate,sFlag]);

   //Tuxedo Service Call
   if (txGetF('MD_PATBA_S2')) then
   begin
      GetFldVar('S_STRING1'  ,sPatName );
      GetFldVar('S_STRING2'  ,sResNo1  );
      GetFldVar('S_STRING3'  ,sResNo2  );
      GetFldVar('S_STRING4'  ,sBirtDate);
      GetFldVar('S_STRING5'  ,sSex     );
      GetFldVar('S_STRING6'  ,sTelNo1  );
      GetFldVar('S_STRING7'  ,sTelNo2  );
      GetFldVar('S_STRING8'  ,sTelNo3  );
      GetFldVar('S_STRING9'  ,sEmail   );
      GetFldVar('S_STRING10' ,sZipCd   );
      GetFldVar('S_STRING11' ,sAddress );
      GetFldVar('S_STRING12' ,sExceptCd);
      GetFldVar('S_STRING13' ,sReferYn );
      GetFldVar('S_STRING14' ,sAdmDate );
      GetFldVar('S_STRING15' ,sPatType );
      GetFldVar('S_STRING16' ,sMedDept );
      GetFldVar('S_STRING17' ,sDeptNm  );
      GetFldVar('S_STRING18' ,sWardNo  );
      GetFldVar('S_STRING19' ,sRoomNo  );
      GetFldVar('S_STRING20' ,sBedNo   );
      GetFldVar('S_STRING21' ,sChaDr   );
      GetFldVar('S_STRING22' ,sChadrNm );
      GetFldVar('S_STRING23' ,sGenDr   );
      GetFldVar('S_STRING24' ,sGendrNm );
      GetFldVar('S_STRING25' ,sDrgYn   );
      GetFldVar('S_STRING26' ,sSubInsut);
      GetFldVar('S_STRING27' ,sDiagCd  );
      GetFldVar('S_STRING28' ,sDiagName);
      GetFldVar('S_STRING29' ,sLstopDt );
      GetFldVar('S_STRING30' ,sOpCode  );
      GetFldVar('S_STRING31' ,sOpName  );
      GetFldVar('S_STRING32' ,sFstmedty);
      GetFldVar('S_STRING33' ,sDschexdt);
      GetFldVar('S_STRING34' ,sPatCls  );
      GetFldVar('S_STRING35' ,sMedTime );
      GetFldVar('S_STRING36' ,sBckstat ); //퇴원심사여부
      GetFldVar('S_STRING37' ,sErOutyn ); //응급환자퇴실여부
      GetFldVar('S_STRING38' ,sErAdmyn ); //응급환자입원여부
      GetFldVar('S_STRING39' ,sMedYn   ); //진료여부
      GetFldVar('S_STRING40' ,sPattpNm ); //환자유형명
      GetFldVar('S_STRING41' ,sWardNo1 ); //병동(현위치)
      GetFldVar('S_STRING42' ,sRoomNo1 ); //병실(현위치)
      GetFldVar('S_STRING43' ,sHeight  ); //신장
      GetFldVar('S_STRING44' ,sWeight  ); //체중
      GetFldVar('S_STRING45' ,sFollow  ); //FollowUp여부

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//환자감염관리 - 병동별 환자 감염요인 조회
function Hmdpatinf.ListWardInfect(sType1,sType2,sType3,sType4,sType5:String):Integer;
//function Hmdpatinf.ListWardInfect(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   //SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sType1,sType2,sType3,sType4,sType5]);
   //SetFldValue(0, [sType1,sType2,sType3]);
   if (txGetF('MD_INFPA_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_CODE1' , sPatno      );
      GetFldVar('S_CODE2' , sPatname    );
      GetFldVar('S_CODE3' , sAdmdate    );
      GetFldVar('S_CODE4' , sSex        );
      GetFldVar('S_CODE5' , sBirtdate   );
      GetFldVar('S_CODE6' , sMeddept    );
      GetFldVar('S_CODE7' , sDeptnm     );
      GetFldVar('S_CODE8' , sWardno     );
      GetFldVar('S_CODE9' , sRoomno     );
      GetFldVar('S_CODE10', sChadr      );
      GetFldVar('S_CODE11', sChadrnm    );
      GetFldVar('S_CODE12', sGendr      );
      GetFldVar('S_CODE13', sGendrnm    );
      GetFldVar('S_CODE14', sDiagname   );
      GetFldVar('S_CODE15', sOpname     );
      GetFldVar('S_CODE16', sOpdate     );
      GetFldVar('S_CODE17', sPatsect    );
      GetFldVar('S_CODE18', sVschktRm   );
      GetFldVar('S_CODE19', sVschkYn    );
      GetFldVar('S_CODE20', sOld_feveryn);
      GetFldVar('S_CODE21', sOld_diareyn);
//      GetFldVar('S_STRING19', sOld_woundyn);
      GetFldVar('S_CODE22', sOld_ventyn );
      GetFldVar('S_CODE23', sOld_foleyyn);
      GetFldVar('S_CODE24', sOld_centyn );
      GetFldVar('S_CODE25', sFeveryn    );
      GetFldVar('S_CODE26', sDiareyn    );
//      GetFldVar('S_STRING25', sWoundyn    );
      GetFldVar('S_CODE27', sVentyn     );
      GetFldVar('S_CODE28', sFoleyyn    );
      GetFldVar('S_CODE29', sCentyn     );
      GetFldVar('S_CODE30', sMax_temp   );
      GetFldVar('S_CODE31', sOld_tubeyn );
      GetFldVar('S_CODE32', sTubeyn     );
      GetFldVar('S_STRING1', sCurDataYn  );
      GetFldVar('S_STRING2', sChkName    );
      GetFldVar('S_STRING3', sOld_woundyn);
      GetFldVar('S_STRING4', sWoundyn    );
      GetFldVar('S_STRING5', sOld_crrtyn);
      GetFldVar('S_STRING6', sCrrtyn    );
      GetFldVar('S_STRING7', sFromdate    );
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

//병동별 환자 감염입력
function HmdPatinf.InsertWardInfect(Cnt:Integer):Integer;
var i:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
              'S_STRING16;S_STRING17');

    for i := 0 to Cnt -1 do
    begin
     SetFldValue(i,[ String(sRgtdate  [i]),
                     String(sWardno   [i]),
                     String(sPatno    [i]),
                     String(sAdmdate  [i]),
                     String(sMeddept  [i]),
                     String(sFeveryn  [i]),
                     String(sDiareyn  [i]),
                     String(sWoundYN  [i]),
                     String(sInvdevyn [i]),
                     String(sVentyn   [i]),
                     String(sFoleyyn  [i]),
                     String(sCentyn   [i]),
                     String(sEditid   [i]),
                     String(sEditip   [i]),
                     String(sEditdate [i]),
                     String(sRoomno   [i]),
                     String(sTubeyn   [i])]);
   end;
   if (txPutF('MD_INFPA_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//외래환자 전화번호 수정
function HmdPatinf.TelNoUpdate(sFlag,sPatNo,sType1,sType2,sType3,sEditId,sEditIp,sSilinsyn:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_EDITID;S_EDITIP;S_TYPE4');
   SetFldValue(0, [sFlag,sPatno,sType1,sType2,sType3,sEditid,sEditip,sSilinsyn]);

   //Tuxedo Service Call
   if (txPutF('MD_PATBA_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdPatinf.ExceptcdDelete(sPatno,sMedtime,sMeddept,sMeddr,sEditId,sEditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0, [sPatno,sMedtime,sMeddept,sMeddr,sEditid,sEditip]);

   //Tuxedo Service Call
   if (txPutF('MD_PATBA_U2')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//재원환자정보(환자번호)
function HmdPatinf.wardpatinfo(sPatno,sFlag:String) : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sPatno,sFlag]);
   if (txGetF('MD_IPDLS_S2')) then
   begin //Tuxedo Service Call
      GetFldVar('S_CODE1'  ,sAdmdate);
      GetFldVar('S_CODE2'  ,sMeddept);
      GetFldVar('S_CODE3'  ,sChadr);
      GetFldVar('S_CODE4'  ,sGendr);
      GetFldVar('S_CODE5'  ,sWardno1);
      GetFldVar('S_CODE6'  ,sRoomno1);
      GetFldVar('S_CODE7'  ,sDeptnm);
      //KDRG등급조회.KimDaeyong 2017-11-22
      GetFldVar('S_CODE8'  ,sCategory);

      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

function HmdPatinf.wardpatinfo1(sPatno,sDate:String) : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sPatno,sDate]);
   if (txGetF('MD_IPDLS_S3')) then
   begin //Tuxedo Service Call
      GetFldVar('S_CODE1'  ,sAdmdate);
      GetFldVar('S_CODE2'  ,sMeddept);
      GetFldVar('S_CODE3'  ,sChadr);
      GetFldVar('S_CODE4'  ,sGendr);
      GetFldVar('S_CODE5'  ,sWardno);
      GetFldVar('S_CODE6'  ,sRoomno);
      GetFldVar('S_CODE7'  ,sDeptnm);

      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 당일퇴원환자포함시.
function HmdPatInf.UnionDschPatList(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0, [sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_LA')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatNo);
      GetFldVar32('S_CODE2'  ,sPatName);
      GetFldVar32('S_CODE3'  ,sAdmDate);
      GetFldVar32('S_CODE4'  ,sSex);
      GetFldVar32('S_CODE5'  ,sBirtDate);
      GetFldVar32('S_CODE6'  ,sMedDept);
      GetFldVar32('S_CODE7'  ,sDeptNm);
      GetFldVar32('S_CODE8'  ,sWardNo);
      GetFldVar32('S_CODE9'  ,sRoomNo);
      GetFldVar32('S_CODE10' ,sChaDr);
      GetFldVar32('S_CODE11' ,sChaDrNm);
      GetFldVar32('S_CODE12' ,sGenDr);
      GetFldVar32('S_CODE13' ,sGenDrNm);
      GetFldVar32('S_CODE14' ,sDiagName);
      GetFldVar32('S_CODE15' ,sOpName);
      GetFldVar32('S_CODE16' ,sLstopDt);
      GetFldVar32('S_CODE17' ,sPatSect);   // D:DRG R:REFER S:지병
      GetFldVar32('S_CODE18' ,sVschktRm);
      GetFldVar32('S_CODE19' ,sVschkYn);
      GetFldVar32('S_CODE20' ,sDschexdt);
      GetFldVar32('S_CODE21' ,sDschdate);
      GetFldVar32('S_CODE22' ,sWardNo1);
      GetFldVar32('S_CODE23' ,sRoomNo1);
      GetFldVar32('S_CODE24' ,sLstordDt);  // 최근처방일자
      GetFldVar32('S_CODE25' ,sWeight);
      GetFldVar32('S_CODE26' ,sTransDt);
      GetFldVar32('S_CODE27' ,sSysdate);
      GetFldVar32('S_CODE28' ,sNurstat);
      GetFldVar32('S_CODE29' ,sBckStat);
      GetFldVar32('S_CODE30' ,sResNo1) ;
      GetFldVar32('S_STRING1' ,sResNo2);

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

//(추가. 2002.11.29 이용언) 입원환자 체크사항 등록/수정 조회
function HmdPatInf.SearchIpCheck(PatNO, Admdate : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_PATNO;S_ADMDATE');
   SetFldValue (0,[Patno, Admdate]);

   if (txGetF('MD_IPCHK_L1')) then
   begin
      GetFldVar('S_STRING1', sType1);    //OPD CHART
      GetFldVar('S_STRING2', sType2);    //OLD CHART
      GetFldVar('S_STRING3', sType3);    //X-Ray
      GetFldVar('S_STRING4', sType4);    //CT
      GetFldVar('S_STRING5', sType5);    //MRI
      GetFldVar('S_STRING6', sType6);    //USG
      GetFldVar('S_STRING7', sType7);    //RIA
      GEtFldVar('S_STRING8', sAdmdate);  //기입원일자.
      GetFldVar('L_CNT1'   , sAge  );

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

//(추가. 2002.11.29 이용언) 입원 체크사항 저장/수정
function HmdPatInf.InsertIpCheck(PatNO, Admdate, chk1, chk2, chk3, chk4, chk5,
                                 chk6, chk7, Type1, Editid, Editip : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_PATNO;S_ADMDATE;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;'+
              'S_TYPE6;S_TYPE7;S_TYPE8;S_EDITID;S_EDITIP');

   SetFldValue(0,[Patno, Admdate, chk1, chk2, chk3, chk4, chk5, chk6, chk7,
                  Type1, Editid,  Editip]);

   if (txPutF('MD_IPCHK_I1')) then
   begin
      Result := 1;

      txFree;
   end;
end;

//(추가. 2003.03.18 이용언) 입원시 입원과
function HmdPatInf.AdmDept(Patno, Admdate : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_PATNO;S_ADMDATE');

   SetFldValue(0,[Patno, Admdate]);

   if (txGetF('MD_ADMDP_L1')) then
   begin
      GetFldVar('S_STRING1', sMeddept);    //OPD CHART
      GetFldVar('S_STRING2', sChadr);
      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

//(추가. 2003.04.07)환자 기본정보 New
function HmdpatInf.BasicInfo(Patno : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_PATNO');

   SetFldValue(0,[Patno]);

   if (txGetF('MD_PATBA_S5')) then
   begin
      GetFldVar('S_STRING1', sAddress);
      GetFldVar('S_STRING2', sTelno1 );
      GetFldVar('S_STRING3', sResno1 );
      GetFldVar('S_STRING4', sResno2 );

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

//(추가. 2003.04.25 이용언) 원무 요청 사항 - 보험(보호) 체크사항
function HmdPatInf.CheckAichk(Patno, Ordcd, Oiflag : String) : Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');

   SetFldValue(0,[Patno,OrdCd,OiFlag]);

   if (txGetF('MD_PATBA_S6')) then
   begin
      GetFldVar('S_STRING1', sRemark);

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

//(추가. 2003.05.14 이용언) 엄마병동 찾기.
function HmdPatInf.MotherFind(Patno : String) : Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_PATNO');

   SetFldValue(0,[Patno]);

   if (txGetF('MD_PATBA_S7')) then
   begin
      GetFldVar('S_STRING1', sWardno);

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

// (추가 2003.11.26 이선규) 환자번호 DUp났을시 사용되는 Function이다.
function HmdPatInf.ListPatDup(Patno : String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[Patno] );
   if (txGetF('MD_PATDP_L1')) then   //Tuxedo Service Call
   begin
      GetFldVar('S_STRING1' ,sPatno);
      GetFldVar('S_STRING2' ,sPatname);
      GetFldVar('S_STRING3' ,sSex);
      GetFldVar('S_STRING4' ,sBirtDate);
      GetFldVar('S_STRING5' ,sResno1);
      GetFldVar('S_STRING6' ,sResno2);
      GetFldVar('S_STRING7' ,v_Cpatno );
      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
   end;
end;

function HmdPatInf.GetPatPar(sType1: string): Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1');
  SetFldValue32(0, [sType1]);

  if txGetF32('MD_DNPAR_L1') then begin
    GetFldVar32('S_STRING1', sPatNo);
    GetFldVar32('S_STRING2', sPatName);
    GetFldVar32('S_STRING3', sSex);
    GetFldVar32('S_STRING4', sBirtDate);
    GetFldVar32('S_STRING5', sMedDept);
    GetFldVar32('S_STRING6', sAdmDate);
    GetFldVar32('S_STRING7', sResno1);
    GetFldVar32('S_STRING8', sChaDrNm);
    GetFldVar32('S_STRING9', sRoomNo);
    GetFldVar32('S_STRING10', sWardNo);
    GetFldVar32('S_STRING11', sWardNo1);
    GetFldVar32('S_STRING12', sDiagName);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatInf.GetPatParNew(sType1: string): Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1');
  SetFldValue32(0, [sType1]);

  if txGetF32('MD_DNPAR_L3') then begin
    GetFldVar32('S_STRING1', sPatNo);
    GetFldVar32('S_STRING2', sPatName);
    GetFldVar32('S_STRING3', sSex);
    GetFldVar32('S_STRING4', sBirtDate);
    GetFldVar32('S_STRING5', sMedDept);
    GetFldVar32('S_STRING6', sAdmDate);
    GetFldVar32('S_STRING7', sResno1);
    GetFldVar32('S_STRING8', sChaDrNm);
    GetFldVar32('S_STRING9', sRoomNo);
    GetFldVar32('S_STRING10', sWardNo);
    GetFldVar32('S_STRING11', sWardNo1);
    GetFldVar32('S_STRING12', sDiagName);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatInf.GetPatParNewWard(sType1,sType2: string): Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1;S_TYPE2');
  SetFldValue32(0, [sType1,sType2]);

  if txGetF32('MD_DNPAR_L7') then begin
    GetFldVar32('S_STRING1', sPatNo);
    GetFldVar32('S_STRING2', sPatName);
    GetFldVar32('S_STRING3', sWardRoom);
    GetFldVar32('S_STRING4', sHd);
    GetFldVar32('S_STRING5', sPod);
    GetFldVar32('S_STRING6', sInitDate);
    GetFldVar32('S_STRING7', sInitGrade);
    GetFldVar32('S_STRING8', sChkdate1);
    GetFldVar32('S_STRING9', sGrade1);
    GetFldVar32('S_STRING10', sChkdate2);
    GetFldVar32('S_STRING11', sGrade2);
    GetFldVar32('S_STRING12', sChkdate3);
    GetFldVar32('S_STRING13', sGrade3);
    GetFldVar32('S_STRING14', sChkdate4);
    GetFldVar32('S_STRING15', sGrade4);
    GetFldVar32('S_STRING16', sChkdate5);
    GetFldVar32('S_STRING17', sGrade5);
    GetFldVar32('S_STRING18', sChkdate6);
    GetFldVar32('S_STRING19', sGrade6);
    GetFldVar32('S_STRING20', sChkdate7);
    GetFldVar32('S_STRING21', sGrade7);
    GetFldVar32('S_STRING22', sBirtdate);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatInf.GetPatParNewList(sType1,sType2 : String) : Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1;S_TYPE2');
  SetFldValue32(0, [sType1,sType2]);

  if txGetF32('MD_DNPAR_L5') then begin
    GetFldVar32('S_STRING1',  sPatNo);
    GetFldVar32('S_STRING2',  sPatName);
    GetFldVar32('S_STRING3',  sWardNo);
    GetFldVar32('S_STRING4',  sRoomNo);
    GetFldVar32('S_STRING5',  sChkDate);
    GetFldVar32('S_STRING6',  sTotGrad);
    GetFldVar32('S_STRING7',  sItem);
    GetFldVar32('S_STRING8',  sPersonal);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatInf.GetPatBedsore(sType1:String):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1');
  SetFldValue32(0, [sType1]);

  if txGetF32('MD_DNBED_L1') then begin
    GetFldVar32('S_STRING1', sPatNo);
    GetFldVar32('S_STRING2', sPatName);
    GetFldVar32('S_STRING3', sSex);
    GetFldVar32('S_STRING4', sBirtDate);
    GetFldVar32('S_STRING5', sMedDept);
    GetFldVar32('S_STRING6', sAdmDate);
    GetFldVar32('S_STRING7', sResno1);
    GetFldVar32('S_STRING8', sChaDrNm);
    GetFldVar32('S_STRING9', sRoomNo);
    GetFldVar32('S_STRING10', sWardNo);
    GetFldVar32('S_STRING11', sWardNo1);
    GetFldVar32('S_STRING12', sDiagName);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatInf.GetPatBedsoreMon(sType1,sType2:String):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1;S_TYPE2');
  SetFldValue32(0, [sType1,sType2]);

  if txGetF32('MD_DNBED_L4') then begin
    GetFldVar32('S_STRING1', sPatNo);
    GetFldVar32('S_STRING2', sPatName);
    GetFldVar32('S_STRING3', sWardRoom);
    GetFldVar32('S_STRING4', sHd);
    GetFldVar32('S_STRING5', sPod);
    GetFldVar32('S_STRING6', sInitDate);
    GetFldVar32('S_STRING7', sInitGrade);
    GetFldVar32('S_STRING8', sChkdate1);
    GetFldVar32('S_STRING9', sGrade1);
    GetFldVar32('S_STRING10', sChkdate2);
    GetFldVar32('S_STRING11', sGrade2);
    GetFldVar32('S_STRING12', sChkdate3);
    GetFldVar32('S_STRING13', sGrade3);
    GetFldVar32('S_STRING14', sChkdate4);
    GetFldVar32('S_STRING15', sGrade4);
    GetFldVar32('S_STRING16', sChkdate5);
    GetFldVar32('S_STRING17', sGrade5);
    GetFldVar32('S_STRING18', sChkdate6);
    GetFldVar32('S_STRING19', sGrade6);
    GetFldVar32('S_STRING20', sChkdate7);
    GetFldVar32('S_STRING21', sGrade7);
    GetFldVar32('S_STRING22', sBirtdate);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatInf.GetPatBedsoreList(sType1,sType2,sType3 : String) : Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
  SetFldValue32(0, [sType1,sType2,sType3]);

  if txGetF32('MD_DNBED_L2') then begin
    GetFldVar32('S_STRING1',  sPatNo);
    GetFldVar32('S_STRING2',  sPatName);
    GetFldVar32('S_STRING3',  sSex);
    GetFldVar32('S_STRING4',  sBirtDate);
    GetFldVar32('S_STRING5',  sMedDept);
    GetFldVar32('S_STRING6',  sResno1);
    GetFldVar32('S_STRING7',  sChaDrNm);
    GetFldVar32('S_STRING8',  sRoomNo);
    GetFldVar32('S_STRING9',  sWardNo);
    GetFldVar32('S_STRING10', sWardNo1);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdPatinf.GetPatPainList(sType1,sType2:String):Integer;
begin
  Result := -1;
  txAlloc;

  SetFldName('S_TYPE1;S_TYPE2');
  SetFldValue(0, [sType1,sType2]);

  if txGetF('MD_DPAIN_L1') then begin
    GetFldVar('S_STRING1', sWardNo);
    GetFldVar('S_STRING2', sRoomNo);
    GetFldVar('S_STRING3', sPatNo);
    GetFldVar('S_STRING4', sPatName);
    GetFldVar('S_STRING5', sSex);
    GetFldVar('S_STRING6', sBirtdate);
    GetFldVar('S_STRING7', sMeddept);
    GetFldVar('S_STRING8', sChkDate);
    GetFldVar('S_STRING9', sAdmdate);
    GetFldVar('S_STRING10',sStrength);
    GetFldVar('S_STRING11',sPod);
    GetFldVar('S_STRING12',sRegdate);
    GetFldVar('S_STRING13', sTool    );
	GetFldVar('S_STRING14', sFlaccSum);
	GetFldVar('S_STRING15', sNipsSum );
	GetFldVar('S_STRING16', sFprsSum );

    Result := GetRecordCnt('S_STRING1');
  end;
  txFree;

end;

function HmdPatinf.GetPatPainTermList(sType1,sType2,sType3:String):Integer;
begin
  Result := -1;
  txAlloc;

  SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
  SetFldValue(0, [sType1,sType2,sType3]);

  if txGetF('MD_DPAIN_L3') then begin
    GetFldVar('S_STRING1', sExamtype);
    GetFldVar('S_STRING2', sChkDate);
    GetFldVar('S_STRING3', sPosition);
    GetFldVar('S_STRING4', sLook);
    GetFldVar('S_STRING5', sTool);
    GetFldVar('S_STRING6', sStrength);
    GetFldVar('S_STRING7', sFrequency);
    GetFldVar('S_STRING8', sPaintime);
    GetFldVar('S_STRING9', sMediate);
    Result := GetRecordCnt('S_STRING1');
  end;
  txFree;

end;

// 환자의 기간별 진료과 조회 2005.04.28 조일영 추가
function HmdPatinf.GetPatDept(PatNo,FromDate,ToDate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2'); //구분자; 환자명, FromDate, ToDate
   SetFldValue(0, [PatNo,FromDate,ToDate]);

   //Tuxedo Service Call
   if (txGetF('MD_PATBA_L4')) then
   begin
      GetFldVar('S_STRING1' , sMeddept );  // 진료과
      GetFldVar('S_STRING2' , sDeptnm  );  // 진료과명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//응급의학과 추가. KYA. 201501.
function HmdPatInf.IPDLS_E1(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0, [sType1,sType2,sType3,sType4,sType5]);

   //Tuxedo Service Call
   if (txGetF32('MD_IPDLS_E1')) then
   begin
      GetFldVar32('S_CODE1'  ,sPatNo);
      GetFldVar32('S_CODE2'  ,sPatName);
      GetFldVar32('S_CODE3'  ,sAdmDate);
      GetFldVar32('S_CODE4'  ,sSex);
      GetFldVar32('S_CODE5'  ,sBirtDate);
      GetFldVar32('S_CODE6'  ,sMedDept);
      GetFldVar32('S_CODE7'  ,sDeptNm);
      GetFldVar32('S_CODE8'  ,sWardNo);
      GetFldVar32('S_CODE9'  ,sRoomNo);
      GetFldVar32('S_CODE10' ,sChaDr);
      GetFldVar32('S_CODE11' ,sChaDrNm);
      GetFldVar32('S_CODE12' ,sGenDr);
      GetFldVar32('S_CODE13' ,sGenDrNm);
      GetFldVar32('S_CODE14' ,sDiagName);
      GetFldVar32('S_CODE15' ,sOpName);
//      GetFldVar32('S_CODE16' ,sLstopDt);
      GetFldVar32('S_CODE16' ,sOpdate);
      GetFldVar32('S_CODE17' ,sPatSect);   // D:DRG R:REFER S:지병
      GetFldVar32('S_CODE18' ,sVschktRm);
      GetFldVar32('S_CODE19' ,sVschkYn);
      GetFldVar32('S_CODE20' ,sDschexdt);
      GetFldVar32('S_CODE21' ,sDschdate);
      GetFldVar32('S_CODE22' ,sWardNo1);
      GetFldVar32('S_CODE23' ,sRoomNo1);
      GetFldVar32('S_CODE24' ,sLstordDt); // 최근처방일자
      GetFldVar32('S_CODE25' ,sWeight);
      GetFldVar32('S_CODE26' ,sTransDt);
      GetFldVar32('S_CODE27' ,sSysdate);
      GetFldVar32('S_CODE28' ,sNurstat);
      GetFldVar32('S_CODE29' ,sBckStat);
      GetFldVar32('S_CODE30' ,sResNo1);
      GetFldVar32('S_STRING1',sResNo2);
      GetFldVar32('S_STRING2',sAddress);
      GetFldVar32('S_STRING3',sZpAddress);
      GetFldVar32('S_STRING4',sPattype);
      GetFldVar32('S_STRING5',sTelno1);
      GetFldVar32('S_STRING6',sTypecd);
      GetFldVar32('S_STRING7',sPattypenm);
      GetFldVar32('S_STRING8',sTypecdnm);
      GetFldVar32('S_STRING9',sDiagcd);   // AMI관련 주진단코드, KimDaeYong 2008-06-25
      GetFldVar32('S_STRING10',sAnOpYn);
      GetFldVar32('S_STRING11',sScanYn); // 스캔 여부

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result :=GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

//암중증/산정특례대상자 환자여부 조회, KimDaeYong 2017-01-31
function HmdPatInf.Caninfo(inPatno, inOrddate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [inPatno, inOrddate]);
   if (txGetF('MD_PATBA_S8')) then begin //Tmax Service Call
      GetFldVar('S_STRING1'  ,sPatno    );
      GetFldVar('S_STRING2'  ,sScode    );
      GetFldVar('S_STRING3'  ,sFromdate );
      GetFldVar('S_STRING4'  ,sTodate   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//처방시 예약타임 취소여부 체크, KimDaeYong 2019-02-13
function HmdPatInf.ChkMedtime(inPatno, inMeddate, inMeddept, inMeddr, inMedtime:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0, [inPatno, inMeddate, inMeddept, inMeddr, inMedtime]);

   if (txGetF('MD_PATBA_S10')) then //Tmax Service Call
   begin
      GetFldVar('S_STRING1'  ,sPatno    );
      GetFldVar('S_STRING2'  ,sMeddate  );
      GetFldVar('S_STRING3'  ,sMeddept  );
      GetFldVar('S_STRING4'  ,sChadr    );
      GetFldVar('S_STRING5'  ,sMedtime  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdMovett 	전과전실요청                                                   //
////////////////////////////////////////////////////////////////////////////////

// 전과전실요청 이력 조회
function HmdMovett.RequestSelect(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_MOVET_L1')) then begin //Tuxedo Service Call  md_movet_l1.pc
      GetFldVar('L_SEQNO1'  ,iSeqno   );
      GetFldVar('S_STRING1' ,sReqdate );
      GetFldVar('S_STRING2' ,sFromward);
      GetFldVar('S_STRING3' ,sFromdept);
      GetFldVar('S_STRING4' ,sFromroom);
      GetFldVar('S_STRING5' ,sFrombed );
      GetFldVar('S_STRING6' ,sFromchdr);
      GetFldVar('S_STRING7' ,sFromgedr);
      GetFldVar('S_STRING8' ,sReqdept );
      GetFldVar('S_STRING9' ,sReqward );
      GetFldVar('S_STRING10',sReqroom );
      GetFldVar('S_STRING11',sReqbed  );
      GetFldVar('S_STRING12',sReqward2);
      GetFldVar('S_STRING13',sReqroom2);
      GetFldVar('S_STRING14',sReqbed2 );
      GetFldVar('S_STRING15',sReqchadr);
      GetFldVar('S_STRING16',sReqgendr);
      GetFldVar('S_STRING17',sRemark  );
      GetFldVar('S_STRING18',sReqname );
      GetFldVar('S_STRING19',sCofmname);
      GetFldVar('S_STRING20',sCofmdate);
      GetFldVar('S_STRING21',sSdate   );
      GetFldVar('S_STRING22',sTodept  );
      GetFldVar('S_STRING23',sToward  );
      GetFldVar('S_STRING24',sToroom  );
      GetFldVar('S_STRING25',sTobed   );
      GetFldVar('S_STRING26',sToward2 );
      GetFldVar('S_STRING27',sToroom2 );
      GetFldVar('S_STRING28',sTobed2  );
      GetFldVar('S_STRING29',sTochadr );
      GetFldVar('S_STRING30',sTogendr );
      GetFldVar('S_STRING31',sEnddate );
      GetFldVar('S_STRING32',sFromdeptNm);
      GetFldVar('S_STRING33',sReqdeptNm );
      GetFldVar('S_STRING34',sTodeptNm  );
      GetFldVar('S_STRING35',sFromchdrNm );
      GetFldVar('S_STRING36',sFromgedrNm );
      GetFldVar('S_STRING37',sReqchadrNm );
      GetFldVar('S_STRING38',sReqgendrNm );
      GetFldVar('S_STRING39',sTochadrNm );
      GetFldVar('S_STRING40',sTogendrNm );
      GetFldVar('S_STRING41',sAdmdate);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 전과전실요청 내역 입력
function HmdMovett.RequestInsert(lSeqno:Integer;sType,sPatno,sAdmdate,sReqdate,
                                 sFromdept,sFromward,sFromroom,sFrombed,sFromchdr,
                                 sFromgedr,sReqdept,sReqward,sReqroom,sReqbed,
                                 sReqward2,sReqroom2,sReqbed2,sReqchadr,sReqgendr,
                                 sRemark,sReqname,sSdate,sEditid,sEditip:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('L_SEQNO1;S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;'+
              'S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23');
   SetFldValue(0,[lSeqno,sType,sPatno,sAdmdate,sReqdate,sFromdept,sFromward,
                  sFromroom,sFrombed,sFromchdr,sFromgedr,sReqdept,sReqward,
                  sReqroom,sReqbed,sReqward2,sReqroom2,sReqbed2,sReqchadr,
                  sReqgendr,sRemark,sReqname,sSdate,sEditid,sEditip]);
   if (txPutF('MD_MOVET_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdInsamt  	인사마스타                                                  //
////////////////////////////////////////////////////////////////////////////////

// 사용자 조회
function HmdInsamt.ListUserInfo (sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   //코드 셋팅 기간중 임시 수정. 2002.12.11 이용언
   if (txGetF('MD_INSAM_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sEmpNo);
      GetFldVar('S_STRING2',sEmpNm);
      GetFldVar('S_STRING3',sComCdNm);
      GetFldVar('S_STRING4',sDeptCd);
      GetFldVar('S_STRING5',sDeptNm);
      GetFldVar('S_STRING6',sLicNo);
      GetFldVar('S_STRING7',sMajorNo);
      GetFldVar('S_STRING8',sLcnNo);
      GetFldVar('S_STRING9',sLcnCd);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
{   if (G_LOCATE = 'EB1') then
   begin
      if (txGetF('MD_INSAM_L2')) then
      begin //Tuxedo Service Call
         GetFldVar('S_STRING1',sEmpNo);
         GetFldVar('S_STRING2',sEmpNm);
         GetFldVar('S_STRING3',sComCdNm);
         GetFldVar('S_STRING4',sDeptCd);
         GetFldVar('S_STRING5',sDeptNm);
         GetFldVar('S_STRING6',sLicNo);
         GetFldVar('S_STRING7',sMajorNo);

         Result := GetRecordCnt('S_STRING1');
         txFree;
      end
   end
   else
   begin
      if (txGetF('MD_INSAM_L1')) then
      begin //Tuxedo Service Call
         GetFldVar('S_STRING1',sEmpNo);
         GetFldVar('S_STRING2',sEmpNm);
         GetFldVar('S_STRING3',sComCdNm);
         GetFldVar('S_STRING4',sDeptCd);
         GetFldVar('S_STRING5',sDeptNm);
         GetFldVar('S_STRING6',sLicNo);
         GetFldVar('S_STRING7',sMajorNo);

         Result := GetRecordCnt('S_STRING1');
         txFree;
      end
   end;}
end;

// 사용자 조회(내과)
function HmdInsamt.ListImUserInfo(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2]);
   //코드 셋팅 기간중 임시 수정. 2002.12.11 이용언
   if (txGetF('MD_SCHDR_L5')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sEmpNo);
      GetFldVar('S_STRING2',sEmpNm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 응급호출 휴대전화조회, KimDaeYong 2016-08-09
function HmdInsamt.Select1(inLocate, inEmpno:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inLocate,inEmpno]);

   if (txGetF('GA_INSAM_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING16',sHphoneno);

      Result := GetRecordCnt('S_STRING16');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdTrtret  처치재료반납                                                   //
////////////////////////////////////////////////////////////////////////////////
function HmdTrtret.SelectTrtre(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sType1,sType2,sType3] );

   //Tuxedo Service Call
   if (txGetF('MD_TRTRE_L1')) then
   begin
 		GetFldVar ('L_CNT1',   sIono);     // 일회수량
      GetFldVar ('L_CNT2',   sOrdseqno); // 근거번호
		GetFldVar ('S_CODE1',  sPatno);    // 환산단위
		GetFldVar ('S_CODE2',  sRtnid);    // 환자번호
		GetFldVar ('S_CODE3',  sReturnyn); // 반납자
		GetFldVar ('S_CODE4',  sOrddate);  // 반납완료여부
		GetFldVar ('S_CODE5',  sOrdname);  // 약품명
		GetFldVar ('S_CODE6',  sPatname);  // 환자명
		GetFldVar ('S_CODE7',  sSex);      // 성별
		GetFldVar ('S_CODE8',  sBirtdate); // 생년월일
      GetFldVar ('S_CODE9',  sBckflag);  // 생년월일
      GetFldVar ('S_CODE10', sQty);      // 수량
      GetFldVar ('S_CODE11', sCount);    // 처방수량
      GetFldVar ('S_CODE12', sMedDate);

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdTrtret.CountReturnMed(sType1,sType2,sType3:String;sType4:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_SEQNO1');
   SetFldValue(0,[sType1,sType2,sType3,sType4] );
   if (txGetF('MD_TRTRE_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1', sTotCnt);
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

// 처치/재료 반납 입력/수정/삭제
function HmdTrtret.InsUpDelTrtre(sType1,sType2,sType3,sQty,sRtnid,sEditid,sEditip,
                                 sType4,sType5,sType6,sType7,sType8,sType9,
                                 sType10,sType11,sType12,sType13:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;'+
              'S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;'+
              'S_CODE15;S_CODE16;S_CODE17');

   SetFldValue(0,[sType1,sType2,sType3,sQty,sRtnid,sEditid,sEditip,sType4,sType5,
                  sType6,sType7,sType8,sType9,sType10,sType11,sType12,sType13]);

   if (txPutF('MD_TRTRE_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//    HmdInrpft  환자별 간호계획관리                                          //
////////////////////////////////////////////////////////////////////////////////

// 간호계획 분류코드 조회2
function HmdInrpft.NrplInform(sCode1,sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0, [sCode1,sType1,sType2,sType3,sType4,sType5]);

   if (txGetF32('MD_INRPF_L2')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1'  ,sNrplcode);
      GetFldVar32('S_STRING2'  ,sNrplname);
      GetFldVar32('S_STRING3'  ,sNrpmcode);
      GetFldVar32('S_STRING4'  ,sNrpmname);
      GetFldVar32('S_STRING5'  ,sDiagcode);
      GetFldVar32('S_STRING6'  ,sDiagname);
      GetFldVar32('S_STRING7'  ,sPlancode);
      GetFldVar32('S_STRING8'  ,sPlanname);
      GetFldVar32('S_STRING9'  ,sAppldate);
      GetFldVar32('S_STRING10' ,sEnddate );
      GetFldVar32('S_STRING11' ,sObjdiag );
      GetFldVar32('S_STRING12' ,sSubdiag );
      GetFldVar32('S_STRING13' ,sRes     );
      GetFldVar32('S_STRING14' ,sCauseCd );
      GetFldVar32('S_STRING15' ,sCauseNm );
      GetFldVar32('S_STRING16' ,sAct     );
      GetFldVar32('L_LONG1'    ,iAppseqno);

      Result := GetRecordCnt32('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

// 병동전체 간호계획 분류코드 조회
function HmdInrpft.NrplInformWard(sType1,sType2,sType3,sType4,sType5,sType6,sType7:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
   SetFldValue(0, [sType1,sType2,sType3,sType4,sType5,sType6,sType7]);

   if (txGetF('MD_INRPF_L5')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sNrplcode);
      GetFldVar('S_STRING2'  ,sNrplname);
      GetFldVar('S_STRING3'  ,sNrpmcode);
      GetFldVar('S_STRING4'  ,sNrpmname);
      GetFldVar('S_STRING5'  ,sDiagcode);
      GetFldVar('S_STRING6'  ,sDiagname);
      GetFldVar('S_STRING7'  ,sPlancode);
      GetFldVar('S_STRING8'  ,sPlanname);
      GetFldVar('S_STRING9'  ,sAppldate);
      GetFldVar('S_STRING10' ,sEnddate );
      GetFldVar('S_STRING11' ,sObjdiag );
      GetFldVar('S_STRING12' ,sSubdiag );
      GetFldVar('S_STRING13' ,sRes     );
      GetFldVar('S_STRING14' ,sPatNo   );
      GetFldVar('S_STRING15' ,sRoomNo  );
      GetFldVar('S_STRING16' ,sPatName );
      GetFldVar('L_LONG1'    ,iAppseqno);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 조회1
function HmdInrpft.IfplanInform04(sType1,sType2,sType3:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sType1,sType2,sType3]);

   if (txGetF('MD_INRPF_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sAppldate);
      GetFldVar('S_STRING2'  ,sEnddate);
      GetFldVar('L_LONG1'    ,iAppseqno);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 입력
function HmdInrpft.IfplanInsert(Cnt:Integer):Integer;
var i : Integer ;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;'+
              'S_TYPE8;S_TYPE9;S_TYPE10;S_EDITID;S_EDITIP');

   for i := 0 to cnt-1 do
   begin
     SetFldValue(i,[String(sPatNo[i]),String(sAdmdate[i]),String(sAppldate[i]),
                    String(sDiagnocd[i]),String(sPlancode[i]),
                    String(sObjdiag[i]),String(sSubdiag[i]),
                    String(sRes[i]),String(sCauseCd[i]),String(sCauseNm[i]),String(sEditid[i]),String(sEditip[i])]);
   end;


   //Tuxedo Service Call
   if (txPutF('MD_INRPF_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//  조회3
function HmdInrpft.PrintInform(sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0, [sType1,sType2,sType3,sType4,sType5]);

   if (txGetF('MD_INRPF_L3')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sPatno);
      GetFldVar('S_STRING2'  ,sAppldate);
      GetFldVar('S_STRING3'  ,sPatname);
      GetFldVar('S_STRING4'  ,sSex);
      GetFldVar('S_STRING5'  ,sBirtdate);
      GetFldVar('S_STRING6'  ,sDiagnosis);
      GetFldVar('S_STRING7'  ,sPlanname);
      GetFldVar('S_STRING8'  ,sEnddate);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 간호계획 분류코드 조회4(출력용)
function HmdInrpft.ActingInform(sCode1, sType1,sType2,sType3,sType4,sType5:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0, [sCode1,sType1,sType2,sType3,sType4,sType5]);

   if (txGetF('MD_INRPF_L4')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sNrplcode);
      GetFldVar('S_STRING2'  ,sNrplname);
      GetFldVar('S_STRING3'  ,sNrpmcode);
      GetFldVar('S_STRING4'  ,sNrpmname);
      GetFldVar('S_STRING5'  ,sDiagcode);
      GetFldVar('S_STRING6'  ,sDiagname);
      GetFldVar('S_STRING7'  ,sPlancode);
      GetFldVar('S_STRING8'  ,sPlanname);
      GetFldVar('S_STRING9'  ,sDiagnocd);
      GetFldVar('S_STRING10' ,sAppldate);
      GetFldVar('S_STRING11' ,sEnddate );
      GetFldVar('S_STRING12' ,sObjdiag );
      GetFldVar('S_STRING13' ,sSubdiag );
      GetFldVar('S_STRING14' ,sRes     );
      GetFldVar('S_STRING15' ,sCauseNm );
      GetFldVar('L_LONG1'    ,iAppseqno);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//    HmdInrplt  간호계획대분류코드마스타                                     //
////////////////////////////////////////////////////////////////////////////////

// 조회
function HmdInrplt.IfplanInform(sType1,sType2,sType3:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sType1,sType2,sType3]);

   if (txGetF('MD_INRPL_L1')) then begin  //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sNrplcode);
      GetFldVar('S_STRING2'  ,sNrplname);
      GetFldVar('S_STRING3'  ,sNrpmcode);
      GetFldVar('S_STRING4'  ,sNrpmname);
      GetFldVar('S_STRING5'  ,sDiagcode);
      GetFldVar('S_STRING6'  ,sDiagname);
      GetFldVar('S_STRING7'  ,sPlancode);
      GetFldVar('S_STRING8'  ,sPlanname);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 조회2
function HmdInrplt.IfplanInform02:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   if (txGetF('MD_INRPL_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sNrplcode);
      GetFldVar('S_STRING2'  ,sNrplname);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;                                           

////////////////////////////////////////////////////////////////////////////////
//    HmdInrpmt  간호계획중분류코드마스타                                     //
////////////////////////////////////////////////////////////////////////////////

// 조회
function HmdInrpmt.IfplanInform03(sType1:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0, [sType1]);

   if (txGetF('MD_INRPM_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sNrplcode);
      GetFldVar('S_STRING2'  ,sNrpmcode);
      GetFldVar('S_STRING3'  ,sNrpmname);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//    HmdInract  간호계획 Acting 기록                                         //
////////////////////////////////////////////////////////////////////////////////

// Insert
function HmdInract.ActingInsert(Cnt:Integer):Integer;
var i : Integer ;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11');

   for i := 0 to cnt-1 do
   begin
     SetFldValue32(i,[String(sPatNo[i]),   String(sAdmdate[i]),  String(sEditDate[i]),
                      String(sEditDuty[i]),String(sDiagnocd[i]), String(sPlancode[i]),
                      String(sUserid[i]),  String(sUserip[i]),   String(sPlanname[i]),
                      String(sDispSeq[i]), String(sApplDate[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF32('MD_INRAC_I2')) then
   begin
      Result := 1;
      txFree32;
   end;
end;


//조회
function HmdInract.ActingSelect(sCode1,sType1,sType2,sType3,sType4:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0, [sCode1,sType1,sType2,sType3,sType4]);

   if (txGetF32('MD_INRAC_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1'  ,sPlanCode);
      GetFldVar32('S_STRING2'  ,sEditDate);
      GetFldVar32('S_STRING3'  ,sEditDuty);
      GetFldVar32('S_STRING4'  ,sUserId);
      GetFldVar32('S_STRING5'  ,sPlanname);

      Result := GetRecordCnt32('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdExCode  	타시스템 코드                                               //
////////////////////////////////////////////////////////////////////////////////

// 사용자정보 조회
function HmdExCode.UserInform(sType1,sType2:string):Integer;
begin
   Result := -1;

   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);

   //Tuxedo Service Call
   if (txGetF('MD_INSAM_S1')) then
   begin
      GetFldVar('S_CODE1'  ,sUserNm  );
      GetFldVar('S_CODE2'  ,sDeptCd  );
      GetFldVar('S_CODE3'  ,sDeptNm  );
      GetFldVar('S_CODE4'  ,sLicNo   );
      GetFldVar('S_CODE5'  ,sMajorNo );
      GetFldVar('S_CODE6'  ,sJicJong );
      GetFldVar('S_CODE7'  ,sJikGup  );
      GetFldVar('S_CODE8'  ,sJikGupNm);
      GetFldVar('S_CODE9'  ,sSort    );
      GetFldVar('S_CODE10' ,sInscfmYn);
      GetFldVar('S_CODE11' ,sPatSel  );
      GetFldVar('S_CODE12' ,sNextScr );
      GetFldVar('S_CODE13' ,sDiagSel );
      GetFldVar('S_CODE14' ,sWardNo1 );
      GetFldVar('S_CODE15' ,sWardNo2 );
      GetFldVar('S_CODE16' ,sDays    );
      GetFldVar('S_CODE17' ,sCounts  );
      GetFldVar('S_CODE18' ,sWkareaCd);
      GetFldVar('S_CODE19' ,sOrdFont );
      GetFldVar('S_CODE20' ,sPreFont );
      GetFldVar('S_CODE21' ,sSetFont );
      GetFldVar('S_CODE22' ,sConsltYn);
      GetFldVar('S_CODE23' ,sWeightYn);
      GetFldVar('S_CODE24' ,sPatselYn);
      GetFldVar('S_CODE25' ,sPreordYn);
      GetFldVar('S_CODE26' ,sOutordYn);
      GetFldVar('S_CODE27' ,sResltopt);
      GetFldVar('S_CODE28' ,sSelmm   );
      GetFldVar('S_CODE29' ,sRsvselfg);
      GetFldVar('S_CODE30' ,sRefresh );
      GetFldVar('S_STRING1',sOrgDept );
      GetFldVar('S_STRING2',sCelledit);
      GetFldVar('S_STRING3',sOrdcopy );
      GetFldVar('S_STRING4',sDrugprt );
      GetFldVar('S_STRING5',sPhone   );
      GetFldVar('S_STRING6',sDrugunit);
      GetFldVar('S_STRING7',sChart1  );
      GetFldVar('S_STRING8',sChart2  );

      //Service를 수행하고 FML Buffer에 PUT된 Record수
      Result := GetRecordCnt('S_CODE1'); 

      txFree;
   end;
end;

// 진료과 및 병동코드 조회
function HmdExCode.SelDeptNm(sType1,sType2:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);  // 1:진료과 2:병동
   if (txGetF('MD_DEPTC_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1'  ,sDeptCd);
      GetFldVar('S_CODE2'  ,sDeptNm);
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 재활치료현황 조회
function HmdExCode.ListRehInfo(sType1,sType2,sType3:string;lType3:integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_LONG3');
   SetFldValue(0,[sType1,sType2,sType3,lType3]);
   if (txGetF('MD_REHTD_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sRsvdate );
      GetFldVar('S_STRING2',sExecdate);
      GetFldVar('S_STRING3',sGendrnm );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 재활경과기록지 조회
function HmdExCode.ListRehNote(sType1:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1]);
   if (txGetF('MD_PNOTD_L1')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iSeqno);
      GetFldVar('S_STRING1',sExecdate);
      GetFldVar('S_STRING2',sPnottext);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 용법코드 조회
function HmdExCode.ListMethCd(sType1,sType2,sType3,sType4,sType5,sType6:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF('MD_DMETH_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sMethodcd);
      GetFldVar('S_STRING2',sAbbr);
      GetFldVar('S_STRING3',sDgijtype);
      GetFldVar('S_STRING4',sCount1);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//공통코드List SELECT
function HmdExCode.ListComCodeName(Code1,Code2: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[Code1,Code2] );

   //Tuxedo Service Call
   if (txGetF('MD_COMCD_L1')) then
   begin
      GetFldVar('S_STRING1',  sCode    );       // 코드
      GetFldVar('S_STRING2',  sCodeName);       // 코드명
      //KimDaeYong add 2018-10-24
      GetFldVar('S_STRING3',  sCdprtnm );
      GetFldVar('S_STRING4',  sCdvalue );
	  GetFldVar('S_STRING5',  sCdmaxval);
	  GetFldVar('S_STRING6',  sCdminval);
	  GetFldVar('S_STRING7',  sCdetca  );
	  GetFldVar('S_STRING8',  sCdetcb  );
	  GetFldVar('S_STRING9',  sCdetcc  );
	  GetFldVar('S_STRING10', sRemark  );

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//공통코드List SELECT(만성질환코드)
function HmdExCode.ListComCodeName2(Code1 : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[Code1] );

   //Tuxedo Service Call
   if (txGetF('MD_COMCD_L2')) then
   begin
     GetFldVar('S_STRING1',  sCode    );  // 코드
     GetFldVar('S_STRING2',  sCodeName);  // 코드명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//검체코드List SELECT
function HmdExCode.ListSpcCodeName(Slipcd,Code1: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[Slipcd,Code1]);

   //Tuxedo Service Call
   if (txGetF('MD_SPCMC_L1')) then
   begin
     GetFldVar('S_STRING1',  sCode    );  // 코드
     GetFldVar('S_STRING2',  sCodeName);  // 코드명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// ICD코드분류로 찾기
function HmdExCode.ListGroup(sType1,sType3,sType4,sType5,inMeddate:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE3;S_TYPE4;S_TYPE5;S_CODE1');
   SetFldValue32(0,[sType1,sType3,sType4,sType5,inMeddate] );
   if (txGetF32('MD_ICDTC_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1'  ,sCode   );
      GetFldVar32('S_STRING2'  ,sEngName);
      GetFldVar32('S_STRING3'  ,sKorName);
      GetFldVar32('S_STRING4'  ,sInfegrd);
      GetFldVar32('S_STRING5'  ,sFeeYn  );
      GetFldVar32('S_STRING6'  ,sTypecd );
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 진지공통코드 조회
function HmdExCode.ListSDComNm(sType1:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1]);
   if (txGetF('MD_SCOMC_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sComCdDtl);
      GetFldVar('S_STRING2',sComCdNm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// icd분류로 읽어오기
function HmdExCode.ListIcdGroup(sType1,sType2,sType3:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType1,sType2,sType3] );
   if (txGetF32('MD_ICDGR_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sLargCd);
      GetFldVar32('S_STRING2',sMiddCd);
      GetFldVar32('S_STRING3',sSmalCd);
      GetFldVar32('S_STRING4',sCodeName);
      GetFldVar32('S_STRING5',sCode);
      GetFldVar32('S_STRING6',sEngName);
      GetFldVar32('S_STRING7',sKorName);
      GetFldVar32('S_STRING8',sInfegrd);
      GetFldVar32('S_STRING9',sCond);
      GetFldVar32('S_STRING10',sFeeyn);
      GetFldVar32('S_STRING11',sTypecd);
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 약효능분류코드 List 조회
function HmdExCode.ListDrugGroup(GrpType,Code1,Code2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[GrpType,Code1,Code2] );

   //Tuxedo Service Call
   if (txGetF('MD_EFCGR_L1')) then
   begin
      GetFldVar('S_STRING1',  sLargCd  );  // 대분류코드
      GetFldVar('S_STRING2',  sMiddCd  );  // 중분류코드
      GetFldVar('S_STRING3',  sSmalCd  );  // 소분류코드
      GetFldVar('S_STRING4',  sCodeName);  // 코드명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//검사실코드List SELECT
function HmdExCode.ListExRoomCode(Slipcd,Code1: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); //SLip코드;검사실코드
   SetFldValue(0,[Slipcd,Code1] );

   //Tuxedo Service Call
   if (txGetF('MD_ROOMC_L1')) then
   begin
      GetFldVar('S_STRING1',  sCode    );  // 검사실코드
      GetFldVar('S_STRING2',  sCodeName);  // 검사실명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 재활의학공통코드 조회
function HmdExCode.ListSaComCode(Code1,Code2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); //대분류코드;(소분류코드)
   SetFldValue(0,[Code1,Code2] );

   //Tuxedo Service Call
   if (txGetF('MD_SACOD_L1')) then
   begin
      GetFldVar('S_STRING1',  sCode    );  // 코드
      GetFldVar('S_STRING2',  sCodeName);  // 코드명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 병실코드 조회
function HmdExCode.ListRoomCode(sWardNo,sFromdate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_WARDNO;S_FROMDATE');
   SetFldValue(0,[sWardNo,sFromdate] );

   //Tuxedo Service Call
   if (txGetF('MD_RMCDC_L1')) then
   begin
      GetFldVar('S_ROOMNO',  sCode    );  // 코드
      GetFldVar('S_NAME1',   sCodeName);  // 코드명

      //조회건수 return
      Result := GetRecordCnt('S_ROOMNO');
      txFree;
   end;
end;

// 약품반납 조회
function HmdExCode.SelectIrejt(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sType1,sType2,sType3] );

   //Tuxedo Service Call
   if (txGetF('MD_IREJT_L1')) then
   begin
      GetFldVar ('L_CNT1',   iCount1  );     // 일회수량
		GetFldVar ('L_CNT2',   ilevel   );     // 횟수
      GetFldVar ('L_CNT3',   iSeqno   );     // 처방횟수
      GetFldVar ('L_CNT4',   sUserId  );     // 근거번호
      GetFldVar ('L_CNT5',   sSmalCd  );     // 순서
		GetFldVar ('S_CODE1',  sJikGup  );     // 환산단위
		GetFldVar ('S_CODE2',  sLicNo   );     // 환자번호
		GetFldVar ('S_CODE3',  sSort    );     // 반납자
		GetFldVar ('S_CODE4',  sInscfmYn);     // 반납완료여부
		GetFldVar ('S_CODE5',  sKorName );     // 약품명
		GetFldVar ('S_CODE6',  sEngName );     // 환자명
		GetFldVar ('S_CODE7',  sCond    );     // 성별
		GetFldVar ('S_CODE8',  sMajorNo );     // 생년월일
      GetFldVar ('S_CODE9',  sReturnYn);     // 환불여부
      GetFldVar ('S_CODE10', sUserNm  );     // 근거일자
      GetFldVar ('S_CODE11', sUseDay  );     // 처방일수
      GetFldVar ('S_CODE12', sCount1  );     // 일회수량(string)
      GetFldVar ('S_CODE13', sAbbr    );     // Flag
      GetFldVar ('S_CODE14', sIoDate  );     // 반납일자
      GetFldVar ('S_CODE15', sOrdGrp  );
      GetFldVar ('S_CODE16', sConvqty );
      GetFldVar ('S_CODE17', sMeddate );
      GetFldVar ('S_CODE18', sCalyn   );

      GetFldVar ('S_CODE19', sSdTot   );   // 불출총량
      GetFldVar ('S_CODE20', sDoseUnit);   // 포장단위
      GetFldVar ('S_CODE21', sRejtOrd );   // 반납총량

      //추가. 2002.11.9 약품반납확인 약사
      GetFldVar ('S_CODE22', sRetCfDr );   //약품반납 확인 약사.

      //추가. 2010.07.15
      GetFldVar ('S_CODE23', sIoto);    // 약품반납병동

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdExCode.InsertIrejt(sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                          sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                          sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_EDITID;S_EDITIP;S_CODE16');

   SetFldValue(0,[sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                  sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                  sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd]);

   if (txPutF('MD_OREJT_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdExCode.DeleteIrejt(sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                               sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                               sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'+
              'S_CODE13;S_CODE14;S_CODE15;S_EDITID;S_EDITIP;S_CODE16');

   SetFldValue(0,[sType1,sIodate,sDrugcode,sHosptype,sIotype1,sIotype2,
                  sIoqty,sIoto,sOrdqty,sConvunit,sSrdate,sSrno1,sSrno2,
                  sPatno,sRtnid,sProcdate,sEditid,sEditip,sRejtOrd]);

   if (txPutF('MD_OREJT_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//보험인정기준 정보 SELECT
function HmdExCode.SelectInsInfo(OrdCd: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[OrdCd]);

   //Tuxedo Service Call
   if (txGetF('MD_IRULE_S1')) then
   begin
      GetFldVar('S_STRING1',  sMaxDay  );  //최대투여일수
      GetFldVar('S_STRING2',  sDayQty  );  //1일용량
      GetFldVar('S_STRING3',  sOrdYn   );  //처방가능여부
      GetFldVar('S_STRING4',  sInsInfo );  //인증기준
      GetFldVar('S_STRING5',  sMethod  );  //용법/용량
      GetFldVar('S_STRING6',  sDisease );  //적응증
      GetFldVar('S_STRING7',  sCodeName);  //약품명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자정보조회
function HmdExCode.SelectPat(sType1 : String) : Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1]);

   if (txGetF('MD_PATBA_S3')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,  sPatName  );
      GetFldVar('S_STRING2'  ,  sResNo1   );
      GetFldVar('S_STRING3'  ,  sResNo2   );
      GetFldVar('S_STRING4'  ,  sBirtDate );
      GetFldVar('S_STRING5'  ,  sSex      );
      GetFldVar('S_STRING6'  ,  sTelNo1   );
      GetFldVar('S_STRING7'  ,  sTelNo2   );
      GetFldVar('S_STRING8'  ,  sTelNo3   );
      GetFldVar('S_STRING9'  ,  sZipCd    );
      GetFldVar('S_STRING10' ,  sAddress  );
      GetFldVar('S_STRING11' ,  sPatWardno);
      GetFldVar('S_STRING12' ,  sPatRoomno);
      GetFldVar('S_STRING13' ,  sPatdept  );
      GetFldVar('S_STRING14' ,  sAddress1 );
      GetFldVar('S_STRING15' ,  sAddress2 );
      GetFldVar('S_STRING16' ,  sAdmdate  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// icd코드/이름으로 찾기
function HmdExCode.ListIcdCD(sType1,sType2,sType3,inDate:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_CODE1');
   SetFldValue32(0,[sType1,sType2,sType3,inDate] );
   if (txGetF32('MD_ICDTC_L1')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sCode);
      GetFldVar32('S_STRING2',sEngName);
      GetFldVar32('S_STRING3',sKorName);
      GetFldVar32('S_STRING4',sInfegrd);
      GetFldVar32('S_STRING5',sFeeyn);
      GetFldVar32('S_STRING6',sTypecd);
      GetFldVar32('S_STRING7',sCdetca); //V252,V352 조회. KimDaeYong 2021-02-22

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

// 사용자정보 조회
function HmdExCode.Login(sType1,sType2,sPasswd:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [sType1,sType2,sPasswd]);
   if (txGetF('MD_INSAM_S2')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1'  ,sUserId);
      GetFldVar('S_CODE2'  ,sUserNm);
      GetFldVar('S_CODE3'  ,sYesNo );    //PW비교확인,KimDaeYong 2014-07-30
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 수술장비 조회
function HmdExCode.ListOPInst(sType1,sType2,sType3:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3] );
   if (txGetF('MD_ASSEM_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sProdCode);
      GetFldVar('S_STRING2',sProdName);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


// 약품정보 조회
function HmdExCode.DrugInfo(sType1:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );

   //Tuxedo Service Call
   if (txGetF('MD_DGINF_S1')) then
   begin
      GetFldVar('S_STRING1',sDrugCd);
      GetFldVar('S_STRING2',sDrugNm);
      GetFldVar('S_STRING3',sIdrgNm);
      GetFldVar('S_STRING4',sDrgInf);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 공휴일 조회
function HmdExCode.ListHolyday(sMonth : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1');
   SetFldValue(0,[sMonth] );
   if (txGetF('MD_HOLYD_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sDay);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자진료 통계
function HmdExCode.ListPatOrder(sType1,sType2,sType3:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_DATE1;S_MEDDEPT;S_DR1');
   SetFldValue(0,[sType1,sType2,sType3] );
   if (txGetF('MD_PATOR_S1')) then begin //Tuxedo Service Call
      GetFldVar('L_CNT1', sSex);
      GetFldVar('L_CNT2', sTelNo1);
      GetFldVar('L_CNT3', sTelNo2);
      GetFldVar('L_CNT4', sTelNo3);
      GetFldVar('L_CNT5', sZipCd);
      GetFldVar('L_CNT6', sAddress);
      GetFldVar('L_CNT7', sDrugCd);
      GetFldVar('L_CNT8', sDrugNm);
      GetFldVar('L_CNT9', sIdrgNm);
      GetFldVar('L_CNT10',sDrgInf);
      GetFldVar('L_CNT11',sWkareaCd);
      GetFldVar('L_CNT12',sDay);
      Result := GetRecordCnt('L_CNT1');
      txFree;
   end;
end;

// 법정 전염병 분류등급 조회
// 환자번호(sType2) 파마리터 추가, KimDaeYong 2014-04-15
function HmdExCode.SelLegalDiag(sType1, sType2:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1, sType2]);  // 1:진료과 2:병동
   if (txGetF('MD_ICDTC_S1')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1'  ,sInfegrd);
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 추가처방 수행예정등록
function HmdExCode.UpdateAddod(sPatno, sAdmdate, sOrddate, sConfid, sEditid, sEditip : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE;S_ORDDATE;S_STRING1;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno, sAdmdate, sOrddate, sConfid, sEditid, sEditip]);
   if (txPutF('MD_ADDOD_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 병원 기본정보 조회
function HmdExCode.HosInform(sLOCATE:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1');
   SetFldValue(0, [sLOCATE]);
   if (txGetF('MD_HOSIN_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sHosname);
      GetFldVar('S_STRING2'  ,sHosaddress);
      GetFldVar('S_STRING3'  ,sHostel);
      GetFldVar('S_STRING4'  ,sHosdr);
      GetFldVar('S_STRING5'  ,sHosfax);
      GetFldVar('S_STRING6'  ,sInsurid);

      Result := GetRecordCnt('S_STRING1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;


//의사별 임상연구번호 List 조회
function HmdExcode.ListLabNo(MedDept, MedDr:String): Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2'); //진료과;진료의
   SetFldValue(0, [MedDept, MedDr]);

   //Tuxedo Service Call
   if (txGetF('MD_LABMS_L1')) then
   begin
      GetFldVar('S_STRING1' , sLabNo   );  // 임상연구번호
      GetFldVar('S_STRING2' , sLabDesc );  // 임상연구명
      GetFldVar('S_STRING3' , sFromDate);  // 시작일
      GetFldVar('S_STRING4' , sToDate  );  // 종료일

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 해당일 공휴일여부
function HmdExcode.HolydayCheck(sType1:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');   // 해당일자
   SetFldValue(0, [sType1]);

   //Tuxedo Service Call
   if (txGetF('MD_HOLYD_S1')) then
   begin
      GetFldVar('S_STRING1' , sHolyn   );  // 공휴일여부 

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 수간호사 이름 가져오기....
function HmdExcode.SelectHnName(sType1,sType2:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');   // 해당일자
   SetFldValue(0, [sType1,sType2]);

   //Tuxedo Service Call
   if (txGetF('MD_INSAM_S3')) then
   begin
      GetFldVar('S_STRING1' , sUsernm  );  // 사용자명


      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//보험인정기준 추가정보 SELECT
function HmdExCode.SelectInsAddInfo(OrdCd: String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[OrdCd]);

   //Tuxedo Service Call
   if (txGetF32('MD_RULE2_L1')) then
   begin
      GetFldVar32('S_STRING1',  sOrdYn   );  //처방가능여부
      GetFldVar32('S_STRING2',  sInsInfo );  //보험인정기준

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//추가. 2002.11.27 이용언) 가능검체 가져오기
function HmdExcode.ListSpcCodeName2(SlipCd,Code1,Ordcd, Type1:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[Slipcd,Code1,OrdCd,Type1]);

   //Tuxedo Service Call
   if (txGetF('MD_SPCMC_L2')) then
   begin
     GetFldVar('S_STRING1',  sCode    );  // 코드
     GetFldVar('S_STRING2',  sCodeName);  // 코드명

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdExCode.ChkRareDiagCd(sDiagCd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[sDiagCd] );

   //Tuxedo Service Call
   if (txGetF('MD_RARET_S1')) then
   begin
      GetFldVar ('S_CODE1',  sRareDiagCd    );     // 상병코드
      GetFldVar ('S_CODE2',  sGubun         );     // 산정특례구분. KimDaeYong 2019-01-04

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;

end;

// 희귀난치성 질환자 등록번호 조회
function HmdExCode.SelectRareNumber(sPatno:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[sPatno] );

   //Tuxedo Service Call
   if (txGetF('MD_RARET_S2')) then
   begin
      GetFldVar ('S_CODE1',  sRareNumber    );     // 등록번호
      GetFldVar ('S_CODE2',  sTodate        );     // 종료일자
      GetFldVar ('S_CODE3',  sLeavecnt      );     // 남은일수
      GetFldVar ('S_CODE4',  sGubun         );     // 산정특례구분. KimDaeYong 2019-01-04

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;

end;

function HmdExCode.ListRareInfo(inDiagCd, inRgttxt, inGubun:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inDiagCd,inRgttxt,inGubun] );

   //Tuxedo Service Call
   if (txGetF('MD_RARET_L1')) then
   begin
      GetFldVar ('S_STRING1' ,  sRareDiagCd );     // 질환상병
      GetFldVar ('S_STRING2' ,  sRareDisease    );     // 구분자
      GetFldVar ('S_STRING3' ,  sRareEnDisease  );     // 구분자
      GetFldVar ('S_STRING4' ,  sBasis      );     // 구분자
      GetFldVar ('S_STRING5' ,  sExam1      );     // 구분자
      GetFldVar ('S_STRING6' ,  sExam2      );     // 구분자
      GetFldVar ('S_STRING7' ,  sExam3      );     // 구분자
      GetFldVar ('S_STRING8' ,  sExam4      );     // 구분자
      GetFldVar ('S_STRING9' ,  sExam5      );     // 구분자
      GetFldVar ('S_STRING10',  sExam6      );     // 구분자
      GetFldVar ('S_STRING11',  sExammix    );     // 필수검사조합
      GetFldVar ('S_STRING12',  sRgttxt     );     // 등록구분
      GetFldVar ('S_STRING13',  sGubun      );     // 산정특례구분
      GetFldVar ('S_STRING14',  sExcepyn    );     // 예외적용가능여부. KimDaeYong 2019-04-25
      GetFldVar ('S_STRING15',  sExcepexam  );     // 예외적용필수검사항목. KimDaeYong 2019-04-25
      GetFldVar ('S_STRING16',  sRehyn      );     // 장애여부. KimDaeYong 2019-05-16
      GetFldVar ('S_STRING17',  sDiagcdref  );     // 참고질환코드. KimDaeYong 2019-05-16
      GetFldVar ('S_STRING18',  sDiagseqno  );     // 상병일련번호. KimDaeYong 2019-05-16
      GetFldVar ('S_STRING19',  sRarermk    );     // 비고. KimDaeYong 2020-01-06

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//환자별산정특례등록정보조회. KimDaeYong 2019-05-14
function HmdExCode.ListRarePatInfo(inPatno,inSeldate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inSeldate] );

   //Tuxedo Service Call
   if (txGetF('MD_RARET_L2')) then
   begin
      GetFldVar ('S_CODE1',  sGubun       );     // 산정특례구분
      GetFldVar ('S_CODE2',  sGubunname   );     // 산정특례구분명
      GetFldVar ('S_CODE3',  sFromdate    );     // 시작일자
      GetFldVar ('S_CODE4',  sTodate      );     // 종료일자
      GetFldVar ('S_CODE5',  sRareNumber  );   //  등록번호
      GetFldVar ('S_CODE6',  sRareDiagCd  );     // 상병코드
      GetFldVar ('S_CODE7',  sRareDisease  );    // 상병명
      
      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdSearct : 조건항목                                                      //
////////////////////////////////////////////////////////////////////////////////

// 조건항목 코드 조회
function HmdSearct.ListCode:Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //Tuxedo Service Call
   if (txGetF('MD_SEARC_L1')) then
   begin
      GetFldVar('S_STRING1',  sClasscd1);   // 대분류
      GetFldVar('S_STRING2',  sClasscd2);   // 중분류
      GetFldVar('S_STRING3',  sClassnm1);   // 대분류명
      GetFldVar('S_STRING4',  sClassnm2);   // 중분류명
      GetFldVar('S_STRING5',  sTblname );   // TABLE 명
      GetFldVar('S_STRING6',  sColname );   // COLUMN 명
      GetFldVar('S_STRING7',  sComent  );   // 비고

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////
//  HmdSelect : 조건검색
////////////////////////////////////////////////////////////////

// 조건검색
function HmdSelect.ListQuery(sType, sFromCon, sWhereCon : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue32(0,[sType,sFromCon,sWhereCon] );

   //Tuxedo Service Call
   if (txGetF32('MD_SELEC_L1')) then
   begin
      GetFldVar32('S_STRING1',  sPatno   );   // 환자번호
      GetFldVar32('S_STRING2',  sPatname );   // 환자명
      GetFldVar32('S_STRING3',  sSex     );   // 성별
      GetFldVar32('S_STRING4',  sAge     );   // 나이
      GetFldVar32('S_STRING5',  sWardno  );   // 병동
      GetFldVar32('S_STRING6',  sMeddept );   // 진료과
      GetFldVar32('S_STRING7',  sChadr   );   // 주치의
      GetFldVar32('S_STRING8',  sGendr   );   // 담당의
      GetFldVar32('S_STRING9',  sDiagname);   // 진단명
      GetFldVar32('S_STRING10', sMeddate );   // 입원/진료일
      GetFldVar32('S_STRING11', sRoomno );   // 병실 추가   jyleeweb 20071012

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdInfRpt  	법정전염병신고서                                            //
////////////////////////////////////////////////////////////////////////////////

//법정전염병신고서 등록
function HmdInfRpt.Insert1:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;' +
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;' +
              'S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;' +
              'S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;S_STRING31;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPATNO, sMEDDEPT, sMEDDR, sCVNAME, sADDRSYN, sUNIDENTYN, sJOB, sINFEGRD,
                sINFECD, sNINFSYND,sINFENAME, sSICKDT, sDIAGDT, sCONFRSLT, sINFTYPE, sDEATHYN,
                sINFROUTE, sINFZONE, sINFNATIN, sSTAYTERM, sCHNGRPT, sADDRCHNG, sWardNo, sRoomNo, sDiagcdBas,
                sDeathText, sJobcd, sSTAYTERMDD, sREMARK, sACUTE, sFRGNR, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_I1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      Result := 1;
      txFree;
   end;
end;

//법정전염병 신고서 수정
function HmdInfRpt.Update1:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;' +
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;' +
              'S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;' +
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPATNO, sRGTDATE, sMEDDR, sCVNAME, sADDRSYN, sUNIDENTYN, sJOB, sINFEGRD,
                sINFECD, sNINFSYND,sINFENAME, sSICKDT, sDIAGDT, sCONFRSLT, sINFTYPE, sDEATHYN,
                sINFROUTE, sINFZONE, sINFNATIN, sSTAYTERM, sCHNGRPT, sADDRCHNG, sDiagcdBas, sDeathText,
                sJobcd, sSTAYTERMDD, sREMARK, sACUTE, sFRGNR, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(간염) 신고서 등록
function HmdInfRpt.Insert2:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sMEDDEPT, sMEDDR, sDIAGDT, sHepaType, sVaccinHx, sWardNo, sRoomNo, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_I2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      Result := 1;
      txFree;
   end;
end;

//법정전염병(간염) 신고서 수정
function HmdInfRpt.Update2:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sRGTDATE, sMEDDR, sDIAGDT, sHepaType, sVaccinHx, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_U2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(간염) 신고서 조회
function HmdInfRpt.Retrieve2(sFromDate, sToDate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sMedDr, sFromDate, sToDate]);

   if (txGetF('MD_INFRP_L2')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sDiagDt  );
      GetFldVar('S_STRING2'  ,sHepaType);
      GetFldVar('S_STRING3'  ,sVaccinHx);
      GetFldVar('S_STRING4'  ,sPatName );
      GetFldVar('S_STRING5'  ,sResNo1  );
      GetFldVar('S_STRING6'  ,sResNo2  );
      GetFldVar('S_STRING7'  ,sBirtDate);
      GetFldVar('S_STRING8'  ,sSex     );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//법정전염병(산모B형간염) 신고서 등록
function HmdInfRpt.Insert3:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sMEDDEPT, sMEDDR, sDIAGDT, sVaccinHx, sWardNo, sRoomNo, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_I3')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      Result := 1;
      txFree;
   end;
end;

//법정전염병(산모B형간염) 신고서 수정
function HmdInfRpt.Update3:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sRGTDATE, sMEDDR, sDIAGDT, sVaccinHx, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_U3')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(산모B형간염) 신고서 조회
function HmdInfRpt.Retrieve3(sFromDate, sToDate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sMedDr, sFromDate, sToDate]);

   if (txGetF('MD_INFRP_L3')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sDiagDt  );
      GetFldVar('S_STRING2'  ,sVaccinHx);
      GetFldVar('S_STRING3'  ,sPatName );
      GetFldVar('S_STRING4'  ,sResNo1  );
      GetFldVar('S_STRING5'  ,sResNo2  );
      GetFldVar('S_STRING6'  ,sBirtDate);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//법정전염병(성병) 신고서 등록
function HmdInfRpt.Insert4:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sMEDDEPT, sMEDDR, sDIAGDT, sVDTYPE, sVDPTTYPE, sWardNo, sRoomNo, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_I4')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      Result := 1;
      txFree;
   end;
end;

//법정전염병(성병) 신고서 수정
function HmdInfRpt.Update4:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sRGTDATE, sMEDDR, sDIAGDT, sVDTYPE, sVDPTTYPE, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_U4')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(성병) 신고서 조회
function HmdInfRpt.Retrieve4(sFromDate, sToDate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sMedDr, sFromDate, sToDate]);

   if (txGetF('MD_INFRP_L4')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sDiagDt  );
      GetFldVar('S_STRING2'  ,sVDType  );
      GetFldVar('S_STRING3'  ,sVDPtType);
      GetFldVar('S_STRING4'  ,sBirtDate);
      GetFldVar('S_STRING5'  ,sSex     );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//법정전염병(결핵) 신고서 등록
function HmdInfRpt.Insert5:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;' +
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;S_STRING56;S_STRING57;S_STRING58;S_STRING59;S_STRING60;' +
              'S_STRING61;S_STRING62;S_STRING63;S_STRING64;S_STRING65;' +
              'S_EDITID;S_EDITIP');

   SetFldValue(0,[sPatNo,	sRgtDate,	sRptKind,	sMeddept,	sMeddr,	sRptgubun,	sRptdeathdt,	sRptdeath,	sNation,	sAdmitdt,
                  sTbtelno,	sTbhpno,	sJobgubun,	sJob,	sInstit,	sInstitzipcd,	sInstitaddr,	sXray,	sXraycoldt,	sSputsmea,
                  sSmeacoldt,	sSmeatiss,	sSputsmea2,	sSmeacoldt2,	sSmeatiss2,	sSputcult,	sCultcoldt,	sCulttiss,	sSputcult2,	sCultcoldt2,
                  sCulttiss2,	sTbpcr,	sTbpcrcoldt,	sTbpcrtiss,	sTbpcr2,	sTbpcrcoldt2,	sTbpcrtiss2,	sXpert,	sXpertcoldt,	sXperttiss,
                  sPathexam,	sPathcoldt,	sPathtiss,	sDiagcd,	sTbkind,	sTbkind2txt,	sTbkind3txt,	sTbpttype,	sTbpattype2,	sTxyn,
                  sTxdate,	sTxmedi, sTxmedioth,sAntitbrslt, sAntitbrslt3, sAntitbmthd,	sAntitbmedi, sAntitbmedioth, sAntitbcode, sAntitbcoldt,
                  sTxgubun,	sTxgubun2,	sTxdcsdt,	sTxenddt,	sRemark,
                  sEditId,	sEditIp]);

   if (txPutF('MD_INFRP_I5')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      Result := 1;
      txFree;
   end;
end;

//법정전염병(결핵) 신고서 수정
function HmdInfRpt.Update5:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;' +
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;S_STRING56;S_STRING57;S_STRING58;S_STRING59;S_STRING60;' +
              'S_STRING61;S_STRING62;S_STRING63;S_STRING64;S_STRING65;' +
              'S_EDITID;S_EDITIP');

   SetFldValue(0,[sPatNo,	sRgtDate,	sRptKind,	sMeddept,	sMeddr,	sRptgubun,	sRptdeathdt,	sRptdeath,	sNation,	sAdmitdt,
                  sTbtelno,	sTbhpno,	sJobgubun,	sJob,	sInstit,	sInstitzipcd,	sInstitaddr,	sXray,	sXraycoldt,	sSputsmea,
                  sSmeacoldt,	sSmeatiss,	sSputsmea2,	sSmeacoldt2,	sSmeatiss2,	sSputcult,	sCultcoldt,	sCulttiss,	sSputcult2,	sCultcoldt2,
                  sCulttiss2,	sTbpcr,	sTbpcrcoldt,	sTbpcrtiss,	sTbpcr2,	sTbpcrcoldt2,	sTbpcrtiss2,	sXpert,	sXpertcoldt,	sXperttiss,
                  sPathexam,	sPathcoldt,	sPathtiss,	sDiagcd,	sTbkind,	sTbkind2txt,	sTbkind3txt,	sTbpttype,	sTbpattype2,	sTxyn,
                  sTxdate,	sTxmedi, sTxmedioth,sAntitbrslt, sAntitbrslt3, sAntitbmthd,	sAntitbmedi, sAntitbmedioth, sAntitbcode, sAntitbcoldt,
                  sTxgubun,	sTxgubun2,	sTxdcsdt,	sTxenddt,	sRemark,
                  sEditId,	sEditIp]);

   if (txPutF('MD_INFRP_U5')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(선천성매독) 신고서 등록
function HmdInfRpt.Insert7:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sRGTDATE, sMEDDEPT, sMEDDR, sWARDNO, sROOMNO, sDIAGDT, sCVNAME, sDIAGYN, sTRAYN,
                  sLGMYN, sBVDRLYN, sMVDRLYN, sXRYN, sOTHYN, sOTHTXT, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_I7')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      Result := 1;
      txFree;
   end;
end;

//법정전염병(선천성매독) 신고서 수정
function HmdInfRpt.Update7:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_EDITID;S_EDITIP');

   SetFldValue(0,[sPATNO, sRGTDATE, sDIAGDT, sCVNAME, sDIAGYN, sTRAYN, sLGMYN, sBVDRLYN, sMVDRLYN, sXRYN,
                  sOTHYN, sOTHTXT, sDiagcdBas, sEDITID, sEDITIP]);

   if (txPutF('MD_INFRP_U7')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(선천성배독) 신고서 조회
{function HmdInfRpt.Retrieve7 :Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sPatNo, sRptKind, sLocate, sType1]);

   if (txGetF('MD_INFRP_L7')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      GetFldVar('S_STRING2'  ,sDiagDt );
      GetFldVar('S_STRING3'  ,sDeptNm );
      GetFldVar('S_STRING4'  ,sMedDept);
      GetFldVar('S_STRING5'  ,sMedDrnm);
      GetFldVar('S_STRING6'  ,sMedDr  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
}

//법정전염병 신고서 출력자 Update
function HmdInfRpt.Update6(sFromDate, sToDate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_EDITID');
   SetFldValue(0,[sPATNO, sRGTDATE, sJOB, sFromDate, sToDate, sEDITID]);

   if (txPutF('MD_INFRP_U6')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

//법정전염병(성병) 신고서 조회
function HmdInfRpt.Retrieve6 :Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sPatNo, sRptKind, sLocate, sType1]);

   if (txGetF('MD_INFRP_L6')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1'  ,sRgtDate);
      GetFldVar('S_STRING2'  ,sDiagDt );
      GetFldVar('S_STRING3'  ,sDeptNm );
      GetFldVar('S_STRING4'  ,sMedDept);
      GetFldVar('S_STRING5'  ,sMedDr  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 법정전염병 신고서 1건 조회
{function HmdInfRpt.Select1 :Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sPatNo, sRgtDate, sRptKind]);

   if (txGetF('MD_INFRP_S1')) then begin //Tuxedo Service Call
      if (sRptKind = '1') then
      begin
        GetFldVar('S_STRING1'  , sCvName   );
        GetFldVar('S_STRING2'  , sAddrsYN  );
        GetFldVar('S_STRING3'  , sUnidentYN);
        GetFldVar('S_STRING4'  , sJob      );
        GetFldVar('S_STRING5'  , sInfeGrd  );
        GetFldVar('S_STRING6'  , sInfeCd   );
        GetFldVar('S_STRING7'  , sNInfSynd );
        GetFldVar('S_STRING8'  , sInfeName );
        GetFldVar('S_STRING9'  , sSickDt   );
        GetFldVar('S_STRING10' , sDiagDt   );
        GetFldVar('S_STRING11' , sConfRslt );
        GetFldVar('S_STRING12' , sInfType  );
        GetFldVar('S_STRING13' , sDeathYn  );
        GetFldVar('S_STRING14' , sInfRoute );
        GetFldVar('S_STRING15' , sInfZone  );
        GetFldVar('S_STRING16' , sInfNatin );
        GetFldVar('S_STRING17' , sStayTerm );
        GetFldVar('S_STRING18' , sChngRpt  );
        GetFldVar('S_STRING19' , sAddrChng );
      end
      else if(sRptKind = '2') then
      begin
        GetFldVar('S_STRING1' , sDiagDt  );
        GetFldVar('S_STRING2' , sHepaType);
        GetFldVar('S_STRING3' , sVaccinHx);
      end
      else if(sRptKind = '3') then
      begin
        GetFldVar('S_STRING1' , sDiagDt  );
        GetFldVar('S_STRING2' , sVaccinHx);
      end
      else if(sRptKind = '4') then
      begin
        GetFldVar('S_STRING1' , sDiagDt  );
        GetFldVar('S_STRING2' , sVDType  );
        GetFldVar('S_STRING3' , sVDPtType);
      end
      else if(sRptKind = '5') then
      begin
        GetFldVar('S_STRING1' , sDiagDt   );
        GetFldVar('S_STRING2' , sNation   );
        GetFldVar('S_STRING3' , sAdmitDt  );
        GetFldVar('S_STRING4' , sTbHx     );
        GetFldVar('S_STRING5' , sTbTxTerm );
        GetFldVar('S_STRING6' , sTbTxCnt  );
        GetFldVar('S_STRING7' , sBCGYn    );
        GetFldVar('S_STRING8' , sBCGRoute );
        GetFldVar('S_STRING9' , sSputSmea );
        GetFldVar('S_STRING10' , sSputCult);
        GetFldVar('S_STRING11' , sSpcSmear);
        GetFldVar('S_STRING12' , sOthrCult);
        GetFldVar('S_STRING13' , sPathExam);
        GetFldVar('S_STRING14' , sOthrExam);
        GetFldVar('S_STRING15' , sXRay    );
        GetFldVar('S_STRING16' , sTbTest  );
        GetFldVar('S_STRING17' , sTbTestSz);
        GetFldVar('S_STRING18' , sDiagCd  );
        GetFldVar('S_STRING19' , sTbPtType);
        GetFldVar('S_STRING20' , sTxStDt  );
        GetFldVar('S_STRING21' , sINHYN   );
        GetFldVar('S_STRING22' , sRFPYN   );
        GetFldVar('S_STRING23' , sPZAYN   );
        GetFldVar('S_STRING24' , sEMBYN   );
        GetFldVar('S_STRING25' , sSMYN    );
        GetFldVar('S_STRING26' , sPTAYN   );
        GetFldVar('S_STRING27' , sCSYN    );
        GetFldVar('S_STRING28' , sPASYN   );
        GetFldVar('S_STRING29' , sOLXYN   );
        GetFldVar('S_STRING30' , sKMYN    );
        GetFldVar('S_STRING31' , sTUMYN   );
        GetFldVar('S_STRING32' , sAKYN    );
        GetFldVar('S_STRING33' , sOtherYN );
        GetFldVar('S_STRING34' , sOthrDrug);
        GetFldVar('S_STRING35' , sTxEndDt );
        GetFldVar('S_STRING36' , sTxResult);
        GetFldVar('S_STRING37' , sJob     );
        GetFldVar('S_STRING38' , sAddrsYN );
      end;

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end; }
// 법정전염병 신고서 1건 조회
function HmdInfRpt.Select1 :Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sPatNo, sRgtDate, sRptKind]);

   if (txGetF('MD_INFRP_S1')) then begin //Tuxedo Service Call
      if (sRptKind = '1') then
      begin
        GetFldVar('S_STRING1'  , sCvName   );
        GetFldVar('S_STRING2'  , sAddrsYN  );
        GetFldVar('S_STRING3'  , sUnidentYN);
        GetFldVar('S_STRING4'  , sJob      );
        GetFldVar('S_STRING5'  , sInfeGrd  );
        GetFldVar('S_STRING6'  , sInfeCd   );
        GetFldVar('S_STRING7'  , sNInfSynd );
        GetFldVar('S_STRING8'  , sInfeName );
        GetFldVar('S_STRING9'  , sSickDt   );
        GetFldVar('S_STRING10' , sDiagDt   );
        GetFldVar('S_STRING11' , sConfRslt );
        GetFldVar('S_STRING12' , sInfType  );
        GetFldVar('S_STRING13' , sDeathYn  );
        GetFldVar('S_STRING14' , sInfRoute );
        GetFldVar('S_STRING15' , sInfZone  );
        GetFldVar('S_STRING16' , sInfNatin );
        GetFldVar('S_STRING17' , sStayTerm );
        GetFldVar('S_STRING18' , sChngRpt  );
        GetFldVar('S_STRING19' , sAddrChng );
        GetFldVar('S_STRING20' , sMedDept  );
        GetFldVar('S_STRING21' , sMedDr    );
        GetFldVar('S_STRING22' , sReporter );
        GetFldVar('S_STRING23' , sReportDt );
        GetFldVar('S_STRING24' , sJobcd    );
        GetFldVar('S_STRING25' , sStayTermDD);
        GetFldVar('S_STRING26' , sRemark   );
        GetFldVar('S_STRING27' , sAcute    );
        GetFldVar('S_STRING28' , sFRGNR    );
      end
      else if(sRptKind = '2') then
      begin
        GetFldVar('S_STRING1' , sDiagDt  );
        GetFldVar('S_STRING2' , sHepaType);
        GetFldVar('S_STRING3' , sVaccinHx);
        GetFldVar('S_STRING4' , sMedDept );
        GetFldVar('S_STRING5' , sMedDr   );
        GetFldVar('S_STRING6 ', sReporter  );
        GetFldVar('S_STRING7 ', sReportDt  );
      end
      else if(sRptKind = '3') then
      begin
        GetFldVar('S_STRING1' , sDiagDt  );
        GetFldVar('S_STRING2' , sVaccinHx);
        GetFldVar('S_STRING3' , sMedDept );
        GetFldVar('S_STRING4' , sMedDr   );
        GetFldVar('S_STRING5 ', sReporter  );
        GetFldVar('S_STRING6 ', sReportDt  );
      end
      else if(sRptKind = '4') then
      begin
        GetFldVar('S_STRING1' , sDiagDt  );
        GetFldVar('S_STRING2' , sVDType  );
        GetFldVar('S_STRING3' , sVDPtType);
        GetFldVar('S_STRING4' , sMedDept );
        GetFldVar('S_STRING5' , sMedDr   );
        GetFldVar('S_STRING6 ', sReporter  );
        GetFldVar('S_STRING7 ', sReportDt  );
      end
      else if(sRptKind = '5') then
      begin
        GetFldVar('S_STRING1'  , sMedDept		);
        GetFldVar('S_STRING2'  , sMedDr			);
        GetFldVar('S_STRING3'  , sRptgubun    	);
        GetFldVar('S_STRING4'  , sRptdeathdt	);
        GetFldVar('S_STRING5'  , sRptdeath    	);
        GetFldVar('S_STRING6'  , sNation		);
        GetFldVar('S_STRING7'  , sAdmitDt  		);
        GetFldVar('S_STRING8'  , sTbtelno     	);
        GetFldVar('S_STRING9'  , sTbhpno      	);
        GetFldVar('S_STRING10' , sJobgubun    	);
        GetFldVar('S_STRING11' , sJob   		);
        GetFldVar('S_STRING12' , sInstit      	);
        GetFldVar('S_STRING13' , sInstitzipcd 	);
        GetFldVar('S_STRING14' , sInstitaddr  	);
        GetFldVar('S_STRING15' , sXRay    		);
        GetFldVar('S_STRING16' , sXraycoldt		);
        GetFldVar('S_STRING17' , sSputSmea 		);
        GetFldVar('S_STRING18' , sSmeacoldt		);
        GetFldVar('S_STRING19' , sSmeatiss    	);
        GetFldVar('S_STRING20' , sSputsmea2 	);
        GetFldVar('S_STRING21' , sSmeacoldt2	);
        GetFldVar('S_STRING22' , sSmeatiss2    	);
        GetFldVar('S_STRING23' , sSputCult 		);
        GetFldVar('S_STRING24' , sCultcoldt		);
        GetFldVar('S_STRING25' , sCulttiss    	);
        GetFldVar('S_STRING26' , sSputcult2 	);
        GetFldVar('S_STRING27' , sCultcoldt2	);
        GetFldVar('S_STRING28' , sCulttiss2    	);
        GetFldVar('S_STRING29' , sTbpcr       	);
        GetFldVar('S_STRING30' , sTbpcrcoldt	);
        GetFldVar('S_STRING31' , sTbpcrtiss   	);
        GetFldVar('S_STRING32' , sTbpcr2       	);
        GetFldVar('S_STRING33' , sTbpcrcoldt2	);
        GetFldVar('S_STRING34' , sTbpcrtiss2   	);
        GetFldVar('S_STRING35' , sXpert       	);
        GetFldVar('S_STRING36' , sXpertcoldt	);
        GetFldVar('S_STRING37' , sXperttiss   	);
        GetFldVar('S_STRING38' , sPathExam 		);
        GetFldVar('S_STRING39' , sPathcoldt		);
        GetFldVar('S_STRING40' , sPathtiss    	);
        GetFldVar('S_STRING41' , sDiagCd  		);
        GetFldVar('S_STRING42' , sTbkind      	);          
        GetFldVar('S_STRING43' , sTbkind2txt  	);
        GetFldVar('S_STRING44' , sTbkind3txt  	);
        GetFldVar('S_STRING45' , sTbPtType 		);
        GetFldVar('S_STRING46' , sTbpattype2  	);
        GetFldVar('S_STRING47' , sTxyn        	);
        GetFldVar('S_STRING48' , sTxdate		);
        GetFldVar('S_STRING49' , sTxmedi      	);
        GetFldVar('S_STRING50' , sTxmedioth   	);
        GetFldVar('S_STRING51' , sAntitbrslt  	);
        GetFldVar('S_STRING52' , sAntitbrslt3  	);
        GetFldVar('S_STRING53' , sAntitbmthd  	);
        GetFldVar('S_STRING54' , sAntitbmedi  	);
        GetFldVar('S_STRING55' , sAntitbmedioth	);
        GetFldVar('S_STRING56' , sAntitbcode  	);
        GetFldVar('S_STRING57' , sAntitbcoldt	);
        GetFldVar('S_STRING58' , sTxgubun     	);
        GetFldVar('S_STRING59' , sTxgubun2    	);
        GetFldVar('S_STRING60' , sTxdcsdt		);
        GetFldVar('S_STRING61' , sTxEndDt		);
        GetFldVar('S_STRING62' , sRemark		);
      end;

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//퇴원지시시 법정전염병 1종 신고 사항이 있을때 변경신고 체크
function HmdInfrpt.CheckInfrpt(sType1,sType2,sType3,sType4 :String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);

   if (txPutF('MD_INFRP_S2')) then
   begin
      GetFldVar('S_STRING1',sRgtDate);
      Result := GetRecordCnt('S_STRING1');
      TxFree;
   end;
end;

//감염병 출력여부 기록. KimDaeYong 2020-01-29
//참고 : MX거 서비스 사용 & 메소드만 MD용으로 다시 만들어서 사용
function HmdInfrpt.UpdatePrt(sPATNO, sRGTDATE,sRptKind, sEDITID,sEditip : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPATNO, sRGTDATE,sRptKind, sEDITID,sEditip]);
   if (txPutF('MX_INFRP_U2')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////
//  HmdOpGrct  과별수술분류                                   //
////////////////////////////////////////////////////////////////

// 과별 수술분류 select
function HmdOpGrct.ListOpGroup(sDeptCd,sLocate : String) :Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sDeptCd,sLocate]);
   if (txGetF('MD_OPGRC_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sGroupCd);
      GetFldVar('S_STRING2',sGroupNm);
      GetFldVar('S_STRING3',sDeptNm );
      GetFldVar('S_STRING4',sMedDept);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////
//  HmdOpCdct  과별수술코드                                   //
////////////////////////////////////////////////////////////////

// 과별 수술코드 select
function HmdOpCdct.ListOpCode(sDeptCd,sOPGrt : String) :Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sDeptCd,sOPGrt]);
   if (txGetF('MD_OPCDC_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1',sOpCode );
      GetFldVar('S_STRING2',sOpName );
      GetFldVar('S_STRING3',sGroupCd);
      GetFldVar('S_STRING4',sGroupNm);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////
//  HAPIPDLS  09.07 윤형배                                    //
////////////////////////////////////////////////////////////////

function Hapipdls.APIPDLS_U6: Integer;
begin
	Result := -1;
	txAlloc;

  	setFldName('S_FLAG1;S_PATNO;S_DATE1');
  	setFldValue(0,[sQuerytype,String(sPatno),String(tAdmdate)]);

	if txPutF('AI_APIPDLS_U6') then
	begin
  		Result	:=	1;
    	txFree;
	end
    else if ( GetTxUrcode = 1403 ) then
    begin
       result := 0;
    end;
end;

////////////////////////////////////////////////////////////////
//  APOPDLST by inkoo 2001/11/28                              //
////////////////////////////////////////////////////////////////

//예약수납내역변경 by inkoo 2001/11/28
function HAPOPDLST.OPDLS_U5: Integer;
Var
    rtn : Boolean;
begin
     Result := -1;
     txAlloc;
     SetFldName('S_STAT1;S_STAT2;S_PATNO;S_DATETIME1;S_DATE1;S_CODE1;S_DR1;' +
                'S_DATETIME2;S_CODE2;S_DR2;S_USERID1;S_EDITID;S_TEXT1');

     SetFldValue(0,[String(sRcpstat ),String(sJobtype   ),String(sPatno     ),
                    String(sMedtime ),String(sOrddate   ),String(sMeddept   ),
                    String(sMeddr   ),String(sOldMedtime),String(sOldMeddept),
                    String(sOldMeddr),String(sRcpid     ),String(sEditip    ),
                    String(sDummy   )]);

     if GetLevTRSC = 1 then
     	rtn := txTpCall('AP_OPDLS_U5')
     else
     	rtn := txPutF('AP_OPDLS_U5');

     if rtn then
     begin
          Result := 1;
          txFree;
     end
     else
     begin
          if GetTxUrCode = 1403 then
              Result := 0
          else
              Result := -1;
          txFree;
     end;
end;

//원무-외래예약변경  by inkoo 2001/11/28
function HAPOPDLST.OPDLS_I2: Integer;
begin
     Result := -1;
     txAlloc;

     if (sFlag = 'TIK') or (sFlag = 'RIK') then
     begin

        SetFldName('L_SEQNO1;S_FLAG1;S_PATNO;'+
                   'S_EDITID;S_EDITIP;S_USERID3;'+
                   'S_MEDDATE;S_MEDDEPT;S_DR1;S_TIME1;'+
                   'S_ORDDATE;S_TYPE1;S_YN1;S_TYPE2;'+
                   'S_TYPE3;S_YN2;S_TYPE4;S_YN3;'+
                   'S_YN4;S_YN5;S_USERID1;S_DATETIME1;'+
                   'S_FLAG2;S_FLAG3;S_FLAG4;S_REJTDATE;'+
                   'S_USERID2;S_DATETIME2;S_DATE1;S_CODE1;'+
                   'S_CODE2;S_CODE3;S_CODE4;S_DESC1;'+
                   'S_YN6;S_CODE5;S_CODE7;S_YN7;S_YN8;S_YN9;S_CODE13');

        SetFldValue(0,[Integer(iRcpseq),String(sFlag),String(sPatno),
                       String(sEditid),String(sEditip),String(sOldPatno),
                       String(sMeddate),String(sMeddept),String(sMeddr),String(sMedtime),
                       String(sOrddate),String(sRsvtype),String(sRsvcfmyn),String(sPattype),
                       String(sTypecd),String(sSpcdryn),String(sFstmedty),String(sMedrcpyn),
                       String(sRcpyn),String(sMedyn),String(sMedchgid),String(sErdate),
                       String(sOeflag),String(sOiflag),String(sHdsflag),String(sRejtdate),
                       String(sFstinpid),String(sFsttime),String(sAdmidate),String(sCustcd),
                       String(sDccode),String(sUncolcd),String(sNochcd),String(sRemark),
                       String(sRecodyn),String(sExceptcd),string(sLabno),string(sChartYn),string(sFilmyn),string(sFollow),string(sSpgubun)]);
     end
     else if (sFlag = 'TUD') or (sFlag = 'RUD') then
     begin
        SetFldName('S_FLAG1;S_PATNO;S_EDITID;S_EDITIP;S_USERID3;'+
                   'S_MEDDATE;S_MEDDEPT;S_DR1;S_TIME1;S_YN2;S_YN3;'+
                   'S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_CODE1;S_CODE2;'+
                   'S_CODE3;S_CODE4;S_FLAG2;S_CODE5;S_CODE7;S_YN7;S_YN8;S_YN9;S_CODE13');
        SetFldValue(0,[String(sFlag),String(sPatno),String(sEditid),String(sEditip),String(sOldPatno),
                       String(sMeddate),String(sMeddept),String(sMeddr),String(sMedtime),
                       String(sSpcdryn),String(sMedrcpyn),String(sRsvtype),
                       String(sPattype),String(sTypecd),String(sFstmedty),
                       String(sCustcd),String(sDccode),String(sUncolcd),
                       String(sNochcd),String(sOeflag),String(sExceptcd),string(sLabno),string(sChartYn),string(sFilmyn),string(sFollow),string(sSpgubun)]);
     end
     else if (sFlag = 'TUK') or (sFlag = 'MUK') or (sFlag = 'RUK') then
     begin

        SetFldName('L_SEQNO1;S_FLAG1;S_PATNO;S_EDITID;'+
                   'S_EDITIP;S_USERID3;S_MEDDATE;S_MEDDEPT;'+
                   'S_DR1;S_TIME1;S_ORDDATE;S_TYPE1;'+
                   'S_YN1;S_TYPE2;S_TYPE3;S_YN2;'+
                   'S_TYPE4;S_YN3;S_YN4;S_YN5;'+
                   'S_USERID1;S_DATETIME1;S_FLAG2;S_FLAG3;'+
                   'S_FLAG4;S_REJTDATE;S_USERID2;S_DATETIME2;'+
                   'S_DATE1;S_CODE1;S_CODE2;S_CODE3;'+
                   'S_CODE4;S_DESC1;S_YN6;S_CODE5;'+
                   'S_DR2;S_DATETIME3;S_DATETIME4;S_CODE6;'+
                   'S_CODE7;S_YN7;S_YN8;S_YN9;S_CODE13');
        SetFldValue(0,[Integer(iRcpseq), String(sFlag),      String(sPatno),     String(sEditid),
                       String(sEditip),  String(sOldPatno),  String(sMeddate),   String(sMeddept),
                       String(sMeddr),   String(sMedtime),   String(sOrddate),   String(sRsvtype),
                       String(sRsvcfmyn),String(sPattype),   String(sTypecd),    String(sSpcdryn),
                       String(sFstmedty),String(sMedrcpyn),  String(sRcpyn),     String(sMedyn),
                       String(sMedchgid),String(sErdate),    String(sOeflag),    String(sOiflag),
                       String(sHdsflag), String(sRejtdate),  String(sFstinpid),  String(sFsttime),
                       String(sAdmidate),String(sCustcd),    String(sDccode),    String(sUncolcd),
                       String(sNochcd),  String(sRemark),    String(sRecodyn),   String(sOldMeddept),
                       String(sOldMeddr),String(sOldMeddate),String(sOldMedtime),String(sExceptcd),
                       string(sLabno),   string(sChartYn),   String(sFilmyn),    String(sFollow), String(sSpgubun)]);
     end;

     if GetLevTRSC = 1 then
     begin
         if txTpcall('AP_OPDLS_I2') then
         begin
              Result := 1;
              txFree;
         end
         else
         begin
            if GetTxUrCode = 1403 then
                Result := 0
            else
                Result := -1;
         end;
     end
     else
     begin
         if txPutF('AP_OPDLS_I2') then
         begin
              Result := 1;
              txFree;
         end
         else
         begin
            if GetTxUrCode = 1403 then
                Result := 0
            else
                Result := -1;
         end;
     end;
end;

function HapOpdlst.OPDLS_S13:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_PATNO;S_DATE1;S_DR1');
   SetFldValue(0,[String(sPatno),String(sMedTime),String(sMedDr)]);

   if txGetF('AP_OPDLS_S13') then
   begin
      Result := GetRecordCnt('S_MEDDEPT');

      GetFldVar('S_MEDDEPT',  sMeddept);
      GetFldVar('S_NAME1',    sMeddeptnm);
      GetFldVar('S_DR2',      sMeddr);
      GetFldVar('S_NAME2',    sMeddrnm);
      GetFldVar('S_DATE2',    sMedtime);

      txFree;
   end
   else
   begin
      if GetTxUrCode = 1403 then
         Result := 0
      else
         Result := -1;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdDsbnrt 	신생아 퇴원 기록지                                             //
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  HmdDsbnrt 	신생아 퇴원 기록지                                             //
////////////////////////////////////////////////////////////////////////////////

function HmdDsbnrt.SelectDsbnr(sPatno,
                               sAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sAdmdate]);
   if (txGetF('MD_DSBNR_S1')) then   //Tuxedo Service Call
   begin
      //GetFldVar('S_STRING1' , v_Patno    );
      //GetFldVar('S_STRING2' , v_Admdate  );
      GetFldVar('S_CODE1' , v_Dschdate );
      GetFldVar('S_CODE2' , v_Weight   );
      GetFldVar('S_CODE3' , v_Bodytemp );
      GetFldVar('S_CODE4' , v_Cmdyn    );
      GetFldVar('S_CODE5' , v_Respcnt  );
      GetFldVar('S_CODE6' , v_Hrtbt    );
      GetFldVar('S_CODE7' , v_Bldabo   );
      GetFldVar('S_CODE8', v_Bldrh    );
      GetFldVar('S_CODE9', v_Dschcare );
      GetFldVar('S_CODE10', v_Resno1   );
      GetFldVar('S_CODE11', v_Resno2   );
      GetFldVar('S_CODE12', v_Dimthd   );
      GetFldVar('S_CODE13', v_Milktype );
      GetFldVar('S_CODE14', v_Milketc  );
      GetFldVar('S_CODE15', v_Dimint   );
      GetFldVar('S_CODE16', v_Dimqty   );
      GetFldVar('S_CODE17', v_Bath     );
      GetFldVar('S_CODE18', v_Jaundice );
      GetFldVar('S_CODE19', v_Exemyn   );
      GetFldVar('S_CODE20', v_Jaunexm  );
      GetFldVar('S_CODE21', v_Pre      );
      GetFldVar('S_CODE22', v_Roomenv  );
      GetFldVar('S_CODE23', v_Apptemp  );
      GetFldVar('S_CODE24', v_Apphumid );
      GetFldVar('S_CODE25', v_Etcedu   );
      GetFldVar('S_CODE26', v_Remark   );
      GetFldVar('S_CODE27', v_Nurse    );
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdDsbnrt.SelectVS(sPatno  :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sPatno]);
   if (txGetF('MD_DSBNR_S2')) then   //Tuxedo Service Call
   begin
      GetFldVar('S_CODE1' , v_Weight   );
      GetFldVar('S_CODE2' , v_Bodytemp );
      //GetFldVar('S_CODE3' , v_Pulse    );
      GetFldVar('S_CODE3' , v_Hrtbt    );
      GetFldVar('S_CODE4' , v_Respcnt  );
      GetFldVar('S_CODE5' , v_Bldabo   );
      GetFldVar('S_CODE6' , v_Bldrh    );
      //GetFldVar('S_CODE7' , v_Bldprehi );
      //GetFldVar('S_CODE8' , v_Bldprelo );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdDsbnrt.InsertDsbnrt(sPatno    ,   // 환자번호
                                sAdmdate  ,   // 입원일자
                                sDschdate ,   // 퇴원일자
                                sWeight   ,   // 체중
                                sBodytemp ,   // 체온
                                sCmdyn    ,   // 대사이상
                                sRespcnt  ,   // 호흡수
                                sHrtbt    ,   // 심박동수
                                sBldabo   ,   // 혈액형 ABO
                                sBldrh    ,   // 혈액형 RH
                                sDschcare ,   // 퇴원시건강상태
                                sResno1   ,   // 주민등록번호(산모)
                                sResno2   ,   // 주민등록번호 (아기 인수장)
                                sDimthd   ,   // 수유방법
                                sMilktype ,   // 분유회사기타
                                sMilketc  ,   // 분유회사종류
                                sDimint   ,   // 수유간격
                                sDimqty   ,   // 1회수유량
                                sBath     ,   // 목욕
                                sJaundice ,   // 신생아황달
                                sExemyn   ,   // 신생아황달 검사유무
                                sJaunexm  ,   // 검사내용
                                sPre      ,   // 예방접종
                                sRoomenv  ,   // 실내환경
                                sApptemp  ,   // 적정습도
                                sApphumid ,   // 적정온도
                                sEtcedu   ,   // 기타 교육
                                sRemark   ,   // 특기사항
                                sNurse    ,   // 간호사
                                sEditid   ,   // 수정자ID
                                sEditip       // 수정자IP
                                : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;'+
              'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;'+
              'S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;'+
              'S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;'+
              'S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;'+
              'S_CODE31');
   SetFldValue(0, [sPatno    ,sAdmdate  ,sDschdate ,sWeight   ,sBodytemp ,
                   sCmdyn    ,sRespcnt  ,sHrtbt    ,sBldabo   ,sBldrh    ,
                   sDschcare ,sResno1   ,sResno2   ,sDimthd   ,sMilktype ,
                   sMilketc  ,sDimint   ,sDimqty   ,sBath     ,sJaundice ,
                   sExemyn   ,sJaunexm  ,sPre      ,sRoomenv  ,sApptemp  ,
                   sApphumid ,sEtcedu   ,sRemark   ,sNurse    ,sEditid   ,
                   sEditip    ]);
   if (txPutF('MD_DSBNR_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////////////
//  HmdTrinft 	전과전실 간호기록지                                            //
////////////////////////////////////////////////////////////////////////////////

function HmdTrinft.InsTrinf(sPatNo,    sAdmDate,  sTrDate,   sRoomNo,  sFromWard,
                            sFromDept, sFromNrs,  sToWard,   sToDept,  sToNrs,
                            sDiagName, sOpName,   sOpDate,   sTrGoal,  sTrGoal1,
                            sTrGoal2,  sTrGoal3,  sTrGoal4,  sSummary, sHbp,
                            sLbp,      sBodyTemp, sPulse,    sRespCnt, sDiet,
                            sNotExm,   sRsvExm,   sOralYn,   sBldYn,   sBldKind,
                            sInjectYn, sDrugYn,   sDrugKind, sAllergy, sAllergy1,
                            sAllergy2, sAllergy3, sRemark,   sEditId,  sEditIp,
                            sTrSeqNo,
                            //(추가. 2002.11.29 이용언) 보낼 서류 추가.
                            sChk1, sChk2, sChk3, sChk4, sChk5, sChk6, sChk7,
                            // 의료진 동반 여부 추가 2011.08.12 김송주
                            sWithdr, sWithdrtxt
                            :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;'+
              'S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;'+
              'S_CODE18;S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;'+
              'S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;S_NAME1;S_NAME2;S_NAME3;'+
              'S_NAME4;S_NAME5;S_NAME6;S_NAME7;S_NAME8;S_NAME9;S_NAME10;S_NAME11;'+
              //(추가. 2002.11.29 이용언) 보낼 서류 추가.)
              'S_NAME12;S_NAME13;S_NAME14;S_NAME15;S_NAME16;S_NAME17;S_NAME18;S_NAME19;S_NAME20');;
   SetFldValue(0, [sPatNo,    sAdmDate,  sTrDate,   sRoomNo,  sFromWard,
                   sFromDept, sFromNrs,  sToWard,   sToDept,  sToNrs,
                   sDiagName, sOpName,   sOpDate,   sTrGoal,  sTrGoal1,
                   sTrGoal2,  sTrGoal3,  sTrGoal4,  sSummary, sHbp,
                   sLbp,      sBodyTemp, sPulse,    sRespCnt, sDiet,
                   sNotExm,   sRsvExm,   sOralYn,   sBldYn,   sBldKind,
                   sInjectYn, sDrugYn,   sDrugKind, sAllergy, sAllergy1,
                   sAllergy2, sAllergy3, sRemark,   sEditId,  sEditIp,
                   sTrSeqNo,
                   //(추가. 2002.11.29 이용언) 보낼 서류 추가.
                   sChk1, sChk2, sChk3, sChk4, sChk5, sChk6, sChk7,
                   sWithdr, sWithdrtxt
                   ]);
   if (txPutF('MD_TRINF_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 전과전동이력
function HmdTrinft.HistoryTrinf(sType1, sPatNo, sAdmDate :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer 를 받아옴.
   SetFldName('S_TYPE1;S_PATNO;S_ADMDATE');
   SetFldValue(0,[sType1,sPatNo,sAdmDate]);
   if (txGetF('MD_TRINF_L1')) then begin //Tuxedo Service Call
   	GetFldVar('S_CODE1' ,      sTrseqno);
   	GetFldVar('S_CODE2' ,      sTrdate);
   	GetFldVar('S_CODE3' ,      sFromward);
   	GetFldVar('S_CODE4' ,      sFromdept);
   	GetFldVar('S_CODE5' ,      sFromnrs);
   	GetFldVar('S_CODE6' ,      sToward);
   	GetFldVar('S_CODE7' ,      sTodept);
      GetFldVar('S_CODE8' ,      sRoomNo);
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

// 전과전동기록지
function HmdTrinft.SelectTrinf(sPatNo,sAdmDate,sTrSeqNo:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_PATNO;S_ADMDATE;S_CODE1');
   SetFldValue(0,[sPatNo,sAdmDate,sTrSeqNo]);
   if (txGetF('MD_TRINF_S1')) then begin //Tuxedo Service Call

      GetFldVar ('S_CODE1',  sTrDate   );
    	GetFldVar ('S_CODE2',  sRoomNo   );
   	GetFldVar ('S_CODE3',  sFromWard );
      GetFldVar ('S_CODE4',  sFromDept );
   	GetFldVar ('S_CODE5',  sFromNrs  );
   	GetFldVar ('S_CODE6',  sToWard   );
   	GetFldVar ('S_CODE7',  sToDept   );
   	GetFldVar ('S_CODE8',  sTonrs    );
   	GetFldVar ('S_CODE9',  sDiagname );
   	GetFldVar ('S_CODE10', sOpname   );
   	GetFldVar ('S_CODE11', sOpdate   );
   	GetFldVar ('S_CODE12', sTrgoal   );
   	GetFldVar ('S_CODE13', sTrgoal1  );
   	GetFldVar ('S_CODE14', sTrgoal2  );
   	GetFldVar ('S_CODE15', sTrgoal3  );
   	GetFldVar ('S_CODE16', sTrgoal4  );
   	GetFldVar ('S_CODE17', sSummary  );
   	GetFldVar ('S_CODE18', sHbp      );
   	GetFldVar ('S_CODE19', sLbp      );
   	GetFldVar ('S_CODE20', sBodytemp );
   	GetFldVar ('S_CODE21', sPulse    );
   	GetFldVar ('S_CODE22', sRespcnt  );
   	GetFldVar ('S_CODE23', sDiet     );
   	GetFldVar ('S_CODE24', sNotexm   );
   	GetFldVar ('S_CODE25', sRsvexm   );
      GetFldVar ('S_CODE26', sOralyn   );
      GetFldVar ('S_CODE27', sBldyn    );
      GetFldVar ('S_CODE28', sBldkind  );
      GetFldVar ('S_CODE29', sInjectyn );
      GetFldVar ('S_CODE30', sDrugyn   );
      GetFldVar ('S_NAME1',  sDrugkind );
      GetFldVar ('S_NAME2',  sAllergy  );
      GetFldVar ('S_NAME3',  sAllergy1 );
      GetFldVar ('S_NAME4',  sAllergy2 );
      GetFldVar ('S_NAME5',  sAllergy3 );
      GetFldVar ('S_NAME6',  sRemark   );
      GetFldVar ('S_NAME6',  sRemark   );
      GetFldVar ('S_NAME7',  sType1    );
      GetFldVar ('S_NAME8',  sType2    );
      GetFldVar ('S_NAME9',  sType3    );
      GetFldVar ('S_NAME10', sType4    );
      GetFldVar ('S_NAME11', sType5    );
      GetFldVar ('S_NAME12', sType6    );
      GetFldVar ('S_NAME13', sType7    );
      GetFldVar ('S_NAME14', sWithdr    );
      GetFldVar ('S_NAME15', sWithdrtxt    );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdTrinft.DelTrinf(sPatNo, sAdmDate, sTrSeqNo : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0, [sPatNo, sAdmDate, sTrSeqNo]);
   if (txPutF('MD_TRINF_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdDnsstt	진료내역 간호부 일일 통계                                      //
////////////////////////////////////////////////////////////////////////////////

function HmdDnsstt.Dailystatic(sType1,sType2,sType3 :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sType1,sType2,sType3]);

   //Tuxedo Service Call
   if (txGetF('MD_DNSST_S1')) then //md_dnsst_s1.pc
   begin
      GetFldVar ('S_NO1'      ,sSort1     );    //소트순서
    	GetFldVar ('S_NAME1'    ,sDeptnm1   );    //진료과명
      GetFldVar ('S_NO2'      ,sSort2     );    //소트순서
    	GetFldVar ('S_NAME2'    ,sDeptnm2   );    //진료과명
   	GetFldVar ('S_STRING1'  ,sFst_tot   );    //초진합계
      GetFldVar ('S_STRING2'  ,sRe_tot    );    //재진합계
   	GetFldVar ('S_STRING3'  ,sTot_tot   );    //총계합계
      GetFldVar ('S_MEDDEPT'  ,sMeddept   );    //병동
      GetFldVar ('S_STRING4'  ,sPrecnt    );    //전일재원수
      GetFldVar ('S_STRING5'  ,sAdmcnt    );    //입원환자
      GetFldVar ('S_STRING6'  ,sDschcnt   );    //퇴원수
      GetFldVar ('S_STRING7'  ,sIncCnt    );    //전입
      GetFldVar ('S_STRING8'  ,sDsccnt    );    //전출
      GetFldVar ('S_STRING9'  ,sStaytot   );    //금일재원수
      GetFldVar ('S_STRING10' ,sMedstay   );    //과별재원수
      GetFldVar ('S_STRING11' ,sBedcnt    );    //침상수
      GetFldVar ('S_STRING12' ,sExpcnt     );   //사망환자수
      GetFldVar ('S_STRING13' ,sOpcnt    );     //수술환자수
      GetFldVar ('S_STRING14' ,sOp_tot    );
      GetFldVar ('S_STRING15' ,sSu_tot    );    //건진환자 총계
      GetFldVar ('S_STRING16' ,sFree_tot );   // 무료접수 총계
      Result := GetRecordCnt('S_NAME1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdOpinft	수술전 처치 및 간호상태확인표                                  //
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  HmdOpinft	수술전 처치 및 간호상태확인표                                  //
////////////////////////////////////////////////////////////////////////////////

function HmdOpinft.SelectOrder(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txGetF('MD_OPINF_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sOrddesc1);
	   GetFldVar('S_STRING2', sOrddesc2);
	   GetFldVar('S_STRING3', sBodytemp);
	   GetFldVar('S_STRING4', sPulse   );
	   GetFldVar('S_STRING5', sRespcnt );
	   GetFldVar('S_STRING6', sBldprehi);
	   GetFldVar('S_STRING7', sBldprelo);
	   GetFldVar('S_STRING8', sWeight  );
      
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdOpinft.DelInf1(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5] );
   if (txPutF('MD_OPINF_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

function HmdOpinft.ListInf1(sType1,Patno,Opdate,Opseqno:String):Integer;
var
   i : Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,Patno,Opdate,Opseqno] );
   if (txGetF32('MD_OPINF_L2')) then
   begin //Tuxedo Service Call
      GetFldVar32('S_STRING1'  ,sPatno     );         // 등록번호
      GetFldVar32('S_STRING2'  ,sOpdate    );         // 수술일자
      GetFldVar32('S_STRING3'  ,sOpseqno   );         // 수술순번
      GetFldVar32('S_STRING4'  ,sAdmdate   );         // 입원(진료)일자
      GetFldVar32('S_STRING5'  ,sPatsect   );         // 환자구분
      GetFldVar32('S_STRING6'  ,sMeddept   );         // 진료과
      GetFldVar32('S_STRING7'  ,sChadr     );         // 주치의
      GetFldVar32('S_STRING8'  ,sGendr     );         // 주치의
      GetFldVar32('S_STRING9'  ,sWardno    );         // 병동번호
      GetFldVar32('S_STRING10' ,sRoomno    );         // 병실번호
      GetFldVar32('S_STRING11' ,sOpcode    );         // 수술코드
      GetFldVar32('S_STRING12' ,sOpname    );         // 수술명
      GetFldVar32('S_STRING13' ,sStarvtm   );         // 대기실도착시간
      GetFldVar32('S_STRING14' ,sVmcautn   );         // Viral Marker
      GetFldVar32('S_STRING15' ,sVmremark  );         // Viral Marker 기타
      GetFldVar32('S_STRING16' ,sAllcautn  );         // 알러지여부
      GetFldVar32('S_STRING17' ,sAllergy   );         // 알러지기타
      GetFldVar32('S_STRING18' ,sItem1     );         // 환자확인
      GetFldVar32('S_STRING19' ,sItem2     );         // 수술동의서
      GetFldVar32('S_STRING20' ,sItem3     );         // 수혈동의서
      GetFldVar32('S_STRING21' ,sItem4     );         // 금식
      GetFldVar32('S_STRING22' ,sItemtime  );         // 금식시간
      GetFldVar32('S_STRING23' ,sItem5     );         // 의치,안경...
      GetFldVar32('S_STRING24' ,sItem6     );         // 장신구 제거
      GetFldVar32('S_STRING25' ,sItem7     );         // 화장제거
      GetFldVar32('S_STRING26' ,sItem8     );         // 환의착용
      GetFldVar32('S_STRING27' ,sItem9     );         // 수술전 검사
      GetFldVar32('S_STRING28' ,sItem10    );         // 형액준비
      GetFldVar32('S_STRING29' ,sItemkind  );         // 예약, 확인, 혈액밴드
      GetFldVar32('S_STRING30' ,sItem11    );         // 수술부위 피부준비
      GetFldVar32('S_STRING31' ,sItem12    );         // 유치카테더
      GetFldVar32('S_STRING32' ,sItem13    );         // 위관삽입
      GetFldVar32('S_STRING33' ,sItem14    );         // 관장
      GetFldVar32('S_STRING34' ,sPremedi   );         // 수술전 투약(premedi)
      GetFldVar32('S_STRING35' ,sPre       );         // 수술전 투약(pre)
      GetFldVar32('S_STRING36' ,sPrepare   );         // 수술전 투약(prepare)
      GetFldVar32('S_STRING37' ,sBldprehi  );         // 혈압H
      GetFldVar32('S_STRING38' ,sBldprelo  );         // 혈압L
      GetFldVar32('S_STRING39' ,sBodytemp  );         // 체온
      GetFldVar32('S_STRING40' ,sPulse     );         // 맥박
      GetFldVar32('S_STRING41' ,sRespcnt   );         // 호흡
      GetFldVar32('S_STRING42' ,sWeight    );         // 몸무게
      GetFldVar32('S_STRING43' ,sPrepyn    );         // 보내는 물품 및 약품
      GetFldVar32('S_STRING44' ,sPreTrt    );         // 종류
      GetFldVar32('S_STRING45' ,sPrepkind  );         // 기타종류
      GetFldVar32('S_STRING46' ,sPrepetc   );         // 기타
      GetFldVar32('S_STRING47' ,sHeadnrs   );         // 수간호사
      GetFldVar32('S_STRING48' ,sActnrs    );         // 간호단위 담당간호사
      GetFldVar32('S_STRING49' ,sOprnrs    );         // 수술장 담당간호사
      GetFldVar32('S_STRING50' ,sBldabo    );         // 혈액 (A,B,O,AB)
      GetFldVar32('S_STRING51' ,sBldrh     );         // 혈약 +/- */
      GetFldVar32('S_STRING52' ,sEditid    );         // 수정자ID
      GetFldVar32('S_STRING53' ,sEditip    );         // 수정자IP
      GetFldVar32('S_STRING54' ,sWdouttm   );         // 병실출발시간 */
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//과거 수술상태확인표 조회
function HmdOpinft.HistoryOpinf( patno :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[patno] );
   if (txGetF('MD_OPINF_L3')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1', sPatno   );
	   GetFldVar('S_STRING2', sOpdate  );
	   GetFldVar('S_STRING3', sOpseqno );
	   GetFldVar('S_STRING4', sAdmdate );
	   GetFldVar('S_STRING5', sPatsect );
	   GetFldVar('S_STRING6', sMeddept );
	   GetFldVar('S_STRING7', sChadr   );
	   GetFldVar('S_STRING8', sGendr   );
	   GetFldVar('S_STRING9', sWardno  );
	   GetFldVar('S_STRING10',sRoomno  );
	   GetFldVar('S_STRING11',sOpcode  );
	   GetFldVar('S_STRING12',sOpname  );
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;    

function HmdOpinft.UpdateOrInsert(Cnt:integer):Integer;
var
   i : Integer;
begin

   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;' +
              'S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;' +
              'S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;' +
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;S_STRING31;S_STRING32;' +
              'S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;' +
              'S_STRING49;S_STRING50;S_STRING51;S_STRING52;S_STRING53;S_STRING54');
  SetFldValue32(0,[sPatno   ,sOpdate  ,sOpseqno ,sAdmdate ,sPatsect ,sMeddept ,sChadr   ,sGendr   ,
                   sWardno  ,sRoomno  ,sOpcode  ,sOpname  ,sStarvtm ,sVmcautn ,sVmremark,sAllcautn,
                   sAllergy ,sItem1   ,sItem2   ,sItem3   ,sItem4   ,sItemtime,sItem5   ,sItem6   ,
                   sItem7   ,sItem8   ,sItem9   ,sItem10  ,sItemkind,sItem11  ,sItem12  ,sItem13  ,
                   sItem14  ,sPremedi ,sPre     ,sPrepare ,sBldprehi,sBldprelo,sBodytemp,sPulse   ,
                   sRespcnt ,sWeight  ,sPrepyn  ,sPretrt  ,sPrepkind,sPrepetc ,sHeadnrs ,sActnrs  ,
                   sOprnrs  ,sEditid  ,sEditip  ,sBldabo  ,sBldrh   ,sWdouttm ]);

   if (txPutF32('MD_OPINF_U1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//                    소아과 체중별, 약품별 용량                              //
////////////////////////////////////////////////////////////////////////////////

// 소아과 약품별 몸무게별 용량 삭제 (Multi Input)
function HmdPdqtyt.DeleteQty(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sSetType[i]),String(sOrdCd[i]),String(sWeight[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_PDQTY_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

{
// 소아과 약품별 몸무게별 용량 삭제(약품별)
function HmdPdqtyt.DeleteOrdcd(SetType,Ordcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2');
   SetFldValue(0,[SetType,Ordcd]);

   //Tuxedo Service Call
   if (txPutF('MD_PDQTY_D2')) then
   begin
      Result := 1;
      txFree;
   end;
end;
}

// 소아과 약품별 몸무게별 용량 수정 (Multi Input)
function HmdPdqtyt.UpdatePdQty(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sSetType[i]),String(sOrdCd[i]),String(sWeight[i]),
                     String(sDosQty[i]),String(sUnittype[i]),String(sOrdUnit[i]),
                     String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_PDQTY_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 소아과 약품별 몸무게별 용량 입력
function HmdPdqtyt.InsertPdQty(SetType,Ordcd,Weight,DosQty,Unittype,Ordunit,EditId,EditIp:String):Integer;
begin
   Result := -1;

   //Pointer를f 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8');
   SetFldValue(0,[SetType,Ordcd,Weight,DosQty,Unittype,Ordunit,EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_PDQTY_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 소아과 약품별 몸무게별 용량 정보 조회 (1건)
function HmdPdqtyt.SelectPdQty(UserId,DeptCd,Ordcd,Weight:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[UserId,DeptCd,Ordcd,Weight]);

   //Tuxedo Service Call
   if (txGetF('MD_PDQTY_S1')) then
   begin
      GetFldVar('S_STRING1',sDosQty );
      GetFldVar('S_STRING2',sOrdunit );
      GetFldVar('S_STRING3',sUnittype);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 소아과 약품별 몸무게별 용량 조회(SETTYPE별)
function HmdPdqtyt.ListPdQty(Type1,SetType,Ordcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_STRING1;S_STRING2;S_STRING3');
   SetFldValue32(0,[Type1,SetType,Ordcd]);

   //Tuxedo Service Call
   if (txGetF32('MD_PDQTY_L1')) then
   begin
      GetFldVar32('S_CODE1', sOrdcd   );
      GetFldVar32('S_CODE2', sOrdname );
      GetFldVar32('S_CODE3', sWeight  );
      GetFldVar32('S_CODE4', sDosQty  );
      GetFldVar32('S_CODE5', sUnittype);
      GetFldVar32('S_CODE6', sOrdunit );
      GetFldVar32('S_CODE7', sOrdYn   ); //처방가능여부
      GetFldVar32('S_CODE8',sDoseUnit); //포장단위
      GetFldVar32('S_CODE9',sQtyUnit ); //함량단위

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdRefert 	Refer System                                                   //
////////////////////////////////////////////////////////////////////////////////

// Refer 의뢰내역 조회
function HmdRefert.ListRefer(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF('MD_REFHI_L1')) then begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,sPatno);
      GetFldVar('S_STRING2' ,sPatname);
      GetFldVar('S_STRING3' ,sReqdate);
      GetFldVar('S_STRING4' ,sBirtdate);
      GetFldVar('S_STRING5' ,sResno1);
      GetFldVar('S_STRING6' ,sResno2);
      GetFldVar('S_STRING7' ,sSex);
      GetFldVar('S_STRING8' ,sTelno);
      GetFldVar('S_STRING9' ,sRefdr);
      GetFldVar('S_STRING10',sRefdrnm);
      GetFldVar('S_STRING11',sRefhosp);
      GetFldVar('S_STRING12',sRefhospnm);
      GetFldVar('S_STRING13',sMeddept);
      GetFldVar('S_STRING14',sDeptnm);
      GetFldVar('S_STRING15',sMeddr);
      GetFldVar('S_STRING16',sMeddrnm);
      GetFldVar('S_STRING17',sMeddate);
      GetFldVar('S_STRING18',sRtncode);
      GetFldVar('S_STRING19',sRtndate);
      GetFldVar('S_STRING20',sRemark);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// Refer 진료회신서 내용 조회
function HmdRefert.ReplyInform(Locate,g_Repdate:String;g_Repseq:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;L_SEQNO1');
   SetFldValue(0,[Locate,g_Repdate,g_Repseq]);

   //Tuxedo Service Call
   if (txGetF('MD_REPLY_S1')) then
   begin
      GetFldVar ('L_LONG1', iRepseq);              //회신순번
		GetFldVar ('L_LONG2', iReqseq);              //의뢰순번
		GetFldVar ('L_LONG3', iAge);                 //환자나이

		GetFldVar ('S_STRING1',   sLocate);          //사업장
		GetFldVar ('S_STRING2',   sRepdate);         //회신작성일자
		GetFldVar ('S_STRING3',   sRepstat);         //회신방법
		GetFldVar ('S_STRING4',   sMeddept);         //진료과
		GetFldVar ('S_STRING5',   sMeddr);           //진료의사
		GetFldVar ('S_STRING6',   sLicense);         //의사면허번호
		GetFldVar ('S_STRING7',   sReqdate);         //의뢰요청일자
		GetFldVar ('S_STRING8',   sUserid);          //의뢰의사
		GetFldVar ('S_STRING9',   sHospcode);        //의뢰기관코드
		GetFldVar ('S_STRING10',  sPatno);           //환자번호
		GetFldVar ('S_STRING11',  sCyberno);         //가상환자번호
		GetFldVar ('S_STRING12',  sPatname);         //수진자성명
		GetFldVar ('S_STRING13',  sResno1);          //주민등록번호1
		GetFldVar ('S_STRING14',  sResno2);          //주민등록번호2
		GetFldVar ('S_STRING15',  sSex);             //성별
		GetFldVar ('S_STRING16',  sDiagcode);        //상병코드
		GetFldVar ('S_STRING17',  sIcd10code);       //ICD-10
      GetFldVar ('S_STRING18',  sDiagtext);        //상병명
		GetFldVar ('S_STRING19',  sMedterm);         //진료기간
		GetFldVar ('S_STRING20',  sMedtype);         //환자구분
      GetFldVar ('S_STRING21',  sCarecomm);        //상태/소견
		GetFldVar ('S_STRING22',  sRemark);          //비고
		GetFldVar ('S_STRING23',  sEditid);          //수정자ID

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// Refer 진료회신서 Insert
function HmdRefert.InsertReply(Locate,RepDate,MedDept,MedDr,License,ReqDate,UserId,
                        HospCode,PatName,ResNo1,ResNo2,Sex,DiagText,MedTerm,
                        MedType,CareComm,EdirId,EditIp,Reqstat,PatNo:String;
                        RepSeq,ReqSeq,Age:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
           'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
           'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
           'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
           'L_LONG1;L_LONG2;L_LONG3');
   SetFldValue(0,[Locate,RepDate,MedDept,MedDr,License,ReqDate,UserId,
              HospCode,PatName,ResNo1,ResNo2,Sex,DiagText,MedTerm,
              MedType,CareComm,EdirId,EditIp,Reqstat,PatNo,
              RepSeq,ReqSeq,Age]);

   //Tuxedo Service Call
   if (txPutF('MD_REPLY_I1')) then
   begin
      GetFldVar ('L_LONG1', iRepseq);              //회신순번
      Result := 1;
      txFree;
   end;
end;

//Refer 진료회신서 UPDate
function HmdRefert.RefertUpdate(sLocate,sReqDate,sPatno,sReqstat,sEditId,sEditIp:String;
                           iReqSeq:Integer):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_EDITID;S_EDITIP;L_LONG1');
   SetFldValue(0,[sLocate,sReqDate,sPatno,sReqstat,sEditId,sEditIp,iReqSeq]);

   //Tuxedo Service Call
   if (txPutF('MD_REQST_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 진료회신서 리스트 조회
function HmdRefert.ReplyList(sReqDate,sPatNo,sLocate:String;iReqSeq:Integer):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_SEQNO1');
   SetFldValue(0,[sReqDate,sPatNo,sLocate,iReqSeq]);
   if (txGetF('MD_REPLY_L1')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1'   ,iRepseq);
      GetFldVar('S_STRING1' ,sRepdate);
      GetFldVar('S_STRING2' ,sMeddept);
      GetFldVar('S_STRING3' ,sEditid);
      GetFldVar('S_STRING4' ,sReqstat);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 환자별 refer 현황
function HmdRefert.PatRefer(sPatNo,sLocate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatNo,sLocate]);
   if (txGetF('MD_REQST_L2')) then begin //Tuxedo Service Call
      GetFldVar('L_LONG1',iReqseq);
      GetFldVar('L_LONG2',iRepseq);
      GetFldVar('S_STRING1' ,sReqdate);
      GetFldVar('S_STRING2' ,sReqstat);
      GetFldVar('S_STRING3' ,sUserid);
      GetFldVar('S_STRING4' ,sHospcode);
      GetFldVar('S_STRING5' ,sMeddept);
      GetFldVar('S_STRING6' ,sMeddoc1);
      GetFldVar('S_STRING7' ,sMeddate1);
      GetFldVar('S_STRING8',sDiagtext);
      GetFldVar('S_STRING9',sMedterm);
      GetFldVar('S_STRING10',sMedtype);
      GetFldVar('S_STRING11',sCarecomm);
      GetFldVar('S_STRING12',sRemark);
      GetFldVar('S_STRING13',sRepdate);
      GetFldVar('S_STRING14',sHospname);
      GetFldVar('S_STRING15',sUsername);
      GetFldVar('S_STRING16',sMedtime1);
      GetFldVar('S_STRING17',sLicense);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  Hmdhpactt 	투석환자조회                                                   //
////////////////////////////////////////////////////////////////////////////////
function Hmdhpactt.SelectHdList(sType1,sType2,sType3,sType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);
   if (txGetF('MD_HPACT_L1')) then begin //Tuxedo Service Call

      GetFldVar('S_STRING1' ,sPatNo);
      GetFldVar('S_STRING2' ,sPatName);
      GetFldVar('S_STRING3' ,sWardNo);
      GetFldVar('S_STRING4' ,sHdshift);
      GetFldVar('S_STRING5' ,sComCdNm);
      GetFldVar('S_STRING6' ,sHdMedYn);
      GetFldVar('S_STRING7' ,sChaDr);
      GetFldVar('S_STRING8' ,sHbType);
      GetFldVar('S_STRING9' ,sSex);
      GetFldVar('S_STRING10',sBirtdate);
      GetFldVar('S_STRING11',sDiagName);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  Hmdclasst 	교실일지                                                       //
////////////////////////////////////////////////////////////////////////////////
function Hmdclasst.ListClassmt(sType1,sType2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sType1,sType2]);
   if (txGetF('MD_CLASM_L1')) then
   begin //Tuxedo Service Call

      GetFldVar ('L_LONG1', iAdmcnt  );              //입원환자수
		GetFldVar ('L_LONG2', iDschcnt );              //퇴원
		GetFldVar ('L_LONG3', iTrincnt );              //전입
      GetFldVar ('L_LONG4', iTroutcnt);              //전출
      GetFldVar ('L_LONG5', iTotcnt  );              //합계

		GetFldVar ('S_STRING1',   sRgtdate );        
		GetFldVar ('S_STRING2',   sMeddept );        
		GetFldVar ('S_STRING3',   sDutydr  );        
		GetFldVar ('S_STRING4',   sStaffdr );        
		GetFldVar ('S_STRING5',   sRsdt4dr );        
		GetFldVar ('S_STRING6',   sRsdt3dr );        
		GetFldVar ('S_STRING7',   sRsdt2dr );        
		GetFldVar ('S_STRING8',   sRsdt1dr );        
		GetFldVar ('S_STRING9',   sRemark  );        
		GetFldVar ('S_STRING10',  sPatstat );        
		GetFldVar ('S_STRING11',  sPatno   );        
		GetFldVar ('S_STRING12',  sWardno  );        
		GetFldVar ('S_STRING13',  sDiagnm  );        
		GetFldVar ('S_STRING14',  sOpname  );        
		GetFldVar ('S_STRING15',  sChadr   );        
		GetFldVar ('S_STRING16',  sGendr   );        
		GetFldVar ('S_STRING17',  sOpdr    );       
      GetFldVar ('S_STRING18',  sOpdr2   );
		GetFldVar ('S_STRING19',  sPatname );
		GetFldVar ('S_STRING20',  sSex     );
      GetFldVar ('S_STRING21',  sBirtdate);
		GetFldVar ('S_STRING22',  sChadrnm );
		GetFldVar ('S_STRING23',  sGendrnm );
      GetFldVar ('S_STRING24',  sOpdrnm  );
      GetFldVar ('S_STRING25',  sOpdr2nm );


      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdClasst.InsertList(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;L_LONG1;L_LONG2;L_LONG3;L_LONG4;L_LONG5');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sRgtdate[i]),String(sMeddept[i]),String(sDutydr[i]),
                     String(sStaffdr[i]),String(sRsdt4dr[i]),String(sRsdt3dr[i]),
                     String(sRsdt2dr[i]),String(sRsdt1dr[i]),String(sRemark[i]),
                     String(sPatstat[i]),String(sPatno[i]),String(sWardno[i]),
                     String(sRoomno[i]),String(sDiagnm[i]),String(sOpname[i]),
                     String(sChadr[i]),String(sGendr[i]),String(sOpdr[i]),
                     String(sOpdr2[i]),String(sEditid[i]),String(sEditip[i]),
                     Integer(iAdmcnt[i]),Integer(iDschcnt[i]),Integer(iTrincnt[i]),
                     Integer(iTroutcnt[i]),Integer(iTotcnt[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_CLASM_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdExtrct 	적출물                                                         //
////////////////////////////////////////////////////////////////////////////////

function HmdExtrct.ListExtrct(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF('MD_EXTRC_L1')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1', sSeqNo   );
		GetFldVar ('S_CODE2', sExtDate );
		GetFldVar ('S_CODE3', sPatNo   );
		GetFldVar ('S_CODE4', sExtract );
		GetFldVar ('S_CODE5', sExtWgt  );
		GetFldVar ('S_CODE6', sExtDr   );
		GetFldVar ('S_CODE7', sTakeDate);
		GetFldVar ('S_CODE8', sTaker   );
      GetFldVar ('S_CODE9', sPatName );
      GetFldVar ('S_CODE10', sSex     );
      GetFldVar ('S_CODE11', sBirtDate);
      GetFldVar ('S_CODE12', sTotWgt);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdExtrct.InsExtrct(sType1,sPatNo,sExtract,sExtWgt,sExtDate,sTaker,
                             sTakeDate,sExtDr,sYear,sSeqNo,sUserid, sUserip,
                             sOldYear, sTotWgt:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13');
   SetFldValue(0,[sType1, sPatNo, sExtract, sExtWgt, sExtDate, sTaker, sTakeDate,
                  sExtDr, sYear, sSeqNo, sUserid, sUserip, sOldYear, sTotWgt]);

   if (txPutF('MD_EXTRC_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdAlarmt 	알람시스템                                                     //
////////////////////////////////////////////////////////////////////////////////

function HmdAlarmt.ListAlarmt(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF('MD_ALARM_L1')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_CODE1',  sRgtDr     );
		GetFldVar ('S_CODE2',  sSeqNo     );
		GetFldVar ('S_CODE3',  sPatNo     );
		GetFldVar ('S_CODE4',  sRgtDate   );
		GetFldVar ('S_CODE5',  sAlarmfDt  );
		GetFldVar ('S_CODE6',  sAlarmtDt  );
		GetFldVar ('S_CODE7',  sAlarmTxt  );
		GetFldVar ('S_CODE8',  sAlarmYn   );
      GetFldVar ('S_CODE9',  sPatName   );
      GetFldVar ('S_CODE10', sSex       );
      GetFldVar ('S_CODE11', sBirtDate  );
      GetFldVar ('S_CODE12', sTerm      );
      GetFldVar ('S_CODE13', sTermUnit  );

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

function HmdAlarmt.InsAlarmt(sType1,sPatNo,sRgtDr,sRgtDate,sAlarmfDt,sAlarmtDt,
                             sAlarmTxt,sAlarmYn,sEditId,sEditIp,sSeqNo,sTerm,sTermUnit:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;'+
              'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12');
   SetFldValue(0,[sType1,sRgtDr,sPatNo,sRgtDate,sAlarmfDt,sAlarmtDt,
                  sAlarmTxt,sAlarmYn,sEditId,sEditIp,sSeqNo,sTerm,sTermUnit]);

   if (txPutF('MD_ALARM_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  mdPattxt 	분만외시술대장                                                 //
////////////////////////////////////////////////////////////////////////////////

function HmdPattxt.ListPattxt(sItemcd1,sItemcd2,sFromDate,sToDate :String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sItemcd1,sItemcd2,sFromDate,sToDate]);
   if (txGetF('MD_PATTX_L1')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_STRING1' ,v_Rgtdate  );
		GetFldVar ('S_STRING2' ,v_Rgttime  );
		GetFldVar ('S_STRING3' ,v_Patno    );
		GetFldVar ('S_STRING4' ,v_Seqno    );
		GetFldVar ('S_STRING5' ,v_Admcou   );
		GetFldVar ('S_STRING6' ,v_ItemCd1  );
		GetFldVar ('S_STRING7' ,v_ItemCd2  );
		GetFldVar ('S_STRING8' ,v_Remark   );
		GetFldVar ('S_STRING9' ,v_Patname  );
		GetFldVar ('S_STRING10',v_Sex      );
		GetFldVar ('S_STRING11',v_Birtdate );
		GetFldVar ('S_STRING12',v_Wardrm   );
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdPattxt.InsPattxt(sType1  , // 1: 입력, 2: 수정 3:삭제*/
                             sRgtdate, // 등록일자  */
                             sRgttime, // 등록시간  */
                             sPatno  , // 환자번호  */
                             sSeqno  , // 등록순번  */
                             sAdmcou , // 내원경유  */
                             sWardrm , // 병동 병실
                             sItemCd1, // 항목코드1 */
                             sItemCd2, // 항목코드2 */
                             sRemark , // 특기사항  */
                             sChgdate, // 수정시 바뀐날짜 */
                             sEditid , // 수정자ID  */
                             sEditip   // 수정자IP  */
                             : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;' +
              'S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;S_TYPE13');
   SetFldValue(0,[sType1  ,sRgtdate,sRgttime,sPatno  ,sSeqno  ,sAdmcou ,sItemCd1,
                  sItemCd2,sRemark ,sChgdate,sEditid ,sEditip ,sWardrm ]);

   if (txPutF('MD_PATTX_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;

// 분반외시술대장 조회
function HmdPattxt.SelStat(sType1:String):Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1] );
   if (txGetF('MD_PATTX_L2')) then begin //Tuxedo Service Call

   	GetFldVar('S_CODE1',  v_RgtDate);
	  	GetFldVar('S_CODE2',  v_ItemCd1);
	  	GetFldVar('S_CODE3',  v_Cnt);

      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;
////////////////////////////////////////////////////////////////////////////////
//  mdNrrect 	간호기록지                        SONGLIM_THOMA 수정          //
////////////////////////////////////////////////////////////////////////////////
                                                                  // SONGLIM_THOMA 수정
function HmdNrrect.ListNrrect(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF32('MD_NRREC_L1')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_CODE1', sActdate  );
		GetFldVar32 ('S_CODE2', sActseqno );
		GetFldVar32 ('S_CODE3', sActtime  );
		GetFldVar32 ('S_CODE4', sActtxt   );
		GetFldVar32 ('S_CODE5', sExecnm   );
		GetFldVar32 ('S_CODE6', sDeptcd   );
		GetFldVar32 ('S_CODE7', sExecid   );
		GetFldVar32 ('S_CODE8', sBodytemp  );
		GetFldVar32 ('S_CODE9', sBldprehi  );
		GetFldVar32 ('S_CODE10',sBldprelo  );
		GetFldVar32 ('S_CODE11',sPulse     );
		GetFldVar32 ('S_CODE12',sRespcnt   );
		GetFldVar32 ('S_CODE13',sAdmyn     );
		GetFldVar32 ('S_CODE14',sAdmcou    );
		GetFldVar32 ('S_CODE15',sAdmmeth   );
		GetFldVar32 ('S_CODE16',sCondst    );
		GetFldVar32 ('S_CODE17',sCondstrm  );
		GetFldVar32 ('S_CODE18',sJuicdnm   );
		GetFldVar32 ('S_CODE19',sRmgendr   );
		GetFldVar32 ('S_CODE20',sRemark    );
		GetFldVar32 ('S_CODE21',sWeight   );
		GetFldVar32 ('S_CODE22',sHeight    );
		GetFldVar32 ('S_CODE23',sSignData    );
		GetFldVar32 ('S_CODE24',sSerialNo   );
		GetFldVar32 ('S_CODE25',sSubjectDN    );
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdNrrect.InsNrrect(Cnt:Integer):Integer;    // SONGLIM_THOMA 수정
var
   i : Integer;
begin

   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;' +
                'S_CODE4;S_CODE5;S_CODE6;S_CODE7;' +
                'S_CODE8;S_CODE9;S_CODE10;S_CODE11;'+
                'S_CODE12;S_CODE13;S_CODE14;S_CODE15;'+
                'S_CODE16;S_CODE17;S_CODE18;S_CODE19;'+
                'S_CODE20;S_CODE21;S_CODE22;S_CODE23;'+
                'S_CODE24;S_CODE25;S_CODE26;S_CODE27;'+
                'S_CODE28;S_CODE29;S_CODE30;S_CODE31');

   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sType[i])    ,String(sPatno[i])   ,String(sActdate[i]) ,String(sActseqno[i]),
                       String(sActtime[i]) ,String(sActtxt[i])  ,String(sExecid[i])  ,String(sWardno[i])  ,
                       String(sRoomno[i])  ,String(sEditid[i])  ,String(sEditip[i])  ,String(sOldDate[i]) ,
                       String(sIUCond[i])  ,String(sAdmDate[i]) ,String(sBodytemp[i]),String(sBldprehi[i]),
                       String(sBldprelo[i]),String(sPulse   [i]),String(sRespcnt [i]),String(sAdmyn   [i]),
                       String(sAdmcou  [i]),String(sAdmmeth [i]),String(sCondst  [i]),String(sCondstrm[i]),
                       String(sJuicdnm [i]),String(sRmgendr [i]),String(sRemark  [i]),String(sWeight  [i]),
                       String(sHeight  [i]),String(sSignData[i]),String(sSerialNo[i]),String(sSubjectDN[i])]);
   end;

   if (txPutF32('MD_NRREC_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree32;
   end;

end;

//추가 이선규 2003.11.25일 간호기록지에서
function HmdNrrect.InsNrrect1(sType1   ,// 'I' 입력 ,'U' :수정 
                              sPatno   ,
                              sAdmdate ,
                              sAdmme   , // 입원시경로
                              sAdmmeth , // 입원방법
                              sbldprehi, // 혈압(high)
                              sbldprelo, // 혈압(LOW)
                              sVs      , // 맥박
                              sTemp    , // 체온
                              sBret    , // 호흡
                              sPs      , // 의식상태
                              sAdmreson, // 입원동기
                              sMeddept , // 진료과
                              sChadr   , // 주치의사
                              sGendr   , // 담당의사
                              sWardno  , // 병동
                              sRoomno  , // 병실
                              sInputdt , // 입력일자
                              sInputtm , // 입력시간
                              sNurse   , // 간호사ID
                              sEditip  , // 사용자 IP
                              sIcd     , // 주증상
                              sWeight  , // 체중
                              sHeight    // 신장

                              : String):Integer;
var
   i : Integer;
begin

   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;' +
              'S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;'+
              'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;S_TYPE15;'+
              'S_TYPE16;S_TYPE17;S_TYPE18;S_TYPE19;S_TYPE20;'+
              'S_TYPE21;S_TYPE22;S_TYPE23;S_TYPE24');
   SetFldValue(0,[ sType1   ,sPatno   ,sAdmdate,sAdmme  ,sAdmmeth
                  ,sbldprehi,sbldprelo,sVs     ,sTemp   ,sBret
                  ,sPs      ,sAdmreson,sMeddept ,sChadr  ,sGendr
                  ,sWardno  ,sRoomno  ,sInputdt ,sInputtm,sNurse
                  ,sEditip  ,sIcd     ,sWeight  ,sHeight]);
   if (txPutF('MD_NRREC_I2')) then
   begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;

end;

//(추가. 2003.04.08 이용언) -> 의사 Progress Note 추가.    // SONGLIM_THOMA 수정
function HmdNrrect.InsNrrect2(Cnt:Integer):Integer;
var
   i : Integer;
begin

   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;' +
                'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17');

   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sType[i]),   String(sPatno[i]), String(sActdate[i]),String(sActseqno[i]),
                       String(sActtime[i]),String(sActtxt[i]),String(sExecid[i]), String(sWardno[i]),
                       String(sRoomno[i]), String(sEditid[i]),String(sEditip[i]), String(sOldDate[i]),
                       String(sIUCond[i]), String(sAdmDate[i]),String(sSignData[i]),String(sSerialNo[i]),
                       String(sSubjectDN[i]), String(sPggbn[i])]);
   end;

   if (txPutF32('MD_NRREC_I3')) then begin //Tuxedo Service Call
      Result := 1;
      txFree32;
   end;

end;

function HmdNrrect.ListNrrect2(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin                                                      //SONGLIM_THOMA 수정
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF32('MD_NRREC_L2')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_CODE1', sActdate    );
		GetFldVar32 ('S_CODE2', sActseqno   );
		GetFldVar32 ('S_CODE3', sActtime    );
		GetFldVar32 ('S_CODE4', sActtxt     );
		GetFldVar32 ('S_CODE5', sExecnm     );
		GetFldVar32 ('S_CODE6', sDeptcd     );
		GetFldVar32 ('S_CODE7', sExecid     );
		GetFldVar32 ('S_CODE8', sSignData   );
		GetFldVar32 ('S_CODE9', sSerialNo   );
		GetFldVar32 ('S_CODE10',sSubjectDN  );
        GetFldVar32 ('S_CODE11',sPggbn      );

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

//2015인증평가, "수술/시술후기록"체크, KimDaeYong 2015-04-22
function HmdNrrect.SelectNrrect1(inPatno, inAdmdate:String):Integer;
begin                                                      //SONGLIM_THOMA 수정
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[inPatno, inAdmdate]);
   if (txGetF32('MD_NRREC_S1')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_STRING1', sOrdcnt   );
		GetFldVar32 ('S_STRING2', sPgncnt   );

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


//입원연장사유 체크, KimDaeYong 2016-07-04
function HmdNrrect.SelectNrrect2(inFlag, inPatno, inAdmdate, inMainDiag:String):Integer;
begin                                                      
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[inFlag, inPatno, inAdmdate, inMainDiag]);
   if (txGetF32('MD_NRREC_S2')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_STRING1', sResult   );

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdPcatxt 	통증관리등록                                                   //
////////////////////////////////////////////////////////////////////////////////

//통증치료내역
function HmdPcatxt.ListPcatx(sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sType1]);
   if (txGetF('MD_PCATX_L1')) then
   begin //Tuxedo Service Call

		GetFldVar ('S_STRING1',   sTxdate   );
		GetFldVar ('S_STRING2',   sAnesdr1  );
		GetFldVar ('S_STRING3',   sPcatype2 );
		GetFldVar ('S_STRING4',   sPcacode2 );
      GetFldVar ('S_STRING5',   sRemark   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//최근치료내역복사
function HmdPcatxt.LastPcatx(Type1,Patno,Type2:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_PATNO;S_TYPE2');
   SetFldValue(0,[Type1,Patno,Type2]);
   if (txGetF('MD_PCATX_S1')) then
   begin //Tuxedo Service Call

		GetFldVar ('S_STRING1',    sTxdate);
      GetFldVar ('S_STRING2',    sMeddept);
      GetFldVar ('S_STRING3',    sMeddr);
      GetFldVar ('S_STRING4',    sDiagcd);
      GetFldVar ('S_STRING5',    sDiagname);
      GetFldVar ('S_STRING6',    sPatsect);
      GetFldVar ('S_STRING7',    sPattype);
      GetFldVar ('S_STRING8',    sPcatype1);
      GetFldVar ('S_STRING9',    sPcatype2);
      GetFldVar ('S_STRING10',   sPcacode1);
      GetFldVar ('S_STRING11',   sPcacode2);
      GetFldVar ('S_STRING12',   sAnesdr1);
      GetFldVar ('S_STRING13',   sAnesdr2);
      GetFldVar ('S_STRING14',   sAnesnr1);
      GetFldVar ('S_STRING15',   sAnesnr2);
      GetFldVar ('S_STRING16',   sRemark);
      GetFldVar ('S_STRING17',   sWardno);
      GetFldVar ('S_STRING18',   sRoomno);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
//통증치료등록
function HmdPcatxt.InsertPcatx(PatNo,TxDate,MedDept,MedDr,DiagCd,DiagNm,PatSect,
                           Pattype,PcaType1,PcaType2,PcaCode1,PcaCode2,AnesDr1,
                           AnesDr2,AnesNr1,AnesNr2,Remark,Wardno,Roomno,
                           EditId,EditIp : String):Integer;
begin
   Result := -1;

   //Pointer를f 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21');
   SetFldValue(0,[PatNo,TxDate,MedDept,MedDr,DiagCd,DiagNm,PatSect,
                           Pattype,PcaType1,PcaType2,PcaCode1,PcaCode2,AnesDr1,
                           AnesDr2,AnesNr1,AnesNr2,Remark,Wardno,Roomno,
                           EditId,EditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_PCATX_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;
// 삭제
function HmdPcatxt.DeletePcatx(Type1,Patno:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_PATNO');
   SetFldValue(0,[Type1,Patno]);

   //Tuxedo Service Call
   if (txPutF('MD_PCATX_D1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

//통증보고서
function HmdPcatxt.ListDaypca(Txdate:String):Integer;
begin
   Result := -1;
   //pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[TxDate]);
   //Tuxedo Service Call
   if (txGetF('MD_PCATX_L2')) then
   begin
      GetFldVar ('S_STRING1',    sMeddept  );
      GetFldVar ('S_STRING2',    sMeddr    );
      GetFldVar ('S_STRING3',    sPatno    );
      GetFldVar ('S_STRING4',    sPatname  );
      GetFldVar ('S_STRING5',    sSex      );
      GetFldVar ('S_STRING6',    sBirtdate );
      GetFldVar ('S_STRING7',    sWardno   );
      GetFldVar ('S_STRING8',    sDiagname );
      GetFldVar ('S_STRING9',    sPcatype1 );
      GetFldVar ('S_STRING10',   sPcacode1 );
      GetFldVar ('S_STRING11',   sRemark   );
      GetFldVar ('S_STRING12',   sAnesdr1  );
      GetFldVar ('S_STRING13',   sAnesdr2  );
      GetFldVar ('S_STRING14',   sAnesnr1  );
      GetFldVar ('S_STRING15',   sAnesnr2  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
////////////////////////////////////////////////////////////////////////////////
//  HmdEndrdt 	판독결과                                                       //
////////////////////////////////////////////////////////////////////////////////

// 판독결과 저장
function HmdEndrdt.InsDelEndrd(sType1, sPatNo, sOrdDate, sReadDate, sReadDr, sReadText, sOrdcd, sOrdseqno, sSlipcd, sEditId, sEditIp : String):Integer;
begin

   Result := -1;

   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10');
   SetFldValue(0,[sType1, sPatNo, sOrdDate, sReadDate, sReadDr, sReadText, sOrdcd, sOrdseqno, sSlipcd, sEditId, sEditIp]);

   if (txPutF('MD_ENDRD_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdTxstat 	검사통계항목 관리                                              //
////////////////////////////////////////////////////////////////////////////////
function HmdTxstat.ListTxstat(sMeddept:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_MEDDEPT');
   SetFldValue(0,[sMeddept]);
   if (txGetF('MD_TXSTA_L1')) then
   begin //Tuxedo Service Call
		GetFldVar ('S_STRING1',   sSeqno );
		GetFldVar ('S_STRING2',   sOrdcd );
		GetFldVar ('S_STRING3',   sOrdgrp  );
		GetFldVar ('S_STRING4',   sOrdname );
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdTxstat.InsertTxstat(Cnt:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_MEDDEPT;S_TYPE1;S_TYPE2;S_TYPE3;S_EDITID;S_EDITIP');
   for i := 0 to Cnt-1 do
   begin
      SetFldValue(i,[String(sMeddept[i]),String(sSeqno[i]),String(sOrdcd[i]),
                     String(sOrdgrp[i]),String(sEditid[i]),String(sEditip[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_TXSTA_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdUmlsmt.UmlsSearch(sType1, sType2:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[sType1,sType2]);
   if (txGetF32('MD_ERINF_S5')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sCode);
      GetFldVar32('S_STRING2',sSeq);
      GetFldVar32('S_STRING3',sChiefcom);
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdMenumt 	메뉴관리마스터                                                 //
////////////////////////////////////////////////////////////////////////////////

function HmdMenumt.GetMenu(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);
   if (txGetF32('MD_MENUM_L1')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_CODE1',     sSeqNo   );
		GetFldVar32 ('S_CODE2',     sMenuId  );
		GetFldVar32 ('S_CODE3',     sMenuName);
      GetFldVar32 ('S_CODE4',     sRootYn);

      GetFldVar32 ('S_CODE5',     sUseYn);
      GetFldVar32 ('S_CODE6',     sRemark);

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdMenumt.InUpMenu(sType1,sSeqNo,sMenuId,sMenuName,sUseYn,sRootYn,
                        sRemark,sEditId,sEditIp:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;'+
              'S_CODE8');
   SetFldValue(0,[sType1,sSeqNo,sMenuId,sMenuName,sUseYn,sRootYn,sRemark,sEditid,
               sEditip]);

   //Tuxedo Service Call
   if (txPutF('MD_MENUM_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdMenudt 	사용자메뉴관리                                                 //
////////////////////////////////////////////////////////////////////////////////

function HmdMenudt.GetUserMenu(sType1,sType2,sType3,sType4,sType5:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5]);
   if (txGetF32('MD_MENUD_L1')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1',  sUserName);
		GetFldVar32 ('S_CODE2',  sUserId);
      GetFldVar32 ('S_CODE3',  sVisible);
      GetFldVar32 ('S_CODE4',  sMenuId);
      GetFldVar32 ('S_CODE5',  sMenuYn);
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdMenudt.PutUserMenu(Cnt:Integer):Integer;
var i : Integer ;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');

   for i := 0 to cnt-1 do
   begin
      SetFldValue32(i,[String(sUserId[i]),String(sVisible[i]),String(sEditId[i]),String(sEditIp[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF32('MD_MENUD_I1')) then
   begin
      Result := 1;
      txFree32;
   end;
end;

//추가. 2002.11.1 제한항균제 승인 권한부여
function HmdMenudt.Checkgrant(userid :String):Integer;
var i : Integer ;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[userid]);


   //Tuxedo Service Call
   if (txGetF32('MD_MENUD_S1')) then
   begin
      GetFldVar('S_STRING1',sVisible);
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdMenudt.changegrant(sType1,sType2,sType3,sType4 :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sType1,sType2,sType3,sType4]);

   if (txPutF('MD_MENUD_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HapDrmedt 	원무...                                                        //
////////////////////////////////////////////////////////////////////////////////
function HapDrmedt.DRMED_S2 : Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_DR1;S_MEDDEPT;S_TYPE1;S_DATE1');
   SetFldValue(0,[String(sMeddr),String(sMeddept),String(sFlag),String(sMeddate)]);

   if txGetF('AP_DRMED_S2') then
   begin
      Result := GetRecordCnt('S_MEDDEPT');

      GetFldVar('S_MEDDEPT',   sMeddept);
      GetFldVar('S_DR1',       sMeddr);
      GetFldVar('S_FROMDATE',  sFromDate);
      GetFldVar('S_TODATE',    sToDate);
      GetFldVar('S_YN1',       sChoyn);
      GetFldVar('S_YN2',       sMedable);
      GetFldVar('S_YN3',       sCholicyn);
      GetFldVar('S_EDITDATE',  sEditDate);
      GetFldVar('S_EDITID',    sEditId);
      GetFldVar('S_DRNAME1',   sDrname);
      GetFldVar('S_NAME1',     sMeddeptnm);

      txFree;
   end
   else
   begin
      if GetTxUrCode = 1043 then
         Result := 0;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdIcudpt 	중환자실 사망환자 정보                                         //
////////////////////////////////////////////////////////////////////////////////

function HmdIcudpt.InsIcudpt(sType1,    sPatNo,   sAdmDate, sRegDate, sMeddept, sWardno,
                             sRoomno,   sChadr,   sGendr,   sDiedate, sDiagnm,
                             sConfdate, sRemark,  sEditid,  sEditip : String) : Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'
            + 'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'
            + 'S_CODE13;S_CODE14;');

   SetFldValue(0,[sType1,sPatno,sAdmdate,sRegdate,sMeddept,sWardNo,sRoomNo,
                  sChaDr,sGenDr,sDieDate,sDiagnm,sConfDate,sRemark,sEditId,sEditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_ICUDP_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdIcudpt.GetIcudpt(sType1,sFromDate,sToDate,sIcuCd : String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sFromDate,sToDate,sIcuCd]);
   if (txGetF32('MD_ICUDP_L1')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1',  sRegdate);
      GetFldVar32 ('S_CODE2',  sPatNo);
      GetFldVar32 ('S_CODE3',  sPatname);
      GetFldVar32 ('S_CODE4',  sSex);
      GetFldVar32 ('S_CODE5',  sBirtdate);
      GetFldVar32 ('S_CODE6',  sMeddept);
      GetFldVar32 ('S_CODE7',  sAdmdate);
      GetFldVar32 ('S_CODE8',  sConfdate);
      GetFldVar32 ('S_CODE9',  sDiedate);
      GetFldVar32 ('S_CODE10', sDiagnm);
      GetFldVar32 ('S_CODE11', sChadrnm);
      GetFldVar32 ('S_CODE12', sChadr);
      GetFldVar32 ('S_CODE13', sGendrnm);
      GetFldVar32 ('S_CODE14', sGendr);
      GetFldVar32 ('S_CODE15', sRemark);

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdIcustt 	중환자실 일일현황                                              //
////////////////////////////////////////////////////////////////////////////////

function HmdIcustt.GetIcustt(sType1,sType2,sType3:String; LastDay:Integer) : Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;L_LONG1');
   SetFldValue(0,[sType1,sType2,sType3,LastDay]);
   if (txGetF('MD_ICUST_L1')) then
   begin
      GetFldVar ('S_STRING1',   sStatDate);
      GetFldVar ('S_STRING2',   sStayCnt);
      GetFldVar ('S_STRING3',   sAdmCnt);
      GetFldVar ('S_STRING4',   sInCnt);
      GetFldVar ('S_STRING5',   sOutCnt);
      GetFldVar ('S_STRING6',   sDschCnt);
      GetFldVar ('S_STRING7',   sDieCnt);
      GetFldVar ('S_STRING8',   sOpCnt);
      GetFldVar ('S_STRING9',   sVenCnt);
      GetFldVar ('S_STRING10',  sOneCnt);
      GetFldVar ('S_STRING11',  sTwoCnt);
      GetFldVar ('S_STRING12',  sThreeCnt);
      GetFldVar ('S_STRING13',  sFourCnt);
      GetFldVar ('S_STRING14',  sFiveCnt);
      GetFldVar ('S_STRING15',  sSixCnt);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdIcustt.InsIcustt(sStatDate, sStayCnt,  sAdmCnt,  sInCnt,   sOutCnt,  sDschCnt,
                             sDieCnt,   sOpCnt,    sVenCnt,  sOneCnt,  sTwoCnt,  sThreeCnt,
                             sFourCnt,  sFiveCnt,  sSixCnt,  sEditid,  sEditip,  sWardNo : String) : Integer;
{function HmdIcustt.InsIcustt(sStatDate, sStayCnt,  sAdmCnt,  sInCnt,   sOutCnt,  sDschCnt,
                             sDieCnt,   sOpCnt,    sVenCnt,  sOneCnt,  sTwoCnt,  sThreeCnt,
                             sFourCnt,  sFiveCnt,  sSixCnt,  sEditid,  sEditip,  sWardNo,
                             sType : String) : Integer;}
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'
            + 'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'
            + 'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;');
   {SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'
            + 'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'
            + 'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;'
            + 'S_CODE19;');}

   SetFldValue(0,[sStatDate, sStayCnt,  sAdmCnt,  sInCnt,   sOutCnt,  sDschCnt,
                    sDieCnt,   sOpCnt,    sVenCnt,  sOneCnt,  sTwoCnt,  sThreeCnt,
                    sFourCnt,  sFiveCnt,  sSixCnt,  sEditid,  sEditip,  sWardNo]);
   {SetFldValue(0,[sStatDate, sStayCnt,  sAdmCnt,  sInCnt,   sOutCnt,  sDschCnt,
                    sDieCnt,   sOpCnt,    sVenCnt,  sOneCnt,  sTwoCnt,  sThreeCnt,
                    sFourCnt,  sFiveCnt,  sSixCnt,  sEditid,  sEditip,  sWardNo,
                    sType]);}

   //Tuxedo Service Call
   if (txPutF('MD_ICUST_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdIcustt.InsIcustt2(Cnt:Integer; sEditid,  sEditip : String) : Integer;
var
   i : Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'
            + 'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'
            + 'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;');

   for i:=0 to cnt -1 do
   begin
      SetFldValue(i,[String(sStatDate[i]), String(sStayCnt[i]),  '',  '',   '',  '',
                     '',  '',  '',  String(sOneCnt[i]),  String(sTwoCnt[i]),  String(sThreeCnt[i]),
                     String(sFourCnt[i]),  '',  '',  sEditid,  sEditip,  String(sWardNo[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ICUST_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;
function HmdIcustt.GetNNRData(sDate:String) : Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1');
   SetFldValue(0,[sDate]);
   if (txGetF('MD_NNRST_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1', v_Date    );
      GetFldVar('S_STRING2', v_Allbaby );
      GetFldVar('S_STRING3', v_Born    );
      GetFldVar('S_STRING4', v_Out     );
      GetFldVar('S_STRING5', v_Adm     );
      GetFldVar('S_STRING6', v_Die     );
      GetFldVar('S_STRING7', v_Opt     );
      GetFldVar('S_STRING8', v_Nicu    );
      GetFldVar('S_STRING9', v_Incu    );
      GetFldVar('S_STRING10',v_Sickbaby);
      GetFldVar('S_STRING11',v_Normal  );
      GetFldVar('S_STRING12',v_Etc     );
      GetFldVar('S_STRING13',v_Trin    );
      GetFldVar('S_STRING14',v_Trout   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  HmdEmpty 	병실조회종합.                                                  //
////////////////////////////////////////////////////////////////////////////////

function HmdEmptyt.GetWardGrade(sType1,sType2,sType3,sType4,sType5,sType6,sType7:String):Integer;
begin
    Result := -1;
    txAlloc32;
    SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7');
    SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6,sType7]);
    if (txGetF32('MD_EMPTY_L1')) then
    begin
      GetFldVar32 ('S_CODE1',  sCode1);
      GetFldVar32 ('S_CODE2',  sCode2);
      GetFldVar32 ('S_CODE3',  sCode3);
      GetFldVar32 ('S_CODE4',  sCode4);
      GetFldVar32 ('S_CODE5',  sCode5);
      GetFldVar32 ('S_CODE6',  sCode6);
      GetFldVar32 ('S_CODE7',  sCode7);
      GetFldVar32 ('S_CODE8',  sCode8);
      GetFldVar32 ('S_CODE9',  sCode9);
      GetFldVar32 ('S_CODE10', sCode10);
      GetFldVar32 ('S_CODE11', sCode11);
      GetFldVar32 ('S_CODE12', sCode12);
      GetFldVar32 ('S_CODE13', sCode13);
      GetFldVar32 ('S_CODE14', sCode14);
      GetFldVar32 ('S_CODE15', sCode15);

      GetFldVar32 ('S_CODE16', sCode16);
      GetFldVar32 ('S_CODE17', sCode17);

      GetFldVar32 ('L_CNT1', lCode1);
      GetFldVar32 ('L_CNT2', lCode2);
      GetFldVar32 ('L_CNT3', lCode3);
      GetFldVar32 ('L_CNT4', lCode4);
      GetFldVar32 ('L_CNT5', lCode5);

      //조회건수 return
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
    end;
end;

//(추가. 2002.12.04 이용언) 병동별 팀 체크
function Hmdemptyt.select(WardCd : String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName ('S_TYPE1');
   SetFldValue(0,[Wardcd]);

   if (txGetF('MD_TEAMS_S1')) then
   begin
      GetFldVar('S_STRING1',sCode1); //병동별 팀수

      Result := GetRecordCnt('S_STRING1');

      TxFree;
   end;
end;


////////////////////////////////////////////////////
// 이선규 Function 프로그램 작성                  //
////////////////////////////////////////////////////
////////////////////////////////////////////////////
// 입원내역 Hapipdlst
////////////////////////////////////////////////////
function Hapipdlst.select_dschpat(sGubun,sWard,sFromdate,sTodate : String) : integer;
begin
    Result := -1;
    txAlloc;
    SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
    SetFldValue(0,[sGubun,sWard,sFromdate,sTodate]);
    if (txGetF('MD_DSCHL_L1')) then
    begin
       GetFldVar ('S_STRING1',   v_Gubun   );
       GetFldVar ('S_STRING2',   v_Admdate );
       GetFldVar ('S_STRING3',   v_Dschdate);
       GetFldVar ('S_STRING4',   v_Wardno  );
       GetFldVar ('S_STRING5',   v_Infrom  );
       GetFldVar ('S_STRING6',   v_Patno   );
       GetFldVar ('S_STRING7',   v_Patname );
       GetFldVar ('S_STRING8',   v_Sex     );
       GetFldVar ('S_STRING9',   v_Birtdate);
       GetFldVar ('S_STRING10',  v_Chadr   );
       GetFldVar ('S_STRING11',  v_Daycnt  );
       GetFldVar ('S_STRING12',  v_Diagname);
       GetFldVar ('S_STRING13',  v_Lstopdt );
       GetFldVar ('S_STRING14',  v_Opname  );
       GetFldVar ('S_STRING15',  v_Telno1  );
       GetFldVar ('S_STRING16',  v_Address );
       GetFldVar ('S_STRING17',  v_Meddate );
       GetFldVar ('S_STRING18',  v_Medtime );
       GetFldVar ('S_STRING19',  v_Meddept );
       GetFldVar ('S_STRING20',  v_Meddr   );
       GetFldVar ('S_STRING21',  v_Sdate   );
       GetFldVar ('S_STRING22',  v_Dschrslt);
       GetFldVar ('S_STRING23',  v_Fromdate);
       GetFldVar ('S_STRING24',  v_Todate  );
       GetFldVar ('S_STRING25',  v_ICUCnt  );
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
    end;
end;

////////////////////////
// 병실별 병동별환자조회
////////////////////////
function Hapipdlst.pat_ward_select(sWardno,sRoom  : String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sWardno,sRoom]);    //  Stype
   if (txGetF('MN_WDPAT_L1')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_STRING1'  , v_Patno   );  // 환자번호
      GetFldVar ('S_STRING2'  , v_Patname );  // 환자명
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////
// 신생아실 대사이상검사 조회
////////////////////////////
function Hapipdlst.nbcmd_select(sFromdate,sTodate : String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sFromdate,sTodate]);    //  Stype
   if (txGetF('MD_NBCMD_L1')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_STRING1'  , v_Dschdate);    // 퇴원일자 */
      GetFldVar ('S_STRING2'  , v_Patno   );    // 환자번호 */
      GetFldVar ('S_STRING3'  , v_Patname );    // 환자명   */
      GetFldVar ('S_STRING4'  , v_Telno1  );    // 전화번호 */
      GetFldVar ('S_STRING5'  , v_Hpno    );    // HP번호   */
      GetFldVar ('S_STRING6'  , v_Rslt    );    // 검사결과1*/
      GetFldVar ('S_STRING7'  , v_Smsyn   );    // 검사결과2*/
      GetFldVar ('S_STRING8'  , v_Admdate );    // 결과상한 */
      GetFldVar ('S_STRING9'  , v_Examcode);    // 결과하한 */
      GetFldVar ('S_STRING10'  ,v_Momname );    // T:전화,Y:SMS,'':미전송 */
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

///////////////////
//  신생아실 대사이상검사 SMS전송
///////////
function Hapipdlst.nbcmd_insert(rc : integer) : integer;
var
   i1 : integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   for i1 := 0 to rc - 1 do
   begin
   //FML Buffer Field Assign
      SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8');
      SetFldValue(i1,[v_Userid   [i1], // userid
                      v_Userip   [i1], // userip
                      v_Admdate  [i1], // 입원일자
                      v_Delidate [i1], // 전송일자
                      v_Sender   [i1], // 본낸곳 전화번호
                      v_Messg    [i1], // MESSAGE
                      v_Patno    [i1], // 환자번호
                      v_Hpno     [i1]]); // HP번호
   end;
   //Tuxedo Service Call
   if (txPutF('MD_NBCMD_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;
// 전화처리유무
function Hapipdlst.nbcmd_update(sPatno,sAdmdate,sGubun : String) : integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sPatno,     // 환자번호
                   sAdmdate,  // 입원일자
                   sGubun]);  // '' : 취소 'T' : 전화알림
   //Tuxedo Service Call
   if (txPutF('MD_NBCMD_U1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 맥스일자 대사이상검사
function Hapipdlst.nbcmd_maxdate : integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   if (txGetF('MD_NBCMD_L2')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_STRING1' , v_Fromdate);   // 퇴원일자 */
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//////////////////////////////////////
// 입원 등록 여부 체크
function Hapipdlst.check_stayyn(sPatno, sAdmdate : String) : integer;
begin
   Result := -1;
   //Pointer를 받아옴.
   txAlloc;
   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno, sAdmdate]);  // 환자번호, 입원일
   //Tuxedo Service Call
   if (txGetF('MD_IPDLS_S3')) then
   begin //Tuxedo Service Call
      GetFldVar ('S_STRING1' , v_Admdate);   // 입원일자 */
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;;
end;


////////////////////////////////////////////////////
// 병실관련 Hadrmcdct
////////////////////////////////////////////////////
function Hadrmcdct.list(s_ward : string) : integer;
begin
    Result := -1;
    txAlloc32;
    SetFldName('S_TYPE1');
    SetFldValue(0,[s_ward]);
    if (txGetF('MD_WDRMC_L1')) then
    begin
      GetFldVar ('S_STRING1',  v_room);
      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree;
    end;
end;
//총병상수
function Hadrmcdct.TotalBed(sWard, sDate: string): Integer;
begin
   Result := -1;
   txAlloc32;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sWard, sDate]);

   if (txGetF('MD_WDRMC_L2')) then begin // md_wdrmc_l2.pc
      GetFldVar ('S_STRING1', v_room);

      Result := GetRecordCnt32('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////
// 환자의 정보관련 Hadrmcdct
////////////////////////////////////////////////////
function Happatbat.list1(s_Patno,s_Admdate,s_Grpdate,s_Div : String) : integer;
begin
    Result := -1;
    txAlloc;

    SetFldName('S_CODE1;S_TYPE1;S_TYPE2;S_TYPE3');
    SetFldValue(0,[s_Div,s_Patno,s_Admdate,s_Grpdate]);
    if (txGetF('MD_GPPTI_L1')) then
    begin
      GetFldVar ('S_STRING1', v_Patname );
      GetFldVar ('S_STRING2', v_Wardno  );
      GetFldVar ('S_STRING3', v_Room    );
      GetFldVar ('S_STRING4', v_Admdate );
      GetFldVar ('S_STRING5', v_Meddept );
      GetFldVar ('S_STRING6', v_Chadr   );
      GetFldVar ('S_STRING7', v_Sex     );
      GetFldVar ('S_STRING8', v_Age     );
      GetFldVar ('S_STRING9', v_patgrp  );
      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
    end;
end;

// 종건일자 조회 2005.11.01 KIM SJ Add 건진일자 체크해서 출력 여부 체크
function Happatbat.getMsDate(ipatno,ipatname,iresno1,iresno2,ifdate,itodate,
                                     isFlag1,isFlag2,isFlag3,isFlag4,ishType: String) : Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_FLAG1;S_FLAG2;S_FLAG3;S_FLAG4;S_FLAG5');
   SetFldValue(0,[ipatno,ipatname,iresno1,iresno2,ifdate,itodate,isFlag1,isFlag2,isFlag3,isFlag4,ishType]);
   if txGetF('SU_PATBA_L1') then
   begin
      GetFldVar('S_NAME1' , v_patno    );
      GetFldVar('S_NAME20', v_msdate   ); // 종건/일건 날짜
      GetFldVar('S_NAME23', v_lastdate ); // 최근 내원일
      Result := GetRecordCnt('S_NAME1');
      txFree;
   end;
end;

function Hapcancrt.selectCancrt(sPatno : String) : integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_PATNO');
   SetFldValue(0, [sPatno]);
   if txGetF('MD_CANCR_S1') then
   begin
      GetFldVar('S_STRING1', v_LeavedtCnt);
      GetFldVar('S_STRING2', v_LeaveDate);
      GetFldVar('S_STRING3', v_FromDate);   //KimDaeYong 2013-10-04

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//암환자등록조회. KimDaeYong 2017-12-18
function Hapcancrt.List1(inPatno : String) : integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_PATNO');
   SetFldValue(0, [inPatno]);

   if txGetF('MD_CANCR_L1') then
   begin
      GetFldVar('S_STRING1', vPatno);
      GetFldVar('S_STRING2', vDiagcd);
      GetFldVar('S_STRING3', vFromdate);
      GetFldVar('S_STRING4', vTodate);
      GetFldVar('S_STRING5', vCancerno);
      GetFldVar('S_STRING6', vDiagseq);
      GetFldVar('S_STRING7', vReggubun);
      GetFldVar('S_STRING8', vStype);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////
//  정보보호내용 공유
////////////////////////////////////////////////////
function Happrivmt.GetPrivInfo(sPatno, sAdmdate, sIogubun, sMeddept, sMeddr : String) : Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_PATNO;S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0, [sPatno,sAdmdate,sIogubun,sMeddept,sMeddr]);
   if txGetF('MD_PRIVM_S1') then
   begin
      GetFldVar('S_STRING1', vPrvinfo);
      GetFldVar('S_STRING2', vTrtinfo);
      GetFldVar('S_STRING3', vAdminfo);
      GetFldVar('S_STRING4', vVisitdc);
      GetFldVar('S_STRING5', vDiagnm);
      GetFldVar('S_STRING6', vEtcInfo);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function Happrivmt.ListPrivInfo(sWardno : String) : Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1');
   SetFldValue(0, [sWardno]);
   if txGetF('MD_PRIVM_L1') then
   begin
      GetFldVar('S_STRING1', vRoomno);
      GetFldVar('S_STRING2', vPatno);
      GetFldVar('S_STRING3', vPatname);
      GetFldVar('S_STRING4', vPrvinfo);
      GetFldVar('S_STRING5', vTrtinfo);
      GetFldVar('S_STRING6', vAdminfo);
      GetFldVar('S_STRING7', vVisitdc);
      GetFldVar('S_STRING8', vDiagnm);
      GetFldVar('S_STRING9', vEtcInfo);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function Happrivmt.RegPrivInfo(sPatno,   sAdmdate, sIogubun, sMeddept, sMeddr,
                               sPrvinfo, sTrtinfo, sAdminfo, sVisitdc, sDiagnm, sEtcinfo,
                               sEditid,  sEditip : String) : Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_PATNO;S_STRING1;S_STRING2;S_STRING3;S_STRING4;'+
              'S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,   sAdmdate, sIogubun, sMeddept, sMeddr,
                  sPrvinfo, sTrtinfo, sAdminfo, sVisitdc, sDiagnm, sEtcinfo,
                  sEditid,  sEditip]);

   //Tuxedo Service Call
   if (txPutF('MD_PRIVM_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

////////////////////////////////////////////////////
// 유형보조코드 조회 Hadtypect   (2003.07.02)
////////////////////////////////////////////////////
function Hadtypect.ListType(sMeddate : string) : integer;
begin
    Result := -1;
    txAlloc32;
    SetFldName('S_TYPE1');
    SetFldValue(0,[sMeddate]);
    if (txGetF('MD_TYPEC_L1')) then
    begin
      GetFldVar ('S_CODE1',  sTypecd);
      GetFldVar ('S_NAME1',  sComcdnm);
      //조회건수 return
      Result := GetRecordCnt32('S_CODE1');
      txFree;
    end;
end;

function HmdConslt.ConsOpenynChange(PatNo,OrdDate, EditId, EditIp:String;OrdSeqNo:Integer):Integer;
var
  i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign

   SetFldName('S_PATNO;S_STRING1;S_EDITID;S_EDITIP;L_SEQNO1');
   SetFldValue(0,[PatNo,OrdDate, EditId, EditIp, OrdSeqNo]);

   //Tuxedo Service Call
   if (txPutF('MD_CONSL_U7')) then
   begin
      Result := 1;
      txFree;
   end;
end;


function HmdConslt.ListConsult10(Flag, md_userid, OrdDate, ToDate : String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[Flag,md_userid,OrdDate,ToDate]);

   //Tuxedo Service Call
   if (txGetF32('MD_CONSL_L10')) then
   begin
      GetFldVar32('S_STRING1' , sDeptcd );  // 부서코드
      GetFldVar32('S_STRING2' , sDeptNm );  // 부서명
      GetFldVar32('S_STRING3' , sChrNm  );  // 의사명
      GetFldVar32('S_STRING4' , sCnt1   );  // 미개봉
      GetFldVar32('S_STRING5' , sCnt2   );  // 미회신

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

function Hsdlabmst.ListLabinfo(Condi,userid:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[Condi,userid]);

   //Tuxedo Service Call
   if (txGetF32('MD_LABIF_L1')) then
   begin
      GetFldVar32('S_STRING1' , sMeddr );  // 의사코드
      GetFldVar32('S_STRING2' , sDeptcd);  // 부서코드
      GetFldVar32('S_STRING3' , sOrdcd );  // 임상시험 약품코드
      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;

end;


function Hccusermt.UserPasswdQuery(userid:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[userid]);

   //Tuxedo Service Call
   if (txGetF32('MD_USERPW_L1')) then
   begin
      GetFldVar32('S_STRING1' , sUserName );  // 사용자Id
      GetFldVar32('S_STRING2' , sPasswd   );  // 사용자Passwd

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;

   end;
end;

// icd코드/이름으로 찾기
function HmdExCode.ChkIcdCD(sType1,sType2:string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[sType1,sType2] );
   if (txGetF32('MD_ICDTC_L2')) then begin //Tuxedo Service Call
      GetFldVar32('S_STRING1',sCode);
      GetFldVar32('S_STRING2',sTypecd);
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;


function Hsddgcdmt.Listsdinfo(sOrdcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[sOrdcd]);

   //Tuxedo Service Call
   if (txGetF32('MD_SDINF_L1')) then
   begin
      GetFldVar32('S_STRING1' , sTablqty );  // Sddgcdmt

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;

end;

function Hsddgcdmt.Listsdinfo1(sOrdcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[sOrdcd]);

   //Tuxedo Service Call
   if (txGetF32('MD_SDINF_L2')) then
   begin
      GetFldVar32('S_STRING1' , sDayxyn );  // Sddgcdmt

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;

end;

function Hsddgcdmt.Listsdinfo2(sType1,sOrdcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[sType1,sOrdcd]);

   //Tuxedo Service Call
   if (txGetF32('MD_SDINF_L3')) then
   begin
      GetFldVar32('S_STRING1' , sLocls );  // Sddgcdmt

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;

end;


function Hsddgcdmt.ListAntiuse(sOrdcd, sPatno, sAdmdate,sType :String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType,sOrdcd,sPatno,sAdmdate]);

   //Tuxedo Service Call
   if (txGetF32('MD_SDINF_L4')) then
   begin
      GetFldVar32('S_STRING1' , sDrugcode );  // Sddgcdmt

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

function Hsddgcdmt.CheckHighAttMed(sOrdcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[sOrdcd]);

   //Tuxedo Service Call
   if (txGetF32('MD_DGCDM_S1')) then
   begin
      GetFldVar32('S_STRING1'  , sSimcodeYn );  // 유사코드
      GetFldVar32('S_STRING2'  , sSimpronYn );  // 유사발음
      GetFldVar32('S_STRING3'  , sSamigrdYn );  // 동일성분
      GetFldVar32('S_STRING4'  , sPrnOrdYn );   // PRN처방여부
      GetFldVar32('S_STRING5'  , sPrnOrdRmk);   // Prn처방기준&금기증
      GetFldVar32('S_STRING6'  , sDrugType);    // 약품분류
      GetFldVar32('S_STRING7'  , sPrnStpRmk);   // Prn실시기준.KimDaeYong 2019-05-02
      GetFldVar32('S_STRING8'  , sPrnCnt);      // Prn처방최대횟수.KimDaeYong 2019-05-02
      GetFldVar32('S_STRING9'  , sFhrisk);      // 낙상고위험약물여부.KimDaeYong 2019-07-02
      GetFldVar32('S_STRING10' , sHrisk);       // 고위험약물여부.KimDaeYong 2019-07-02

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//항응고제 처방 체크
//KimDaeYong 2014-01-22
function Hsddgcdmt.CheckAnticoagDg(vsPatno,vsOrddate:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[vsPatno, vsOrddate]);

   //Tuxedo Service Call
   if (txGetF32('MD_DGCDM_L1')) then    //md_dgcdm_l1.pc
   begin
      GetFldVar32('S_STRING1' , sDrugcode );  // 약품코드(Count를 위한 조회)
      GetFldVar32('S_STRING2' , sDrugname );  // 약품이름(Count를 위한 조회)

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//항생제여부 체크
//KimDaeYong 2015-08-04
function Hsddgcdmt.CheckAntibioDg(sOrdcd:String):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[sOrdcd]);

   //Tuxedo Service Call
   if (txGetF32('MD_DGCDM_S2')) then    //md_dgcdm_s2.pc
   begin
      GetFldVar32('S_STRING1' , sDrugcode );  // 약품코드(Count를 위한 조회)
      GetFldVar32('S_STRING2' , sDrugname );  // 약품이름(Count를 위한 조회)

      //조회건수 return
      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

/////////////////////////////////////////////////////
// 퇴원환자추후관리 추가 (2004.08.09) : MN003-01   //
/////////////////////////////////////////////////////

// 퇴원환자추후관리 조회
function HmdDschct.SelectDschct(HcDate,WardNo : String) : integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[HcDate,WardNo]);
   if (txGetF('MD_DSCHC_L1')) then
   begin
      GetFldVar ('L_CNT1', iDschCnt  );
      GetFldVar ('L_CNT2', iThkCnt   );
      GetFldVar ('L_CNT3', iPnsqCnt  );
      GetFldVar ('L_CNT4', iWmgmCnt  );
      GetFldVar ('L_CNT5', iPmgmCnt  );
      GetFldVar ('L_CNT6', iEtcCnt   );
      GetFldVar ('L_CNT7', iNorchCnt );
      GetFldVar ('L_CNT8', iTothcCnt );

      //조회건수 return
      Result := GetRecordCnt('L_CNT1');
      txFree;
   end;
end;

// 퇴원환자추후관리 현황조회
function HmdDschct.SelectDschct1(WardNo,Fromdate,Todate : String) : integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[WardNo,Fromdate,Todate]);
   if (txGetF('MD_DSCHC_L2')) then
   begin
      GetFldVar ('S_STRING1', sHcDate   );
      GetFldVar ('L_CNT1'   , iDschCnt  );
      GetFldVar ('L_CNT2'   , iThkCnt   );
      GetFldVar ('L_CNT3'   , iPnsqCnt  );
      GetFldVar ('L_CNT4'   , iWmgmCnt  );
      GetFldVar ('L_CNT5'   , iPmgmCnt  );
      GetFldVar ('L_CNT6'   , iEtcCnt   );
      GetFldVar ('L_CNT7'   , iNorchCnt );
      GetFldVar ('L_CNT8'   , iTothcCnt );

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 퇴원환자추후관리 입력
function HmdDschct.InsertDschct(HcDate,WardNo,EditId,EditIp : String;
                      DschCnt,ThkCnt,PnsqCnt,WmgmCnt,PmgmCnt,EtcCnt,NorchCnt,TothcCnt : Integer) : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;'
            + 'L_CNT1;L_CNT2;L_CNT3;L_CNT4;'
            + 'L_CNT5;L_CNT6;L_CNT7;L_CNT8;');

   SetFldValue(0,[HcDate,  WardNo, EditId,   EditIp,
                  DschCnt, ThkCnt, PnsqCnt,  WmgmCnt,
                  PmgmCnt, EtcCnt, NorchCnt, TothcCnt]);

   //Tmax Service Call
   if (txPutF('MD_DSCHC_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

// 퇴원환자추후관리 삭제
function HmdDschct.DeleteDschct(HcDate,WardNo : String) : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[HcDate,WardNo]);
   if (txPutF('MD_DSCHC_D1')) then
   begin //Tmax Service Call
      Result := 1;
      txFree;
   end;
end;

/////////////////////////////////////////////////////
// 연령제한 추가 (2004.10.14)                      //
/////////////////////////////////////////////////////

function Hsdbaehat.SelectIncomDrug : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //Tmax Service Call
   if (txGetF('MD_BAEHA_L1')) then
   begin
      GetFldVar('S_STRING1',  sDrugCd1);   // 약품코드1
      GetFldVar('S_STRING2',  sDrugCd2);   // 약품코드2
      GetFldVar('S_STRING3',  sTypeCd);    // 제한종류

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

/////////////////////////////////////////////////////
// 배합금기 추가 (2004.10.14)                      //
/////////////////////////////////////////////////////

function Hsdbaehat.SelectBaehab : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //Tmax Service Call
   if (txGetF('MD_BAEHA_L2')) then
   begin
      GetFldVar('S_STRING1',  sDrugCd1);   // 약품코드1
      GetFldVar('S_STRING2',  sDrugCd2);   // 약품코드2
      GetFldVar('S_STRING3',  sTypeCd);    // 제한종류

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

/////////////////////////////////////////////////////
// 저함량 약품 추가 ## 2007.08.14 김송주           //
/////////////////////////////////////////////////////

function Hsdbaehat.SelectLowDrug : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //Tmax Service Call
   if (txGetF('MD_BAEHA_L3')) then
   begin
      GetFldVar('S_STRING1',  sDrugCd1);   // 약품코드1
      GetFldVar('S_STRING2',  sDrugCd2);   // 함량
      GetFldVar('S_STRING3',  sDrugCd3);   // 포장단위
      GetFldVar('S_STRING4',  sTypeCd);    // 제한종류

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function Hsdbaehat.SelectAisplimt : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //Tmax Service Call
   if (txGetF('MD_AISPL_L1')) then
   begin
      GetFldVar('S_STRING1',  sDrugCd1);   // 약품코드1
      GetFldVar('S_STRING2',  sDrugCd2);   // 약품코드2
      GetFldVar('S_STRING3',  sTypeCd);    // 제한종류

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

/////////////////////////////////////////////////////
// 병동구분 추가 (2004.11.09)                      //
/////////////////////////////////////////////////////

function Hccdeptct.GetWardtype(sMedDept : String) : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   SetFldName('S_TYPE1');
   SetFldValue(0,[sMedDept]);
   //Tmax Service Call
   if (txGetF('MD_DEPTC_L3')) then
   begin
      GetFldVar('S_STRING1',  sWardtype);   // 병동구분

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;
//환자보험정보조회(피보험자,주민번호)
function Hapinsurt.GetInsuInfo(sPatno,sPattype : String) : integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sPattype]);
   //Tmax Service Call
   if (txGetF('MD_INSUR_S1')) then
   begin
      GetFldVar('S_STRING1',  sUnioncd);
      GetFldVar('S_STRING2',  sLicencno);
      GetFldVar('S_STRING3',  sInsname);
      GetFldVar('S_STRING4',  sInsresno);
      GetFldVar('S_STRING5',  sFromdate);
      GetFldVar('S_STRING6',  sTodate);

      //조회건수 return
      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

// 진료과코드 조회(내과전공의)
function HmdExCode.SelImDeptNm(sType1,sType2:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1,sType2]);  // 1:Userid 2:Meddate
   if (txGetF('MD_SCHDR_L4')) then begin //Tuxedo Service Call
      GetFldVar('S_CODE1'  ,sDeptCd);
      GetFldVar('S_CODE2'  ,sDeptNm);
      Result := GetRecordCnt('S_CODE1'); //Service를 수행하고 FML Buffer에 PUT된 Record수
      txFree;
   end;
end;

//낙상위험 환자 평가
function HmdDnPart.GetListData(Patno, ChkDate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, ChkDate]);

   if txGetF('MD_DNPAR_L2') then
   begin
      GetFldVar('S_STRING1', sChkDate );
      GetFldVar('S_STRING2', sChkItem1 );
      GetFldVar('S_STRING3', sChkItem2 );
      GetFldVar('S_STRING4', sChkItem3 );
      GetFldVar('S_STRING5', sChkItem4 );
      GetFldVar('S_STRING6', sChkItem5 );
      GetFldVar('S_STRING7', sChkItem6 );
      GetFldVar('S_STRING8', sChkItem7 );
      GetFldVar('S_STRING9', sChkItem8 );
      GetFldVar('S_STRING10', sChkItem9 );
      GetFldVar('S_STRING11', sChkItem10);
      GetFldVar('S_STRING12', sTotGrad );
      GetFldVar('S_STRING13', sEditName );
      GetFldVar('S_STRING14', sChkDay );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdDnPart.GetListDataNew(Patno, ChkDate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, ChkDate]);

   if txGetF('MD_DNPAR_L4') then
   begin
      GetFldVar('S_STRING1', sChkDate );
      GetFldVar('S_STRING2', sChkItem1 );
      GetFldVar('S_STRING3', sChkItem2 );
      GetFldVar('S_STRING4', sChkItem3 );
      GetFldVar('S_STRING5', sChkItem4 );
      GetFldVar('S_STRING6', sChkItem5 );
      GetFldVar('S_STRING7', sChkItem6 );
      GetFldVar('S_STRING8', sChkItem7 );
      GetFldVar('S_STRING9', sChkItem8 );
      GetFldVar('S_STRING10', sTotGrad );
      GetFldVar('S_STRING11', sEditName );
      GetFldVar('S_STRING12', sChkDay );
      //평가항목이 변경됨. 20150211.
      GetFldVar('S_STRING13', sChkItem9 );
      GetFldVar('S_STRING14', sChkItem10 );
      GetFldVar('S_STRING15', sChkItem11 );
      GetFldVar('S_STRING16', sChkItem12 );
      GetFldVar('S_STRING17', sChkItem13 );
      GetFldVar('S_STRING18', sChkItem14 );
      GetFldVar('S_STRING19', sTotGrad2 );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdDnPart.SetParData(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                              ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
                              ChkItem9, ChkItem10, TotGrad, EditID, EditIP: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15');
   SetFldValue(0, [Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
               ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
               ChkItem9, ChkItem10, TotGrad, EditID, EditIP]);

if txPutF('MD_DNPAR_I1') then Result := 1;
txFree;
end;

function HmdDnPart.SetParDataNew(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                                 ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
                                 TotGrad, EditID, EditIP, ChkItem9, ChkItem10, ChkItem11,
                                 ChkItem12, ChkItem13, ChkItem14, TotGrad2 : string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20');
   SetFldValue(0, [Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
               ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
               TotGrad, EditID, EditIP, ChkItem9,ChkItem10,ChkItem11,
               ChkItem12, ChkItem13, ChkItem14, TotGrad2]);

   if txPutF('MD_DNPAR_I2') then Result := 1;
   txFree;
end;

function HmdDnPart.GetListDataPedNew(Patno, ChkDate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, ChkDate]);

   if txGetF('MD_DNPAR_L6') then
   begin
      GetFldVar('S_STRING1', sChkDate );
      GetFldVar('S_STRING2', sChkItem1 );
      GetFldVar('S_STRING3', sChkItem2 );
      GetFldVar('S_STRING4', sChkItem3 );
      GetFldVar('S_STRING5', sChkItem4 );
      GetFldVar('S_STRING6', sChkItem5 );
      GetFldVar('S_STRING7', sChkItem6 );
      GetFldVar('S_STRING8', sChkItem7 );
      GetFldVar('S_STRING9', sChkItem8 );
      GetFldVar('S_STRING10', sChkItem9 );
      GetFldVar('S_STRING11', sTotGrad );
      GetFldVar('S_STRING12', sEditName );
      GetFldVar('S_STRING13', sChkDay );
      GetFldVar('S_STRING14', sChkItem10 );  //평가도구 변경. 20150820. kya.
      GetFldVar('S_STRING15', sChkItem11 );
      GetFldVar('S_STRING16', sChkItem12 );
      GetFldVar('S_STRING17', sChkItem13 );
      GetFldVar('S_STRING18', sChkItem14 );
      GetFldVar('S_STRING19', sChkItem15 );
      GetFldVar('S_STRING20', sChkItem16 );
      GetFldVar('S_STRING21', sTotGrad2 );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdDnPart.SetParDataPedNew(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                                 ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
                                 ChkItem9, TotGrad, EditID, EditIP,
                                 ChkItem10, ChkItem11, ChkItem12, ChkItem13,
                                 ChkItem14, ChkItem15, ChkItem16, TotGrad2 : string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;'+
              'S_STRING15;S_STRING16;S_STRING17;S_STRING18;'+
              'S_STRING19;S_STRING20;S_STRING21;S_STRING22');
   SetFldValue(0, [Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
               ChkItem4, ChkItem5, ChkItem6, ChkItem7, ChkItem8,
               ChkItem9, TotGrad, EditID, EditIP,
               ChkItem10, ChkItem11, ChkItem12, ChkItem13, ChkItem14,
               ChkItem15, ChkItem16, TotGrad2]);

   if txPutF('MD_DNPAR_I3') then Result := 1;
   txFree;
end;

function HmdDnBedt.GetListData(Patno, ChkDate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, ChkDate]);

   if txGetF('MD_DNBED_L3') then
   begin
      GetFldVar('S_STRING1', sChkDate );
      GetFldVar('S_STRING2', sChkItem1 );
      GetFldVar('S_STRING3', sChkItem2 );
      GetFldVar('S_STRING4', sChkItem3 );
      GetFldVar('S_STRING5', sChkItem4 );
      GetFldVar('S_STRING6', sChkItem5 );
      GetFldVar('S_STRING7', sChkItem6 );
      GetFldVar('S_STRING8', sTotGrad );
      GetFldVar('S_STRING9', sEditName );
      GetFldVar('S_STRING10', sChkDay );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdDnBedt.SetBedData(Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
                              ChkItem4, ChkItem5, ChkItem6,
                              TotGrad, EditID, EditIP: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11');
   SetFldValue(0, [Patno, ChkDate, ChkItem1, ChkItem2, ChkItem3,
               ChkItem4, ChkItem5, ChkItem6, TotGrad, EditID, EditIP]);

   if txPutF('MD_DNBED_I1') then Result := 1;

   txFree;
end;

// 통증
function HmdDpaint.SetDPainData(PatNo, Admdate, Chkdate, Examtype, Pain, Position,
                                Look, Strength, Tool, Frequency, Time, Painside,
                                Mediate1, Mediate2, Mediate3, Education, Editid, Editip,
                                Flacc1, Flacc2, Flacc3, Flacc4, Flacc5, sFlaccSum,
                                sNips1, sNips2, sNips3, sNips4, sNips5, sNips6, sNipsSum,sFprsSum :String):Integer;
var
  i: integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;'+
              'S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;'+
              'S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;S_STRING31;S_STRING32');
   SetFldValue(0, [Patno, Admdate, Chkdate, Examtype, Pain, Position, Look,
                   Strength, Tool, Frequency, Time, Painside, Mediate1, Mediate2, Mediate3,
                   Education, Editid, Editip, Flacc1, Flacc2, Flacc3, Flacc4, Flacc5, sFlaccSum,
                   sNips1, sNips2, sNips3, sNips4, sNips5, sNips6, sNipsSum,sFprsSum]);

   //Tuxedo Service Call
   if (txPutF('MD_DPAIN_I1')) then begin
      Result := 1;
      txFree;
   end;
end;

function HmdDpaint.GetDPainData(Patno, Admdate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, Admdate]);

   if txGetF('MD_DPAIN_S1') then
   begin
      GetFldVar('S_STRING1',  sChkdate   );
      GetFldVar('S_STRING2',  sExamType  );
      GetFldVar('S_STRING3',  sPainYn    );
      GetFldVar('S_STRING4',  sPosition  );
      GetFldVar('S_STRING5',  sLook      );
      GetFldVar('S_STRING6',  sStrength  );
      GetFldVar('S_STRING7',  sTool      );
      GetFldVar('S_STRING8',  sFrequency );
      GetFldVar('S_STRING9',  sPainTime  );
      GetFldVar('S_STRING10', sMediate1  );
      GetFldVar('S_STRING11', sMediate2  );
      GetFldVar('S_STRING12', sMediate3  );
      GetFldVar('S_STRING13', sPainSide  );
      GetFldVar('S_STRING14', sEducation );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdDpaint.GetDPainChkDate(Patno, Chkdate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, Chkdate]);

   if txGetF('MD_DPAIN_S2') then
   begin
      GetFldVar('S_STRING1',  sChkdate   );
      GetFldVar('S_STRING2',  sExamType  );
      GetFldVar('S_STRING3',  sPainYn    );
      GetFldVar('S_STRING4',  sPosition  );
      GetFldVar('S_STRING5',  sLook      );
      GetFldVar('S_STRING6',  sStrength  );
      GetFldVar('S_STRING7',  sTool      );
      GetFldVar('S_STRING8',  sFrequency );
      GetFldVar('S_STRING9',  sPainTime  );
      GetFldVar('S_STRING10', sMediate1  );
      GetFldVar('S_STRING11', sMediate2  );
      GetFldVar('S_STRING12', sMediate3  );
      GetFldVar('S_STRING13', sPainSide  );
      GetFldVar('S_STRING14', sEducation );
      GetFldVar('S_STRING15', sFlacc1    );
	  GetFldVar('S_STRING16', sFlacc2    );
	  GetFldVar('S_STRING17', sFlacc3    );
	  GetFldVar('S_STRING18', sFlacc4    );
	  GetFldVar('S_STRING19', sFlacc5    );
	  GetFldVar('S_STRING20', sFlaccSum  );
	  GetFldVar('S_STRING21', sNips1     );
	  GetFldVar('S_STRING22', sNips2     );
	  GetFldVar('S_STRING23', sNips3     );
	  GetFldVar('S_STRING24', sNips4     );
	  GetFldVar('S_STRING25', sNips5     );
	  GetFldVar('S_STRING26', sNips6     );
	  GetFldVar('S_STRING27', sNipsSum   );
	  GetFldVar('S_STRING28', sFprsSum   );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdDpaint.GetDPainDataList(Patno, Admdate: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [Patno, Admdate]);

   if txGetF('MD_DPAIN_L2') then
   begin
      GetFldVar('S_STRING1',  sChkdate   );
      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdOrderv.UpdateConf(cnt: Integer): Integer;
var
  i: integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7');

   for i := 0 to Cnt - 1 do begin
      SetFldValue(i, [String(sPatNo   [i]), String(sOrdDate [i]),
                      String(sOrdseqNo[i]), String(sConfid  [i]),
                      String(sTablenm [i]), String(sEditId  [i]),
                      String(sEditIp  [i])]);
   end;

   //Tuxedo Service Call
   if (txPutF('MD_ORDER_UE')) then begin
      Result := 1;
      txFree;
   end;
end;

function HmdRectrt.SaveDate(sPatno, sRecDate, sAdmDate, sItem1, sItem2,
                            sItem3, sItem4, sItem5, sItem6, sItem7,
                            sItem8, sItem9, sItem10, sItem11, sItem12,
                            sItem13, sItem14, sItem15, sItem16, sItem17,
                            sItem18, sItem19, sItem20, sItem21, sItem22,
                            sItem23, sItem24, sEditID, sEditIP, WeekDay : string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;' +
              'S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30');
   SetFldValue(0, [sPatno, sRecDate, sAdmDate, sItem1, sItem2,
                   sItem3, sItem4, sItem5, sItem6, sItem7,
                   sItem8, sItem9, sItem10, sItem11, sItem12,
                   sItem13, sItem14, sItem15, sItem16, sItem17,
                   sItem18, sItem19, sItem20, sItem21, sItem22,
                   sItem23, sItem24, sEditID, sEditIP, WeekDay]);

   if txPutF('MD_RECTR_I1') then Result := 1;
   txFree;
end;

function HmdRectrt.SearchDate(s_Patno, s_Recdate, s_Recto: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [s_Patno, s_Recdate, s_Recto]);

   if txGetF('MD_RECTR_L1') then begin
      GetFldVar ('S_STRING1', shygcare1 );
      GetFldVar ('S_STRING2', shygcare2 );
      GetFldVar ('S_STRING3', shygcare3 );
      GetFldVar ('S_STRING4', shygcare4 );
      GetFldVar ('S_STRING5', shygcare5 );
      GetFldVar ('S_STRING6', smovcare1 );
      GetFldVar ('S_STRING7', smovcare2 );
      GetFldVar ('S_STRING8', sdietsup1 );
      GetFldVar ('S_STRING9', sdietsup2 );
      GetFldVar ('S_STRING10', sdietsup3 );
      GetFldVar ('S_STRING11', schkplo1 );
      GetFldVar ('S_STRING12', schkplo2 );
      GetFldVar ('S_STRING13', sevacare1 );
      GetFldVar ('S_STRING14', sevacare2 );
      GetFldVar ('S_STRING15', stubeman );
      GetFldVar ('S_STRING16', sevacare3 );
      GetFldVar ('S_STRING17', srousebr1 );
      GetFldVar ('S_STRING18', srousebr2 );
      GetFldVar ('S_STRING19', ssafecare1);
      GetFldVar ('S_STRING20', ssafecare2);
      GetFldVar ('S_STRING21', ssafecare3);
      GetFldVar ('S_STRING22', shurtcare1);
      GetFldVar ('S_STRING23', shurtcare2);
      GetFldVar ('S_STRING24', shurtcare3);
      GetFldVar ('S_STRING25', sRecDate );
      GetFldVar ('S_STRING26', sAdmdate );

      Result := GetRecordCnt32('S_STRING1');
   end;

   txFree;
end;

/////////////////////////////////////////////////////
// 호스피스 간호기록지 (2005.04.21)                //
/////////////////////////////////////////////////////
function HmdHprect.ListHPrect(sType1, sType2, sType3, sType4, sType5,
sType6: string): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0, [sType1, sType2, sType3, sType4, sType5, sType6]);

   if txGetF('MD_HPREC_L1') then begin
      GetFldVar('S_STRING1' , sActDate );
      GetFldVar('S_STRING2' , sActSeqno);
      GetFldVar('S_STRING3' , sActTime );
      GetFldVar('S_STRING4' , sActText );
      GetFldVar('S_STRING5' , sExecNM );
      GetFldVar('S_STRING6' , sExecID );

      Result := GetRecordCnt('S_STRING1');
   end;

   txFree;
end;

function HmdHprect.InsHPrect(Cnt:Integer):Integer;
var
i : Integer;
begin
   Result := -1;
   txAlloc32;

   SetFldName32('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;' +
   'S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11');

   for i := 0 to Cnt-1 do begin
      SetFldValue32(i,[String(sType [i]),String(sPatNo [i]),String(sActDate [i]),
      String(sActseqno[i]),String(sAdmDate [i]),String(sActTime [i]),
      String(sActText [i]),String(sExecId [i]),String(sWardno [i]),
      String(sRoomno [i]),String(sEditId [i]),String(sEditIp [i])]);
   end;

   if (txPutF32('MD_HPREC_I1')) then begin
      Result := 1;
   end;

   txFree32;
end;

function HmdObdept.InsertObdept(sPatno,     sAdmdate,   sAge,       sLmp,       sEdc,
                                sPmp,       sWks,       sLabBgn,    sCont,      sInter,
                                sDurat,     sChar,      sFHR,       sFhrshow,   sFhrbleed,
                                sMembrane,  sMemdate,   sBldRH,     sBldAbo,    sXrayDt,
                                sXrayRs,    sPreWtg,    sPreNav,    sPreHyper,  sPreHache,
                                sPreEdema,  sPreBleed,  sOthComp,   sPastPara,  sPastAc,
                                sPastHerb,  sPastIron,  sMenache,   sMenAge,    sMensCycl,
                                sMensIntv,  sMensDula,  sMensAmt,   sSurgHis,   sFmHis,
                                sWeight,    sBodytyp,   sHead,      sEars,      sNosnThr,
                                sMouth,     sTeeth,     sDenture,   sThyroid,   sBreast,
                                sNipple,    sLung,      sHeart,     sAbdoMen,   sBacnspn,
                                sHOF,       sPresent,   sPosition,  sFethfhr,   sFetaLoc,
                                sFetalImp1, sFetalImp2, sFetalImp3, sFetalImp4, sFetalImp5,
                                sBydr,      sAssistnr,  sDelvdate,  sPlcdelvt,  sPrepscrb,
                                sPrepdrap,  sPrepcath,  sPreppos,   sPrepstat,  sPrepdila,
                                sAnesth,    sAnedr,     sDelvspon,  sDelvtxt,   sPlaspon,
                                sPlatxt,    sPlacond,   sBldloss,   sEpst,      sLacerat,
                                sReptpsut,  sMeddelv,   sPdelfun,   sPdelvbp,   sPdelvp,
                                sInfantsx,  sInfantwt,  sInfntabn,  sRespir,    sRespiro2,
                                sImcarecd,  sImcareye,  sImcarbph,  sAPgar1,    sAPgar2,
                                sAPgar3,    sAPgar4,    sAPgar5,    sDiscDate,  sDiscuper,
                                sDisccomp1, sDsbreast,  sDsnipple,  sNursing,   sUtinvol,
                                sUtinvlab,  sLochiana,  sLochiaab,  sCondperi,  sCondepis,
                                sDisccomp2, sRemark,    sAdfmyn,    sSigndr,    sEditid,
                                sEditip,    sAPgar6,    sAPgar7,    sAPgar8,    sAPgar9,
                                sAPgar10,   sDelvdate2, sDelvdate3, sInfantSx2, sInfantSx3,
                                sInfantwt2, sInfantwt3, sInfntabn2, sInfntabn3, sRespir2,
                                sRespir3,   sRespiro2B, sRespiro2C, sAPgarm,    sAPgarm2: string): Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'      +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'     +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;' +
              'S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;' +
              'S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;' +
              'S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;' +
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;' +
              'S_STRING56;S_STRING57;S_STRING58;S_STRING59;S_STRING60;' +
              'S_STRING61;S_STRING62;S_STRING63;S_STRING64;S_STRING65;' +
              'S_STRING66;S_STRING67;S_STRING68;S_STRING69;S_STRING70;' +
              'S_STRING71;S_STRING72;S_STRING73;S_STRING74;S_STRING75;' +
              'S_STRING76;S_STRING77;S_STRING78;S_STRING79;S_STRING80;' +
              'S_STRING81;S_STRING82;S_STRING83;S_STRING84;S_STRING85;' +
              'S_STRING86;S_STRING87;S_STRING88;S_STRING89;S_STRING90;' +
              'S_STRING91;S_STRING92;S_STRING93;S_STRING94;S_STRING95;' +
              'S_STRING96;S_STRING97;S_STRING98;S_STRING99;S_STRING100;' +
              'S_STRING101;S_STRING102;S_STRING103;S_STRING104;S_STRING105;' +
              'S_STRING106;S_STRING107;S_STRING108;S_STRING109;S_STRING110;' +
              'S_STRING111;S_STRING112;S_STRING113;S_STRING114;S_STRING115;' +
              'S_STRING116;S_STRING117;S_STRING118;S_STRING119;S_STRING120;' +
              'S_STRING121;S_STRING122;S_STRING123;S_STRING124;S_STRING125;' +
              'S_STRING126;S_STRING127;S_STRING128;S_STRING129;S_STRING130;' +
              'S_STRING131;S_STRING132;S_STRING133;S_STRING134;S_STRING135;' +
              'S_STRING136;S_STRING137;S_STRING138;S_STRING139;S_STRING140;');
   SetFldValue(0, [sPatno,     sAdmdate,   sAge,       sLmp,       sEdc,
                   sPmp,       sWks,       sLabBgn,    sCont,      sInter,
                   sDurat,     sChar,      sFHR,       sFhrshow,   sFhrbleed,
                   sMembrane,  sMemdate,   sBldRH,     sBldAbo,    sXrayDt,
                   sXrayRs,    sPreWtg,    sPreNav,    sPreHyper,  sPreHache,
                   sPreEdema,  sPreBleed,  sOthComp,   sPastPara,  sPastAc,
                   sPastHerb,  sPastIron,  sMenache,   sMenAge,    sMensCycl,
                   sMensIntv,  sMensDula,  sMensAmt,   sSurgHis,   sFmHis,
                   sWeight,    sBodytyp,   sHead,      sEars,      sNosnThr,
                   sMouth,     sTeeth,     sDenture,   sThyroid,   sBreast,
                   sNipple,    sLung,      sHeart,     sAbdoMen,   sBacnspn,
                   sHOF,       sPresent,   sPosition,  sFethfhr,   sFetaLoc,
                   sFetalImp1, sFetalImp2, sFetalImp3, sFetalImp4, sFetalImp5,
                   sBydr,      sAssistnr,  sDelvdate,  sPlcdelvt,  sPrepscrb,
                   sPrepdrap,  sPrepcath,  sPreppos,   sPrepstat,  sPrepdila,
                   sAnesth,    sAnedr,     sDelvspon,  sDelvtxt,   sPlaspon,
                   sPlatxt,    sPlacond,   sBldloss,   sEpst,      sLacerat,
                   sReptpsut,  sMeddelv,   sPdelfun,   sPdelvbp,   sPdelvp,
                   sInfantsx,  sInfantwt,  sInfntabn,  sRespir,    sRespiro2,
                   sImcarecd,  sImcareye,  sImcarbph,  sAPgar1,    sAPgar2,
                   sAPgar3,    sAPgar4,    sAPgar5,    sDiscDate,  sDiscuper,
                   sDisccomp1, sDsbreast,  sDsnipple,  sNursing,   sUtinvol,
                   sUtinvlab,  sLochiana,  sLochiaab,  sCondperi,  sCondepis,
                   sDisccomp2, sRemark,    sAdfmyn,    sSigndr,    sEditid,
                   sEditip,    sAPgar6,    sAPgar7,    sAPgar8,    sAPgar9,
                   sAPgar10,   sDelvdate2, sDelvdate3, sInfantSx2, sInfantSx3,
                   sInfantwt2, sInfantwt3, sInfntabn2, sInfntabn3, sRespir2,
                   sRespir3,   sRespiro2B, sRespiro2C, sAPgarm,    sAPgarm2]);

   if txPutF('MD_OBDEP_I1') then       // md_obdep_i1.pc
       Result := 1;
   txFree;
end;

function HmdObdept.ListmdObdept(sType1, sType2: string): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1, sType2]);

   if txGetF('MD_OBDEP_L1') then begin     // md_obdep_l1.pc
      GetFldVar('S_STRING1'   , sPatno         );
      GetFldVar('S_STRING2'   , sAdmdate       );
      GetFldVar('S_STRING3'   , sAge           );
      GetFldVar('S_STRING4'   , sLmp           );
      GetFldVar('S_STRING5'   , sPmp           );
      GetFldVar('S_STRING6'   , sEdc           );
      GetFldVar('S_STRING7'   , sLaborbgn      );
      GetFldVar('S_STRING8'   , sContract      );
      GetFldVar('S_STRING9'   , sInterval      );
      GetFldVar('S_STRING10'  , sDuration      );
      GetFldVar('S_STRING11'  , sCharact       );
      GetFldVar('S_STRING12'  , sFhr           );
      GetFldVar('S_STRING13'  , sFhrshow       );
      GetFldVar('S_STRING14'  , sFhrbleed      );
      GetFldVar('S_STRING15'  , sMembrane      );
      GetFldVar('S_STRING16'  , sMemdate       );
      GetFldVar('S_STRING17'  , sBldrh         );
      GetFldVar('S_STRING18'  , sBldabo        );
      GetFldVar('S_STRING19'  , sXraydate      );
      GetFldVar('S_STRING20'  , sXrayrslt      );
      GetFldVar('S_STRING21'  , sPrewt         );
      GetFldVar('S_STRING22'  , sPrewtg        );
      GetFldVar('S_STRING23'  , sPrenav        );
      GetFldVar('S_STRING24'  , sPrehyper      );
      GetFldVar('S_STRING25'  , sPrehache      );
      GetFldVar('S_STRING26'  , sPreedema      );
      GetFldVar('S_STRING27'  , sPrebleed      );
      GetFldVar('S_STRING28'  , sOthcomp       );
      GetFldVar('S_STRING29'  , sPastpara      );
      GetFldVar('S_STRING30'  , sPastal        );
      GetFldVar('S_STRING31'  , sPastherb      );
      GetFldVar('S_STRING32'  , sPastiron      );
      GetFldVar('S_STRING33'  , sMenache       );
      GetFldVar('S_STRING34'  , sMarriage      );
      GetFldVar('S_STRING35'  , sMenscycl      );
      GetFldVar('S_STRING36'  , sMensintv      );
      GetFldVar('S_STRING37'  , sMensdula      );
      GetFldVar('S_STRING38'  , sMensamt       );
      GetFldVar('S_STRING39'  , sSurghis       );
      GetFldVar('S_STRING40'  , sFmhis         );
      GetFldVar('S_STRING41'  , sWeight        );
      GetFldVar('S_STRING42'  , sBodytyp       );
      GetFldVar('S_STRING43'  , sHead          );
      GetFldVar('S_STRING44'  , sEars          );
      GetFldVar('S_STRING45'  , sNosnthr       );
      GetFldVar('S_STRING46'  , sMouth         );
      GetFldVar('S_STRING47'  , sTeeth         );
      GetFldVar('S_STRING48'  , sDenture       );
      GetFldVar('S_STRING49'  , sThyroid       );
      GetFldVar('S_STRING50'  , sBreast        );
      GetFldVar('S_STRING51'  , sNipple        );
      GetFldVar('S_STRING52'  , sLung          );
      GetFldVar('S_STRING53'  , sHeart         );
      GetFldVar('S_STRING54'  , sAbdomen       );
      GetFldVar('S_STRING55'  , sBacnspn       );
      GetFldVar('S_STRING56'  , sHof           );
      GetFldVar('S_STRING57'  , sPresent       );
      GetFldVar('S_STRING58'  , sPosition      );
      GetFldVar('S_STRING59'  , sFethfhr       );
      GetFldVar('S_STRING60'  , sFetaloc       );
      GetFldVar('S_STRING61'  , sFetalimp1     );
      GetFldVar('S_STRING62'  , sBydr          );
      GetFldVar('S_STRING63'  , sAssistnr      );
      GetFldVar('S_STRING64'  , sDelvdate      );
      GetFldVar('S_STRING65'  , sPlcdelvt      );
      GetFldVar('S_STRING66'  , sPrepscrb      );
      GetFldVar('S_STRING67'  , sPrepdrap      );
      GetFldVar('S_STRING68'  , sPrepcath      );
      GetFldVar('S_STRING69'  , sPreppos       );
      GetFldVar('S_STRING70'  , sPrepstat      );
      GetFldVar('S_STRING71'  , sPrepdila      );
      GetFldVar('S_STRING72'  , sAnesth        );
      GetFldVar('S_STRING73'  , sAnenur        );
      GetFldVar('S_STRING74'  , sDelvspon      );
      GetFldVar('S_STRING75'  , sDelvtxt       );
      GetFldVar('S_STRING76'  , sPlaspon       );
      GetFldVar('S_STRING77'  , sPlatxt        );
      GetFldVar('S_STRING78'  , sPlacond       );
      GetFldVar('S_STRING79'  , sBldloss       );
      GetFldVar('S_STRING80'  , sEpst          );
      GetFldVar('S_STRING81'  , sLacerat       );
      GetFldVar('S_STRING82'  , sReptpsut      );
      GetFldVar('S_STRING83'  , sMeddelv       );
      GetFldVar('S_STRING84'  , sPdelvbp       );
      GetFldVar('S_STRING85'  , sPdelvp        );
      GetFldVar('S_STRING86'  , sInfantsx      );
      GetFldVar('S_STRING87'  , sInfantwt      );
      GetFldVar('S_STRING88'  , sInfntabn      );
      GetFldVar('S_STRING89'  , sRespir        );
      GetFldVar('S_STRING90'  , sRespiro2      );
      GetFldVar('S_STRING91'  , sImcarecd      );
      GetFldVar('S_STRING92'  , sImcareye      );
      GetFldVar('S_STRING93'  , sImcarbph      );
      GetFldVar('S_STRING94'  , sApgar1        );
      GetFldVar('S_STRING95'  , sApgar2        );
      GetFldVar('S_STRING96'  , sApgar3        );
      GetFldVar('S_STRING97'  , sApgar4        );
      GetFldVar('S_STRING98'  , sApgar5        );
      GetFldVar('S_STRING99'  , sApgarm        );
      GetFldVar('S_STRING100' , sDiscdate      );
      GetFldVar('S_STRING101' , sDiscuper      );
      GetFldVar('S_STRING102' , sDisccomp1     );
      GetFldVar('S_STRING103' , sDsbreast      );
      GetFldVar('S_STRING104' , sDsnipple      );
      GetFldVar('S_STRING105' , sNursing       );
      GetFldVar('S_STRING106' , sUtinvol       );
      GetFldVar('S_STRING107' , sUtinvlab      );
      GetFldVar('S_STRING108' , sLochiana      );
      GetFldVar('S_STRING109' , sLochiaab      );
      GetFldVar('S_STRING110' , sCondperi      );
      GetFldVar('S_STRING111' , sCondepis      );
      GetFldVar('S_STRING112' , sDisccomp2     );
      GetFldVar('S_STRING113' , sRemark        );
      GetFldVar('S_STRING114' , sAdfmyn        );
      GetFldVar('S_STRING115' , sSigndr        );
      GetFldVar('S_STRING116' , sGestWks       );
      GetFldVar('S_STRING117' , sFetalimp2     );
      GetFldVar('S_STRING118' , sFetalimp3     );
      GetFldVar('S_STRING119' , sFetalimp4     );
      GetFldVar('S_STRING120' , sFetalimp5     );
      GetFldVar('S_STRING121' , sPdelfun       );
      GetFldVar('S_STRING122' , sApgar6        );
      GetFldVar('S_STRING123' , sApgar7        );
      GetFldVar('S_STRING124' , sApgar8        );
      GetFldVar('S_STRING125' , sApgar9        );
      GetFldVar('S_STRING126' , sApgar10       );
      GetFldVar('S_STRING127' , sSigndrcd      );
      GetFldVar('S_STRING128' , sDelvdate2     );
      GetFldVar('S_STRING129' , sDelvdate3     );
      GetFldVar('S_STRING130' , sInfantsx2     );
      GetFldVar('S_STRING131' , sInfantsx3     );
      GetFldVar('S_STRING132' , sInfantwt2     );
      GetFldVar('S_STRING133' , sInfantwt3     );
      GetFldVar('S_STRING134' , sInfntabn2     );
      GetFldVar('S_STRING135' , sInfntabn3     );
      GetFldVar('S_STRING136' , sRespir2       );
      GetFldVar('S_STRING137' , sRespir3       );
      GetFldVar('S_STRING138' , sRespiro2b     );
      GetFldVar('S_STRING139' , sRespiro2c     );
      GetFldVar('S_STRING140' , sApgarm2	   ); 

      Result := GetRecordCnt('S_STRING1');
   end;

   txFree;
end;

function HmdOblabt.ListmdOblabt(sType1, sType2: string): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0, [sType1, sType2]);

   if txGetF('MD_OBLAB_L1') then begin     // md_oblab_l1.pc
      GetFldVar('S_STRING1'   , sPatno    );
      GetFldVar('S_STRING2'   , sAdmdate  );
      GetFldVar('S_STRING3'   , sRegdate  );
      GetFldVar('S_STRING4'   , sAge      );
      GetFldVar('S_STRING5'   , sGarvid   );
      GetFldVar('S_STRING6'   , sPartur   );
      GetFldVar('S_STRING7'   , sDrops    );
      GetFldVar('S_STRING8'   , sGestwrk  );
      GetFldVar('S_STRING9'   , sPresenta );
      GetFldVar('S_STRING10'  , sStation  );
      GetFldVar('S_STRING11'  , sDilatati );
      GetFldVar('S_STRING12'  , sEffacemn );
      GetFldVar('S_STRING13'  , sMembrane );
      GetFldVar('S_STRING14'  , sInterval );
      GetFldVar('S_STRING15'  , sDuration );
      GetFldVar('S_STRING16'  , sCharacter);
      GetFldVar('S_STRING17'  , sRate     );
      GetFldVar('S_STRING18'  , sLocation );
      GetFldVar('S_STRING19'  , sBldpres  );
      GetFldVar('S_STRING20'  , sPulse    );

      Result := GetRecordCnt('S_STRING1');
   end;
   txFree;
end;

function HmdOblabt.InsertmdOblabt(sPatno, sAdmdate, sRegdate, sAge, sGarvid,
                                  sPartur, sDrops, sGestwrk, sPresenta, sStation,
                                  sDilatati, sEffacemn, sMembrane, sInterval, sDuration,
                                  sCharacter, sRate, sLocation, sBldpres, sPulse,
                                  sEditid, sEditip: string): Integer;
begin
    Result := -1;
    txAlloc;
    SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'      +
               'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'     +
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
               'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
               'S_STRING21;S_STRING22;');
   SetFldValue(0, [sPatno, sAdmdate, sRegdate, sAge, sGarvid,
                   sPartur, sDrops, sGestwrk, sPresenta, sStation,
                   sDilatati, sEffacemn, sMembrane, sInterval, sDuration,
                   sCharacter, sRate, sLocation, sBldpres, sPulse,
                   sEditid, sEditip]);
    if txPutF('MD_OBLAB_I1') then       // md_oblab_i1.pc
       Result := 1;
    txFree;
end;

function HmdOblabt.UpdatemdOblabt(sPatno, sAdmdate, sRegdate, sAge, sGarvid,
                                  sPartur, sDrops, sGestwrk, sPresenta, sStation,
                                  sDilatati, sEffacemn, sMembrane, sInterval, sDuration,
                                  sCharacter, sRate, sLocation, sBldpres, sPulse,
                                  sEditid, sEditip: string): Integer;
begin
    Result := -1;
    txAlloc;
    SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'      +
               'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'     +
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
               'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
               'S_STRING21;S_STRING22;');
   SetFldValue(0, [sPatno, sAdmdate, sRegdate, sAge, sGarvid,
                   sPartur, sDrops, sGestwrk, sPresenta, sStation,
                   sDilatati, sEffacemn, sMembrane, sInterval, sDuration,
                   sCharacter, sRate, sLocation, sBldpres, sPulse,
                   sEditid, sEditip]);
    if txPutF('MD_OBLAB_U1') then       // md_oblab_u1.pc
       Result := 1;
    txFree;
end;

function HmdOblabt.DeletemdOblabt(sPatno, sAdmdate, sRegdate:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0,[sPatno,sAdmdate,sRegdate] );

   if (txPutF('MD_OBLAB_D1')) then begin // md_oblab_d1.pc
      Result := 1;
      txFree;
   end;
end;

//예수병원 김송주(양석원씨꺼) 추가 (환자 번호로 조회)
function HSICDCHRT.cdchrtSelect(Patno:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1');
   SetFldValue(0,[Patno]);
   if txGetF('SI_CDCHRT_S1') then  // si_cdchrt_s1.pc
   begin
     Result := GetRecordCnt('S_STRING1');

     GetFldVar32('S_STRING1',  sPatno  );      //환자명
     GetFldVar32('S_STRING2',  sIoflag );      //주민번호1
     GetFldVar32('S_STRING3',  sSeqno  );      //주민번호2
     GetFldVar32('S_STRING4',  sKindcd );      //생년월일
     GetFldVar32('S_STRING5',  sCdno   );      //성별
     GetFldVar32('S_STRING6',  sRemark );      //비고
     txFree;
   end;
end;

/////////////////////////////////////////////////////////////////
// HmdCertUsr : 사용자 전자인증서 조회 Class 추가     SONGLIM_THOMA
/////////////////////////////////////////////////////////////////
//사용자 인증서정보 조회(MD_CERT_S1)
function HmdCertUsr.CertSearch (userid: String): Integer;
begin
     Result := -1;
     txAlloc;
     SetFldName('S_CODE1');
     SetFldValue(0,[userid]);

     if txGetF('MD_CERT_S1') then
     begin
          Result := GetRecordCnt('S_CODE2');
          GetFldVar('S_CODE2',    sUserid);
          GetFldVar('S_CODE3',    sSignCert);
          GetFldVar('S_CODE4',  sSignPriKey);
          GetFldVar('S_CODE5',   sChange_Tm);
          GetFldVar('S_CODE6',      sCertPW);
          GetFldVar('S_CODE7',      sResNo);
     end;
     txFree;
end;

//인증테이블의 인증서 조회용             SONGLIM_THOMA
function HmdCertInj.CertSearch (userid,SerialNo,SubjectDN: String): Integer;
begin
     Result := -1;
     txAlloc32;
     SetFldName32('S_CODE1;S_CODE2;S_CODE3');
     SetFldValue32(0,[userid,SerialNo,SubjectDN]);

     if txGetF32('MD_INJCT_S1') then
     begin
          Result := GetRecordCnt32('S_CODE4');
          GetFldVar32('S_CODE4',    sUserid);
          GetFldVar32('S_CODE5',    sSerialNo);
          GetFldVar32('S_CODE6',  sSubjectDN);
          GetFldVar32('S_CODE7',   sSignCert);
     end;

     txFree32;
end;

// APCLASS1 내용 가져다 씀 병상수 조회
function HAPRMCDCT.RMCDC_S3: Integer;
begin
   Result := -1;
   txAlloc;

   if txGetF('AD_RMCDC_S3') then
   begin
      Result := GetRecordCnt('S_WARDNO');

      GetFldvar('L_CNT1'    ,  lBedcnt   );
      GetFldvar('L_CNT2'    ,  lStaycnt  );
      GetFldvar('L_CNT3'    ,  lDschecnt );
      GetFldvar('L_CNT4'    ,  lAdmecnt  );
      GetFldvar('L_CNT5'    ,  lTadmcnt  );
      GetFldvar('S_WARDNO'  ,  sWardno   );
      GetFldvar('S_NAME1'   ,  sWardnonm );

      txFree;
   end
   else
   begin
      if GetTxUrCode = 1403 then
         Result := 0
      else
         Result := -1;
   end;
end;

function HMDAPIPDT.ListDeptStayCnt: Integer;
begin
   Result := -1;
   txAlloc;

   if txGetF('MD_APIPDLS_L1') then
   begin
      Result := GetRecordCnt('S_CODE1');

      GetFldvar('S_CODE1'    ,  sPatCnt   );
      GetFldvar('S_CODE2'    ,  sDeptNm   );
      GetFldvar('S_CODE3'    ,  sBedCnt   );
      GetFldvar('S_CODE4'    ,  sBedRate  );
      GetFldvar('S_CODE5'    ,  sAdmCnt   );
      GetFldvar('S_CODE6'    ,  sDschCnt  );
      GetFldvar('S_CODE7'    ,  sOpdCnt   );    //최근평일외래수.KimDaeYong 2020-01-22

      txFree;
   end;
end;


function HmdIcudpt.GetCprdpt(sType1, sFromDate, sToDate,
  sIcuCd: String): Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue32(0,[sType1,sFromDate,sToDate,sIcuCd]);
   if (txGetF32('MD_CPRDP_L1')) then
   begin //Tuxedo Service Call
      GetFldVar32 ('S_CODE1',  sRegdate);
      GetFldVar32 ('S_CODE2',  sPatNo);
      GetFldVar32 ('S_CODE3',  sPatname);
      GetFldVar32 ('S_CODE4',  sSex);
      GetFldVar32 ('S_CODE5',  sBirtdate);
      GetFldVar32 ('S_CODE6',  sMeddept);
      GetFldVar32 ('S_CODE7',  sAdmdate);
      GetFldVar32 ('S_CODE8',  sRecdate);
      GetFldVar32 ('S_CODE9',  sTeamcondate);
      GetFldVar32 ('S_CODE10', sTeamarrdate);
      GetFldVar32 ('S_CODE11', sOragndate);
      GetFldVar32 ('S_CODE12', sFirdrugdate);
      GetFldVar32 ('S_CODE13', sCprstartdate);
      GetFldVar32 ('S_CODE14', sCprstopdate);
      GetFldVar32 ('S_CODE15', sCprtime);
      GetFldVar32 ('S_CODE16', sCprresult);
      GetFldVar32 ('S_CODE17', sDiagnm);
      GetFldVar32 ('S_CODE18', sChadrnm);
      GetFldVar32 ('S_CODE19', sChadr);
      GetFldVar32 ('S_CODE20', sGendrnm);
      GetFldVar32 ('S_CODE21', sGendr);
      GetFldVar32 ('S_CODE22', sGennurnm);
      GetFldVar32 ('S_CODE23', sGennur);
      GetFldVar32 ('S_CODE24', sRemark);

      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdIcudpt.InsCprdpt(sType1, sPatNo, sAdmDate, sRegDate, sMeddept,
  sWardno, sRoomno, sChadr, sGendr, sRecdate, sTeamcondate, sTeamarrdate,
  sOragndate, sFirdrugdate, sCprstartdate, sCprstopdate, sCprtime,
  sCprresult, sDiagnm, sRemark, sEditid, sEditip: String): Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;'
            + 'S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;'
            + 'S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;S_CODE21');

   SetFldValue(0,[sType1,sPatno,sAdmdate,sRegdate,sMeddept,sWardNo,sRoomNo,
                  sChaDr,sGenDr,sRecdate, sTeamcondate, sTeamarrdate,
                  sOragndate, sFirdrugdate, sCprstartdate, sCprstopdate, sCprtime, sCprresult, sDiagnm,sRemark,sEditId,sEditIp]);

   //Tuxedo Service Call
   if (txPutF('MD_CPRDP_I1')) then
   begin
      Result := 1;
      txFree;
   end;
end;

function Hmddurtxt.InsertDurText(sPatno,sOrddate,sMeddate,sMeddr,sPatsect,sDurtext,sType:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7');
   SetFldValue(0,[sPatno,sOrddate,sMeddate,sMeddr,sPatsect,sDurtext,sType]);

   if (txPutF('MD_DURTX_I1')) then
   begin
      Result :=1;
      txFree;
   end;
end;

function Hmddurckt.CheckDurBaehap(sDrug1,sDrug2:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sDrug1,sDrug2]);

   if txGetF('MD_DURCK_L1') then
   begin
        Result := GetRecordCnt('S_STRING1');
        GetFldVar('S_STRING1',    sIgrdcode1);
        GetFldVar('S_STRING2',    sIgrdcode2);
   end;

   txFree;
end;

function Hmddurckt.CheckDurIncomDrug(sDrug1:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_CODE1');
   SetFldValue(0,[sDrug1]);

   if txGetF('MD_DURCK_L2') then
   begin
        Result := GetRecordCnt('S_STRING1');
        GetFldVar('S_STRING1',    sIgrdcode1);
        GetFldVar('S_STRING2',    sSpcAge);
        GetFldVar('S_STRING3',    sSpcAgeUnit);
   end;

   txFree;
end;

function Hmddurckt.CheckDurImBuDrug(sDrug1:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_CODE1');
   SetFldValue(0,[sDrug1]);

   if txGetF('MD_DURCK_L4') then
   begin
        Result := GetRecordCnt('S_STRING1');
        GetFldVar('S_STRING1',    sIgrdcode1);
        GetFldVar('S_STRING2',    sExamtype);
        GetFldVar('S_STRING3',    sContradGrade);
   end;

   txFree;
end;

function Hmddurckt.GetPatMonth(sPatno:String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_CODE1');
   SetFldValue(0,[sPatno]);

   if txGetF('MD_DURCK_L3') then
   begin
        Result := GetRecordCnt('S_STRING1');
        GetFldVar('S_STRING1',    sSpcAgeMonth);
   end;
   txFree;
end;

function Hmdkimsmt.InsertKimsmt(sKimsOrderNo, sPatno, sDeptcd, sOrddate, sMeddate, sPatsect, sAlertType,
                                sDrugcd1, sSeqno1, sDrugcd2, sSeqno2, sReasoncd, sReasontxt : String):Integer;
begin
   Result := -1;

   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;' +
              'S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;S_TYPE11;S_TYPE12;S_TYPE13');
   SetFldValue(0,[sKimsOrderNo, sPatno, sDeptcd, sOrddate, sMeddate, sPatsect, sAlertType,
                  sDrugcd1, sSeqno1, sDrugcd2, sSeqno2, sReasoncd, sReasontxt]);

   if (txPutF('MD_KIMSM_I1')) then //md_kimsm_i1.pc
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdScopyt.InsertScopyt:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'  +
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;' +
              'S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18');
   SetFldValue(0,[sPatno, sOrddate, sMhChk1, sMhChk2, sMhChk3, sMhChk4,
                  sMhChk5,sDhChk1 , sDhChk2, sDhChk3, sDhChk4, sDhChk5,
                  sColAddYn, sColChk1, sColChk2, sColChk3, sColFchk1, sColFchk2]);

   if (txPutF('MD_SCOPY_I1')) then
   begin
      Result :=1;
      txFree;
   end;
end;

function HmdScopyt.SelectScopyt(sPatno, sOrddate : String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sOrddate] );

   if (txGetF('MD_SCOPY_S1')) then
   begin
      GetFldVar('S_STRING1',    sMhChk1);
      GetFldVar('S_STRING2',    sMhChk2);
      GetFldVar('S_STRING3',    sMhChk3);
      GetFldVar('S_STRING4',    sMhChk4);
      GetFldVar('S_STRING5',    sMhChk5);
      GetFldVar('S_STRING6',    sDhChk1);
      GetFldVar('S_STRING7',    sDhChk2);
      GetFldVar('S_STRING8',    sDhChk3);
      GetFldVar('S_STRING9',    sDhChk4);
      GetFldVar('S_STRING10',   sDhChk5);
      GetFldVar('S_STRING11',   sColAddYn);
      GetFldVar('S_STRING12',   sColChk1);
      GetFldVar('S_STRING13',   sColChk2);
      GetFldVar('S_STRING14',   sColChk3);
      GetFldVar('S_STRING15',   sColFchk1);
      GetFldVar('S_STRING16',   sColFchk2);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//급성심근경색증(심전도소견 등 정보 입력) KimDaeYong 2008-06-16
function HmqManagt.UpdateMqmanagt1(sPatno, sMeddate,
                                   sAMI1, sAMI2, sAMI3, sAMI3other, sPciDate, sBldDate,
                                   sBlddelay, sBlddelay3, sPunctm, sBalltm, sPcidelay, sPcidelay2,
                                   sEditid, sEditip, sPcirmk,
                                   sOddblood, sPastsick, sPastsick3, sPastpci, sPastcabg,
                                   sEjecfract, sLvwallmot, sThornblood, sLeftmaindis, sSpasmMI :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;' +
              'S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10;' +
              'S_TYPE11;S_TYPE12;S_TYPE13;S_TYPE14;' +
              'S_EDITID;S_EDITIP;S_TYPE15;S_TYPE16;S_TYPE17;' +
              'S_TYPE18;S_TYPE19;S_TYPE20;S_TYPE21;S_TYPE22;' +
              'S_TYPE23;S_TYPE24;S_TYPE25');
   SetFldValue(0,[sPatno, sMeddate, sAMI1, sAMI2, sAMI3,
                  sAMI3other, sPciDate, sBldDate, sBlddelay, sBlddelay3,
                  sPunctm, sBalltm, sPcidelay, sPcidelay2,
                  sEditid, sEditip, sPcirmk,
                  sOddblood, sPastsick, sPastsick3, sPastpci, sPastcabg,
                  sEjecfract, sLvwallmot, sThornblood, sLeftmaindis,sSpasmMI]);

   if (txPutF('MQ_MANAG_U1')) then  //mq_manag_u1.pc
   begin
      Result := 1;

      txfree;
   end;
end;

//급성심근경색증(퇴원 아스피린/베타차단제 정보 입력) KimDaeYong 2008-06-16
function HmqManagt.UpdateMqmanagt2(sPatno, sMeddate,
                                   sDaspunord, sDaspunord4, sBetaunord, sBetaunord13,
                                   sEditid, sEditip :String):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno, sMeddate, sDaspunord, sDaspunord4, sBetaunord, sBetaunord13, sEditid, sEditip]);

   if (txPutF('MQ_MANAG_U2')) then  //mq_manag_u2.pc
   begin
      Result := 1;

      txfree;
   end;
end;

//급성심근경색증(심전도소견 등) 불러오기
//KimDaeYong 2008-06-16
function HmqManagt.SelectMqmanagt1(sPatno,sMeddate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sMeddate] );

   if (txGetF('MQ_MANAG_S1')) then
   begin //Tuxedo Service Call
        GetFldVar('S_STRING1' , sHeartsysmp 	);
        GetFldVar('S_STRING2' , sKillipcls 	);
        GetFldVar('S_STRING3' , sHeartview 	);
        GetFldVar('S_STRING4' , sHeartviewoth);
        GetFldVar('S_STRING5' , sPcidocutime );
        GetFldVar('S_STRING6' , sBlddocutime );
        GetFldVar('S_STRING7' , sBlddelay   );
        GetFldVar('S_STRING8' , sBlddelay3  );
        GetFldVar('S_STRING9' , sPunctm  );
        GetFldVar('S_STRING10', sBalltm  );
        GetFldVar('S_STRING11', sPcidelay  );
        GetFldVar('S_STRING12', sPcidelay2  );
        GetFldVar('S_STRING13', sPcirmk  );
        GetFldVar('S_STRING14', sOddblood  );
        GetFldVar('S_STRING15', sPastsick  );
        GetFldVar('S_STRING16', sPastsick3  );
        GetFldVar('S_STRING17', sPastpci  );
        GetFldVar('S_STRING18', sPastcabg  );
        GetFldVar('S_STRING19', sEjecfract  );
        GetFldVar('S_STRING20', sLvwallmot  );
        GetFldVar('S_STRING21', sThornblood  );
        GetFldVar('S_STRING22', sLeftmaindis  );
        GetFldVar('S_STRING23', sSpasmMI);


        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

//급성심근경색증(퇴원 아스피린/베타차단제 등) 불러오기
//KimDaeYong 2008-06-16
function HmqManagt.SelectMqmanagt2(sPatno,sMeddate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sMeddate] );

   if (txGetF('MQ_MANAG_S2')) then
   begin //Tuxedo Service Call
        GetFldVar('S_STRING1' , sDaspunord 	);
        GetFldVar('S_STRING2' , sDaspunord4 );
        GetFldVar('S_STRING3' , sBetaunord 	);
        GetFldVar('S_STRING4' , sBetaunord13);

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

//급성심근경색증(혈전용해제첫투약시간) 불러오기
//KimDaeYong 2008-06-18
function HmqManagt.SelectMqmanagt3(sPatno,sMedtime:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sMedtime] );

   if (txGetF('MQ_MANAG_S3')) then  //mq_manag_s3.pc
   begin 
        GetFldVar('S_STRING1' , sBldfrsttm 	);

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

//뇌졸중 정보 입력, KimDaeYong 2008-09-11
function HmqStrokt.UpdateMqstrokt1:Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;S_STRING42;S_STRING43;S_EDITID;S_EDITIP;S_STRING44;S_STRING45;S_STRING46;S_STRING47;' +
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;S_STRING56;S_STRING57;S_STRING58;S_STRING59;S_STRING60;' +
              'S_STRING61;S_STRING62;S_STRING63;S_STRING64;S_STRING65;S_STRING66;S_STRING67;S_STRING68;S_STRING69;S_STRING70;' +
              'S_STRING71;S_STRING72;S_STRING73;S_STRING74;S_STRING75;S_STRING76;S_STRING77;S_STRING78;S_STRING79;S_STRING80;' +
              'S_STRING81;S_STRING82;S_STRING83;S_STRING84;S_STRING85;S_STRING86;' +
              'S_STRING87;S_STRING88;S_STRING89;S_STRING90;S_STRING91;' +
              'S_STRING92;S_STRING93;S_STRING94;S_STRING95;S_STRING96;S_STRING97;S_STRING98;S_STRING99;S_STRING100;S_STRING101;' +
              'S_STRING102;S_STRING103;S_STRING104;S_STRING105;S_STRING106'
              );
   SetFldValue(0,[sPatno, sMeddate,sDiagcd,sOthsickstk,sPaststk,sExtstk,sTabaco,sGcseo,sGcsbvr,sGcsbmr,
                  sGcstot,sPlayrightup,sPlayleftup,sPlayrightlow,sPlayleftlow,sSense,sCranial,sReflex,sDyspexecdt,sDryswall,
                  sWetswall,sDyspvol,sDysppne,sDyspsec,sDysptong,sDyspsen,sDyspgag,sUndysp,sUndysp4,sFeedmeth,
                  sFeedmeth4,sUnctmri,sUnctmri5,sUntpa,sUntpa8,sDschtype,sDschtype7,sUnbld,sUnbld4,sHeart,
                  sUnclot,sUnclot4,sEntid,sEditid,sEditip,sUnreh,sUnreh6,sDyspDelaytime,sRehDelaytime,
                  //뇌졸중평가 전반적 수정, KimDaeYong 2013-01-30
                  sTabinvtime,sTabid,sTabnm,sTabaco1,sTabaco2,sTabaco21,sTabaco22,sTabaco3,sTabnotex,sTabnotexoth,
                  sGcstime,sGcsid,sGcsnm,sUntpah,sDysptime,sDyspid,sDyspnm,sDyspchk,sRehtime,sRehid,
                  sRehnm,sRehchk,sRehcont,sRehcontoth,sRehno,sReqdate,sRespdate,sRehexdate,sDschtime,sDschid,
                  sDschnm,sDisctime,sConftime,smRSlevel,sDschmrs,sGcsnihss,
                  //뇌졸중교육 추가. KimDaeYong 2018-06-08
                  sEduexeYn,sEduexechkY,sEduexechkN,sEduexeNoth,sUntpahx,
                  //NIHSS점수표. KimDaeYong 2021-07-28
                  sNih1a,sNih1b,sNih1c,sNih2,sNih3,sNih4,sNih5,sNih6,sNih7,sNih8,
                  sNih9,sNih10,sNih11,sNih12,sNih13
                  ]);

   if (txPutF('MQ_STROK_U1')) then  //mq_strok_u1.pc
   begin
      Result := 1;

      txfree;
   end;
end;

//뇌졸중관리 FormShow이벤트
//KimDaeYong 2008-09-12
function HmqStrokt.SelectMqstrokt1(sPatno,sMeddate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sMeddate] );

   if (txGetF('MQ_STROK_S1')) then      //mq_strok_s1.pc
   begin //Tuxedo Service Call
        GetFldVar('S_STRING1' ,  sMedtime	 	);
       	GetFldVar('S_STRING2' ,  sOrdcd    		);
       	GetFldVar('S_STRING3' ,  sCtkind		);
       	GetFldVar('S_STRING4' ,  sOrdtime  		);
       	GetFldVar('S_STRING5' ,  sExectime  	);
       	GetFldVar('S_STRING6' ,  sActtime		);
       	GetFldVar('S_STRING7' ,  sMedname		);
       	GetFldVar('S_STRING8' ,  sDiagcd       	);
       	GetFldVar('S_STRING9' ,  sOthsickstk   	);
       	GetFldVar('S_STRING10',  sPaststk      	);
	   	GetFldVar('S_STRING11',  sExtstk       	);
       	GetFldVar('S_STRING12',  sTabaco       	);
       	GetFldVar('S_STRING13',  sGcseo        	);       
       	GetFldVar('S_STRING14',  sGcsbvr      	);
       	GetFldVar('S_STRING15',  sGcsbmr      	);
       	GetFldVar('S_STRING16',  sGcstot      	);
       	GetFldVar('S_STRING17',  sPlayrightup 	);
       	GetFldVar('S_STRING18',  sPlayleftup  	);
       	GetFldVar('S_STRING19',  sPlayrightlow	);
       	GetFldVar('S_STRING20',  sPlayleftlow 	);
       	GetFldVar('S_STRING21',  sSense       	);       
       	GetFldVar('S_STRING22',  sCranial     	);
       	GetFldVar('S_STRING23',  sReflex      	);
	   	GetFldVar('S_STRING24',  sDyspexecdt  	);
       	GetFldVar('S_STRING25',  sDryswall    	);
       	GetFldVar('S_STRING26',  sWetswall    	);       
       	GetFldVar('S_STRING27',  sDyspvol     	);
       	GetFldVar('S_STRING28',  sDysppne     	);
       	GetFldVar('S_STRING29',  sDyspsec     	);
       	GetFldVar('S_STRING30',  sDysptong    	);
       	GetFldVar('S_STRING31',  sDyspsen     	);
       	GetFldVar('S_STRING32',  sDyspgag     	);
       	GetFldVar('S_STRING33',  sUndysp      	);
       	GetFldVar('S_STRING34',  sUndysp4     	);       
       	GetFldVar('S_STRING35',  sFeedmeth    	);
       	GetFldVar('S_STRING36',  sFeedmeth4   	);
	   	GetFldVar('S_STRING37',  sUnctmri     	);
       	GetFldVar('S_STRING38',  sUnctmri5    	);
       	GetFldVar('S_STRING39',  sUntpa       	);       
       	GetFldVar('S_STRING40',  sUntpa8      	);
       	GetFldVar('S_STRING41',  sDschtype    	);
       	GetFldVar('S_STRING42',  sDschtype7   	);
       	GetFldVar('S_STRING43',  sUnbld       	);
       	GetFldVar('S_STRING44',  sUnbld4      	);
       	GetFldVar('S_STRING45',  sHeart       	);
       	GetFldVar('S_STRING46',  sUnclot      	);
       	GetFldVar('S_STRING47',  sUnclot4     	);
       	GetFldVar('S_STRING48',  sEntid       	);
        GetFldVar('S_STRING49',  sRehdate       );
        GetFldVar('S_STRING50',  sUnreh       	);
        GetFldVar('S_STRING51',  sUnreh6       	);
        GetFldVar('S_STRING52',  sLDLdate       );
        GetFldVar('S_STRING53',  sTotdate       );
        GetFldVar('S_STRING54',  sHDLdate       );
        GetFldVar('S_STRING55',  sTrigdate      );
        GetFldVar('S_STRING56',  sDyspDelaytime );
        GetFldVar('S_STRING57',  sRehDelaytime	);
        //뇌졸중평가 전반적 수정, KimDaeYong 2013-01-30
        GetFldVar('S_STRING58',  sAccidate     	);
       	GetFldVar('S_STRING59',  sTabinvtime    );
        GetFldVar('S_STRING60',  sTabid         );
        GetFldVar('S_STRING61',  sTabnm       	);
        GetFldVar('S_STRING62',  sTabaco1       );
        GetFldVar('S_STRING63',  sTabaco2       );
        GetFldVar('S_STRING64',  sTabaco21      );
        GetFldVar('S_STRING65',  sTabaco22      );
        GetFldVar('S_STRING66',  sTabaco3       );
        GetFldVar('S_STRING67',  sTabnotex      );
        GetFldVar('S_STRING68',  sTabnotexoth	);
        GetFldVar('S_STRING69',  sGcstime       );
        GetFldVar('S_STRING70',  sGcsid         );
        GetFldVar('S_STRING71',  sGcsnm       	);
        GetFldVar('S_STRING72',  sUntpah       	);
        GetFldVar('S_STRING73',  sBldMedcd      );
        GetFldVar('S_STRING74',  sBldMednm    	);
        GetFldVar('S_STRING75',  sBldActtm    	);
        GetFldVar('S_STRING76',  sDbldMedcd     );
        GetFldVar('S_STRING77',  sDbldMednm    	);
        GetFldVar('S_STRING78',  sDclotMedcd    );
        GetFldVar('S_STRING79',  sDclotMednm   	);
        GetFldVar('S_STRING80',  sDietdate    	);
        GetFldVar('S_STRING81',  sDietname    	);
        GetFldVar('S_STRING82',  sDysptime      );
        GetFldVar('S_STRING83',  sDyspid    	);
        GetFldVar('S_STRING84',  sDyspnm        );
        GetFldVar('S_STRING85',  sDyspchk   	);
        GetFldVar('S_STRING86',  sRehtime       );
        GetFldVar('S_STRING87',  sRehid    	    );
        GetFldVar('S_STRING88',  sRehnm         );
        GetFldVar('S_STRING89',  sRehchk   	    );
        GetFldVar('S_STRING90',  sRehcont    	);
        GetFldVar('S_STRING91',  sRehcontoth    );
        GetFldVar('S_STRING92',  sRehno         );
        GetFldVar('S_STRING93',  sReqdate    	);
        GetFldVar('S_STRING94',  sRespdate      );
        GetFldVar('S_STRING95',  sRehexdate   	);
        GetFldVar('S_STRING96',  sDschtime      );
        GetFldVar('S_STRING97',  sDschid   	    );
        GetFldVar('S_STRING98',  sDschnm        );
        GetFldVar('S_STRING99',  sDisctime	    );
        GetFldVar('S_STRING100', sConftime      );
        GetFldVar('S_STRING101', sPathcd   	    );
        GetFldVar('S_STRING102', sStepcd        );
        GetFldVar('S_STRING103', sDecdate	    );
        GetFldVar('S_STRING104', sPtmiermt      );
        GetFldVar('S_STRING105', sAdmtime       );
        GetFldVar('S_STRING106', sCofmdate      );
        GetFldVar('S_STRING107', sResno         );
        GetFldVar('S_STRING108', sSex   	    );
        GetFldVar('S_STRING109', sAge           );
        GetFldVar('S_STRING110', sMeddept	    );
        GetFldVar('S_STRING111', sChadr         );
        GetFldVar('S_STRING112', sWardno        );
        GetFldVar('S_STRING113', sRoomno        );
        GetFldVar('S_STRING114', smRSlevel      );
        GetFldVar('S_STRING115', sDschmrs       );
        GetFldVar('S_STRING116', sGcsnihss      );
        //뇌졸중교육. KimDaeYong 2018-06-08
        GetFldVar('S_STRING117', sEduexeYn      );
        GetFldVar('S_STRING118', sEduexechkY    );
        GetFldVar('S_STRING119', sEduexechkN    );
        GetFldVar('S_STRING120', sEduexeNoth    );
        GetFldVar('S_STRING121', sUntpahx       );  //항목추가.KimDaeYong 2020-09-10
        //NIHSS점수표 KimDaeYong 2021-07-30
        GetFldVar('S_STRING122', sNih1a	        );
        GetFldVar('S_STRING123', sNih1b         );
        GetFldVar('S_STRING124', sNih1c	        );
        GetFldVar('S_STRING125', sNih2		    );
        GetFldVar('S_STRING126', sNih3		    );
        GetFldVar('S_STRING127', sNih4		    );
        GetFldVar('S_STRING128', sNih5		    );
        GetFldVar('S_STRING129', sNih6		    );
        GetFldVar('S_STRING130', sNih7		    );
        GetFldVar('S_STRING131', sNih8		    );
        GetFldVar('S_STRING132', sNih9		    );
        GetFldVar('S_STRING133', sNih10	        );
        GetFldVar('S_STRING134', sNih11	        );
        GetFldVar('S_STRING135', sNih12	        );
        GetFldVar('S_STRING136', sNih13	        );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

//중환자평가관리 리스트 조회
//KimDaeYong 2008-07-15
function HmdApacht.listMdapacht1(inType1, inType2, inType3, inType4:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[inType1,inType2,inType3,inType4] );

   if (txGetF('MD_APACH_L1')) then  //md_apach_l1.pc
   begin
        GetFldVar('S_STRING1'  , sInputtime  );
        GetFldVar('S_STRING2'  , sPh         );
        GetFldVar('S_STRING3'  , sPco2       );
        GetFldVar('S_STRING4'  , sPulse      );
        GetFldVar('S_STRING5'  , sMeanbplo   );
        GetFldVar('S_STRING6'  , sMeanbphi   );
        GetFldVar('S_STRING7'  , sTemp       );
        GetFldVar('S_STRING8'  , sRespiration);
        GetFldVar('S_STRING9'  , sPao2       );
        GetFldVar('S_STRING10' , sHematocrit );
        GetFldVar('S_STRING11' , sWbc        );
        GetFldVar('S_STRING12' , sCreatinine );
        GetFldVar('S_STRING13' , sUrine      );
        GetFldVar('S_STRING14' , sBun        );
        GetFldVar('S_STRING15' , sSodium     );
        GetFldVar('S_STRING16' , sAlbumin    );
        GetFldVar('S_STRING17' , sBilirubin  );
        GetFldVar('S_STRING18' , sGlucose    );
        GetFldVar('S_STRING19' , sGcs        );
        GetFldVar('S_STRING20' , sAge        );
        GetFldVar('S_STRING21' , sScore1     );
        GetFldVar('S_STRING22' , sScore2     );
        GetFldVar('S_STRING23' , sScore3     );
        GetFldVar('S_STRING24' , sScore4     );
        GetFldVar('S_STRING25' , sScore5     );
        GetFldVar('S_STRING26' , sScore6     );
        GetFldVar('S_STRING27' , sScore7     );
        GetFldVar('S_STRING28' , sScore8     );
        GetFldVar('S_STRING29' , sScore9     );
        GetFldVar('S_STRING30' , sScore10    );
        GetFldVar('S_STRING31' , sScore11    );
        GetFldVar('S_STRING32' , sScore12    );
        GetFldVar('S_STRING33' , sScore13    );
        GetFldVar('S_STRING34' , sScore14    );
        GetFldVar('S_STRING35' , sScore15    );
        GetFldVar('S_STRING36' , sScore16    );
        GetFldVar('S_STRING37' , sScore17    );
        GetFldVar('S_STRING38' , sAids       );
        GetFldVar('S_STRING39' , sHepatic    );
        GetFldVar('S_STRING40' , sLymphoma   );
        GetFldVar('S_STRING41' , sMetastatic );
        GetFldVar('S_STRING42' , sLeukemia   );
        GetFldVar('S_STRING43' , sImmunos    );
        GetFldVar('S_STRING44' , sCirrhosis  );
        GetFldVar('S_STRING45' , sVentyn     );
        GetFldVar('S_STRING46' , sVentilator );
        GetFldVar('S_STRING47' , sArfyn      );
        GetFldVar('S_STRING48' , sTotScore   );
        GetFldVar('S_STRING49' , sUsername   );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

//중환자평가관리 입력을 위한 최근값 조회
//KimDaeYong 2008-07-16
function HmdApacht.selectMdapacht1(inType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[inType1] );

   if (txGetF('MD_APACH_S1')) then  //md_apach_s1.pc
   begin
        GetFldVar('S_STRING1'  , sExam       );
        GetFldVar('S_STRING2'  , sRslt1      );
        GetFldVar('S_STRING3'  , sRslt2      );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdApacht.InsertMdapacht1:Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;'+
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno, sPh, sPco2, sPulse, sMeanbplo, sMeanbphi, sTemp, sRespiration, sPao2, sHematocrit,
                  sWbc, sCreatinine, sUrine, sBun, sSodium, sAlbumin, sBilirubin, sGlucose, sGcs, sAge,
                  sScore1, sScore2, sScore3, sScore4, sScore5, sScore6, sScore7, sScore8, sScore9, sScore10,
                  sScore11, sScore12, sScore13, sScore14, sScore15, sScore16, sScore17, sAids, sHepatic, sLymphoma,
                  sMetastatic, sLeukemia, sImmunos, sCirrhosis, sVentyn, sVentilator, sArfyn, sTotScore, sEditid, sEditip]);

   if (txPutF('MD_APACH_I1')) then  //md_apach_i1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

function HmdApacht.updateMdapacht1:Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;'+
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno, sInputtime, sPh, sPco2, sPulse, sMeanbplo, sMeanbphi, sTemp, sRespiration, sPao2,
                  sHematocrit, sWbc, sCreatinine, sUrine, sBun, sSodium, sAlbumin, sBilirubin, sGlucose, sGcs,
                  sAge, sScore1, sScore2, sScore3, sScore4, sScore5, sScore6, sScore7, sScore8, sScore9,
                  sScore10, sScore11, sScore12, sScore13, sScore14, sScore15, sScore16, sScore17, sAids, sHepatic,
                  sLymphoma, sMetastatic, sLeukemia, sImmunos, sCirrhosis, sVentyn, sVentilator, sArfyn, sTotScore, sEditid, sEditip]);

   if (txPutF('MD_APACH_U1')) then  //md_apach_u1.pc
   begin
      Result := 1;
      txfree;
   end;
end;

function HmdApacht.deleteMdapacht1:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2');
   SetFldValue(0,[sPatno,sInputtime] );

   if (txPutF('MD_APACH_D1')) then begin // md_apach_d1.pc
      Result := 1;
      txFree;
   end;
end;

function Hmdduprst.InsertDupreason:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9');
   SetFldValue(0,[sPatno,sOrddate,sMeddate,sMedtime,sMeddept,sOrddr,sDuprscd,sDuprsdt,sPreorddate] );

   if (txPutF('MD_DUPRS_I1')) then begin // md_duprs_i1.pc
      Result := 1;
      txFree;
   end;
end;

// 간질환 약품 시작일
function Hmdlivert.InsertLiverStart:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5');
   SetFldValue(0,[sPatno, sStartdt, sOrddate, sEditid, sEditip] );

   if (txPutF('MD_LIVER_I1')) then begin // md_liver_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdLivert.SelectLiverStart:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sPatno] );

   if (txGetF('MD_LIVER_S2')) then  //md_liver_s2.pc
   begin
        GetFldVar('S_STRING1'  , sPatno       );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdLivert.CheckLiverStart(sPatno:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1');
   SetFldValue(0,[sPatno] );

   if (txGetF('MD_LIVER_S1')) then  //md_liver_s1.pc
   begin
        GetFldVar('S_STRING1'  , sLiverCount       );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdLivert.CheckLiverDay(sPatno, sOrdcd:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sOrdcd] );

   if (txGetF('MD_LIVER_S2')) then  //md_liver_s2.pc
   begin
        GetFldVar('S_STRING1'  , sChangeCd       );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdSktstt.InsertMdsktstt1:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;'+
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;'+
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;S_STRING56;S_STRING57;S_STRING58;S_STRING59');
   SetFldValue(0,[sPatno,sExecdate,sTestno,sField1,sField2,sField3,sField4,sField5,sField6,sField7,
                  sField8,sField9,sField10,sField11,sField12,sField13,sField14,sField15,sField16,sField17,
                  sField18,sField19,sField20,sField21,sField22,sField23,sField24,sField25,sField26,sField27,
                  sField28,sField29,sField30,sField31,sField32,sField33,sField34,sField35,sField36,sField37,
                  sField38,sField39,sField40,sField41,sField42,sField43,sField44,sField45,sField46,sField47,
                  sField48,sField49,sField50,sField51,sField52,sField53,sField54,sEditid,sEditip]);

   if (txPutF('MD_SKTST_I1')) then // md_sktst_i1.pc
   begin
      Result := 1;
      txFree;
   end;

end;

function HmdSktstt.ListMdskttst1(iPatno,iFromdate,iTodate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[iPatno,iFromdate,iTodate]);

   if (txGetF('MD_SKTST_L1')) then
   begin
        GetFldVar('S_STRING1'  , sPatno       );
        GetFldVar('S_STRING2'  , sPatname     );
        GetFldVar('S_STRING3'  , sExecdate    );
        GetFldVar('S_STRING4'  , sSeqno       );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdSktstt.UpdateMdskttst1(iPatno, iExecdate, iSeqno:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[iPatno,iExecdate,iSeqno]);

   if (txPutF('MD_SKTST_U1')) then
   begin
      Result :=1;
      txFree;
   end;
end;

function HmdSktstt.SelectMdskttst1(iPatno, iExecdate, iSeqno:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[iPatno,iExecdate,iSeqno]);

   if (txGetF('MD_SKTST_S1')) then
   begin
        GetFldVar('S_STRING1'   , sPatno      );
        GetFldVar('S_STRING2'   , sExecdate   );
        GetFldVar('S_STRING3'   , sTestno     );
        GetFldVar('S_STRING4'   , sField1     );
        GetFldVar('S_STRING5'   , sField2     );
        GetFldVar('S_STRING6'   , sField3     );
        GetFldVar('S_STRING7'   , sField4     );
        GetFldVar('S_STRING8'   , sField5     );
        GetFldVar('S_STRING9'   , sField6     );
        GetFldVar('S_STRING10'  , sField7     );
        GetFldVar('S_STRING11'  , sField8     );
        GetFldVar('S_STRING12'  , sField9     );
        GetFldVar('S_STRING13'  , sField10    );
        GetFldVar('S_STRING14'  , sField11    );
        GetFldVar('S_STRING15'  , sField12    );
        GetFldVar('S_STRING16'  , sField13    );
        GetFldVar('S_STRING17'  , sField14    );
        GetFldVar('S_STRING18'  , sField15    );
        GetFldVar('S_STRING19'  , sField16    );
        GetFldVar('S_STRING20'  , sField17    );
        GetFldVar('S_STRING21'  , sField18    );
        GetFldVar('S_STRING22'  , sField19    );
        GetFldVar('S_STRING23'  , sField20    );
        GetFldVar('S_STRING24'  , sField21    );
        GetFldVar('S_STRING25'  , sField22    );
        GetFldVar('S_STRING26'  , sField23    );
        GetFldVar('S_STRING27'  , sField24    );
        GetFldVar('S_STRING28'  , sField25    );
        GetFldVar('S_STRING29'  , sField26    );
        GetFldVar('S_STRING30'  , sField27    );
        GetFldVar('S_STRING31'  , sField28    );
        GetFldVar('S_STRING32'  , sField29    );
        GetFldVar('S_STRING33'  , sField30    );
        GetFldVar('S_STRING34'  , sField31    );
        GetFldVar('S_STRING35'  , sField32    );
        GetFldVar('S_STRING36'  , sField33    );
        GetFldVar('S_STRING37'  , sField34    );
        GetFldVar('S_STRING38'  , sField35    );
        GetFldVar('S_STRING39'  , sField36    );
        GetFldVar('S_STRING40'  , sField37    );
        GetFldVar('S_STRING41'  , sField38    );
        GetFldVar('S_STRING42'  , sField39    );
        GetFldVar('S_STRING43'  , sField40    );
        GetFldVar('S_STRING44'  , sField41    );
        GetFldVar('S_STRING45'  , sField42    );
        GetFldVar('S_STRING46'  , sField43    );
        GetFldVar('S_STRING47'  , sField44    );
        GetFldVar('S_STRING48'  , sField45    );
        GetFldVar('S_STRING49'  , sField46    );
        GetFldVar('S_STRING50'  , sField47    );
        GetFldVar('S_STRING51'  , sField48    );
        GetFldVar('S_STRING52'  , sField49    );
        GetFldVar('S_STRING53'  , sField50    );
        GetFldVar('S_STRING54'  , sField51    );
        GetFldVar('S_STRING55'  , sField52    );
        GetFldVar('S_STRING56'  , sField53    );
        GetFldVar('S_STRING57'  , sField54    );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdMethat.InsertMdmethat1:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;'+
              'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;'+
              'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55;S_STRING56;S_STRING57;S_STRING58;S_STRING59;S_STRING60;'+
              'S_STRING61;S_STRING62;S_STRING63;S_STRING64;S_STRING65;S_STRING66;S_STRING67;S_STRING68;S_STRING69;S_STRING70;'+
              'S_STRING71;S_STRING72;S_STRING73;S_STRING74;S_STRING75'
              );
   SetFldValue(0,[sPatno,sExecdate,sField1,sField2,sField3,sField4,sField5,sField6,sField7,
                  sField8,sField9,sField10,sField11,sField12,sField13,sField14,sField15,sField16,sField17,
                  sField18,sField19,sField20,sField21,sField22,sField23,sField24,sField25,sField26,sField27,
                  sField28,sField29,sField30,sField31,sField32,sField33,sField34,sField35,sField36,sField37,
                  sField38,sField39,sField40,sField41,sField42,sField43,sField44,sField45,sField46,sField47,
                  sField48,sField49,sField50,sField51,sField52,sField53,sField54,sField55,sField56,sField57,
                  sField58,sField59,sField60,sField61,sField62,sField63,sField64,sField65,sField66,sField67,
                  sField68,sField69,sField70,sField71,sEditid,sEditip]);

   if (txPutF('MD_METHA_I1')) then // md_metha_i1.pc
   begin
      Result := 1;
      txFree;
   end;

end;

function HmdMethat.ListMdmethat1(iPatno,iFromdate,iTodate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[iPatno,iFromdate,iTodate]);

   if (txGetF('MD_METHA_L1')) then
   begin
        GetFldVar('S_STRING1'  , sPatno       );
        GetFldVar('S_STRING2'  , sPatname     );
        GetFldVar('S_STRING3'  , sExecdate    );
        GetFldVar('S_STRING4'  , sSeqno       );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function HmdMethat.UpdateMdmethat1(iPatno, iExecdate, iSeqno:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[iPatno,iExecdate,iSeqno]);

   if (txPutF('MD_METHA_U1')) then
   begin
      Result :=1;
      txFree;
   end;
end;

function HmdMethat.SelectMdmethat1(iPatno, iExecdate, iSeqno:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[iPatno,iExecdate,iSeqno]);

   if (txGetF('MD_METHA_S1')) then
   begin
        GetFldVar('S_STRING1'   , sPatno      );
        GetFldVar('S_STRING2'   , sExecdate   );
        GetFldVar('S_STRING3'   , sField1     );
        GetFldVar('S_STRING4'   , sField2     );
        GetFldVar('S_STRING5'   , sField3     );
        GetFldVar('S_STRING6'   , sField4     );
        GetFldVar('S_STRING7'   , sField5     );
        GetFldVar('S_STRING8'   , sField6     );
        GetFldVar('S_STRING9'   , sField7     );
        GetFldVar('S_STRING10'  , sField8     );
        GetFldVar('S_STRING11'  , sField9     );
        GetFldVar('S_STRING12'  , sField10    );
        GetFldVar('S_STRING13'  , sField11    );
        GetFldVar('S_STRING14'  , sField12    );
        GetFldVar('S_STRING15'  , sField13    );
        GetFldVar('S_STRING16'  , sField14    );
        GetFldVar('S_STRING17'  , sField15    );
        GetFldVar('S_STRING18'  , sField16    );
        GetFldVar('S_STRING19'  , sField17    );
        GetFldVar('S_STRING20'  , sField18    );
        GetFldVar('S_STRING21'  , sField19    );
        GetFldVar('S_STRING22'  , sField20    );
        GetFldVar('S_STRING23'  , sField21    );
        GetFldVar('S_STRING24'  , sField22    );
        GetFldVar('S_STRING25'  , sField23    );
        GetFldVar('S_STRING26'  , sField24    );
        GetFldVar('S_STRING27'  , sField25    );
        GetFldVar('S_STRING28'  , sField26    );
        GetFldVar('S_STRING29'  , sField27    );
        GetFldVar('S_STRING30'  , sField28    );
        GetFldVar('S_STRING31'  , sField29    );
        GetFldVar('S_STRING32'  , sField30    );
        GetFldVar('S_STRING33'  , sField31    );
        GetFldVar('S_STRING34'  , sField32    );
        GetFldVar('S_STRING35'  , sField33    );
        GetFldVar('S_STRING36'  , sField34    );
        GetFldVar('S_STRING37'  , sField35    );
        GetFldVar('S_STRING38'  , sField36    );
        GetFldVar('S_STRING39'  , sField37    );
        GetFldVar('S_STRING40'  , sField38    );
        GetFldVar('S_STRING41'  , sField39    );
        GetFldVar('S_STRING42'  , sField40    );
        GetFldVar('S_STRING43'  , sField41    );
        GetFldVar('S_STRING44'  , sField42    );
        GetFldVar('S_STRING45'  , sField43    );
        GetFldVar('S_STRING46'  , sField44    );
        GetFldVar('S_STRING47'  , sField45    );
        GetFldVar('S_STRING48'  , sField46    );
        GetFldVar('S_STRING49'  , sField47    );
        GetFldVar('S_STRING50'  , sField48    );
        GetFldVar('S_STRING51'  , sField49    );
        GetFldVar('S_STRING52'  , sField50    );
        GetFldVar('S_STRING53'  , sField51    );
        GetFldVar('S_STRING54'  , sField52    );
        GetFldVar('S_STRING55'  , sField53    );
        GetFldVar('S_STRING56'  , sField54    );
        GetFldVar('S_STRING57'  , sField55    );
        GetFldVar('S_STRING58'  , sField56    );
        GetFldVar('S_STRING59'  , sField57    );
        GetFldVar('S_STRING60'  , sField58    );
        GetFldVar('S_STRING61'  , sField59    );
        GetFldVar('S_STRING62'  , sField60    );
        GetFldVar('S_STRING63'  , sField61    );
        GetFldVar('S_STRING64'  , sField62    );
        GetFldVar('S_STRING65'  , sField63    );
        GetFldVar('S_STRING66'  , sField64    );
        GetFldVar('S_STRING67'  , sField65    );
        GetFldVar('S_STRING68'  , sField66    );
        GetFldVar('S_STRING69'  , sField67    );
        GetFldVar('S_STRING70'  , sField68    );
        GetFldVar('S_STRING71'  , sField69    );
        GetFldVar('S_STRING72'  , sField70    );
        GetFldVar('S_STRING73'  , sField71    );

        Result := GetRecordCnt('S_STRING1');
        txFree;
   end;
end;

function Hmdvcnift.InsertVcninft(sPatno, sOrddate, sVcode, sAmt, sEditid, sEditip:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sOrddate,sVcode,sAmt,sEditid,sEditip] );

   if (txPutF('MD_VCNIF_I1')) then begin // md_vcnif_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdAnopqt.InsertMdAnopqt:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sAdmdate,sOpCode,sEditid,sEditip] );

   if (txPutF('MD_ANOPQ_I1')) then begin // md_anopq_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdAnopqt.InsertMdAnPatt:Integer;
begin
   Result := -1;
   txAlloc;

   {--------------2019년이전버젼 코드 삭제. KimDaeYong 2020-02-18------------------------------------------------------------------
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;'+
              'S_EDITID,S_EDITIP');
   SetFldValue(0,[sPatno,sAdmdate,sPre1,sPre2,sPre3,sPre4,sPre5,sPre6,sPre7,sPre8,
                  sPre9,sStatus1,sStatus2,sStatus3,sStatus4,sStatus5,sStatus6,sPost1,sPost2,sPost3,
                  sPost4,sEtc1,sPre11,sPre12,sPre13,sStatus7,sStatus8,sPre14,sPre15,sPre16,
                  sPre17,sPre18,sPre19,sPre20,sPost5,sPost6,sPost7,sPost8,sPost9,
                  sEditid,sEditip] );
   --------------------------------------------------------------------------------------------------------------------------------}

   //2020.03이후버젼. KimDaeYong 2020-02-18
   SetFldName('S_STRING1;S_STRING2;S_STRING3;'+
              'S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;'+
              'S_STRING10;S_STRING11;S_STRING12;S_STRING13;'+
              'S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sAdmdate,sOpcode,
                  sPre21,sPre22,sPre23,sPre231,sPre24,sPre25,
                  sStatus21,sStatus211,sStatus22,sStatus221,
                  sPost21,sPost22,sPost221,sPost23,sPost231,sDiagname,sCoopdate,
                  sEditid,sEditip]);

   if (txPutF('MD_ANOPQ_I2')) then begin // md_anopq_i2.pc
      Result := 1;
      txFree;
   end;
end;

//수술예방적항생제 제외사유 조회. KimDaeYong 2020-02-21
function HmdAnopqt.SelectMdAnpatt(inPatno,inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inAdmdate]);

   if (txGetF('MD_ANOPQ_S1')) then   // md_anopq_s1.pc
   begin
      GetFldVar('S_STRING1' , sPre21    );
      GetFldVar('S_STRING2' , sPre22    );
      GetFldVar('S_STRING3' , sPre23    );
      GetFldVar('S_STRING4' , sPre231   );
      GetFldVar('S_STRING5' , sPre24    );
      GetFldVar('S_STRING6' , sPre25    );
      GetFldVar('S_STRING7' , sStatus21 );
      GetFldVar('S_STRING8' , sStatus211);
      GetFldVar('S_STRING9' , sStatus22 );
      GetFldVar('S_STRING10', sStatus221);
      GetFldVar('S_STRING11', sPost21   );
      GetFldVar('S_STRING12', sPost22   );
      GetFldVar('S_STRING13', sPost221  );
      GetFldVar('S_STRING14', sPost23   );
      GetFldVar('S_STRING15', sPost231  );
      GetFldVar('S_STRING16', sDiagname );
      GetFldVar('S_STRING17', sCoopdate );
      GetFldVar('S_STRING18', sFstdate  );
      GetFldVar('S_STRING19', sRecdate  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//수술예방적항생제 제외사유 삭제 및 재등록. KimDaeYong 2020-03-10
function HmdAnopqt.DeleteMdAnPatt:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sAdmdate,sEditid,sEditip]);

   if (txPutF('MD_ANOPQ_D1')) then begin // md_anopq_d1.pc
      Result := 1;
      txFree;
   end;
end;


function HmdOcrprt.SelectChartNewYn(sPatno,sMeddept:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sMeddept]);

   if (txGetF('MD_OCRPR_S1')) then
   begin
      GetFldVar('S_STRING1'   , sNewYn    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdOcrprt.SelectChartPrintYn(sPatno,sMeddept,sMeddr,sMeddate,sMedtime:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[sPatno,sMeddept,sMeddr,sMeddate,sMedtime]);

   if (txGetF('MD_OCRPR_S2')) then
   begin
      GetFldVar('S_STRING1'   , sPrintYn  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdAdmnot.InsertAdmNote(sSignData,sSerialNo,sSubjectDN:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;' +
              'S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;' +
              'S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
              'S_STRING41;' +
              'S_EDITID;S_EDITIP;' +
              'S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sPatno,sMeddept,sAdmdate,sChadr,sGendr,
                  sCc,sPi,sPh,sFh,sSh,sRos,sPe,sImpression,sCareplan1,sCareplan2,
                  sCareplan3,sCareplan4,sCareplan5,sDischargedate,sDischargeplan,
                  sRecdate,sPblm1,sPblm2,sPblm3,sPblm4,
                  sPblm5,sCaregoal1,sCaregoal2,sCaregoal3,sCaregoal4,
                  sCaregoal5,sGoaldate1,sGoaldate2,sGoaldate3,sGoaldate4,
                  sGoaldate5,sOutplace,sDischargeplan1,sDischargeplan2,sDischargeplan3,
                  sSavestat,
                  sEditid,sEditip,
                  sSignData,sSerialNo,sSubjectDN]);

   if (txPutF('MD_ADMNO_I1')) then begin // md_admno_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdAdmnot.SelectAdmNote(sPatno,sMeddept,sAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[sPatno,sMeddept,sAdmdate]);

   if (txGetF('MD_ADMNO_S1')) then   // md_admno_s1.pc
   begin
      GetFldVar('S_STRING1' , sCc  );
      GetFldVar('S_STRING2' , sPi  );
      GetFldVar('S_STRING3' , sPh  );
      GetFldVar('S_STRING4' , sFh  );
      GetFldVar('S_STRING5' , sSh  );
      GetFldVar('S_STRING6' , sRos );
      GetFldVar('S_STRING7' , sPe  );
      GetFldVar('S_STRING8' , sImpression);
      GetFldVar('S_STRING9' , sCareplan1);
      GetFldVar('S_STRING10', sCareplan2);
      GetFldVar('S_STRING11', sCareplan3);
      GetFldVar('S_STRING12', sCareplan4);
      GetFldVar('S_STRING13', sCareplan5);
      GetFldVar('S_STRING14', sDischargedate);
      GetFldVar('S_STRING15', sDischargeplan);
      GetFldVar('S_STRING16', sFstipdt);
      GetFldVar('S_STRING17', sRecdate);
      GetFldVar('S_STRING18', sFstipdr);
      GetFldVar('S_STRING19', osMeddept);   
      GetFldVar('S_STRING20' , sActtime         );
      GetFldVar('S_STRING21' , sPblm1		   	);
      GetFldVar('S_STRING22' , sPblm2		   	);
      GetFldVar('S_STRING23' , sPblm3		   	);
      GetFldVar('S_STRING24' , sPblm4		   	);
      GetFldVar('S_STRING25' , sPblm5		   	);
      GetFldVar('S_STRING26' , sCaregoal1	   	);
      GetFldVar('S_STRING27' , sCaregoal2	   	);
      GetFldVar('S_STRING28' , sCaregoal3	   	);
      GetFldVar('S_STRING29' , sCaregoal4	   	);
      GetFldVar('S_STRING30' , sCaregoal5	   	);
      GetFldVar('S_STRING31' , sGoaldate1	   	);
      GetFldVar('S_STRING32' , sGoaldate2	   	);
      GetFldVar('S_STRING33' , sGoaldate3	   	);
      GetFldVar('S_STRING34' , sGoaldate4	   	);
      GetFldVar('S_STRING35' , sGoaldate5	   	);
      GetFldVar('S_STRING36' , sOutplace	    );
      GetFldVar('S_STRING37' , sDischargeplan1  );
      GetFldVar('S_STRING38' , sDischargeplan2  );
      GetFldVar('S_STRING39' , sDischargeplan3  );
      GetFldVar('S_STRING40' , sSignData        );
      GetFldVar('S_STRING41' , sSerialNo        );
      GetFldVar('S_STRING42' , sSubjectDN       );
      GetFldVar('S_STRING43' , sEditid          );
      GetFldVar('S_STRING44' , sEditnm          );
      GetFldVar('S_STRING45' , sSavestat        );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//2015인증평가, KimDaeYong 2015-09-21
//입원기록 24시간 시한성 체크
function HmdAdmnot.SelectAdmNote3(inPatno,inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inAdmdate]);

   if (txGetF('MD_ADMNO_S3')) then   // md_admno_s3.pc
   begin
      GetFldVar('S_STRING1' , sPatno    );
      GetFldVar('S_STRING2' , sPatname  );
      GetFldVar('S_STRING3' , sAdmdate  );
      GetFldVar('S_STRING4' , sActtime  );
      GetFldVar('S_STRING5' , sChkhour  );
      GetFldVar('S_STRING6' , sAdmrecyn );
      GetFldVar('S_STRING7' , osMeddept );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdAdmnot.ListAdmNote(sPatno:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1');
   SetFldValue(0,[sPatno]);

   if (txGetF('MD_ADMNO_L1')) then   // md_admno_l1.pc
   begin
      GetFldVar('S_STRING1' , sAdmdate  );
      GetFldVar('S_STRING2' , sMeddept  );
      GetFldVar('S_STRING3' , sBirtdate );
      GetFldVar('S_STRING4' , sWardno   );
      GetFldVar('S_STRING5' , sRoomno   );
      GetFldVar('S_STRING6' , sChadr    );
      GetFldVar('S_STRING7' , sGendr    );
      GetFldVar('S_STRING8' , sChadrnm  );
      GetFldVar('S_STRING9' , sGendrnm  );
      GetFldVar('S_STRING10', sFstipdr  );
      GetFldVar('S_STRING11', sSavestat );


      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdAdmnot.SelectInit(sPatno,sAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sPatno,sAdmdate]);

   if (txGetF('MD_ADMNO_S2')) then   // md_admno_s2.pc
   begin
      GetFldVar('S_STRING1' , sChkdate1  );
      GetFldVar('S_STRING2' , sPosition  );
      GetFldVar('S_STRING3' , sLook      );
      GetFldVar('S_STRING4' , sStrength  );
      GetFldVar('S_STRING5' , sTool      );
      GetFldVar('S_STRING6' , sFrequency );
      GetFldVar('S_STRING7' , sPaintime  );
      GetFldVar('S_STRING8' , sChkdate2  );
      GetFldVar('S_STRING9' , sTotgrad1  );
      GetFldVar('S_STRING10', sChkdate3  );
      GetFldVar('S_STRING11', sTotgrad2  );
      GetFldVar('S_STRING12', sDnclass   );
      GetFldVar('S_STRING13', sFprssum   );
      GetFldVar('S_STRING14', sFlaccsum  );
      GetFldVar('S_STRING15', sNipssum   );
      GetFldVar('S_STRING16', sPainyn    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdAdmset.InsertAdmSet:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;' +
              'S_STRING26;S_STRING27;S_STRING28;S_STRING29;' +
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sMeddept,
                  sCc,sPi,sPh,sFh,sSh,sRos,sPe,sImpression,sCareplan1,sCareplan2,
                  sCareplan3,sCareplan4,sCareplan5,sDischargeplan,
                  sPblm1,sPblm2,sPblm3,sPblm4,sPblm5,
                  sCaregoal1,sCaregoal2,sCaregoal3,sCaregoal4,sCaregoal5,
                  sOutplace,sDischargeplan1,sDischargeplan2,sDischargeplan3,
                  sEditid,sEditip]);

   if (txPutF('MD_ADMSE_I1')) then begin // md_admse_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdAdmset.SelectAdmSet(sMeddept,sSeqno,sPatno,sAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[sMeddept,sSeqno,sPatno,sAdmdate]);

   if (txGetF('MD_ADMSE_S1')) then
   begin
      GetFldVar('S_STRING1' , sCc  );
      GetFldVar('S_STRING2' , sPi  );
      GetFldVar('S_STRING3' , sPh  );
      GetFldVar('S_STRING4' , sFh  );
      GetFldVar('S_STRING5' , sSh  );
      GetFldVar('S_STRING6' , sRos );
      GetFldVar('S_STRING7' , sPe  );
      GetFldVar('S_STRING8' , sImpression);
      GetFldVar('S_STRING9' , sCareplan1);
      GetFldVar('S_STRING10', sCareplan2);
      GetFldVar('S_STRING11', sCareplan3);
      GetFldVar('S_STRING12', sCareplan4);
      GetFldVar('S_STRING13', sCareplan5);
      GetFldVar('S_STRING14', sDischargeplan);    
      GetFldVar('S_STRING15' , sPblm1			);
      GetFldVar('S_STRING16' , sPblm2			);
      GetFldVar('S_STRING17' , sPblm3			);
      GetFldVar('S_STRING18' , sPblm4			);
      GetFldVar('S_STRING19' , sPblm5			);
      GetFldVar('S_STRING20' , sCaregoal1		);
      GetFldVar('S_STRING21' , sCaregoal2		);
      GetFldVar('S_STRING22' , sCaregoal3		);
      GetFldVar('S_STRING23' , sCaregoal4		);
      GetFldVar('S_STRING24' , sCaregoal5		);
      GetFldVar('S_STRING25' , sOutplace		);
      GetFldVar('S_STRING26' , sDischargeplan1  );
      GetFldVar('S_STRING27' , sDischargeplan2  );
      GetFldVar('S_STRING28' , sDischargeplan3  );
      GetFldVar('S_STRING29' , osMeddept        );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HsrAcpordt.SelectAcpordt(inPatno,inOrddate,inFlag:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[inPatno,inOrddate,inFlag]);

   if (txGetF('SR_ACPORD_S1')) then
   begin
      GetFldVar('S_STRING1' , sMetfdt );
      GetFldVar('S_STRING2' , sMetfnm );
      GetFldVar('S_STRING3' , sCreatdt);
      GetFldVar('S_STRING4' , sCreat  );
      //조영제부작용정보. KimDaeYong 2017-11-17
      GetFldVar('S_STRING5' , sFstdate);
      GetFldVar('S_STRING6' , sOrddate);
      GetFldVar('S_STRING7' , sOrdcode);
      GetFldVar('S_STRING8' , sPretrt );
      GetFldVar('S_STRING9' , sOrdname );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HsqNstrqt.SelectResult(sPatno,sAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sPatno,sAdmdate]);

   if (txGetF('SQ_NSTRQ_S3')) then
   begin
      GetFldVar('S_STRING1' , sInitdate    );
      GetFldVar('S_STRING2' , sInitresult   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//====================================================
// 영양집중지원의뢰 중간의뢰/의뢰
// KimDaeYong 2010-12-31
//====================================================
function HsqNstrqt.Insert2(inFlag : string) : integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.
    SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;' +
               'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;' +
               'S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;S_TYPE1');
    SetFldValue(0, [sPatno,sMeddate,sRqseq,sMeddept,sWardno,sRoomno,sChadr,sGendr,sSex,sAge,
                    sDiagcd,sDiagname,sReqid,sStatus,sApseq,sHeight,sWeight,sIbw,sIbw2,sAlbumin,
                    sTlc,sChol,sHb,sReqcomm,sEditid,sEditip,inFlag]);

    if txPutF('SQ_NSTRQ_I2') then     //sq_nstrq_i2.pc
    begin
        Result := 1;
        txFree;
    end;
end;

//====================================================
// 영양집중지원의뢰 중간의뢰/의뢰
// 컨설트에서 사용(2012.3.29 김송주)
//====================================================
function HsqNstrqt.Insert3(inFlag : string) : integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.
    SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;' +
               'S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;S_CODE18;S_CODE19;S_CODE20;' +
               'S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;S_CODE26;S_CODE27;S_TYPE1');
    SetFldValue(0, [sPatno,sMeddate,sRqseq,sMeddept,sWardno,sRoomno,sChadr,sGendr,sSex,sAge,
                    sDiagcd,sDiagname,sReqid,sStatus,sApseq,sHeight,sWeight,sIbw,sIbw2,sAlbumin,
                    sTlc,sChol,sHb,sReqcomm,sEditid,sEditip,sNstrqcause,inFlag]);

    if txPutF('SQ_NSTRQ_I3') then     //sq_nstrq_i3.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function HsiKeywdt.ListCode(sInCode, sInEname, sInHname:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[sInCode,sInEname,sInHname]);

   if (txGetF('SI_KEYWD_L1')) then
   begin
      GetFldVar('S_NAME1'  , sCode );
      GetFldVar('S_NAME2'  , sEname);
      GetFldVar('S_NAME3'  , sHname);

      Result := GetRecordCnt('S_NAME1');
      txFree;
   end;

end;

function HmdInsCnt.SelectInsCode(sInCond, sInCode:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sInCond,sInCode]);

   if (txGetF('MD_INSCN_L1')) then
   begin
      GetFldVar('S_STRING1', sAge      );
      GetFldVar('S_STRING2', sAgeUnit  );
      GetFldVar('S_STRING3', sDiagCd   );
      GetFldVar('S_STRING4', sDiagSubYn);
      GetFldVar('S_STRING5', sAppType  );
      GetFldVar('S_STRING6', sAppRslt  );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;


end;

function HsqHistrt.SelectSqHistrtList(sPatno, sAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[sPatno,sAdmdate]);

   if (txGetF('MD_SQHIS_L1')) then
   begin
      GetFldVar('S_STRING1', sOrdname      );
      GetFldVar('S_STRING2', sCfmdate  );
      GetFldVar('S_STRING3', sCfmnm   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdHosptt.ListHospital(sType1:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1');
   SetFldValue(0,[sType1]);

   if (txGetF('MD_HOSPT_L1')) then
   begin
      GetFldVar('S_STRING1', sHospTypecd);
      GetFldVar('S_STRING2', sHospType  );
      GetFldVar('S_STRING3', sHospName  );
      GetFldVar('S_STRING4', sHospAddr  );
      GetFldVar('S_STRING5', sHospCd    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;

end;

function Hmdbcafst.SetCancerInitRec:Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.
    SetFldName('S_TYPE1;S_TYPE2;' +
               'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
               'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
               'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
               'S_STRING21;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
               'S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
               'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;' +
               'S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
               'S_STRING41'
               );
    SetFldValue(0, [sPatno,sFamilyhisdt,
                    sFamilyhis,sPresize,sPretnm,sPretnmstage,sPstsize,
                    sPsttnm,sPsttnmstage,sOpdate,sOpnm,sReopyn,
                    sReopnm,sReopdt,sOplimptype,sOplimpcause,sRestoreyn,
                    sRestorenm,sErrslt,sErrsltetc,sPrrslt,sPrrsltetc,
                    sFishrslt,sFishrsltetc,sSishrslt,sSishrsltetc,sHer2rslt,
                    sHer2rsltetc,sCareplan1,sCareplan2,sCareplan3,sCareplan4,
                    sFstcaredt,sFstcareetc,sAgreedoc1,sAgreedoc1dt,sAgreedoc2,
                    sAgreedoc2dt,sAgreedoc3,sAgreedoc3dt,sAgreedoc4,sAgreedoc4dt,
                    sRecendyn]);

    if txPutF('MD_BCAFS_I1') then     //md_bcafs_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function Hmdcpendt.InsertCPEndCause:Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.
    SetFldName('S_TYPE1;S_TYPE2;' +
               'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
               'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
               'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
               'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;' +
               'S_STRING26;' +
               'S_EDITID;S_EDITIP'
               );
    SetFldValue(0, [sPatno,sAdmdate,
                    sStartdt,sCpregdr,sEnddt,sCpenddr,
                    sPatcause01,sPatcause02,sPatcause03,sPatcause04,sPatcause05,
                    sPatcause06,sPatcause07,sPatcause08,sPatcause09,sPatcause10,
                    sDrcause01,sDrcause02,sDrcause03,sDrcause04,sDrcause05,sEtccause,
                    sCpcause01,sCpcause02,sCpcause03,sCpcause04,sCpcause05,
                    sCpcause06,
                    sEditid,sEditip]);

    if txPutF('MD_CPEND_I1') then     //md_cpend_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function Hmdcpendt.SelectCPEndCause(sPatno,sAdmdate:String):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.
    SetFldName('S_TYPE1;S_TYPE2');
    SetFldValue(0, [sPatno,sAdmdate]);

    if txGetF('MD_CPEND_S1') then     //md_cpend_s1.pc
    begin
      GetFldVar('S_STRING1' , sStartdt     );
      GetFldVar('S_STRING2' , sCpregdr     );
      GetFldVar('S_STRING3' , sEnddt       );
      GetFldVar('S_STRING4' , sCpenddr     );
      GetFldVar('S_STRING5' , sPatcause01  );
      GetFldVar('S_STRING6' , sPatcause02  );
      GetFldVar('S_STRING7' , sPatcause03  );
      GetFldVar('S_STRING8' , sPatcause04  );
      GetFldVar('S_STRING9' , sPatcause05  );
      GetFldVar('S_STRING10', sPatcause06  );
      GetFldVar('S_STRING11', sPatcause07  );
      GetFldVar('S_STRING12', sPatcause08  );
      GetFldVar('S_STRING13', sPatcause09  );
      GetFldVar('S_STRING14', sPatcause10  );
      GetFldVar('S_STRING15', sDrcause01   );
      GetFldVar('S_STRING16', sDrcause02   );
      GetFldVar('S_STRING17', sDrcause03   );
      GetFldVar('S_STRING18', sDrcause04   );
      GetFldVar('S_STRING19', sDrcause05   );
      GetFldVar('S_STRING20', sEtccause    );
      GetFldVar('S_STRING21', sCpcause01   );
      GetFldVar('S_STRING22', sCpcause02   );
      GetFldVar('S_STRING23', sCpcause03   );
      GetFldVar('S_STRING24', sCpcause04   );
      GetFldVar('S_STRING25', sCpcause05   );
      GetFldVar('S_STRING26', sCpcause06   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
    end;
end;

function Hmdimprvt.InsertImprove:Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2;' +
               'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
               'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
               'S_EDITID;S_EDITIP'
               );
    SetFldValue(0, [sPatno,sAdmdate,
                    sOpdate,sDrg11,sDrg211,sDrg212,sDrg213,sDrg214,sDrg22,sDrg23,sDrg24,
                    sDrg31,sDrg321,sDrg322,sDrg323,sDrg324,sDrg325,
                    sEditid,sEditip]);
    if txPutF('MD_IMPRV_I1') then     //md_imprv_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function Hmdimprvt.SelectImprove(sPatno,sAdmdate:String):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2');
    SetFldValue(0, [sPatno,sAdmdate]);

    if txGetF('MD_IMPRV_S1') then     //md_imprv_s1.pc
    begin
      GetFldVar('S_STRING1'  , sOpdate);
      GetFldVar('S_STRING2'  , sDrg11);
      GetFldVar('S_STRING3'  , sDrg211);
      GetFldVar('S_STRING4'  , sDrg212);
      GetFldVar('S_STRING5'  , sDrg213);
      GetFldVar('S_STRING6'  , sDrg214);
      GetFldVar('S_STRING7'  , sDrg22);
      GetFldVar('S_STRING8'  , sDrg23);
      GetFldVar('S_STRING9'  , sDrg24);
      GetFldVar('S_STRING10' , sDrg31);
      GetFldVar('S_STRING11' , sDrg321);
      GetFldVar('S_STRING12' , sDrg322);
      GetFldVar('S_STRING13' , sDrg323);
      GetFldVar('S_STRING14' , sDrg324);
      GetFldVar('S_STRING15' , sDrg325);

      Result := GetRecordCnt('S_STRING1');
      txFree;
    end;
end;

function Hmdemrejt.InsertEmrejt(sType,sPatno, sMeddate, sMedtime, sRejtid, sRejtdp, sRejtcd, sRejtText,
                                                                  sRejtdrid, sRejtdrdp, sRejtdrcd, sRejtdrText,
                                                                  sConsDept, sConsDr, sRejtname, sEditid, sSeditip : String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_EDITID;S_EDITIP');
   SetFldValue(0, [sType,sPatno,sMeddate,sMedtime,sRejtid,sRejtdp,sRejtcd,sRejtText,
                                            sRejtdrid,sRejtdrdp,sRejtdrcd,sRejtdrText,
                                            sConsDept,sConsDr,sRejtname,sEditid,sSEditip]);

    if txPutF('MD_EMREJ_I1') then     //md_emrej_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function Hmdemrejt.SelectEmrejt(sPatno, sMeddate, sMedtime : String):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
    SetFldValue(0, [sPatno,sMeddate,sMedtime]);

    if txGetF('MD_EMREJ_S1') then
    begin
       GetFldVar('S_STRING1', sRejtText);
       GetFldVar('S_STRING2', sRejtDrText);

       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

function Hmdemrejt.ListEmrejt(sMeddate : String):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1');
    SetFldValue(0, [sMeddate]);

    if txGetF('MD_EMREJ_L1') then
    begin
       GetFldVar('S_STRING1', sArvtime);
       GetFldVar('S_STRING2', sPatno);
       GetFldVar('S_STRING3', sPatname);
       GetFldVar('S_STRING4', sSex);
       GetFldVar('S_STRING5', sAge);
       GetFldVar('S_STRING6', sMeddept);
       GetFldVar('S_STRING7', sRejtid);
       GetFldVar('S_STRING8', sRejttext);
       GetFldVar('S_STRING9', sRejtdrid);
       GetFldVar('S_STRING10',sRejtdrtext);
       GetFldVar('S_STRING11',sMedtime);
       GetFldVar('S_STRING12',sConsDept);
       GetFldVar('S_STRING13',sConsDr);
       GetFldVar('S_STRING14',sRejtdate);

       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

function Hmdemrejt.UpdateEmrejt(sPatno, sMeddate, sMedtime : String):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
    SetFldValue(0, [sPatno,sMeddate,sMedtime]);

    if txPutF('MD_EMREJ_U1') then
    begin
       Result := 1;
       txFree;
    end;
end;

//허혈성심질환 Insert/Update, KimDaeYong 2013-08-27
function Hmdihdmst.Insert1(inFlag, inPciflag:string):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2;' +
               'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
               'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;' +
               'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_STRING39;S_STRING40;' +
               'S_STRING41;S_STRING42;S_STRING43;S_STRING44;S_STRING45;S_STRING46;S_STRING47;S_STRING48;S_STRING49;S_STRING50;' +
               'S_STRING51;S_STRING52;S_STRING53;S_STRING54;S_STRING55');
    SetFldValue(0, [inFlag,inPciflag,
                    sPatno,sMeddate,sDschdate,sEntid1,sEntdate1,sPath,sVessel,sLmd,sPthist,sCabgorxp,
                    sEntid2,sEntdate2,sOccurtime,sPatstat,sSymp,sKillip,sEcg48h,sEcg48hoth,sEjectfrac2,sLvwall,
                    sExecpci,sUnexecpci,sUnexecpci4oth,sUnexecpci6oth,slateblood,sLateblood2oth,sLateblood3oth,sLateblood4oth,sPcikind,sPunctime,
                    sBalloontime,sLatepci,sLatepci2oth,sLatepci3oth,sLatepci4oth,sEntid3,sEntdate3,sPciapp,sEjectfrac3,sEjectfrac3chk,
                    sPciiabp,sLastdiag,sShock,sCardiac,sSeq,sPcidate,sPcitype,sLtmain,sLad,sLcx,
                    sRca,sGraft,sStent,sEditid,sEditip]);
    if txPutF('MD_IHDMS_I1') then     //md_ihdms_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

//허혈성심질환 조회, KimDaeYong 2013-10-10
function Hmdihdmst.Select1(inPatno, inMeddate, inPatsect:string):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
    SetFldValue(0, [inPatno, inMeddate, inPatsect]);

    if txGetF('MD_IHDMS_S1') then     //md_ihdms_s1.pc
    begin
       // MDIHDMST
       GetFldVar('S_STRING1' ,  sPatno          );
       GetFldVar('S_STRING2' ,  sMeddate        );
	   GetFldVar('S_STRING3' ,  sDschdate       );
	   // 1TAB
       GetFldVar('S_STRING4' ,  sEntid1       	);
       GetFldVar('S_STRING5' ,  sEntnm1			);
       GetFldVar('S_STRING6' ,  sEntdate1       );
       GetFldVar('S_STRING7' ,  sHeight			);
       GetFldVar('S_STRING8' ,  sWeight			);
       GetFldVar('S_STRING9' ,  sPath           );
       GetFldVar('S_STRING10' ,  sDschtype		);
       GetFldVar('S_STRING11' ,  sDiedate		);
       GetFldVar('S_STRING12',  sCreat			);
	   GetFldVar('S_STRING13',  sCreatrsdt		);
       GetFldVar('S_STRING14',  sLdl			);
       GetFldVar('S_STRING15',  sLdlrsdt		);
       GetFldVar('S_STRING16',  sVessel         );
       GetFldVar('S_STRING17',  sLmd            );
       GetFldVar('S_STRING18',  sPthist         );
       GetFldVar('S_STRING19',  sCabgorxp       );
       GetFldVar('S_STRING20',  sAspdrugnm1		);
       GetFldVar('S_STRING21',  sStatdrugnm1	);
       // 2TAB
       GetFldVar('S_STRING22',  sEntid2         );
       GetFldVar('S_STRING23',  sEntnm2			);
       GetFldVar('S_STRING24',  sEntdate2      	);
       GetFldVar('S_STRING25',  sMedtime		);
	   GetFldVar('S_STRING26',  sPathcd			);
       GetFldVar('S_STRING27',  sOccurtime      );
       GetFldVar('S_STRING28',  sBldpress		);
       GetFldVar('S_STRING29',  sPulse			);
       GetFldVar('S_STRING30',  sPatstat     	);
       GetFldVar('S_STRING31',  sSymp      		);
       GetFldVar('S_STRING32',  sKillip         );
       GetFldVar('S_STRING33',  sEcg48h         );
       GetFldVar('S_STRING34',  sEcg48hoth      );
       GetFldVar('S_STRING35',  sEjectfrac2     );
       GetFldVar('S_STRING36',  sLvwall         );
       GetFldVar('S_STRING37',  sTabacoflag		);
       GetFldVar('S_STRING38',  sTabaco			);
	   GetFldVar('S_STRING39',  sEdutabaco		);
       GetFldVar('S_STRING40',  sHighbld		);
       GetFldVar('S_STRING41',  sExecpci        );
       GetFldVar('S_STRING42',  sUnexecpci      );
       GetFldVar('S_STRING43',  sUnexecpci4oth  );
       GetFldVar('S_STRING44',  sUnexecpci6oth  );
       GetFldVar('S_STRING45',  sBloodnm		);
       GetFldVar('S_STRING46',  sBloodtm		);
       GetFldVar('S_STRING47',  sLateblood      );
       GetFldVar('S_STRING48',  sLateblood2oth  );
       GetFldVar('S_STRING49',  sLateblood3oth  );
       GetFldVar('S_STRING50',  sLateblood4oth  );
       GetFldVar('S_STRING51',  sPcikind        );
       GetFldVar('S_STRING52',  sPunctime       );
       GetFldVar('S_STRING53',  sBalloontime    );
       GetFldVar('S_STRING54',  sLatepci        );
       GetFldVar('S_STRING55',  sLatepci2oth    );
       GetFldVar('S_STRING56',  sLatepci3oth    );
       GetFldVar('S_STRING57',  sLatepci4oth    );
	   GetFldVar('S_STRING58',  sAspdrugnm2		);
	   GetFldVar('S_STRING59',  sBetadrugnm2	);
	   GetFldVar('S_STRING60',  sStatdrugnm2	);
	   // 3TAB
       GetFldVar('S_STRING61',  sEntid3         );
       GetFldVar('S_STRING62',  sEntnm3			);
       GetFldVar('S_STRING63',  sEntdate3       );
       GetFldVar('S_STRING64',  sPciapp         );
       GetFldVar('S_STRING65',  sEjectfrac3     );
       GetFldVar('S_STRING66',  sEjectfrac3chk  );
       GetFldVar('S_STRING67',  sPciiabp        );
       GetFldVar('S_STRING68',  sLastdiag       );
       GetFldVar('S_STRING69',  sShock          );
       GetFldVar('S_STRING70',  sCardiac        );
       GetFldVar('S_STRING71',  sAspdrugnm3		);
       GetFldVar('S_STRING72',  sBlddrugnm3		);
       GetFldVar('S_STRING73',  sStatdrugnm3	);
       GetFldVar('S_STRING74',  sPciordtime	    );
       // MDIHDDTT
       GetFldVar('S_STRING75',  sSeq  			);
       GetFldVar('S_STRING76',  sPcidate	    );
       GetFldVar('S_STRING77',  sPcitype  		);
       GetFldVar('S_STRING78',  sLtmain			);
       GetFldVar('S_STRING79',  sLad	    	);
       GetFldVar('S_STRING80',  sLcx	    	);
       GetFldVar('S_STRING81',  sRca	    	);
       GetFldVar('S_STRING82',  sGraft			);
       GetFldVar('S_STRING83',  sStent			);

      Result := GetRecordCnt('S_STRING75');
//showMessage('rslt1=' + inttostr(Result));

      if Result = 0 then Result := GetRecordCnt('S_STRING1');
//showMessage('rslt2=' + inttostr(Result));

      txFree;
    end;
end;

//허혈성심질환 조회, KimDaeYong 2013-10-10
function Hmdihdmst.List1(inPatno, inMeddate, inPatsect:string):Integer;
begin
    Result := -1;
    txAlloc; //Pointer를 받아옴.

    SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
    SetFldValue(0, [inPatno, inMeddate, inPatsect]);

    if txGetF('MD_IHDMS_L1') then     //md_ihdms_l1.pc
    begin
	    GetFldVar('S_STRING1' ,  sPatno         );
        GetFldVar('S_STRING2' ,  sMeddate   	);
        GetFldVar('S_STRING3' ,  sMeddept  		);
        GetFldVar('S_STRING4' ,  sDiagcd        );
        GetFldVar('S_STRING5' ,  sMaindiag 		);
        GetFldVar('S_STRING6' ,  sPciordcd 		);

        Result := GetRecordCnt('S_STRING1');
        txFree;
    end;
end;

//환자별급여초음파이력조회, KimDaeYong 2013-11-13
//소스제공(최근우Tc)
function HAICHOCALT.CHOCALT_S1: Integer;
begin
   Result := -1;
   txAlloc32;
   setFldName32('S_STRING1;S_STRING2;S_STRING3');
   setFldValue32(0,[String(sPatno),String(sFromdate),String(sTodate)]);

   if txGetF32('AI_CHOCALT_S1') then
   begin
      Result   := GetRecordCnt32('S_STRING1');

      GetFldVar32 ('S_STRING1'   , sIogubun  );
      GetFldVar32 ('S_STRING2'   , sMeddept  );
      GetFldVar32 ('S_STRING3'   , sOrddate  );
      GetFldVar32 ('S_STRING4'   , sExedate  );
      GetFldVar32 ('S_STRING5'   , sSugacode );
      GetFldVar32 ('S_STRING6'   , sKorname  );
      GetFldVar32 ('S_STRING7'   , sCnt      );
      GetFldVar32 ('S_STRING8'   , sQty      );
      GetFldVar32 ('S_STRING9'   , sUseday   );
      GetFldVar32 ('S_STRING10'  , sInstype  );
      GetFldVar32 ('S_STRING11'  , sOrddr    );
      GetFldVar32 ('S_STRING12'  , sReqdate  );

      txFree32;
   end
   else if ( GetTxUrcode = 1403 ) then
   begin
      result := 0;
   end;
end;

//임상질지표 2013.12.12  kya.
function HmdNventt.NVENTT_I1:Integer;
begin
    Result := -1;
    txAlloc; 

    SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;'+
               'S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;'+
               'S_STRING18;S_STRING19;S_STRING20;S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;'+
               'S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35');
    SetFldValue(0, [sPatno,sAdmdate,sFspildate,sSeqno,sChkdate,sRspildate,sWardno,sSpilday,sTracheyn,sStanday,
                   sStaneve,sStannit,sCfabday,sCfabeve,sCfabnit,sIndepday,sIndepeve,sIndepnit,
                   sDropdate,sVentyn,sHetyn,sEvdyn,sCityn,sEtc,sIpcyn,sCohyn,sLvryn,sLccyn,sIpcetc,sDrugcode,sDrugname,sScale,sEditid,sEditip,sRemark]);
    if txPutF('MD_NVENT_I1') then     //md_nvent_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function HmdNventt.NVENTT_S1(sIsWardno:string):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName32('S_STRING1');
  SetFldValue32(0, [sIsWardno]);

  if txGetF32('MD_NVENT_S1') then
  begin
    GetFldVar32('S_STRING1', sRoomno);
    GetFldVar32('S_STRING2', sPatno);
    GetFldVar32('S_STRING3', sPatname);
    GetFldVar32('S_STRING4', sAdmdate);
    GetFldVar32('S_STRING5', sChkdate);
    GetFldVar32('S_STRING6', sFspildate);
    GetFldVar32('S_STRING7', sSeqno);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdNventt.NVENTT_S2(sInPatno, sInChkdate, sSeqno:string):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName('S_TYPE1;S_TYPE2;S_TYPE4;');
  SetFldValue(0, [sInPatno, sInChkdate,sSeqno]);

  if txGetF32('MD_NVENT_S2') then
  begin
    GetFldVar32('S_STRING1', sPatno);
    GetFldVar32('S_STRING2', sChkdate);
    GetFldVar32('S_STRING3', sFspildate);
    GetFldVar32('S_STRING4', sRspildate);
    GetFldVar32('S_STRING5', sWardno);
    GetFldVar32('S_STRING6', sSpilday);
    GetFldVar32('S_STRING7', sTracheyn);
    GetFldVar32('S_STRING8', sStanday);
    GetFldVar32('S_STRING9', sStaneve);
    GetFldVar32('S_STRING10', sStannit);
    GetFldVar32('S_STRING11', sCfabday);
    GetFldVar32('S_STRING12', sCfabeve);
    GetFldVar32('S_STRING13', sCfabnit);
    GetFldVar32('S_STRING14', sIndepday);
    GetFldVar32('S_STRING15', sIndepeve);
    GetFldVar32('S_STRING16', sIndepnit);
    GetFldVar32('S_STRING17', sDropdate);
    GetFldVar32('S_STRING18', sVentyn);
    GetFldVar32('S_STRING19', sHetyn);
    GetFldVar32('S_STRING20', sEvdyn);
    GetFldVar32('S_STRING21', sCityn);
    GetFldVar32('S_STRING22', sEtc);
    GetFldVar32('S_STRING23', sIpcyn);
    GetFldVar32('S_STRING24', sCohyn);
    GetFldVar32('S_STRING25', sLvryn);
    GetFldVar32('S_STRING26', sLccyn);
    GetFldVar32('S_STRING27', sIpcetc);
    GetFldVar32('S_STRING28', sDrugname);
    GetFldVar32('S_STRING29', sScale);
    GetFldVar32('S_STRING30', sRemark);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdNventt.NVENTT_S5(sInPatno, sInChkdate:string):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName('S_TYPE1;S_TYPE2;');
  SetFldValue(0, [sInPatno, sInChkdate]);

  if txGetF32('MD_NVENT_S5') then
  begin
    GetFldVar32('S_STRING1', sPatno);
    GetFldVar32('S_STRING2', sChkdate);
    GetFldVar32('S_STRING3', sFspildate);
    GetFldVar32('S_STRING4', sRspildate);
    GetFldVar32('S_STRING5', sWardno);
    GetFldVar32('S_STRING6', sSpilday);
    GetFldVar32('S_STRING7', sTracheyn);
    GetFldVar32('S_STRING8', sStanday);
    GetFldVar32('S_STRING9', sStaneve);
    GetFldVar32('S_STRING10', sStannit);
    GetFldVar32('S_STRING11', sCfabday);
    GetFldVar32('S_STRING12', sCfabeve);
    GetFldVar32('S_STRING13', sCfabnit);
    GetFldVar32('S_STRING14', sIndepday);
    GetFldVar32('S_STRING15', sIndepeve);
    GetFldVar32('S_STRING16', sIndepnit);
    GetFldVar32('S_STRING17', sDropdate);
    GetFldVar32('S_STRING18', sVentyn);
    GetFldVar32('S_STRING19', sHetyn);
    GetFldVar32('S_STRING20', sEvdyn);
    GetFldVar32('S_STRING21', sCityn);
    GetFldVar32('S_STRING22', sEtc);
    GetFldVar32('S_STRING23', sIpcyn);
    GetFldVar32('S_STRING24', sCohyn);
    GetFldVar32('S_STRING25', sLvryn);
    GetFldVar32('S_STRING26', sLccyn);
    GetFldVar32('S_STRING27', sIpcetc);
    GetFldVar32('S_STRING28', sDrugname);
    GetFldVar32('S_STRING29', sScale);
    GetFldVar32('S_STRING30', sRemark);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;



function HmdNventt.NVENTT_S3(sInPatno, sInAdmDate:string):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName('S_TYPE1;S_TYPE2');
  SetFldValue(0, [sInPatno, sInAdmDate]);

  if txGetF32('MD_NVENT_S3') then
  begin
    GetFldVar32('S_STRING1', sChkDate);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdNventt.NVENTT_S4(sInPatno, sInAdmDate, sInChkdate, sInFspildate:string):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
  SetFldValue(0, [sInPatno, sInAdmDate, sInChkdate, sInFspildate]);

  if txGetF32('MD_NVENT_S4') then
  begin
    GetFldVar32('S_STRING1', sRspildate);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

function HmdOrderv.NVENTT_S6(sInPatno,sInAdmDate:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[sInPatno,sInAdmDate] );

   if (txGetF32('MD_NVENT_S6')) then
   begin
      GetFldVar32('S_STRING1'  ,sDrugcode );
      GetFldVar32('S_STRING2'  ,sDrugname );

      Result := GetRecordCnt32('S_STRING1');

   end;
   txFree32;
end;

function HmdNventt.NVENTT_S7(sInPatno, sInFromdate, sInTodate:string):Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;');
  SetFldValue(0, [sInPatno, sInFromdate,sInTodate]);

  if txGetF32('MD_NVENT_S7') then
  begin
    GetFldVar32('S_STRING1', sChkdate);
    GetFldVar32('S_STRING2', sFspildate);
    GetFldVar32('S_STRING3', sRspildate);
    GetFldVar32('S_STRING4', sSpilday);
    GetFldVar32('S_STRING5', sTracheyn);
    GetFldVar32('S_STRING6', sStanday);
    {GetFldVar32('S_STRING7', sStaneve);
    GetFldVar32('S_STRING8', sStannit);}
    GetFldVar32('S_STRING9', sCfabday);
   { GetFldVar32('S_STRING10', sCfabeve);
    GetFldVar32('S_STRING11', sCfabnit);}
    GetFldVar32('S_STRING12', sIndepday);
   { GetFldVar32('S_STRING13', sIndepeve);
    GetFldVar32('S_STRING14', sIndepnit); }
    GetFldVar32('S_STRING15', sDropdate);
    GetFldVar32('S_STRING16', sVentyn);
    GetFldVar32('S_STRING17', sHetyn);
    GetFldVar32('S_STRING18', sEvdyn);
    GetFldVar32('S_STRING19', sCityn);
    GetFldVar32('S_STRING20', sEtc);
    GetFldVar32('S_STRING21', sIpcyn);
    GetFldVar32('S_STRING22', sCohyn);
    GetFldVar32('S_STRING23', sLvryn);
    GetFldVar32('S_STRING24', sLccyn);
    GetFldVar32('S_STRING25', sIpcetc);
    GetFldVar32('S_STRING26', sDrugname);
    GetFldVar32('S_STRING27', sScale);
    GetFldVar32('S_STRING28', sRemark);

    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

//간암평가 조회, QI(이지숙)요청
//KimDaeYong 2014-06-27
function HmdHptmat.Select1(inPatno, inMeddate:string) : Integer;
begin
  Result := -1;
  txAlloc32;

  SetFldName('S_TYPE1;S_TYPE2');
  SetFldValue(0, [inPatno, inMeddate]);

  if txGetF32('MD_HPTMA_S1') then
  begin
    GetFldVar32('S_STRING1',  sPastopyn     );
    GetFldVar32('S_STRING2',  sTaceyn       );
    GetFldVar32('S_STRING3',  sRfayn        );
    GetFldVar32('S_STRING4',  sAnticanyn    );
    GetFldVar32('S_STRING5',  sXryn         );
    GetFldVar32('S_STRING6',  sBildate      );
    GetFldVar32('S_STRING7',  sBilrslt      );
    GetFldVar32('S_STRING8',  sCreatdate    );
    GetFldVar32('S_STRING9',  sCreatrslt    );
    GetFldVar32('S_STRING10', sInrdate      );
    GetFldVar32('S_STRING11', sInrrslt      );
    GetFldVar32('S_STRING12', sAlbdate      );
    GetFldVar32('S_STRING13', sAlbrslt      );
    GetFldVar32('S_STRING14', sPladate      );
    GetFldVar32('S_STRING15', sPlarslt      );
    GetFldVar32('S_STRING16', sAcsrslt      );
    GetFldVar32('S_STRING17', sGrade        );
    GetFldVar32('S_STRING18', sLastdate     );
    GetFldVar32('S_STRING19', sLastid       );
    GetFldVar32('S_STRING20', sLastnm       );
                          
    Result := GetRecordCnt32('S_STRING1');
  end;
  txFree32;
end;

//간암평가 저장, QI(이지숙)요청
//KimDaeYong 2014-06-27
function HmdHptmat.Insert1(inFlag:string):Integer;
begin
    Result := -1;
    txAlloc;

    SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
               'S_STRING21;S_STRING22;S_STRING23;S_TYPE1');
    SetFldValue(0, [sPatno,sAdmdate,sPastopyn,sTaceyn,sRfayn,sAnticanyn,sXryn,sBildate,sBilrslt,sCreatdate,
                    sCreatrslt,sInrdate,sInrrslt,sAlbdate,sAlbrslt,sPladate,sPlarslt,sAcsrslt,sGrade,sLastdate,
                    sLastid,sEditid,sEditip,inFlag]);
    if txPutF('MD_HPTMA_I1') then     //md_hptma_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

{=======SDCLASS4 이용==============================================
//의약품부작용 환자리스트조회, KimDaeYong 2009-03-18
function HMDADREXT.List1(inFromdate,inTodate,inPatno:string):integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[inFromdate, inTodate, inPatno]);
   if txGetF('MD_ADREX_L1') then    // md_adrex_l1.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1', sPatno);
      GetFldVar('S_STRING2', sPatname);
      GetFldVar('S_STRING3', sRepdate);
      GetFldVar('S_STRING4', sRepflag2);
      GetFldVar('S_STRING5', sProcstat);

      txFree;
   end;
end;

//의약품부작용 투여약품정보조회, KimDaeYong 2009-03-23
function HMDADREXT.List2(inPatno, inRepdate, inFromdrug, inTodrug:string):integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0,[inPatno, inRepdate, inFromdrug, inTodrug]);
   if txGetF('MD_ADREX_L2') then    // md_adrex_l2.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1', sDrugcode);
      GetFldVar('S_STRING2', sDrugname);
      GetFldVar('S_STRING3', sParmname);
      GetFldVar('S_STRING4', sFirstcap);
      GetFldVar('S_STRING5', sFirstdate);
      GetFldVar('S_STRING6', sEnddate2);
      GetFldVar('S_STRING7', sPurpose);
      GetFldVar('S_STRING8', sPastyn);
      GetFldVar('S_STRING9', sAdryn);
      GetFldVar('S_STRING10',sOrddate);
      GetFldVar('S_STRING11',sOrdseqno);

      txFree;
   end;
end;

//의약품부작용 환자별 부작용정보조회, KimDaeYong 2009-03-18
function HMDADREXT.Select1(inPatno, inRepdate:string):integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[inPatno, inRepdate]);
   if txGetF('MD_ADREX_S1') then    // md_adrex_s1.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1' , sPatno        );
      GetFldVar('S_STRING2' , sPatname      );
      GetFldVar('S_STRING3' , sSex          );
      GetFldVar('S_STRING4' , sAge          );
      GetFldVar('S_STRING5' , sGendate      );
      GetFldVar('S_STRING6' , sPatsect      );
      GetFldVar('S_STRING7' , sRepflag      );
      GetFldVar('S_STRING8' , sMeddate      );
      GetFldVar('S_STRING9' , sMeddept      );
      GetFldVar('S_STRING10', sDeptnm       );
      GetFldVar('S_STRING11', sMaindiag     );
      GetFldVar('S_STRING12', sMaindiagnm   );
      GetFldVar('S_STRING13', sSubdiag      );
      GetFldVar('S_STRING14', sSubdiagnm    );
      GetFldVar('S_STRING15', sPatstat      );
      GetFldVar('S_STRING16', sPatstatoth   );
      GetFldVar('S_STRING17', sRevdate      );
      GetFldVar('S_STRING18', sEnddate      );
      GetFldVar('S_STRING19', sProgyn       );
      GetFldVar('S_STRING20', sWholebody    );
      GetFldVar('S_STRING21', sSkin         );
      GetFldVar('S_STRING22', sFace         );
      GetFldVar('S_STRING23', sVessel       );
      GetFldVar('S_STRING24', sGastro       );
      GetFldVar('S_STRING25', sLiver        );
      GetFldVar('S_STRING26', sBreath       );
      GetFldVar('S_STRING27', sBlood        );
      GetFldVar('S_STRING28', sKidney       );
      GetFldVar('S_STRING29', sPsycho       );
      GetFldVar('S_STRING30', sReprod       );
      GetFldVar('S_STRING31', sBorn         );
      GetFldVar('S_STRING32', sOther         );
      GetFldVar('S_STRING33', sExam         );
      GetFldVar('S_STRING34', sExamoth      );
      GetFldVar('S_STRING35', sExamrslt1    );
      GetFldVar('S_STRING36', sExamrslt2    );
      GetFldVar('S_STRING37', sExamrslt3    );
      GetFldVar('S_STRING38', sExamrslt4    );
      GetFldVar('S_STRING39', sExamrslt5    );
      GetFldVar('S_STRING40', sExamrslt6    );
      GetFldVar('S_STRING41', sReexamyn     );
      GetFldVar('S_STRING42', sExamothopi   );
      GetFldVar('S_STRING43', sRepdate      );
      GetFldVar('S_STRING44', sRepid        );
      GetFldVar('S_STRING45', sRepname      );
      GetFldVar('S_STRING46', sRepflag2     );
      GetFldVar('S_STRING47', sReptel       );
      GetFldVar('S_STRING48', sRepemail     );
      GetFldVar('S_STRING49', sPhopi        );

      txFree;
   end;
end;

//의약품부작용 환자별 평가보고조회, KimDaeYong 2009-05-19
function HMDADREXT.Select2(inPatno, inRepdate:string):integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[inPatno, inRepdate]);
   if txGetF('MD_ADREX_S2') then    // md_adrex_s2.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1' , sContent     );
      GetFldVar('S_STRING2' , sDoubt       );
      GetFldVar('S_STRING3' , sJoin        );
      GetFldVar('S_STRING4' , sReact       );
      GetFldVar('S_STRING5' , sCause       );
      GetFldVar('S_STRING6' , sStatis      );
      GetFldVar('S_STRING7' , sReactex     );
      GetFldVar('S_STRING8' , sOccur       );
      GetFldVar('S_STRING9' , sOccurfr     );
      GetFldVar('S_STRING10', sPharm       );
      GetFldVar('S_STRING11', sRepyn       );
      GetFldVar('S_STRING12', sAppraisal1  );
      GetFldVar('S_STRING13', sApdate1     );
      GetFldVar('S_STRING14', sApid1       );
      GetFldVar('S_STRING15', sApname1     );
      GetFldVar('S_STRING16', sAppraisal2  );
      GetFldVar('S_STRING17', sApdate2     );
      GetFldVar('S_STRING18', sApid2       );
      GetFldVar('S_STRING19', sApname2     );
      GetFldVar('S_STRING20', sOpposite    );
      GetFldVar('S_STRING21', sRslt        );
      GetFldVar('S_STRING22', sRslt3txt    );
      GetFldVar('S_STRING23', sRslt6txt    );
      GetFldVar('S_STRING24', sEditnm      );
      txFree;
   end;
end;

//약국소견 저장
function HMDADREXT.Update1(inPatno, inRepdate, inPhopi, inRepid, inUserid, inUserip, inFlag : string): Integer;
begin
   //inPhopi는 약국소견/노티 각 사용
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7');
   SetFldValue(0,[inPatno, inRepdate, inPhopi, inRepid, inUserid, inUserip, inFlag]);

   if txPutF('MD_ADREX_U1') then           //  md_adrex_u1.pc
   begin
      Result := 1;
      txFree;
   end;
end;

//평가보고서 저장/수정
function HMDADREXT.Insert1(inPatno, inGendate, inContent, inDoubt, inJoin, inReact, inCause, inStatis, inReactex,
                           inOccur, inOccurfr, inPharm, inRepyn, inAppraisal1, inApdate1, inApid1, inAppraisal2,
                           inApdate2, inApid2, inOpposite, inRslt, inRslt3txt, inRslt6txt,
                           inUserid, inUserip : string): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;' +
              'S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;' +
              'S_CODE18;S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25'  );
   SetFldValue(0,[inPatno, inGendate, inContent, inDoubt, inJoin, inReact, inCause, inStatis, inReactex,
                  inOccur, inOccurfr, inPharm, inRepyn, inAppraisal1, inApdate1, inApid1, inAppraisal2,
                  inApdate2, inApid2, inOpposite, inRslt, inRslt3txt, inRslt6txt,
                  inUserid, inUserip]);

   if txPutF('MD_ADREX_I1') then           //  md_adrex_i1.pc
   begin
      Result := 1;
      txFree;
   end;
end;

//사례보고서 저장/수정
function HMDADREXT.Insert2(inPatno, inRepdate, inRepid, inGendate, inMeddept, inMeddate, inPatsect, inRepflag, inMaindiag, inMaindiagnm,
                           inSubdiag, inSubdiagnm, inPatstat, inPatstatoth, inRevdate, inEnddate, inProgyn, inWholebody, inSkin, inFace,
                           inVessel, inGastro, inLiver, inBreath, inBlood, inKidney, inPsycho, inReprod, inBorn, inOther,
                           inExam, inExamoth, inExamrslt1, inExamrslt2, inExamrslt3, inExamrslt4, inExamrslt5, inExamrslt6, inReexamyn, inExamothopi,
                           inRepflag2, inReptel, inRepemail, inEditid, inEditip : string;
                           inDrugcode, inDrugname, inParmname, inFirstcap, inFirstdate, inEnddate2, inPurpose, inPastyn, inOrddate, inOrdseqno : Variant;
                           iDrugCnt : integer): Integer;
var ii : integer;
begin
   Result := -1;
   txAlloc;

   //사례보고서//
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5;S_CODE6;S_CODE7;S_CODE8;S_CODE9;' +
              'S_CODE10;S_CODE11;S_CODE12;S_CODE13;S_CODE14;S_CODE15;S_CODE16;S_CODE17;' +
              'S_CODE18;S_CODE19;S_CODE20;S_CODE21;S_CODE22;S_CODE23;S_CODE24;S_CODE25;' +
              'S_CODE26;S_CODE27;S_CODE28;S_CODE29;S_CODE30;S_CODE31;S_CODE32;S_CODE33;' +
              'S_CODE34;S_CODE35;S_CODE36;S_CODE37;S_CODE38;S_CODE39;S_CODE40;S_CODE41;' +
              'S_CODE42;S_CODE43;S_CODE44;S_CODE45');
   SetFldValue(0,[inPatno, inRepdate, inRepid, inGendate, inMeddept, inMeddate, inPatsect, inRepflag, inMaindiag, inMaindiagnm,
                  inSubdiag, inSubdiagnm, inPatstat, inPatstatoth, inRevdate, inEnddate, inProgyn, inWholebody, inSkin, inFace,
                  inVessel, inGastro, inLiver, inBreath, inBlood, inKidney, inPsycho, inReprod, inBorn, inOther,
                  inExam, inExamoth, inExamrslt1, inExamrslt2, inExamrslt3, inExamrslt4, inExamrslt5, inExamrslt6, inReexamyn, inExamothopi,
                  inRepflag2, inReptel, inRepemail, inEditid, inEditip]);

   //투여의약품//
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8;S_TYPE9;S_TYPE10');
   if iDrugcnt > 1 then //데이터가 있을때만
   begin
       for ii:=0 to iDrugcnt-1 do
       begin
           SetFldValue(ii,[String(inDrugcode[ii]), String(inDrugname[ii]), String(inParmname[ii]), String(inFirstcap[ii]), String(inFirstdate[ii]),
                           String(inEnddate2[ii]), String(inPurpose[ii]), String(inPastyn[ii]), String(inOrddate[ii]), String(inOrdseqno[ii])]);
       end;
   end;

   if txPutF('MD_ADREX_I2') then           //  md_adrex_i2.pc
   begin
      Result := 1;
      txFree;
   end;

end;

//평가보고서 삭제
function HMDADREXT.Delete1(inFlag, inPatno, inRepdate : string): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_CODE1;S_CODE2');
   SetFldValue(0,[inFlag, inPatno, inRepdate]);

   if txPutF('MD_ADREX_D1') then           //  md_adrex_d1.pc
   begin
      Result := 1;
      txFree;
   end;
end;
==============================================================}

{폐렴 제와사유 및 중증도 작성 여부 체크}
function HmdCurbet.CheckFillYn(inPatno,inPatsect:String):integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[inPatno,inPatsect]);
   if txGetF('MD_CURBE_S1') then    // md_curbe_s1.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1' , sFillYn     );

      txFree;
   end;
end;

function HmdCurbet.Select1(inPatno,inAdmdate:String):integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[inPatno, inAdmdate]);
   if txGetF('MD_CURBE_S2') then    // md_curbe_s2.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1' , sExceptKind     );
      GetFldVar('S_STRING2' , sDetailOptn     );

      txFree;
   end;
end;

function HmdCurbet.Insert1:integer;
begin
    Result := -1;
    txAlloc;

    SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_EDITID;S_EDITIP');
    SetFldValue(0, [sPatno,sAdmdate,sExceptKind,sDetailOptn,sEditid,sEditip]);

    if txPutF('MD_CURBE_I1') then     //md_curbe_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function HmdCurbit.Select1(inPatno, inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[inPatno, inAdmdate]);
   if txGetF('MD_CURBI_S1') then    // md_curbi_s1.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1' , sBu     );
      GetFldVar('S_STRING2' , sAge    );
      GetFldVar('S_STRING3' , sRr     );
      GetFldVar('S_STRING4' , sBpHi   );
      GetFldVar('S_STRING5' , sBpLo   );

      txFree;
   end;
end;

function HmdCurbit.Select2(inPatno, inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0,[inPatno, inAdmdate]);
   if txGetF('MD_CURBI_S2') then    // md_curbi_s2.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1'  , sConfYn     );
      GetFldVar('S_STRING2'  , sBu    );
      GetFldVar('S_STRING3'  , sRr     );
      GetFldVar('S_STRING4'  , sBpHi   );
      GetFldVar('S_STRING5'  , sBpLo   );
      GetFldVar('S_STRING6'  , sAge     );
      GetFldVar('S_STRING7'  , sVaccinYn    );
      GetFldVar('S_STRING8'  , sRegid     );
      GetFldVar('S_STRING9'  , sRegdate   );
      GetFldVar('S_STRING10' , sInitTot   );
      GetFldVar('S_STRING11' , sSmokeType     );
      GetFldVar('S_STRING12' , sEduExec    );
      GetFldVar('S_STRING13' , sEduNone     );
      GetFldVar('S_STRING14' , sRegname     );  //작성자명 추가, KimDaeYong 2016-03-30

      txFree;
   end;
end;

function HmdCurbit.Insert1:integer;
begin
    Result := -1;
    txAlloc;

    SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
               'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
               'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;'+
               'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
               'S_EDITID;S_EDITIP');
    SetFldValue(0, [sPatno,sAdmdate,sConfYn,sConfPoint,sBu,
                    sBuPoint,sRr,sRrPoint,sBpHi,sBpLo,
                    sBpPoint,sAge,sAgePoint,sVaccinYn,sRegid,
                    sRegdate,sInitTot, sSmokeType,sEduExec,sEduNone,
                    sEditid,sEditip]);

    if txPutF('MD_CURBI_I1') then     //md_curbi_i1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

function HmdReadmt.List1(inPatno, inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmdate]);
   if txGetF('MD_READM_L1') then    // md_readm_l1.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1'  , sPatno            );
      GetFldVar('S_STRING2'  , sAdmdate          );
      GetFldVar('S_STRING3'  , sSeq              );
      GetFldVar('S_STRING4'  , sMeddept          );
      GetFldVar('S_STRING5'  , sRecdate          );
      GetFldVar('S_STRING6'  , sCofmdate         );
      GetFldVar('S_STRING7'  , sActtime          );

      txFree;
   end;
end;

function HmdReadmt.Select1(inPatno, inAdmdate, inSeq:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inPatno, inAdmdate, inSeq]);
   if txGetF('MD_READM_S1') then    // md_readm_s1.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1'  , sPatno            );
      GetFldVar('S_STRING2'  , sAdmdate          );
      GetFldVar('S_STRING3'  , sSeq              );
      GetFldVar('S_STRING4'  , sMeddept          );
      GetFldVar('S_STRING5'  , sChadr            );
      GetFldVar('S_STRING6'  , sChaname          );
      GetFldVar('S_STRING7'  , sGendr            );
      GetFldVar('S_STRING8'  , sGenname          );
      GetFldVar('S_STRING9'  , sSubject          );
      GetFldVar('S_STRING10' , sObject           );
      GetFldVar('S_STRING11' , sRos              );
      GetFldVar('S_STRING12' , sPex              );
      GetFldVar('S_STRING13' , sDiag             );
      GetFldVar('S_STRING14' , sCareplan         );
      GetFldVar('S_STRING15' , sPblm             );
      GetFldVar('S_STRING16' , sCaregoal         );
      GetFldVar('S_STRING17' , sGoaldate         );
      GetFldVar('S_STRING18' , sDisdate          );
      GetFldVar('S_STRING19' , sDisplan          );
      GetFldVar('S_STRING20' , sRecid            );
      GetFldVar('S_STRING21' , sRecname          );
      GetFldVar('S_STRING22' , sRecdate          );
      GetFldVar('S_STRING23' , sSigndata         );
      GetFldVar('S_STRING24' , sSerialno         );
      GetFldVar('S_STRING25' , sSubjectdn	     );

      txFree;
   end;
end;

function HmdReadmt.Select2(inPatno, inAdmdate, inMeddept:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inPatno, inAdmdate, inMeddept]);
   if txGetF('MD_READM_S2') then    // md_readm_s2.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1'  , sAdmdays   );
      GetFldVar('S_STRING2'  , sFromdate  );
      GetFldVar('S_STRING3'  , sCnt       );

      txFree;
   end;
end;

function HmdReadmt.Insert1(sFlag, sSignData, sSerialNo, sSubjectDN :string):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;' +
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22;S_EDITID;S_EDITIP');
   SetFldValue(0,[sFlag,
                  sPatno,sAdmdate,sSeq,sMeddept,sChadr,
                  sGendr,sSubject,sObject,sRos,sPex,
                  sDiag,sCareplan,sPblm,sCaregoal,sGoaldate,
                  sDisdate,sDisplan,sRecid,sRecdate,sSignData,
                  sSerialNo,sSubjectDN,sEditid,sEditip]);

   if (txPutF('MD_READM_I1')) then begin // md_readm_i1.pc
      Result := 1;
      txFree;
   end;
end;

//재평가 삭제,
//2015인증평가, KimDaeYong 2015-05-06
function HmdReadmt.Delete1(inPatno, inAdmdate, inSeq : string): Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0,[inPatno, inAdmdate, inSeq]);

   if txPutF('MD_READM_D1') then           //  md_readm_d1.pc
   begin
      Result := 1;
      txFree;
   end;
end;

function HmdResett.Insert1:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sMeddept,sSubject,sObject,sRos,sPex,
                  sDiag,sCareplan,sPblm,sCaregoal,sDisplan,
                  sEditid,sEditip]);

   if (txPutF('MD_RESET_I1')) then begin // md_reset_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdResett.Select1(sMeddept:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1');
   SetFldValue(0,[sMeddept]);

   if (txGetF('MD_RESET_S1')) then
   begin
      GetFldVar('S_STRING1' , sSubject  );
      GetFldVar('S_STRING2' , sObject  );
      GetFldVar('S_STRING3' , sRos  );
      GetFldVar('S_STRING4' , sPex  );
      GetFldVar('S_STRING5' , sDiag  );
      GetFldVar('S_STRING6' , sCareplan );
      GetFldVar('S_STRING7' , sPblm  );
      GetFldVar('S_STRING8' , sCaregoal);
      GetFldVar('S_STRING9' , sDisplan);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

////////////////////////////////////////////////////////////////////////////////
//  mdNerect 	응급간호기록지  20150205.kya
////////////////////////////////////////////////////////////////////////////////

function HmdNerect.ListNerect(sType1,sType2,sType3,sType4,sType5,sType6:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue32(0,[sType1,sType2,sType3,sType4,sType5,sType6]);
   if (txGetF32('MD_NEREC_L1')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_CODE1', sActdate  );
		GetFldVar32 ('S_CODE2', sActseqno );
		GetFldVar32 ('S_CODE3', sActtime  );
		GetFldVar32 ('S_CODE4', sActtxt   );
		GetFldVar32 ('S_CODE5', sExecnm   );
		GetFldVar32 ('S_CODE6', sDeptcd   );
		GetFldVar32 ('S_CODE7', sExecid   );
		GetFldVar32 ('S_CODE8', sBodytemp  );
		GetFldVar32 ('S_CODE9', sBldprehi  );
		GetFldVar32 ('S_CODE10',sBldprelo  );
		GetFldVar32 ('S_CODE11',sPulse     );
		GetFldVar32 ('S_CODE12',sRespcnt   );
		GetFldVar32 ('S_CODE13',sAdmyn     );
		GetFldVar32 ('S_CODE14',sAdmcou    );
		GetFldVar32 ('S_CODE15',sAdmmeth   );
		GetFldVar32 ('S_CODE16',sCondst    );
		GetFldVar32 ('S_CODE17',sCondstrm  );
		GetFldVar32 ('S_CODE18',sJuicdnm   );
		GetFldVar32 ('S_CODE19',sRmgendr   );
		GetFldVar32 ('S_CODE20',sRemark    );
		GetFldVar32 ('S_CODE21',sWeight   );
		GetFldVar32 ('S_CODE22',sHeight    );
		GetFldVar32 ('S_CODE23',sSignData    );
		GetFldVar32 ('S_CODE24',sSerialNo   );
		GetFldVar32 ('S_CODE25',sSubjectDN    );
      Result := GetRecordCnt32('S_CODE1');
      txFree32;
   end;
end;

function HmdNerect.InsNerect(Cnt:Integer):Integer;
var
   i : Integer;
begin

   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1;S_CODE1;S_CODE2;S_CODE3;' +
                'S_CODE4;S_CODE5;S_CODE6;S_CODE7;' +
                'S_CODE8;S_CODE9;S_CODE10;S_CODE11;'+
                'S_CODE12;S_CODE13;S_CODE14;S_CODE15;'+
                'S_CODE16;S_CODE17;S_CODE18;S_CODE19;'+
                'S_CODE20;S_CODE21;S_CODE22;S_CODE23;'+
                'S_CODE24;S_CODE25;S_CODE26;S_CODE27;'+
                'S_CODE28;S_CODE29;S_CODE30;S_CODE31');

   for i := 0 to Cnt-1 do
   begin
      SetFldValue32(i,[String(sType[i])    ,String(sPatno[i])   ,String(sActdate[i]) ,String(sActseqno[i]),
                       String(sActtime[i]) ,String(sActtxt[i])  ,String(sExecid[i])  ,String(sWardno[i])  ,
                       String(sRoomno[i])  ,String(sEditid[i])  ,String(sEditip[i])  ,String(sOldDate[i]) ,
                       String(sIUCond[i])  ,String(sAdmDate[i]) ,String(sBodytemp[i]),String(sBldprehi[i]),
                       String(sBldprelo[i]),String(sPulse   [i]),String(sRespcnt [i]),String(sAdmyn   [i]),
                       String(sAdmcou  [i]),String(sAdmmeth [i]),String(sCondst  [i]),String(sCondstrm[i]),
                       String(sJuicdnm [i]),String(sRmgendr [i]),String(sRemark  [i]),String(sWeight  [i]),
                       String(sHeight  [i]),String(sSignData[i]),String(sSerialNo[i]),String(sSubjectDN[i])]);
   end;

   if (txPutF32('MD_NEREC_I1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree32;
   end;

end;


////////////////////////////////////////////////////////////////////////////////
//  sqDietdt 	식이정보조회  KimDaeYong 2015-05-07
////////////////////////////////////////////////////////////////////////////////

function HsqDietdt.Select1(inDietcode:String):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.

   SetFldName32('S_TYPE1');
   SetFldValue32(0,[inDietcode]);

   if (txGetF32('SQ_DIETD_S1')) then
   begin //Tuxedo Service Call
		GetFldVar32 ('S_STRING1', 	sDietcode  );
		GetFldVar32 ('S_STRING2', 	sDietname  );
		GetFldVar32 ('S_STRING3', 	sApplypat  );
		GetFldVar32 ('S_STRING4', 	sDietcount );
		GetFldVar32 ('S_STRING5', 	sNutrition );
		GetFldVar32 ('S_STRING6', 	sCompos1   );
		GetFldVar32 ('S_STRING7', 	sCompos2   );
		GetFldVar32 ('S_STRING8', 	sCompos3   );
		GetFldVar32 ('S_STRING9', 	sCompos4   );
		GetFldVar32 ('S_STRING10',	sCompos5   );
		GetFldVar32 ('S_STRING11',	sCompos6   );
		GetFldVar32 ('S_STRING12',	sCompos7   );
		GetFldVar32 ('S_STRING13',	sGoodsinfo );
		GetFldVar32 ('S_STRING14',	sEtcinfo   );

      Result := GetRecordCnt32('S_STRING1');
      txFree32;
   end;
end;

//////////////////////////////////////////////////////////////////////////
// NST... 수정시 SQ 프로그램에 SQCOMCLS 파일도 참고하여 같이수정(김송주)//
//////////////////////////////////////////////////////////////////////////

function HsqNstapt.UpdateEval:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_CODE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_EDITID;S_EDITIP');
   SetFldValue(0, [sFlag,sPatno,sAdmdate,sRqseq,sApseq,sStatus,sCmcomm,sCmid,sCqcomm,sCqid,sCdcomm,sCdid,
                   sCncomm,sCnid,sFmcomm,sFmid,sFqcomm,sFqid,sFdcomm,sFdid,sFncomm,sFnid,
                   sAptcomm,sAptid,sUnsetYn,sUnsetType,sEditid,sEditip]);

   if txPutF('SQ_NSTAP_U1') then     //sq_nstap_u1.pc
   begin
       Result := 1;
       txFree;
   end;
end;

function HsqNstapt.ListEvalPatno(inPatno:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1');
   SetFldValue(0, [inPatno]);

   if txGetF('SQ_NSTAP_L2') then
   begin
      GetFldVar('S_STRING1', sPatno  );
      GetFldVar('S_STRING2', sAdmdate);
      GetFldVar('S_STRING3', sPatname);
      GetFldVar('S_STRING4', sRqseq  );
      GetFldVar('S_STRING5', sApseq  );
      GetFldVar('S_STRING6', sStatus );
      GetFldVar('S_STRING7', sReqdate);
      GetFldVar('S_STRING8', sReqname);
      GetFldVar('S_STRING9', sAge    );
      GetFldVar('S_STRING10',sSex    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HsqNstapt.SelectEval(inPatno,inAdmdate,inRqseq,inApseq:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0, [inPatno,inAdmdate,inRqseq,inApseq]);

   if txGetF('SQ_NSTAP_S1') then
   begin
      GetFldVar('S_STRING1',  sCmcomm);
      GetFldVar('S_STRING2',  sCmdate);
      GetFldVar('S_STRING3',  sCmid  );
      GetFldVar('S_STRING4',  sCmname);
      GetFldVar('S_STRING5',  sCqcomm);
      GetFldVar('S_STRING6',  sCqdate);
      GetFldVar('S_STRING7',  sCqid  );
      GetFldVar('S_STRING8',  sCqname);
      GetFldVar('S_STRING9',  sCdcomm);
      GetFldVar('S_STRING10', sCddate);
      GetFldVar('S_STRING11', sCdid  );
      GetFldVar('S_STRING12', sCdname);
      GetFldVar('S_STRING13', sCncomm);
      GetFldVar('S_STRING14', sCndate);
      GetFldVar('S_STRING15', sCnid  );
      GetFldVar('S_STRING16', sCnname);

      GetFldVar('S_STRING17', sFmcomm);
      GetFldVar('S_STRING18', sFmdate);
      GetFldVar('S_STRING19', sFmid  );
      GetFldVar('S_STRING20', sFmname);
      GetFldVar('S_STRING21', sFqcomm);
      GetFldVar('S_STRING22', sFqdate);
      GetFldVar('S_STRING23', sFqid  );
      GetFldVar('S_STRING24', sFqname);
      GetFldVar('S_STRING25', sFdcomm);
      GetFldVar('S_STRING26', sFddate);
      GetFldVar('S_STRING27', sFdid  );
      GetFldVar('S_STRING28', sFdname);
      GetFldVar('S_STRING29', sFncomm);
      GetFldVar('S_STRING30', sFndate);
      GetFldVar('S_STRING31', sFnid  );
      GetFldVar('S_STRING32', sFnname);

      GetFldVar('S_STRING33', sAptcomm);
      GetFldVar('S_STRING34', sAptdate);
      GetFldVar('S_STRING35', sAptid  );
      GetFldVar('S_STRING36', sAptname);

      GetFldVar('S_STRING40', sReqcomm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HsqNstapt.SelectStatus(inPatno,inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2');
   SetFldValue(0, [inPatno,inAdmdate]);

   if txGetF('SQ_NSTAP_S2') then
   begin
      GetFldVar('S_STRING1',  sStatus);
      GetFldVar('S_STRING2',  sRqseq );
      GetFldVar('S_STRING3',  sApseq );

      Result := GetRecordCnt('S_STRING1');

      txFree;
   end;
end;

function HsqNstsgt.InsertNurtInf:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_STRING38;S_EDITID;S_EDITIP');
   SetFldValue(0, [sPatno,sAdmdate,sRqseq,sApseq,sHeight,sNweight,sIbw,sIbwp,sBmi,sWdweek,sWdp,sWdstep,sWnstep,sAlbumin,
                   sAbstep,sTakestep,sMealptype,sMealpstep,sBustep,sBokstep,sPistep,sGumstep,sNutstate,sCriweight,sBee,
                   sAfactor,sIfactor,sQweight,sQfact1,sQfact2,sPweight,sPfact1,sPfact2,sWneed,sEnqcal,sEnpg,sPnqcal,sPnpg,
                   sEditid,sEditip]);

   if txPutF('SQ_NSTSG_I1') then     //sq_nstsg_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;

function HsqNstsgt.SelectNurtInf(inPatno,inAdmdate,inRqseq,inApseq:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4');
   SetFldValue(0, [inPatno,inAdmdate,inRqseq,inApseq]);

   if txGetF('SQ_NSTSG_S1') then    //sq_nstsg_s1.pc
   begin
      GetFldVar('S_STRING1',  sHeight);
      GetFldVar('S_STRING2',  sNweight);
      GetFldVar('S_STRING3',  sIbw);
      GetFldVar('S_STRING4',  sIbwp);
      GetFldVar('S_STRING5',  sBmi);
      GetFldVar('S_STRING6',  sWdweek);
      GetFldVar('S_STRING7',  sWdp);
      GetFldVar('S_STRING8',  sWdstep);
      GetFldVar('S_STRING9',  sWnstep);
      GetFldVar('S_STRING10', sAlbumin);
      GetFldVar('S_STRING11', sAbstep);
      GetFldVar('S_STRING12', sTakestep);
      GetFldVar('S_STRING13', sMealptype);
      GetFldVar('S_STRING14', sMealpstep);
      GetFldVar('S_STRING15', sBustep);
      GetFldVar('S_STRING16', sBokstep);
      GetFldVar('S_STRING17', sPistep);
      GetFldVar('S_STRING18', sGumstep);
      GetFldVar('S_STRING19', sNutstate);
      GetFldVar('S_STRING20', sCriweight);
      GetFldVar('S_STRING21', sBee);
      GetFldVar('S_STRING22', sAfactor);
      GetFldVar('S_STRING23', sIfactor);
      GetFldVar('S_STRING24', sQweight);
      GetFldVar('S_STRING25', sQfact1);
      GetFldVar('S_STRING26', sQfact2);
      GetFldVar('S_STRING27', sPweight);
      GetFldVar('S_STRING28', sPfact1);
      GetFldVar('S_STRING29', sPfact2);
      GetFldVar('S_STRING30', sWneed);
      GetFldVar('S_STRING31', sEnqcal);
      GetFldVar('S_STRING32', sEnpg);
      GetFldVar('S_STRING33', sPnqcal);
      GetFldVar('S_STRING34', sPnpg);
      GetFldVar('S_STRING35', sPattypenm);
      GetFldVar('S_STRING36', sTypecdnm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////
//2015인증평가, KimDaeYong 2015-07-09                                 //
//권한관리                                                            //
////////////////////////////////////////////////////////////////////////

//내 환자인가 아닌가 체크
function HmdAuthht.List1(inPatno,inEmpno,inJikjong:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0, [inPatno,inEmpno,inJikjong]);

   if txGetF('MD_AUTHH_L1') then    //md_authh_l1.pc
   begin
      GetFldVar('S_STRING1',  sPatsect);
      GetFldVar('S_STRING2',  sPatno);
      GetFldVar('S_STRING3',  sMeddate);
      GetFldVar('S_STRING4',  sChadr);
      GetFldVar('S_STRING5',  sGendr);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//접근사유 저장
function HmdAuthht.Insert1:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_EDITID;S_EDITIP');
   SetFldValue(0, [sPatno,sMeddept,sChadr,sGendr,sWardno,sRoomno,sPatsect,sReqid,sReqdept,sAcsaim,
                   sAcsaimoth,sSelform,sEditid,sEditip]);

   if txPutF('MD_AUTHH_I1') then     //md_authh_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;


////////////////////////////////////////////////////////////////////////
//2015인증평가, KimDaeYong 2015-10-08                                 //
//금기약어                                                            //
////////////////////////////////////////////////////////////////////////

//금기약어 조회
function HmdTaboht.List1:Integer;
begin
   Result := -1;
   txAlloc;

   if txGetF('MD_TABOH_L1') then    //md_taboh_l1.pc
   begin
      GetFldVar('S_STRING1',  sTaboo);
      GetFldVar('S_STRING2',  sRemarks);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//금기약어이력 저장
function HmdTaboht.Insert1:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_EDITID;S_EDITIP');
   SetFldValue(0, [sPatno,sMeddept,sChadr,sGendr,sWardno,sRoomno,sPatsect,sEmpno,sDeptcd,sTaboo,
                   sSelform,sEditid,sEditip]);

   if txPutF('MD_TABOH_I1') then     //md_taboh_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;

//응급실상황등록. kya. 20151116.
function HmdNspcdt.SPCDT_I1(sType,sSpccode,sReleaid,sReleaip : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4');
   SetFldValue(0, [sType,sSpccode,sReleaid,sReleaip]);

   if txPutF('MD_SPCDT_I1') then     //md_spcdt_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;

//응급실상황등록조회. kya. 20151116.
function HmdNspcdt.SPCDT_S1(IsSpcid1: string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[IsSpcid1] );

   if (txGetF('MD_SPCDT_S1')) then
   begin
      GetFldVar('S_STRING1',sPatno);
      GetFldVar('S_STRING2',sPatname);
      GetFldVar('S_STRING3',sOrddate);
      GetFldVar('S_STRING4',sSpcid1);
      GetFldVar('S_STRING5',sOrddesc1);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//응급실상황등록조회. kya. 20151116.
function HmdNspcdt.SPCDT_S2(IsPatno,IsOrddate: string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[IsPatno,IsOrddate] );

   if (txGetF('MD_SPCDT_S2')) then
   begin
      GetFldVar('S_STRING1',sOrddesc1);
      GetFldVar('S_STRING2',sSpcid1);
      GetFldVar('S_STRING3',sOrddate);
      GetFldVar('S_STRING4',sColldate);
      GetFldVar('S_STRING5',sReleadate);
      GetFldVar('S_STRING6',sReleaid);
      GetFldVar('S_STRING7',sAcptdate);
      GetFldVar('S_STRING8',sExecdate);
      GetFldVar('S_STRING9',sReaddate);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//재진예약시 의사 리마크, KimDaeYong 2015-12-01
function HapSchdrt.Select1(inMeddept, inMeddr, inMeddate:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_MEDDEPT;S_DR1;S_DATE1');
   SetFldValue(0, [inMeddept, inMeddr, inMeddate]);

   if txGetF('AP_SCHDR_S1') then    //ap_schdr_s1.pc
   begin
      GetFldVar('S_TEXT1',  sRemark);

      Result := GetRecordCnt('S_TEXT1');
      txFree;
   end;
end;


//중증분류도 KTAS. 20151215. kya.
function HmdNktast.NKTAS_L1(sInCodecd,sInGubun,sInKtascd1,sInKtascd3,sInKtascd4,sInCategory:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5;S_TYPE6');
   SetFldValue(0,[sInCodecd,sInGubun,sInKtascd1,sInKtascd3,sInKtascd4,sInCategory] );
   if (txGetF('MD_NKTAS_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sKtascd1);
      GetFldVar('S_STRING2',  sKtascd2);
      GetFldVar('S_STRING3',  sKtasnm2);
      GetFldVar('S_STRING4',  sKtascd3);
      GetFldVar('S_STRING5',  sKtasnm3);
      GetFldVar('S_STRING6',  sKtascd4);
      GetFldVar('S_STRING7',  sKtasnm4);
      GetFldVar('S_STRING8',  sKtascd);
      GetFldVar('S_STRING9',  sLvlcd);
      GetFldVar('S_STRING10',  sAge);
      GetFldVar('S_STRING11',  sCategory);
      GetFldVar('S_STRING12',  sKtascmt);
      GetFldVar('S_STRING13',  sLinktxt);
      GetFldVar('S_STRING14',  sLinkurl);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//중증분류도 KTAS등록. 20151217. kya.
function HmdNktast.NKTAS_I1(sPatno,sMeddate,sMedtime,sPatname,sUserid,sInfect,
                            sJikjong,sFktas15y,sFktascdb,sFktascda,sBktas15y,sBktascdb,sBktascda,sEditId,sEditIp   : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;');
   SetFldValue(0, [sPatno,sMeddate,sMedtime,sPatname,sUserid,sInfect,
                   sJikjong,sFktas15y,sFktascdb,sFktascda,sBktas15y,sBktascdb,sBktascda,sEditId,sEditIp  ]);

   if txPutF('MD_NKTAS_I1') then     //md_nktas_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;

////////////////////////////////////////////////////////////////////////
//2016응급의료고시, KimDaeYong 2016-02-16                             //
//의사진료일정(응급센터)                                              //
////////////////////////////////////////////////////////////////////////

//의사 근무스케줄 조회
function HmdSchemt.List1(inMeddept,inMeddr,inMedmonth:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inMeddept,inMeddr,inMedmonth]);

   if (txGetF('MD_SCHEM_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sMeddept );
      GetFldVar('S_STRING2',  sMeddr   );
      GetFldVar('S_STRING3',  sMedmonth);
      GetFldVar('S_STRING4',  sMeddate );
      GetFldVar('S_STRING5',  sSchgbn  );
      GetFldVar('S_STRING6',  sBgndate );
      GetFldVar('S_STRING7',  sFnsdate );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//의사 근무스케줄 저장
function HmdSchemt.Insert1(iCnt:integer):Integer;
var ii : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7');

   for  ii :=0 to iCnt do
   begin
       SetFldValue(ii, [String(sMedDept[ii]),String(sMedDr[ii]),String(sMedmonth[ii]),String(sMeddate[ii]),String(sSchgbn[ii]),
                        String(sEditid[ii]),String(sEditip[ii])]);
   end;

   if txPutF('MD_SCHEM_I1') then     //md_schem_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;

//의사 월근무스케줄 삭제
function HmdSchemt.Delete1(inMeddept,inMeddr,inMedmonth:string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0,[inMedDept,inMedDr,inMedmonth]);

   if (txPutF('MD_SCHEM_D1')) then begin //Tuxedo Service Call
      Result := 1;
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////
//응급센터진료기록, KimDaeYong 2016-02-26                             //
////////////////////////////////////////////////////////////////////////

//환자별 응급진료기록리스트조회
function HmdEmnott.List1(inPatno,inMeddate,inMedtime:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inPatno,inMeddate,inMedtime]);

   if (txGetF('MD_EMNOT_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sMeddr   );
      GetFldVar('S_STRING2',  sMednm   );
      GetFldVar('S_STRING3',  sMeddept );
      GetFldVar('S_STRING4',  sMainyn  );
      GetFldVar('S_STRING5',  sRecyn   );
      GetFldVar('S_STRING6',  sConndate);
      GetFldVar('S_STRING7',  sLinkdate);
      GetFldVar('S_STRING8',  sArvdate );
      GetFldVar('S_STRING9',  sBirtdate );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//응급실 내원리스트 조회
function HmdEmnott.List2(inPatno, inMeddept:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inMeddept]);

   if (txGetF('MD_EMNOT_L2')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sMeddate   );
      GetFldVar('S_STRING2',  sMedtime   );
      GetFldVar('S_STRING3',  sMeddr     );
      GetFldVar('S_STRING4',  sMednm     );
      GetFldVar('S_STRING5',  sOutdate   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//응급센터진료기록 조회
function HmdEmnott.Select1(inRecyn, inPatno, inMeddate, inMedtime, inMeddept,inMeddr:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.
   
   SetFldName('S_CODE1;' +
              'S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[inRecyn,
                  inPatno, inMeddate, inMedtime, inMeddept,inMeddr]);

   if (txGetF('MD_EMNOT_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,  sCc          );
      GetFldVar('S_STRING2' ,  sPi          );
      GetFldVar('S_STRING3' ,  sPh          );
      GetFldVar('S_STRING4' ,  sFh          );
      GetFldVar('S_STRING5' ,  sSh          );
      GetFldVar('S_STRING6' ,  sRos         );
      GetFldVar('S_STRING7' ,  sPe          );
      GetFldVar('S_STRING8' ,  sImpression  );
      GetFldVar('S_STRING9' ,  sCareplan    );
      GetFldVar('S_STRING10',  sAllnote     );
      GetFldVar('S_STRING11',  sRecdate  	);
      GetFldVar('S_STRING12',  sRecid    	);
      GetFldVar('S_STRING13',  sRecnm	   	);
      GetFldVar('S_STRING14',  sSigndata 	);
      GetFldVar('S_STRING15',  sSerialno 	);
      GetFldVar('S_STRING16',  sSubjectdn 	);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

function HmdEmnott.Insert1(sSavestat, sSignData,sSerialNo,sSubjectDN:String):Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;' +
              'S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;' +
              'S_STRING21;S_STRING22');
   SetFldValue(0,[sPatno,sMeddate,sMedtime,sMeddept,sMeddr,
                  sCc,sPi,sPh,sFh,sSh,sRos,sPe,sImpression,sCareplan,sAllnote,
                  sRecid,sSavestat,sSignData,sSerialNo,sSubjectDN,sEditid,sEditip]);

   if (txPutF('MD_EMNOT_I1')) then begin // md_emnot_i1.pc
      Result := 1;
      txFree;
   end;
end;

function HmdEmnott.Insert2:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_EDITID;S_EDITIP');
   SetFldValue(0,[sMeddept,
                  sCc,sPi,sPh,sFh,sSh,sRos,sPe,sImpression,sCareplan,sAllnote,
                  sEditid,sEditip]);

   if (txPutF('MD_EMNOT_I2')) then begin // md_emnot_i2.pc
      Result := 1;
      txFree;
   end;
end;

//기간별응급진료기록리스트조회
function HmdEmnott.List3(inFromdate, inTodate, inMeddept, inChadr, inSavestat:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;S_TYPE5');
   SetFldValue(0,[inFromdate, inTodate, inMeddept, inChadr, inSavestat]);

   if (txGetF('MD_EMNOT_L3')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',  sPatno   );
      GetFldVar('S_STRING2',  sPatname   );
      GetFldVar('S_STRING3',  sMeddate );
      GetFldVar('S_STRING4',  sMedtime  );
      GetFldVar('S_STRING5',  sMeddept   );
      GetFldVar('S_STRING6',  sMeddeptnm);
      GetFldVar('S_STRING7',  sChadr);
      GetFldVar('S_STRING8',  sChadrnm );
      GetFldVar('S_STRING9',  sMainyn );
      GetFldVar('S_STRING10', sRecyn );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


////////////////////////////////////////////////////////////////////////
//응급호출, KimDaeYong 2016-07-18                                     //
////////////////////////////////////////////////////////////////////////

//응급호출내역 조회
function HmdEmcalt.List1(inFlag, inPatno,inMeddate,inMedtime,
                         inFrMeddate, inToMeddate, inRcvdept, inRcvid : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4;' +
              'S_TYPE5;S_TYPE6;S_TYPE7;S_TYPE8');
   SetFldValue(0,[inFlag, inPatno,inMeddate,inMedtime,
                  inFrMeddate, inToMeddate, inRcvdept, inRcvid]);

   if (txGetF('MD_EMCAL_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sPatno	 );
      GetFldVar('S_STRING2',   sPatname	 );
      GetFldVar('S_STRING3',   sMeddate	 );
      GetFldVar('S_STRING4',   sMedtime	 );
      GetFldVar('S_STRING5',   sSeqno	 );
      GetFldVar('S_STRING6',   sSendid	 );
      GetFldVar('S_STRING7',   sSendnm	 );
      GetFldVar('S_STRING8',   sSendtel	 );
      GetFldVar('S_STRING9',   sSenddept );
      GetFldVar('S_STRING10',  sSenddate );
      GetFldVar('S_STRING11',  sRcvid	 );
      GetFldVar('S_STRING12',  sRcvnm	 );
      GetFldVar('S_STRING13',  sRcvtel	 );
      GetFldVar('S_STRING14',  sRcvdept	 );
      GetFldVar('S_STRING15',  sSubject	 );
      GetFldVar('S_STRING16',  sMessage	 );
      GetFldVar('S_STRING17',  sArrid	 );
      GetFldVar('S_STRING18',  sArrnm	 );
      GetFldVar('S_STRING19',  sArrdept	 );
      GetFldVar('S_STRING20',  sArrdate	 );
      GetFldVar('S_STRING21',  sStatus	 );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


//응급호출내역 조회
function HmdEmcalt.List2(inRcvid:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0,[inRcvid]);

   if (txGetF('MD_EMCAL_L2')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sPatno	 );
      GetFldVar('S_STRING2',   sPatname	 );
      GetFldVar('S_STRING3',   sMeddate	 );
      GetFldVar('S_STRING4',   sMedtime	 );
      GetFldVar('S_STRING5',   sSeqno	 );
      GetFldVar('S_STRING6',   sSendid	 );
      GetFldVar('S_STRING7',   sSendnm	 );
      GetFldVar('S_STRING8',   sSendtel	 );
      GetFldVar('S_STRING9',   sSenddept );
      GetFldVar('S_STRING10',  sSenddate );
      GetFldVar('S_STRING11',  sRcvid	 );
      GetFldVar('S_STRING12',  sRcvnm	 );
      GetFldVar('S_STRING13',  sRcvtel	 );
      GetFldVar('S_STRING14',  sRcvdept	 );
      GetFldVar('S_STRING15',  sSubject	 );
      GetFldVar('S_STRING16',  sMessage	 );
      GetFldVar('S_STRING17',  sStatus	 );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//응급호출내역 저장
function HmdEmcalt.Insert1:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno, sMeddate, sMedtime, sSendid, sSendtel,
                  sSenddept, sRcvid, sRcvtel, sRcvdept, sSubject,
                  sMessage, sEditid, sEditip]);

   if (txPutF('MD_EMCAL_I1')) then begin // md_emcal_i1.pc
      Result := 1;
      txFree;
   end;
end;

//응급호출 도착확인
function HmdEmcalt.Update1(iCnt:integer):Integer;
var
    ii : integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7');

   for  ii :=0 to iCnt-1 do
   begin
       SetFldValue(ii, [String(sPatno[ii]),String(sMeddate[ii]),String(sMedtime[ii]),String(sSeqno[ii]),
                        String(sArrid[ii]),String(sEditid[ii]),String(sEditip[ii])]);
   end;

   if txPutF('MD_EMCAL_U1') then     //md_emcal_u1.pc
   begin
       Result := 1;
       txFree;
   end;
end;


//응급호출 자동재전송할 내역 조회
function HmdEmcalt.List3:Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   if (txGetF('MD_EMCAL_L3')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sPatno	 );
      GetFldVar('S_STRING2',   sMeddate	 );
      GetFldVar('S_STRING3',   sMedtime	 );
      GetFldVar('S_STRING4',   sRcvid	 );
      GetFldVar('S_STRING5',   sRcvnm	 );
      GetFldVar('S_STRING6',   sRcvtel	 );
      GetFldVar('S_STRING7',   sRcvdept	 );
      GetFldVar('S_STRING8',   sSubject	 );
      GetFldVar('S_STRING9',   sMessage	 );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//초음파처방사유, 초음파사용용도 조회
//KimDaeYong 2016-09-27
function HmdSonomt.List1(inOrdcd:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0,[inOrdcd]);

   if (txGetF('MD_SONOM_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sOrdcd	 );
      GetFldVar('S_STRING2',   sGubun	 );
      GetFldVar('S_STRING3',   sSonoEdicd);
      GetFldVar('S_STRING4',   sSonoEdinm);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;


//정신건강의학과 입원유형 조회
//KimDaeYong 2016-10-25
function HmdNpipct.List1(inPatno, inAdmdate:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmdate]);

   if (txGetF('MD_NPIPC_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sFromdate	 );
      GetFldVar('S_STRING2',   sTodate	 );
      GetFldVar('S_STRING3',   sNpipcd);
      GetFldVar('S_STRING4',   sNpipnm);
      GetFldVar('S_STRING5',   sNpipetc);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//정신건강의학과 입원유형 적용(수정/추가)
function HmdNpipct.Update1(inPatno, inAdmdate, inFromdate, inNpipcd, inNpipetc, inEditid, inEditip:string):Integer;
var
    ii : integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_EDITID;S_EDITIP');
   SetFldValue(0,[inPatno, inAdmdate, inFromdate, inNpipcd, inNpipetc, inEditid, inEditip]);

   if (txPutF('MD_NPIPC_U1')) then begin // md_npipc_u1.pc
      Result := 1;
      txFree;
   end;

end;

//정신건강의학과 입원유형 삭제
function HmdNpipct.Delete1(inPatno, inAdmdate, inFromdate, inEditid, inEditip:string):Integer;
var
    ii : integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_EDITID;S_EDITIP');
   SetFldValue(0,[inPatno, inAdmdate, inFromdate, inEditid, inEditip]);

   if (txPutF('MD_NPIPC_D1')) then begin // md_npipc_d1.pc
      Result := 1;
      txFree;
   end;

end;

//외래환자이송사유등록
function HmdOtrnst.Insert1:Integer;
begin
   Result := -1;
   txAlloc;
   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;' +
              'S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;' +
              'S_STRING11;S_STRING12;' +
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno, sMeddate, sMeddept, sMeddr, sMedtime,
                  sTransrsn, sTransetc, sTranshosnm, sRmkyn, sRmketc,
                  sTranshosgbn, sOpinyn,
                  sEditid, sEditip]);

   if (txPutF('MD_OTRNS_I1')) then begin // md_otrns_i1.pc
      Result := 1;
      txFree;
   end;

end;

//임산부관리.20161223.kya.
function HmdNpregt.NPREG_I1(sType,sPatno,sFromdate,sTodate,sMeddept,sPregyn,sCycle,sInputId,sInputIp,sEditId,sEditIp  : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_STRING11');
   SetFldValue(0, [sType,sPatno,sFromdate,sTodate,sMeddept,sPregyn,sCycle,sInputId,sInputIp,sEditId,sEditIp]);

   if txPutF('MD_NPREG_I1') then     //md_npreg_i1.pc
   begin
       Result := 1;
       txFree;
   end;

end;

//임산부관리.20161226.kya.
function HmdNpregt.NPREG_S1(tType,tPatno,tFromdate:String):Integer;
begin
    Result := -1;
    txAlloc;
    SetFldNamE('S_CODE1;S_CODE2;S_CODE3');
    SetFldValue(0,[tType,tPatno,tFromdate]);
    if (txGetF('MD_NPREG_S1')) then
    begin
       GetFldVar('S_STRING1',  sPatno);
       GetFldVar('S_STRING2',  sFromdate);
       GetFldVar('S_STRING3',  sTodate);
       GetFldVar('S_STRING4',  sPregyn);
       GetFldVar('S_STRING5',  sCycle);

       Result := GetRecordCnt('S_STRING1');
       txFree;
    end;
end;

//중환자평가관리(SAPS3) ICU/NCU 조회
//KimDaeYong 2017-03-08
function HmdSapstt.List1(inFlag, inType1, inFromdate, inTodate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[inFlag, inType1, inFromdate, inTodate]);

   if (txGetF('MD_SAPST_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sPatno     );
      GetFldVar('S_STRING2',   sPatname   );
      GetFldVar('S_STRING3',   sAdmdate   );
      GetFldVar('S_STRING4',   sAdmtime   );
      GetFldVar('S_STRING5',   sSaps01    );
      GetFldVar('S_STRING6',   sSaps02    );
      GetFldVar('S_STRING7',   sSaps03    );
      GetFldVar('S_STRING8',   sSaps04    );
      GetFldVar('S_STRING9',   sSaps05    );
      GetFldVar('S_STRING10',  sSaps06    );
      GetFldVar('S_STRING11',  sSaps07    );
      GetFldVar('S_STRING12',  sSaps08    );
      GetFldVar('S_STRING13',  sSaps09    );
      GetFldVar('S_STRING14',  sSaps10    );
      GetFldVar('S_STRING15',  sSaps11    );
      GetFldVar('S_STRING16',  sSaps12    );
      GetFldVar('S_STRING17',  sSaps13    );
      GetFldVar('S_STRING18',  sSaps14    );
      GetFldVar('S_STRING19',  sSaps15    );
      GetFldVar('S_STRING20',  sSaps16    );
      GetFldVar('S_STRING21',  sSaps17    );
      GetFldVar('S_STRING22',  sSaps18    );
      GetFldVar('S_STRING23',  sSaps19    );
      GetFldVar('S_STRING24',  sSaps20    );
      GetFldVar('S_STRING25',  sSaps21    );
      GetFldVar('S_STRING26',  sSaps22    );
      GetFldVar('S_STRING27',  sSaps23    );
      GetFldVar('S_STRING28',  sExecdate15);
      GetFldVar('S_STRING29',  sExecdate17);
      GetFldVar('S_STRING30',  sExecdate19);
      GetFldVar('S_STRING31',  sExecdate20);
      GetFldVar('S_STRING32',  sExecdate21);
      GetFldVar('S_STRING33',  sExecdate23);
      GetFldVar('S_STRING34',  sSaps23ventyn);
      GetFldVar('S_STRING35',  sTotscore  );
      GetFldVar('S_STRING36',  sProdeath  );
      GetFldVar('S_STRING37',  sRecid     );
      GetFldVar('S_STRING38',  sRecnm     );
      GetFldVar('S_STRING39',  sRecdate   );
      GetFldVar('S_STRING40',  sSaps24    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//중환자평가관리(SAPS3) 환자별 (V/S,Lab) 조회
//KimDaeYong 2017-03-24
function HmdSapstt.Select1(inPatno, inAdmtime : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmtime]);

   if (txGetF('MD_SAPST_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sExam     );
      GetFldVar('S_STRING2',   sRslt1    );
      GetFldVar('S_STRING3',   sRslt2    );
      GetFldVar('S_STRING4',   sExecdate );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//중환자평가관리(SAPS3) 저장
//KimDaeYong 2017-03-28
function HmdSapstt.Insert1(inFlag:string):Integer;
begin
   Result := -1;

   txAlloc;

   SetFldName('S_TYPE1;' +
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;S_STRING33;S_STRING34;S_STRING35;S_STRING36;S_STRING37;S_EDITID;S_EDITIP;S_STRING38');
   SetFldValue(0,[inFlag,
                  sPatno,sAdmdate,sAdmtime,sSaps01,sSaps02,sSaps03,sSaps04,sSaps05,sSaps06,sSaps07,
                  sSaps08,sSaps09,sSaps10,sSaps11,sSaps12,sSaps13,sSaps14,sSaps15,sSaps16,sSaps17,
                  sSaps18,sSaps19,sSaps20,sSaps21,sSaps22,sSaps23,sExecdate15,sExecdate17,sExecdate19,sExecdate20,
                  sExecdate21,sExecdate23,sSaps23ventyn,sTotscore,sProdeath,sRecid,sRecdate,sEditid,sEditip,sSaps24]);

   if (txPutF('MD_SAPST_I1')) then  //md_sapst_i1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//중환자평가관리(SAPS3) 기저장된 SEPSIS BUNDLE 저장
//KimDaeYong 2017-04-10
function HmdSepsit.Insert1(inFlag:string):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_EDITID;S_EDITIP');
   SetFldValue(0,[inFlag,
                  sPatno,sAdmdate,sMeddept,sWardno,sRgtdate,sDiagcd,sDiagname,sMaindiag,sBundle01yn,sBundle01rsn,
                  sBundle02yn,sBundle02rsn,sBundle03yn,sBundle03rsn,sBundle04yn,sBundle04rsn,sBundle05yn,sBundle05rsn,sBundle06yn,sBundle06rsn,
                  sRecid,sEditid,sEditip]);

   if (txPutF('MD_SEPSI_I1')) then  //md_sepsi_i1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//중환자평가관리(SAPS3) 기저장된 SEPSIS BUNDLE 조회
//KimDaeYong 2017-04-10
function HmdSepsit.List1(inPatno, inAdmdate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmdate]);

   if (txGetF('MD_SEPSI_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sPatno      );
      GetFldVar('S_STRING2',   sPatname    );
      GetFldVar('S_STRING3',   sAdmdate    );
      GetFldVar('S_STRING4',   sSeqno      );
      GetFldVar('S_STRING5',   sMeddept    );
      GetFldVar('S_STRING6',   sWardno     );
      GetFldVar('S_STRING7',   sRgtdate    );
      GetFldVar('S_STRING8',   sDiagcd     );
      GetFldVar('S_STRING9',   sDiagname   );
      GetFldVar('S_STRING10',  sMaindiag   );
      GetFldVar('S_STRING11',  sBundle01yn );
      GetFldVar('S_STRING12',  sBundle01rsn);
      GetFldVar('S_STRING13',  sBundle02yn );
      GetFldVar('S_STRING14',  sBundle02rsn);
      GetFldVar('S_STRING15',  sBundle03yn );
      GetFldVar('S_STRING16',  sBundle03rsn);
      GetFldVar('S_STRING17',  sBundle04yn );
      GetFldVar('S_STRING18',  sBundle04rsn);
      GetFldVar('S_STRING19',  sBundle05yn );
      GetFldVar('S_STRING20',  sBundle05rsn);
      GetFldVar('S_STRING21',  sBundle06yn );
      GetFldVar('S_STRING22',  sBundle06rsn);
      GetFldVar('S_STRING23',  sRecid      );
      GetFldVar('S_STRING24',  sRecname    );
      GetFldVar('S_STRING25',  sRecdate    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//중환자평가관리(SAPS3) 기저장된 SEPSIS BUNDLE 진단 체크
//KimDaeYong 2017-04-13
function HmdSepsit.Select1(inPatno, inAdmdate, inDiagcd : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inPatno, inAdmdate, inDiagcd]);

   if (txGetF('MD_SEPSI_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sComcd3    );    //SEPSIS 해당 진단 여부
      GetFldVar('S_STRING2',   sDiagcd    );    //SEPSIS 기저장 진단 여부

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//치매약 처방시 1년이내 지정된 검사 체크. KimDaeYong 2017-05-18
function HmdOrderv.ListDementExamcode(inPatno:string):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1');
   SetFldValue(0,[inPatno] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDER_L14')) then
   begin
      GetFldVar('S_CODE1',  sPatno	 );
	  GetFldVar('S_CODE2',  sOrddate );
	  GetFldVar('S_CODE3',  sOrdseqno);
	  GetFldVar('S_CODE4',  sPatsect );
	  GetFldVar('S_CODE5',  sMeddept );
	  GetFldVar('S_CODE6',  sOrddr	 );
	  GetFldVar('S_CODE7',  sOrdcd	 );
	  GetFldVar('S_CODE8',  sExecdate);

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

//인터벤션수술실통계. KimDaeYong 2020-05-27
function HmdOrderv.ListIntvenOrder(inFromdt, inTodate, inType, inPatno : string):Integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc;

   //FML Buffer Field Assign
   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[inFromdt,inTodate,inType,inPatno] );

   //Tuxedo Service Call
   if (txGetF('MD_ORDER_L15')) then
   begin
      GetFldVar('S_CODE1',  sGubun	 );
      GetFldVar('S_CODE2',  sPatno	 );
	  GetFldVar('S_CODE3',  sPatname );
	  GetFldVar('S_CODE4',  sOrddate );
	  GetFldVar('S_CODE5',  sPatsect );
	  GetFldVar('S_CODE6',  sPatscnm );
	  GetFldVar('S_CODE7',  sMeddept );
	  GetFldVar('S_CODE8',  sDeptnm	 );
	  GetFldVar('S_CODE9',  sChadr   );
      GetFldVar('S_CODE10', sChadrnm );
	  GetFldVar('S_CODE11', sOrddr   );
	  GetFldVar('S_CODE12', sOrddrnm );
	  GetFldVar('S_CODE13', sOrdcd   );
	  GetFldVar('S_CODE14', sOrdname );
	  GetFldVar('S_CODE15', sProcstat);
	  GetFldVar('S_CODE16', sProcstnm);
	  GetFldVar('S_CODE17', sExecdate);
      GetFldVar('S_CODE18', sCofmdr	 );
	  GetFldVar('S_CODE19', sCofmdrnm);

      //조회건수 return
      Result := GetRecordCnt('S_CODE1');
      txFree;
   end;
end;

//위암평가===============================================================

//위암평가 메인 저장
//KimDaeYong 2017-12-08
function HmdStcamt.Insert1:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;S_STRING24;S_STRING25;S_STRING26;S_STRING27;S_STRING28;S_STRING29;S_STRING30;'+
              'S_STRING31;S_STRING32;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sMeddate,sFststyn,sFivestyn,sAnthendoyn,sMovestyn,sOptext,sEndostyn,sEndobldyn,sAddstyn,
                  sEndotext,sOpbef7th,sOpaft7th,sOpbefmthd,sOpaftxray,sOpaftchem,sOpaftchemnot,sOpaftchemoth,sOpaft8chemyn,sOpaft8chemtext,
                  sClintestyn,sClintesttext,sChemcntyn,sChemexnot,sChemexnototh,sSixtyabdomyn,sSixtyabdomtext,sPathrecyn,sPathrectext,sEndoaft7th,
                  sRecid,sRecdate,
                  sEditid,sEditip]);

   if (txPutF('MD_STCAM_I1')) then  //md_stcam_i1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//위암평가 메인 조회
//KimDaeYong 2017-12-14
function HmdStcamt.Select1(inPatno : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0,[inPatno]);

   if (txGetF('MD_STCAM_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,   sFststyn		);
      GetFldVar('S_STRING2' ,   sFivestyn		);
      GetFldVar('S_STRING3' ,   sAnthendoyn	    );
      GetFldVar('S_STRING4' ,   sMovestyn		);
      GetFldVar('S_STRING5' ,   sOptext		    );
      GetFldVar('S_STRING6' ,   sEndostyn		);
      GetFldVar('S_STRING7' ,   sEndobldyn	    );
      GetFldVar('S_STRING8' ,   sAddstyn		);
      GetFldVar('S_STRING9' ,   sEndotext		);
      GetFldVar('S_STRING10',   sOpbef7th		);
      GetFldVar('S_STRING11',   sOpaft7th		);
      GetFldVar('S_STRING12',   sOpbefmthd	    );
      GetFldVar('S_STRING13',   sOpaftxray	    );
      GetFldVar('S_STRING14',   sOpaftchem	    );
      GetFldVar('S_STRING15',   sOpaftchemnot	);
      GetFldVar('S_STRING16',   sOpaftchemoth	);
      GetFldVar('S_STRING17',   sOpaft8chemyn   );
      GetFldVar('S_STRING18',   sOpaft8chemtext	);
      GetFldVar('S_STRING19',   sClintestyn	    );
      GetFldVar('S_STRING20',   sClintesttext   );
      GetFldVar('S_STRING21',   sChemcntyn	    );
      GetFldVar('S_STRING22',   sChemexnot  	);
      GetFldVar('S_STRING23',   sChemexnototh	);
      GetFldVar('S_STRING24',   sMeddate    	);
      GetFldVar('S_STRING25',   sSixtyabdomyn   );
      GetFldVar('S_STRING26',   sSixtyabdomtext );
      GetFldVar('S_STRING27',   sPathrecyn	    );
      GetFldVar('S_STRING28',   sPathrectext  	);
      GetFldVar('S_STRING29',   sEndoaft7th  	);
      GetFldVar('S_STRING30',   sRecid      	);
      GetFldVar('S_STRING31',   sRecname      	);
      GetFldVar('S_STRING32',   sRecdate    	);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//위암평가 항암화학요법 저장
//KimDaeYong 2017-12-28
function HmdStcamt.Insert2:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sChemobj,sRegim,sRegimoth,sSeqno,sEcog,sHeight,sWeight,sBsa,sBegdate,
                  sEnddate,sTnm,sChemtext,sHgb,sWbc,sPlt,sBun,sHct,sAnc,sSgot,
                  sMeddate,sRecid,sRecdate,
                  sEditid,sEditip]);

   if (txPutF('MD_STCAM_I2')) then  //md_stcam_i2.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//위암평가 항암화학요법 조회
//KimDaeYong 2018-01-11
function HmdStcamt.List1(inPatno : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1');
   SetFldValue(0,[inPatno]);

   if (txGetF('MD_STCAM_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,   sPatno	    );
      GetFldVar('S_STRING2' ,   sBegdate	);
      GetFldVar('S_STRING3' ,   sEnddate	);
      GetFldVar('S_STRING4' ,   sChemobj	);
      GetFldVar('S_STRING5' ,   sRegim	    );
      GetFldVar('S_STRING6' ,   sRegimoth   );
      GetFldVar('S_STRING7' ,   sSeqno	    );
      GetFldVar('S_STRING8' ,   sEcog	    );
      GetFldVar('S_STRING9' ,   sHeight	    );
      GetFldVar('S_STRING10',   sWeight	    );
      GetFldVar('S_STRING11',   sBsa		);
      GetFldVar('S_STRING12',   sTnm		);
      GetFldVar('S_STRING13',   sChemtext   );
      GetFldVar('S_STRING14',   sHgb		);
      GetFldVar('S_STRING15',   sWbc		);
      GetFldVar('S_STRING16',   sPlt		);
      GetFldVar('S_STRING17',   sBun		);
      GetFldVar('S_STRING18',   sSgot	    );
      GetFldVar('S_STRING19',   sHct		);
      GetFldVar('S_STRING20',   sAnc		);
      GetFldVar('S_STRING21',   sReact		);
      GetFldVar('S_STRING22',   sRecist		);
      //KimDaeYong 2018-04-24
      GetFldVar('S_STRING23',   sRecid     	);
      GetFldVar('S_STRING24',   sRecname   	);
      GetFldVar('S_STRING25',   sRecdate   	);
      GetFldVar('S_STRING26',   sTnmname   	);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//위암평가 항암화학요법 삭제
//KimDaeYong 2018-06-27
function HmdStcamt.Delete1(inPatno, inBegdate:string):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inBegdate]);

   if (txPutF('MD_STCAM_D1')) then  //md_stcam_d1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//위암평가 부작용평가 저장
//KimDaeYong 2018-01-15
function HmdStcamt.Insert3:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;S_STRING15;S_STRING16;S_STRING17;S_STRING18;S_STRING19;S_STRING20;'+
              'S_STRING21;S_STRING22;S_STRING23;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno , sBegdate, sEnddate, sHb   , sAnc2 , sPlt2 , sFebril, sFever, sAst    , sBilir,
                  sFatig , sAnor   , sNaus   , sVamit, sDiarr, sMucos, sRash  , sPerip, sOthtext, sNone ,
                  sApdate, sApid   , sMeddate,
                  sEditid, sEditip]);

   if (txPutF('MD_STCAM_I3')) then  //md_stcam_i3.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//위암평가 부작용평가 조회
//KimDaeYong 2018-01-18
function HmdStcamt.Select2(inPatno, inBegdate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inBegdate]);

   if (txGetF('MD_STCAM_S2')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,   sEnddate	);
      GetFldVar('S_STRING2' ,   sHb   	    );
      GetFldVar('S_STRING3' ,   sAnc2 	    );
      GetFldVar('S_STRING4' ,   sPlt2 	    );
      GetFldVar('S_STRING5' ,   sFebril	    );
      GetFldVar('S_STRING6' ,   sFever	    );
      GetFldVar('S_STRING7' ,   sAst        );
      GetFldVar('S_STRING8' ,   sBilir	    );
      GetFldVar('S_STRING9' ,   sFatig 	    );
      GetFldVar('S_STRING10',   sAnor       );
      GetFldVar('S_STRING11',   sNaus       );
      GetFldVar('S_STRING12',   sVamit	    );
      GetFldVar('S_STRING13',   sDiarr	    );
      GetFldVar('S_STRING14',   sMucos	    );
      GetFldVar('S_STRING15',   sRash  	    );
      GetFldVar('S_STRING16',   sPerip	    );
      GetFldVar('S_STRING17',   sOthtext    );
      GetFldVar('S_STRING18',   sNone	    );
      GetFldVar('S_STRING19',   sApdate	    );
      GetFldVar('S_STRING20',   sApid       );
      GetFldVar('S_STRING21',   sApname     );
      GetFldVar('S_STRING22',   sMeddate    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//위암평가 부작용평가 저장
//KimDaeYong 2018-01-15
function HmdStcamt.Insert4:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno , sBegdate, sEnddate, sRecist, sApdate, sApid, sMeddate,
                  sEditid, sEditip]);

   if (txPutF('MD_STCAM_I4')) then  //md_stcam_i4.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//위암평가 종양반응평가 조회
//KimDaeYong 2018-01-19
function HmdStcamt.Select3(inPatno, inBegdate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inBegdate]);

   if (txGetF('MD_STCAM_S3')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sEnddate	);
      GetFldVar('S_STRING2',   sRecist	    );
      GetFldVar('S_STRING3',   sApdate	    );
      GetFldVar('S_STRING4',   sApid       );
      GetFldVar('S_STRING5',   sApname     );
      GetFldVar('S_STRING6',   sMeddate    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//위암평가 항암화학요법 검사겨과조회
//KimDaeYong 2018-02-26
function HmdStcamt.List2(inPatno,inDate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno,inDate]);

   if (txGetF('MD_STCAM_L2')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1' ,   sPatno	    );
      GetFldVar('S_STRING2' ,   sExamcode	);
      GetFldVar('S_STRING3' ,   sRslt1	    );
      GetFldVar('S_STRING4' ,   sOrddate	);
      GetFldVar('S_STRING5' ,   sExecdate   );
      GetFldVar('S_STRING6' ,   sRsltdate   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//전공의 근무스케줄 체크
//KimDaeYong 2018-06-12
function HmdDrwrkt.Select1(inUserid, inDeptcd : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inUserid, inDeptcd]);

   if (txGetF('MD_DRWRK_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sWktype	    );
      GetFldVar('S_STRING2',   sWkplace	    );
      GetFldVar('S_STRING3',   sWkfromdt	);
      GetFldVar('S_STRING4',   sWktodt      );
      GetFldVar('S_STRING5',   sWkoddhh     );
      GetFldVar('S_STRING6',   sWkoddmi     );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//신생아중환자평가관리(CRIB2)===================================================

//신생아중환자평가관리(CRIB2) 조회
//KimDaeYong 2018-06-20
function HmdNicutt.List1(inFlag, inType1, inFromdate, inTodate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[inFlag, inType1, inFromdate, inTodate]);

   if (txGetF('MD_NICUT_L1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sPatno   	);
      GetFldVar('S_STRING2',   sPatname 	);
      GetFldVar('S_STRING3',   sAdmdate 	);
      GetFldVar('S_STRING4',   sAdmtime 	);
      GetFldVar('S_STRING5',   sSex	  	    );
      GetFldVar('S_STRING6',   sGestvalue	);
      GetFldVar('S_STRING7',   sBirthvalue  );
      GetFldVar('S_STRING8',   sGsbrtpoint  );
      GetFldVar('S_STRING9',   sTempvalue	);
      GetFldVar('S_STRING10',  sTemppoint	);
      GetFldVar('S_STRING11',  sBasevalue	);
      GetFldVar('S_STRING12',  sBasepoint	);
      GetFldVar('S_STRING13',  sTotscore	);
      GetFldVar('S_STRING14',  sPredrate 	);
      GetFldVar('S_STRING15',  sFstrecid	);
      GetFldVar('S_STRING16',  sFstrecnm	);
      GetFldVar('S_STRING17',  sFstrecdate  );
      GetFldVar('S_STRING18',  sRecid   	);
      GetFldVar('S_STRING19',  sRecnm   	);
      GetFldVar('S_STRING20',  sRecdate 	);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//신생아중환자평가관리(CRIB2) 조회
//KimDaeYong 2018-06-20
function HmdNicutt.Select1(inPatno, inAdmdate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmdate]);

   if (txGetF('MD_NICUT_S1')) then
   begin //Tuxedo Service Call
      GetFldVar('S_STRING1',   sGestvalue    );
      GetFldVar('S_STRING2',   sBirthvalue   );
      GetFldVar('S_STRING3',   sTempvalue    );
      GetFldVar('S_STRING4',   sBasevalue    );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//신생아중환자평가관리(CRIB2) 저장
//KimDaeYong 2018-06-21
function HmdNicutt.Insert1(inFlag:string):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;'+
              'S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[inFlag,
                  sPatno,sAdmdate,sGestvalue,sBirthvalue,sGsbrtpoint,sTempvalue,sTemppoint,sBasevalue,sBasepoint,sTotscore,
                  sPredrate,sRecid,sRecdate,
                  sEditid,sEditip]);

   if (txPutF('MD_NICUT_I1')) then  //md_nicut_i1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//CP제외사유 저장
//KimDaeYong 2018-08-30
function HmdCpexct.Insert1:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;S_STRING7;S_STRING8;S_STRING9;S_STRING10;'+
              'S_STRING11;S_STRING12;S_STRING13;S_STRING14;'+
              'S_EDITID;S_EDITIP');
   SetFldValue(0,[sPatno,sAdmdate,sPre1,sPre2,sPre3,sPre4,sPre5,sStatus1,sStatus2,sPost1,
                  sPost2,sPost3,sEtc,sEntid,
                  sEditid,sEditip]);

   if (txPutF('MD_CPEXC_I1')) then  //md_cpexc_i1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//CP제외사유 조회
//KimDaeYong 2018-08-30
function HmdCpexct.Select1(inPatno, inAdmdate : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[inPatno, inAdmdate]);

   if (txGetF('MD_CPEXC_S1')) then
   begin
      GetFldVar('S_STRING1',   sPre1    );
      GetFldVar('S_STRING2',   sPre2    );
      GetFldVar('S_STRING3',   sPre3    );
      GetFldVar('S_STRING4',   sPre4    );
      GetFldVar('S_STRING5',   sPre5    );
      GetFldVar('S_STRING6',   sStatus1 );
      GetFldVar('S_STRING7',   sStatus2 );
      GetFldVar('S_STRING8',   sPost1   );
      GetFldVar('S_STRING9',   sPost2   );
      GetFldVar('S_STRING10',  sPost3   );
      GetFldVar('S_STRING11',  sEtc     );
      GetFldVar('S_STRING12',  sEntid   );
      GetFldVar('S_STRING13',  sEntname );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//체온 카피.20180912.kya.
function HmdVitald.VITAL_S2(sPatNo, sType1:String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer 를 받아옴.
   SetFldName('S_PATNO;S_TYPE1');
   SetFldValue(0,[sPatNo, sType1]);
   if (txGetF('MD_VITAL_S2')) then  //md_vital_s2.pc
   begin
	  GetFldVar ('S_STRING1' , sBodytemp  );


      Result := GetRecordCnt ('S_STRING1');

      txFree;
   end;
end;

//요양급여의뢰서(V352등)여부 체크. KimDaeYong 2018-10-23
function HmdReqdct.List1(inPatno, inGubun, inMeddept : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inPatno, inGubun, inMeddept]);

   if (txGetF('MD_REQDC_L1')) then
   begin
      GetFldVar('S_STRING1',   sFromdate );
      GetFldVar('S_STRING2',   sTodate   );
      GetFldVar('S_STRING3',   sEntid    );
      GetFldVar('S_STRING4',   sMeddate  );
      GetFldVar('S_STRING5',   sRemark   );
      GetFldVar('S_STRING6',   sDocday   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//요양급여의뢰서(V352등) 입력/수정
//KimDaeYong 2018-10-29
function HmdReqdct.Insert1(inFlag, inPatno, inGubun, inMeddept, inFromdate, inTodate, inDiagcd,
                           inEntid, inMeddate, inRemark, inSeqno, inEditid, inEditip : string):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6;'+
              'S_STRING7;S_STRING8;S_STRING9;S_STRING10;S_EDITID;S_EDITIP');
   SetFldValue(0,[inFlag, inPatno, inGubun, inMeddept, inFromdate, inTodate, inDiagcd,
                  inEntid, inMeddate, inRemark, inSeqno, inEditid, inEditip]);

   if (txPutF('MD_REQDC_I1')) then  //md_reqdc_i1.pc
   begin
      Result :=1;
      txFree;
   end;

   //서비스에서 별도로 주는 코드 제거. KimDaeYong 2018-11-07
   //Result := GetTxUrCode;   //서비스에서 별도로 주는 코드 받기
end;

//요양급여의뢰서(V352등)조회. KimDaeYong 2018-10-29
function HmdReqdct.List2(inPatno, inGubun, inFromdate1, inFromdate2 : String):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3;S_TYPE4');
   SetFldValue(0,[inPatno, inGubun, inFromdate1, inFromdate2]);

   if (txGetF('MD_REQDC_L2')) then
   begin
      GetFldVar('S_STRING1',    sGubun   );
      GetFldVar('S_STRING2',    sFromdate);
      GetFldVar('S_STRING3',    sTodate  );
      GetFldVar('S_STRING4',    sDiagcd  );
      GetFldVar('S_STRING5',    sDiagname);
      GetFldVar('S_STRING6',    sMeddept );
      GetFldVar('S_STRING7',    sEntid   );
      GetFldVar('S_STRING8',    sEntname );
      GetFldVar('S_STRING9',    sMeddate );
      GetFldVar('S_STRING10',   sRemark  );
      GetFldVar('S_STRING11',   sDeldate );
      GetFldVar('S_STRING12',   sSeqno   );

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//요양급여의뢰서(V352등) 삭제
//KimDaeYong 2018-10-29
function HmdReqdct.Delete1(inPatno, inGubun, inMeddept, inSeqno, inFromdate, inEditid, inEditip : string):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_EDITID;S_EDITIP');
   SetFldValue(0,[inPatno, inGubun, inMeddept, inSeqno, inFromdate, inEditid, inEditip]);

   if (txPutF('MD_REQDC_D1')) then  //md_reqdc_d1.pc
   begin
      Result :=1;
      txFree;
   end;
end;

//의료기기 환자정보등록. 20180705.kya.
function HmdNudimt.NUDIM_I1(sUdicode,sPatno,sUsedate,sUsesite,sEditid,sEditip : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;S_STRING6');
   SetFldValue(0, [sUdicode,sPatno,sUsedate,sUsesite,sEditid,sEditip]);

   if txPutF('MD_NUDIM_I1') then     //md_nudim_i1.pc
   begin
       Result := 1;
       txFree;
   end;    
end;

//의료기기 환자정보ㅈ회. 20180709.kya.
function HmdNudimt.NUDIM_S1(IsUdicode: string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1');
   SetFldValue32(0,[IsUdicode] );

   if (txGetF('MD_NUDIM_S1')) then
   begin
      GetFldVar('S_STRING1',sUdicode);
      GetFldVar('S_STRING2',sPatno);
      GetFldVar('S_STRING3',sSeqno);
      GetFldVar('S_STRING4',sLotno);
      GetFldVar('S_STRING5',sSerialno);
      GetFldVar('S_STRING6',sActdate);
      GetFldVar('S_STRING7',sMakedate);
      GetFldVar('S_STRING8',sOrdqty);
      GetFldVar('S_STRING9',sRemark);
      GetFldVar('S_STRING10',sPatname);
      GetFldVar('S_STRING11',sBirtdate);
      GetFldVar('S_STRING12',sSex);
      GetFldVar('S_STRING13',sAddr);
      GetFldVar('S_STRING14',sUsedate);
      GetFldVar('S_STRING15',sUsesite);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//의료기기 환자정보ㅈ회. 20180709.kya.
function HmdNudimt.NUDIM_S2(IsPatno, IsUsedate: string):Integer;
begin
   Result := -1;
   txAlloc32; //Pointer를 받아옴.
   SetFldName32('S_TYPE1;S_TYPE2');
   SetFldValue32(0,[IsPatno,IsUsedate] );

   if (txGetF('MD_NUDIM_S2')) then
   begin
      GetFldVar('S_STRING1',sUdicode);
      GetFldVar('S_STRING2',sPatno);
      GetFldVar('S_STRING3',sSeqno);
      GetFldVar('S_STRING4',sLotno);
      GetFldVar('S_STRING5',sSerialno);
      GetFldVar('S_STRING6',sActdate);
      GetFldVar('S_STRING7',sMakedate);
      GetFldVar('S_STRING8',sOrdqty);
      GetFldVar('S_STRING9',sRemark);
      GetFldVar('S_STRING10',sPatname);
      GetFldVar('S_STRING11',sBirtdate);
      GetFldVar('S_STRING12',sSex);
      GetFldVar('S_STRING13',sAddr);
      GetFldVar('S_STRING14',sUsedate);
      GetFldVar('S_STRING15',sUsesite);

      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

//의료기기 환자정보삭제. 20180829.kya.
function HmdNudimt.NUDIM_D1(sUdicode,sPatno,sSeqno : string):Integer;
begin
   Result := -1;
   txAlloc; //Pointer를 받아옴.

   SetFldName('S_STRING1;S_STRING2;S_STRING3');
   SetFldValue(0, [sUdicode,sPatno,sSeqno]);

   if txPutF('MD_NUDIM_D1') then     //md_nudim_d1.pc
   begin
       Result := 1;
       txFree;
   end;
end;


//==============================================================================//
//신속대응팀
function HmdNrrtlt.NRRTL_L1(Type1,Type2:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2');
   SetFldValue(0,[Type1, Type2]);

   if txGetF('MD_NRRTL_L1') then    // md_nrrtl_11.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1'  , sPatNo     );
      GetFldVar('S_STRING2'  , sPatName   );
      GetFldVar('S_STRING3'  , sSex       );
      GetFldVar('S_STRING4'  , sBirtDate  );
      GetFldVar('S_STRING5'  , sDeptNm    );
      GetFldVar('S_STRING6'  , sChaName   );
      GetFldVar('S_STRING7'  , sRoomNo    );
      GetFldVar('S_STRING8'  , sWardNo    );
      GetFldVar('S_STRING9'  , sExectime  );
      GetFldVar('S_STRING10'  , sBodytemp );
      GetFldVar('S_STRING11'  , sPulse    );
      GetFldVar('S_STRING12'  , sRespcnt  );
      GetFldVar('S_STRING13'  , sBldprehi );
      GetFldVar('S_STRING14'  , sSat      );
      GetFldVar('S_STRING15'  , sConsyn   );
      GetFldVar('S_STRING16'  , sConstate );
      GetFldVar('S_STRING17'  , sScoring );
      GetFldVar('S_STRING18'  , sConfirm );
      GetFldVar('S_STRING19'  , sAdmdate );
      GetFldVar('S_STRING20'  , sExecdate );

      txFree;
   end;
end;

//신속대응팀 확인 여부.20190917.kya.
function HmdVitalt.VITAL_U1(sPatno,tAdmdate,tExecdate,tExectime,sConfirm : string) :Integer;
begin
    Result := -1;
    txAlloc;

    SetFldName('S_PATNO;S_ADMDATE;S_STRING1;S_STRING2;S_STRING3');
    SetFldValue(0, [sPatno,tAdmdate,tExecdate,tExectime,sConfirm]);

    if txPutF('MD_VITAL_U1') then     //md_vital_u1.pc
    begin
        Result := 1;
        txFree;
    end;
end;

//==============================================================================//
//의사근무스케줄조회
function HmdJobdrt.List1(inJobdate,inMeddept,inMeddr:String):Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_TYPE1;S_TYPE2;S_TYPE3');
   SetFldValue(0,[inJobdate,inMeddept,inMeddr]);

   if txGetF('MD_JOBDR_L1') then    // md_jobdr_11.pc
   begin
      Result := GetRecordCnt('S_STRING1');

      GetFldVar('S_STRING1'  , sMeddr     );
      GetFldVar('S_STRING2'  , sMeddept   );
      GetFldVar('S_STRING3'  , sJobdate   );
      GetFldVar('S_STRING4'  , sJobgbn    );
      GetFldVar('S_STRING5'  , sJobcont   );
      GetFldVar('S_STRING6'  , sJobname   );
      GetFldVar('S_STRING7'  , sRemark    );

      txFree;
   end;
end;

function HsqNstrqt.Select2(inPatno, inMeddate, inRqseq : String) : integer;
begin
   Result := -1;
   TxAlloc;
   SetFldName('S_CODE1;S_CODE2;S_CODE3');
   SetFldValue(0, [inPatno, inMeddate, inRqseq]);

   //sq_nstrq_s2.pc
   if TxGetF('SQ_NSTRQ_S2') then
   begin
      GetFldVar('S_STRING1', sReqcomm);
      GetFldVar('S_STRING2', sReqcause);
      Result := GetRecordCnt('S_STRING1');
      TxFree;
   end;
end;

//의사근무스케줄 입력/수정
function HmdJobdrt.Insert1(iCnt:Integer):Integer;
var
   i: integer;
begin
   Result := -1;

   //Pointer를 받아옴.
   txAlloc32;

   //FML Buffer Field Assign
   SetFldName32('S_STRING1;S_STRING2;S_STRING3;S_STRING4;S_STRING5;'+
                'S_STRING6;S_EDITID;S_EDITIP');

   for i := 0 to iCnt-1 do
   begin
      SetFldValue32(i,[String(sMeddr[i]),String(sMeddept[i]),String(sJobdate[i]),String(sJobgbn[i]),String(sJobcont[i]),
                       String(sRemark[i]),String(sEditid[i]),String(sEditip[i])]);
   end;

   //Tuxedo Service Call
   if (txPutF32('MD_JOBDR_I1')) then
   begin
      Result := 1;
      txFree32;
   end;
end;

//검사 전 평가기록 조회
function Hsrsuveyt.SrsuveytSel:Integer;
begin
   Result := -1;
   txAlloc;

   SetFldName('S_CODE1;S_CODE2;S_CODE3;S_CODE4;S_CODE5');
   SetFldValue(0,[sPatno,sOrdcd,sOrdseqno,sOrddate,sAcptdate]);

   if (txGetF('SR_SUVEYT_L1')) then
   begin
	    GetFldVar('S_STRING1' , sGubun    );
	    GetFldVar('S_STRING2' , sOigubun  );
	    GetFldVar('S_STRING3' , sPatno    );
	    GetFldVar('S_STRING4' , sOrdcd    );
	    GetFldVar('S_STRING5' , sOrdseqno );
	    GetFldVar('S_STRING6' , sOrddate  );
	    GetFldVar('S_STRING7' , sMeddept  );
	    GetFldVar('S_STRING8' , sAcptdate );
	    GetFldVar('S_STRING9' , sWardno   );
	    GetFldVar('S_STRING10', sRoomno   );
	    GetFldVar('S_STRING11', sChklist  );
	    GetFldVar('S_STRING12', sDigegita );
	    GetFldVar('S_STRING13', sAlergy   );
	    GetFldVar('S_STRING14', sMedihist );
	    GetFldVar('S_STRING15', sMediabort);
	    GetFldVar('S_STRING16', sEtcetera );
	    GetFldVar('S_STRING17', sEditid   );
	    GetFldVar('S_STRING18', sEditdate );
      //2019.09.04.최근우 추가.
      GetFldVar('S_STRING19', sEstmdate );
	    GetFldVar('S_STRING20', sPostbph  );
	    GetFldVar('S_STRING21', sPostbpl  );
	    GetFldVar('S_STRING22', sPostpr   );
	    GetFldVar('S_STRING23', sPostrr   );


      Result := GetRecordCnt('S_STRING1');
      txFree;
   end;
end;

end.

